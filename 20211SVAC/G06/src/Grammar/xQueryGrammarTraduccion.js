/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xQueryGrammarTraduccion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,13],$V6=[1,14],$V7=[5,6],$V8=[5,6,65],$V9=[5,6,36],$Va=[1,33],$Vb=[1,23],$Vc=[1,24],$Vd=[1,31],$Ve=[1,25],$Vf=[1,26],$Vg=[1,27],$Vh=[1,28],$Vi=[1,29],$Vj=[1,30],$Vk=[1,32],$Vl=[1,46],$Vm=[1,47],$Vn=[1,50],$Vo=[1,44],$Vp=[1,45],$Vq=[1,48],$Vr=[5,6,27,29,33,36,65],$Vs=[1,53],$Vt=[1,54],$Vu=[5,6,27,29,33,36,41,45,46,47,48,49,50,51,52,53,54,55,56,57,60,62,65,80],$Vv=[1,57],$Vw=[1,70],$Vx=[1,71],$Vy=[1,72],$Vz=[1,73],$VA=[1,74],$VB=[1,75],$VC=[1,76],$VD=[1,77],$VE=[1,78],$VF=[1,79],$VG=[1,80],$VH=[1,81],$VI=[1,82],$VJ=[5,6,29,33,36,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57],$VK=[5,6,27,29,33,36,41,45,46,47,48,49,50,51,52,53,54,55,56,57,60,62,65,78,80],$VL=[1,92],$VM=[1,93],$VN=[1,91],$VO=[1,94],$VP=[1,98],$VQ=[1,95],$VR=[1,96],$VS=[6,36],$VT=[5,6,21,22,27,29,33,36,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57],$VU=[1,132],$VV=[1,133],$VW=[1,134],$VX=[1,135],$VY=[1,136],$VZ=[1,137],$V_=[1,138],$V$=[1,139],$V01=[1,140],$V11=[1,141],$V21=[1,142],$V31=[1,143],$V41=[1,144],$V51=[41,45,46,47,48,49,50,51,52,53,54,55,56,57,80],$V61=[5,6,29,33,36,41,44,45,46,50,51,52,53,54,55,56,57],$V71=[5,6,29,33,36,41,44,45,46,47,48,50,51,52,53,54,55,56,57],$V81=[5,6,29,33,36,41,44,50,51,56,57],$V91=[5,6,29,33,36,41,44,50,51,52,53,54,55,56,57],$Va1=[1,165],$Vb1=[1,166],$Vc1=[1,167],$Vd1=[1,189],$Ve1=[1,188],$Vf1=[27,29,33],$Vg1=[1,194],$Vh1=[1,195],$Vi1=[5,6,21,22,27,29,33,36,41,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,62],$Vj1=[41,45,46,50,51,52,53,54,55,56,57,80],$Vk1=[41,45,46,47,48,50,51,52,53,54,55,56,57,80],$Vl1=[41,50,51,56,57,80],$Vm1=[41,50,51,52,53,54,55,56,57,80];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"LQUERYS":4,"EOF":5,",":6,"QUERY":7,"cadena":8,"scadena":9,"MULTIPATH":10,"XQUERY":11,"FOR":12,"LET":13,"RETURN":14,"for":15,"$":16,"id":17,"in":18,"TIPOPATH":19,"ORDERBY":20,"ascending":21,"descending":22,"WHERE":23,"at":24,"XQUERYPATH":25,"PATH":26,"where":27,"EXPXQUERY":28,"order":29,"by":30,"let":31,":=":32,"return":33,"{":34,"LEXPSRET":35,"}":36,"EXPRET":37,"IF":38,"if":39,"(":40,")":41,"then":42,"ElSEst":43,"else":44,"+":45,"-":46,"*":47,"div":48,"mod":49,"=":50,"!=":51,"<":52,"<=":53,">":54,">=":55,"and":56,"or":57,"VALOREXPXQUERY":58,"number":59,"/":60,"LACCESOSXQUERY":61,"//":62,"ACCESOXQUERY":63,"@":64,"|":65,"LACCESOS":66,"ACCESO":67,".":68,"..":69,"text":70,"node":71,"child":72,"::":73,"descendant":74,"PREDICADOS":75,"attribute":76,"PREDI":77,"[":78,"EXP":79,"]":80,"VALOR":81,"position":82,"last":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:",",8:"cadena",9:"scadena",15:"for",16:"$",17:"id",18:"in",21:"ascending",22:"descending",24:"at",27:"where",29:"order",30:"by",31:"let",32:":=",33:"return",34:"{",36:"}",39:"if",40:"(",41:")",42:"then",44:"else",45:"+",46:"-",47:"*",48:"div",49:"mod",50:"=",51:"!=",52:"<",53:"<=",54:">",55:">=",56:"and",57:"or",59:"number",60:"/",62:"//",64:"@",65:"|",68:".",69:"..",70:"text",71:"node",72:"child",73:"::",74:"descendant",76:"attribute",78:"[",80:"]",82:"position",83:"last"},
productions_: [0,[3,2],[3,1],[4,3],[4,1],[7,1],[7,1],[7,1],[7,1],[11,1],[11,1],[11,1],[12,6],[12,7],[12,8],[12,8],[12,7],[12,8],[12,9],[12,9],[12,9],[12,10],[12,11],[12,11],[12,10],[12,11],[12,12],[12,12],[19,1],[19,1],[23,2],[20,3],[13,5],[13,5],[13,6],[13,6],[14,4],[14,2],[35,3],[35,1],[37,1],[37,1],[37,1],[37,1],[38,7],[43,2],[43,2],[43,0],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,1],[58,3],[58,1],[58,1],[58,1],[58,1],[25,4],[25,4],[25,2],[61,3],[61,3],[61,1],[63,1],[63,1],[63,2],[63,2],[10,3],[10,1],[26,2],[26,2],[66,3],[66,3],[66,1],[67,1],[67,1],[67,1],[67,1],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,2],[67,2],[67,4],[67,4],[67,4],[67,4],[67,2],[67,2],[67,3],[67,3],[67,3],[67,3],[67,4],[67,4],[67,1],[75,2],[75,1],[77,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,3],[79,1],[81,3],[81,1],[81,1],[81,1],[81,3],[81,3],[81,1],[81,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
return $$[$0];
break;
case 3: case 38: case 77:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 4: case 39: case 72: case 78: case 83: case 110:
this.$ = [$$[$0]];
break;
case 5: case 6: case 63: case 64: case 127: case 128:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], tipoPrimitivo.STRING);
break;
case 7:
this.$ = new MultiXpaths(_$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 8: case 9: case 10: case 11: case 28: case 29: case 30: case 31: case 40: case 41: case 42: case 43: case 45: case 46: case 61: case 125:
this.$ = $$[$0];
break;
case 12:
this.$ = new For(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], "", $$[$0-1], null, null, "", $$[$0]);
break;
case 13:
this.$ = new For(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], "", $$[$0-2], null, $$[$0-1], "", $$[$0]);
break;
case 14: case 15:
this.$ = new For(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], "", $$[$0-3], null, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 16:
this.$ = new For(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], "", $$[$0-2], $$[$0-1], null, "", $$[$0]);
break;
case 17:
this.$ = new For(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], "", $$[$0-3], $$[$0-2], $$[$0-1], "", $$[$0]);
break;
case 18: case 19:
this.$ = new For(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], "", $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 20:
this.$ = new For(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0-3], $$[$0-1], null, null, "", $$[$0]);
break;
case 21:
this.$ = new For(_$[$0-9].first_line, _$[$0-9].first_column, $$[$0-7], $$[$0-4], $$[$0-2], null, $$[$0-1], "", $$[$0]);
break;
case 22: case 23:
this.$ = new For(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-8], $$[$0-5], $$[$0-3], null, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 24:
this.$ = new For(_$[$0-9].first_line, _$[$0-9].first_column, $$[$0-7], $$[$0-4], $$[$0-2], $$[$0-1], null, "", $$[$0]);
break;
case 25:
this.$ = new For(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-8], $$[$0-5], $$[$0-3], $$[$0-2], $$[$0-1], "", $$[$0]);
break;
case 26: case 27:
this.$ = new For(_$[$0-11].first_line, _$[$0-11].first_column, $$[$0-9], $$[$0-6], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 32: case 33:
this.$ = new Let(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], $$[$0], new Return (_$[$0-4].first_line, _$[$0-4].first_column, []));
break;
case 34: case 35:
this.$ = new Let(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1], $$[$0]);
break;
case 36:
this.$ = new Return (_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 37:
this.$ = new Return (_$[$0-1].first_line, _$[$0-1].first_column, [$$[$0]]);
break;
case 44:
this.$ = new If(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1], $$[$0]);
break;
case 47:
this.$ = null;
break;
case 48: case 112:
this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionAritmetica.SUMA, $$[$0-1]);
break;
case 49: case 113:
this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionAritmetica.RESTA, $$[$0-1]);
break;
case 50: case 114:
this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionAritmetica.MULT, $$[$0-1]);
break;
case 51: case 115:
this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionAritmetica.DIV, $$[$0-1]);
break;
case 52: case 116:
this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionAritmetica.MOD, $$[$0-1]);
break;
case 53: case 117:
this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionRelacional.IGUAL, $$[$0-1]);
break;
case 54: case 118:
this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionRelacional.DIFERENCIACION, $$[$0-1]);
break;
case 55: case 119:
this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionRelacional.MENOR, $$[$0-1]);
break;
case 56: case 120:
this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionRelacional.MENORIGUAL, $$[$0-1]);
break;
case 57: case 121:
this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionRelacional.MAYOR, $$[$0-1]);
break;
case 58: case 122:
this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionRelacional.MAYORIGUAL, $$[$0-1]);
break;
case 59: case 123:
this.$ = new Logica(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionLogica.AND, $$[$0-1]);
break;
case 60: case 124:
this.$ = new Logica(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionLogica.OR, $$[$0-1]);
break;
case 62: case 111: case 126:
this.$ = $$[$0-1];
break;
case 65: case 129:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], tipoPrimitivo.NUMBER);
break;
case 66:
this.$ = $$[$0]
break;
case 67:
$$[$0][0].tipoQuery = 'relativa';
                                                             this.$ = new XqueryPath(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], new Path(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0], 'sub'));
break;
case 68:
$$[$0][0].tipoQuery = 'absoluta';
                                                             this.$ = new XqueryPath(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], new Path(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0], 'sub'));
break;
case 69:
this.$ = new XqueryPath(_$[$0].first_line, _$[$0].first_column, $$[$0], new Path(_$[$0].first_line, _$[$0].first_column, [], 'sub'));
break;
case 70: case 71:
$$[$0].tipoQuery = 'relativa'; $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 73: case 84:
this.$ = new Acceso(_$[$0].first_line, _$[$0].first_column, $$[$0], 'nodo', []);
break;
case 74: case 85:
this.$ = new Acceso(_$[$0].first_line, _$[$0].first_column, $$[$0], 'todosNodos', []);
break;
case 75: case 100:
this.$ = new Acceso(_$[$0].first_line, _$[$0].first_column, $$[$0], 'atributo', []);
break;
case 76: case 101:
this.$ = new Acceso(_$[$0].first_line, _$[$0].first_column, $$[$0], 'todosAtributos', []);
break;
case 79:
if($$[$0][0].tipoQuery === undefined){$$[$0][0].tipoQuery = 'relativa';}
                                                     this.$ = new Path(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 80:
if($$[$0][0].tipoQuery === undefined){$$[$0][0].tipoQuery = 'absoluta';}  
                                                     this.$ = new Path(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 81:
if($$[$0].tipoQuery === undefined){$$[$0].tipoQuery = 'relativa'} $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 82:
if($$[$0].tipoQuery === undefined){$$[$0].tipoQuery = 'absoluta'} $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 86:
this.$ = new Acceso(_$[$0].first_line, _$[$0].first_column, $$[$0], 'actual', []);
break;
case 87:
this.$ = new Acceso(_$[$0].first_line, _$[$0].first_column, $$[$0], 'padre', []);
break;
case 88:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], 'texto', []);
break;
case 89:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], 'todosNodos', []);
break;
case 90:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0], 'nodo', []);
break;
case 91:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0], 'todosNodos', []);
break;
case 92:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0], 'nodo', [], 'absoluta');
break;
case 93:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0], 'todosNodos', [], 'absoluta');
break;
case 94:
this.$ = new Acceso(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], 'nodo', $$[$0]);
break;
case 95:
this.$ = new Acceso(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], 'todosNodos', $$[$0]);
break;
case 96:
this.$ = new Acceso(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'nodo', $$[$0]);
break;
case 97:
this.$ = new Acceso(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'todosNodos', $$[$0]);
break;
case 98:
this.$ = new Acceso(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'nodo', $$[$0], 'absoluta');
break;
case 99:
this.$ = new Acceso(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'todosNodos', $$[$0], 'absoluta');
break;
case 102:
this.$ = new Acceso(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0], 'atributo', []);
break;
case 103:
this.$ = new Acceso(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0], 'todosAtributos', []);
break;
case 104:
this.$ = new Acceso(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], 'atributo', $$[$0]);
break;
case 105:
this.$ = new Acceso(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], 'todosAtributos', $$[$0]);
break;
case 106:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], 'atributo', $$[$0]);
break;
case 107:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], 'todosAtributos', $$[$0]);
break;
case 108:
listaErrores.push(new ClaseError('Sintactico','Se esperaba la definicion de una etiqueta',_$[$0].first_line, _$[$0].first_column))
break;
case 109:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 130: case 131:
this.$ = new Primitivo(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2]);
break;
case 132:
if($$[$0][0].tipoQuery === undefined){$$[$0][0].tipoQuery = 'relativa';}
                                                     this.$ = new Path(_$[$0].first_line, _$[$0].first_column, $$[$0], 'sub');
break;
case 133:
if($$[$0][0].tipoQuery === undefined){$$[$0][0].tipoQuery ='relativa';}
                                                     this.$ = new Path(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0], 'sub');
break;
}
},
table: [{3:1,4:2,5:[1,3],7:4,8:$V0,9:$V1,10:7,11:8,12:10,13:11,14:12,15:$V2,26:9,31:$V3,33:$V4,60:$V5,62:$V6},{1:[3]},{5:[1,18],6:[1,19]},{1:[2,2]},o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),o($V7,[2,7],{65:[1,20]}),o($V7,[2,8]),o($V8,[2,78]),o($V9,[2,9]),o($V9,[2,10]),o($V9,[2,11]),{2:$Va,17:$Vb,47:$Vc,64:$Vd,66:21,67:22,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk},{2:$Va,17:$Vb,47:$Vc,64:$Vd,66:34,67:22,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk},{16:[1,35]},{16:[1,36]},{8:$Vl,9:$Vm,11:39,12:10,13:11,14:12,15:$V2,16:$Vn,25:49,26:41,28:40,31:$V3,33:$V4,34:[1,37],37:38,38:42,39:$Vo,40:$Vp,58:43,59:$Vq,60:$V5,62:$V6},{1:[2,1]},{7:51,8:$V0,9:$V1,10:7,11:8,12:10,13:11,14:12,15:$V2,26:9,31:$V3,33:$V4,60:$V5,62:$V6},{26:52,60:$V5,62:$V6},o($Vr,[2,79],{60:$Vs,62:$Vt}),o($Vu,[2,83]),o($Vu,[2,84],{75:55,77:56,78:$Vv}),o($Vu,[2,85],{77:56,75:58,78:$Vv}),o($Vu,[2,86]),o($Vu,[2,87]),{40:[1,59]},{40:[1,60]},{73:[1,61]},{73:[1,62]},{17:[1,63],47:[1,64]},{73:[1,65]},o($Vu,[2,108]),o($Vr,[2,80],{60:$Vs,62:$Vt}),{17:[1,66]},{17:[1,67]},{8:$Vl,9:$Vm,11:39,12:10,13:11,14:12,15:$V2,16:$Vn,25:49,26:41,28:40,31:$V3,33:$V4,35:68,37:69,38:42,39:$Vo,40:$Vp,58:43,59:$Vq,60:$V5,62:$V6},o($V9,[2,37]),o($V9,[2,40]),o($V9,[2,41],{45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($V9,[2,42]),o($V9,[2,43]),o($VJ,[2,61]),{40:[1,83]},{8:$Vl,9:$Vm,16:$Vn,25:49,28:84,40:$Vp,58:43,59:$Vq},o($VJ,[2,63]),o($VJ,[2,64]),o($VJ,[2,65]),o($VJ,[2,66]),{17:[1,85]},o($V7,[2,3]),o($V8,[2,77]),{2:$Va,17:$Vb,47:$Vc,64:$Vd,67:86,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk},{2:$Va,17:$Vb,47:$Vc,64:$Vd,67:87,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk},o($Vu,[2,94],{77:88,78:$Vv}),o($VK,[2,110]),{2:$Va,8:$VL,9:$VM,17:$Vb,40:$VN,47:$Vc,59:$VO,62:$VP,64:$Vd,66:97,67:22,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,79:89,81:90,82:$VQ,83:$VR},o($Vu,[2,95],{77:88,78:$Vv}),{41:[1,99]},{41:[1,100]},{17:[1,101],47:[1,102]},{17:[1,103],47:[1,104]},o($Vu,[2,100],{77:56,75:105,78:$Vv}),o($Vu,[2,101],{77:56,75:106,78:$Vv}),{17:[1,107],47:[1,108]},{18:[1,109],24:[1,110]},{32:[1,111]},{6:[1,113],36:[1,112]},o($VS,[2,39]),{8:$Vl,9:$Vm,16:$Vn,25:49,28:114,40:$Vp,58:43,59:$Vq},{8:$Vl,9:$Vm,16:$Vn,25:49,28:115,40:$Vp,58:43,59:$Vq},{8:$Vl,9:$Vm,16:$Vn,25:49,28:116,40:$Vp,58:43,59:$Vq},{8:$Vl,9:$Vm,16:$Vn,25:49,28:117,40:$Vp,58:43,59:$Vq},{8:$Vl,9:$Vm,16:$Vn,25:49,28:118,40:$Vp,58:43,59:$Vq},{8:$Vl,9:$Vm,16:$Vn,25:49,28:119,40:$Vp,58:43,59:$Vq},{8:$Vl,9:$Vm,16:$Vn,25:49,28:120,40:$Vp,58:43,59:$Vq},{8:$Vl,9:$Vm,16:$Vn,25:49,28:121,40:$Vp,58:43,59:$Vq},{8:$Vl,9:$Vm,16:$Vn,25:49,28:122,40:$Vp,58:43,59:$Vq},{8:$Vl,9:$Vm,16:$Vn,25:49,28:123,40:$Vp,58:43,59:$Vq},{8:$Vl,9:$Vm,16:$Vn,25:49,28:124,40:$Vp,58:43,59:$Vq},{8:$Vl,9:$Vm,16:$Vn,25:49,28:125,40:$Vp,58:43,59:$Vq},{8:$Vl,9:$Vm,16:$Vn,25:49,28:126,40:$Vp,58:43,59:$Vq},{8:$Vl,9:$Vm,16:$Vn,25:49,28:127,40:$Vp,58:43,59:$Vq},{41:[1,128],45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI},o($VT,[2,69],{60:[1,129],62:[1,130]}),o($Vu,[2,81]),o($Vu,[2,82]),o($VK,[2,109]),{45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,57:$V41,80:[1,131]},o($V51,[2,125]),{2:$Va,8:$VL,9:$VM,17:$Vb,40:$VN,47:$Vc,59:$VO,62:$VP,64:$Vd,66:97,67:22,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,79:145,81:90,82:$VQ,83:$VR},o($V51,[2,127]),o($V51,[2,128]),o($V51,[2,129]),{40:[1,146]},{40:[1,147]},o($V51,[2,132],{60:$Vs,62:$Vt}),{2:$Va,17:$Vb,47:$Vc,64:$Vd,66:148,67:22,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk},o($Vu,[2,88]),o($Vu,[2,89]),o($Vu,[2,90],{77:56,75:149,78:$Vv}),o($Vu,[2,91],{77:56,75:150,78:$Vv}),o($Vu,[2,92],{77:56,75:151,78:$Vv}),o($Vu,[2,93],{77:56,75:152,78:$Vv}),o($Vu,[2,104],{77:88,78:$Vv}),o($Vu,[2,105],{77:88,78:$Vv}),o($Vu,[2,102],{77:56,75:153,78:$Vv}),o($Vu,[2,103],{77:56,75:154,78:$Vv}),{16:$Vn,19:155,25:156,26:157,60:$V5,62:$V6},{16:[1,158]},{8:$Vl,9:$Vm,16:$Vn,25:49,26:160,28:159,40:$Vp,58:43,59:$Vq,60:$V5,62:$V6},o($V9,[2,36]),{8:$Vl,9:$Vm,11:39,12:10,13:11,14:12,15:$V2,16:$Vn,25:49,26:41,28:40,31:$V3,33:$V4,37:161,38:42,39:$Vo,40:$Vp,58:43,59:$Vq,60:$V5,62:$V6},o($V61,[2,48],{47:$Vy,48:$Vz,49:$VA}),o($V61,[2,49],{47:$Vy,48:$Vz,49:$VA}),o($V71,[2,50],{49:$VA}),o($V71,[2,51],{49:$VA}),o($VJ,[2,52]),o($V81,[2,53],{45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,52:$VD,53:$VE,54:$VF,55:$VG}),o($V81,[2,54],{45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,52:$VD,53:$VE,54:$VF,55:$VG}),o($V91,[2,55],{45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA}),o($V91,[2,56],{45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA}),o($V91,[2,57],{45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA}),o($V91,[2,58],{45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA}),o([5,6,29,33,36,41,44,56,57],[2,59],{45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG}),o([5,6,29,33,36,41,44,57],[2,60],{45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH}),{41:[1,162],45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI},o($VJ,[2,62]),{17:$Va1,47:$Vb1,61:163,63:164,64:$Vc1},{17:$Va1,47:$Vb1,61:168,63:164,64:$Vc1},o($VK,[2,111]),{2:$Va,8:$VL,9:$VM,17:$Vb,40:$VN,47:$Vc,59:$VO,62:$VP,64:$Vd,66:97,67:22,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,79:169,81:90,82:$VQ,83:$VR},{2:$Va,8:$VL,9:$VM,17:$Vb,40:$VN,47:$Vc,59:$VO,62:$VP,64:$Vd,66:97,67:22,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,79:170,81:90,82:$VQ,83:$VR},{2:$Va,8:$VL,9:$VM,17:$Vb,40:$VN,47:$Vc,59:$VO,62:$VP,64:$Vd,66:97,67:22,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,79:171,81:90,82:$VQ,83:$VR},{2:$Va,8:$VL,9:$VM,17:$Vb,40:$VN,47:$Vc,59:$VO,62:$VP,64:$Vd,66:97,67:22,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,79:172,81:90,82:$VQ,83:$VR},{2:$Va,8:$VL,9:$VM,17:$Vb,40:$VN,47:$Vc,59:$VO,62:$VP,64:$Vd,66:97,67:22,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,79:173,81:90,82:$VQ,83:$VR},{2:$Va,8:$VL,9:$VM,17:$Vb,40:$VN,47:$Vc,59:$VO,62:$VP,64:$Vd,66:97,67:22,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,79:174,81:90,82:$VQ,83:$VR},{2:$Va,8:$VL,9:$VM,17:$Vb,40:$VN,47:$Vc,59:$VO,62:$VP,64:$Vd,66:97,67:22,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,79:175,81:90,82:$VQ,83:$VR},{2:$Va,8:$VL,9:$VM,17:$Vb,40:$VN,47:$Vc,59:$VO,62:$VP,64:$Vd,66:97,67:22,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,79:176,81:90,82:$VQ,83:$VR},{2:$Va,8:$VL,9:$VM,17:$Vb,40:$VN,47:$Vc,59:$VO,62:$VP,64:$Vd,66:97,67:22,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,79:177,81:90,82:$VQ,83:$VR},{2:$Va,8:$VL,9:$VM,17:$Vb,40:$VN,47:$Vc,59:$VO,62:$VP,64:$Vd,66:97,67:22,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,79:178,81:90,82:$VQ,83:$VR},{2:$Va,8:$VL,9:$VM,17:$Vb,40:$VN,47:$Vc,59:$VO,62:$VP,64:$Vd,66:97,67:22,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,79:179,81:90,82:$VQ,83:$VR},{2:$Va,8:$VL,9:$VM,17:$Vb,40:$VN,47:$Vc,59:$VO,62:$VP,64:$Vd,66:97,67:22,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,79:180,81:90,82:$VQ,83:$VR},{2:$Va,8:$VL,9:$VM,17:$Vb,40:$VN,47:$Vc,59:$VO,62:$VP,64:$Vd,66:97,67:22,68:$Ve,69:$Vf,70:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,79:181,81:90,82:$VQ,83:$VR},{41:[1,182],45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,57:$V41},{41:[1,183]},{41:[1,184]},o($V51,[2,133],{60:$Vs,62:$Vt}),o($Vu,[2,96],{77:88,78:$Vv}),o($Vu,[2,97],{77:88,78:$Vv}),o($Vu,[2,98],{77:88,78:$Vv}),o($Vu,[2,99],{77:88,78:$Vv}),o($Vu,[2,106],{77:88,78:$Vv}),o($Vu,[2,107],{77:88,78:$Vv}),{14:185,20:186,23:187,27:$Vd1,29:$Ve1,33:$V4},o($Vf1,[2,28]),o($Vf1,[2,29]),{17:[1,190]},o($V9,[2,32],{14:191,33:$V4,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($V9,[2,33],{14:192,33:$V4}),o($VS,[2,38]),{42:[1,193]},o($VT,[2,67],{60:$Vg1,62:$Vh1}),o($Vi1,[2,72]),o($Vi1,[2,73]),o($Vi1,[2,74]),{17:[1,196],47:[1,197]},o($VT,[2,68],{60:$Vg1,62:$Vh1}),o($Vj1,[2,112],{47:$VW,48:$VX,49:$VY}),o($Vj1,[2,113],{47:$VW,48:$VX,49:$VY}),o($Vk1,[2,114],{49:$VY}),o($Vk1,[2,115],{49:$VY}),o($V51,[2,116]),o($Vl1,[2,117],{45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,52:$V$,53:$V01,54:$V11,55:$V21}),o($Vl1,[2,118],{45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,52:$V$,53:$V01,54:$V11,55:$V21}),o($Vm1,[2,119],{45:$VU,46:$VV,47:$VW,48:$VX,49:$VY}),o($Vm1,[2,120],{45:$VU,46:$VV,47:$VW,48:$VX,49:$VY}),o($Vm1,[2,121],{45:$VU,46:$VV,47:$VW,48:$VX,49:$VY}),o($Vm1,[2,122],{45:$VU,46:$VV,47:$VW,48:$VX,49:$VY}),o([41,56,57,80],[2,123],{45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21}),o([41,57,80],[2,124],{45:$VU,46:$VV,47:$VW,48:$VX,49:$VY,50:$VZ,51:$V_,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31}),o($V51,[2,126]),o($V51,[2,130]),o($V51,[2,131]),o($V9,[2,12]),{14:198,21:[1,199],22:[1,200],33:$V4},{14:201,20:202,29:$Ve1,33:$V4},{30:[1,203]},{8:$Vl,9:$Vm,16:$Vn,25:49,28:204,40:$Vp,58:43,59:$Vq},{18:[1,205]},o($V9,[2,34]),o($V9,[2,35]),{8:$Vl,9:$Vm,16:$Vn,25:49,28:206,40:$Vp,58:43,59:$Vq},{17:$Va1,47:$Vb1,63:207,64:$Vc1},{17:$Va1,47:$Vb1,63:208,64:$Vc1},o($Vi1,[2,75]),o($Vi1,[2,76]),o($V9,[2,13]),{14:209,33:$V4},{14:210,33:$V4},o($V9,[2,16]),{14:211,21:[1,212],22:[1,213],33:$V4},{16:$Vn,25:214},o([29,33],[2,30],{45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),{16:$Vn,19:215,25:156,26:157,60:$V5,62:$V6},o($V9,[2,47],{43:216,44:[1,217],45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($Vi1,[2,70]),o($Vi1,[2,71]),o($V9,[2,14]),o($V9,[2,15]),o($V9,[2,17]),{14:218,33:$V4},{14:219,33:$V4},o([21,22,33],[2,31]),{14:220,20:221,23:222,27:$Vd1,29:$Ve1,33:$V4},o($V9,[2,44]),{8:$Vl,9:$Vm,16:$Vn,25:49,28:223,38:224,39:$Vo,40:$Vp,58:43,59:$Vq},o($V9,[2,18]),o($V9,[2,19]),o($V9,[2,20]),{14:225,21:[1,226],22:[1,227],33:$V4},{14:228,20:229,29:$Ve1,33:$V4},o($V9,[2,45],{45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,54:$VF,55:$VG,56:$VH,57:$VI}),o($V9,[2,46]),o($V9,[2,21]),{14:230,33:$V4},{14:231,33:$V4},o($V9,[2,24]),{14:232,21:[1,233],22:[1,234],33:$V4},o($V9,[2,22]),o($V9,[2,23]),o($V9,[2,25]),{14:235,33:$V4},{14:236,33:$V4},o($V9,[2,26]),o($V9,[2,27])],
defaultActions: {3:[2,2],18:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Acceso} = require("../xqueryAST/ExpresionesXpath/Acceso");
    const {Aritmetico, operacionAritmetica} = require("../xqueryAST/ExpresionesXpath/Aritmetico");
    const {Logica, operacionLogica} = require("../xqueryAST/ExpresionesXpath/Logica");
    const {Path} = require("../xqueryAST/ExpresionesXpath/Path");
    const {Primitivo, tipoPrimitivo} = require("../xqueryAST/ExpresionesXpath/Primitivo");
    const {Relacional, operacionRelacional} = require("../xqueryAST/ExpresionesXpath/Relacional");
    const {ClaseError} = require("../xmlAST/ClaseError");

    const {For} = require("../xqueryAST/ExpresionesXqueryTraduccion/For");
    const {If} = require("../xqueryAST/ExpresionesXqueryTraduccion/If");
    const {Let} = require("../xqueryAST/ExpresionesXqueryTraduccion/Let");
    const {MultiXpaths} = require("../xqueryAST/ExpresionesXqueryTraduccion/MultiXpaths");
    const {Return} = require("../xqueryAST/ExpresionesXqueryTraduccion/Return");
    const {XqueryPath} = require("../xqueryAST/ExpresionesXqueryTraduccion/XqueryPath");
    
    
    var listaErrores = [];
    var tmp="";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 59
break;
case 1:this.begin('string'); tmp=""; 
break;
case 2:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 3:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 4:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 5:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 6:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 7: tmp= tmp+yy_.yytext;   this.begin('string');
break;
case 8:
                    this.begin('INITIAL');
                    yy_.yytext= tmp;
                    tmp = "";
                    return 8;
                  
break;
case 9:this.begin('string'); tmp=""; 
break;
case 10:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 11:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 12:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 13:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 14:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 15: tmp= tmp+yy_.yytext;   this.begin('string');
break;
case 16:
                    this.begin('INITIAL');
                    yy_.yytext= tmp;
                    tmp = "";
                    return 9;
                  
break;
case 17:return 62
break;
case 18:return 60
break;
case 19:return 69
break;
case 20:return 68
break;
case 21:return 6
break;
case 22:return 64
break;
case 23:return 78
break;
case 24:return 80
break;
case 25:return 40
break;
case 26:return 41
break;
case 27:return 65
break;
case 28:return 45
break;
case 29:return 46
break;
case 30:return 47
break;
case 31:return 48
break;
case 32:return 50
break;
case 33:return 51
break;
case 34:return 53
break;
case 35:return 55
break;
case 36:return 52
break;
case 37:return 54
break;
case 38:return 57
break;
case 39:return 56
break;
case 40:return 49
break;
case 41:
break;
case 42:
break;
case 43:return 73
break;
case 44:return 72
break;
case 45:return 76
break;
case 46:return 74
break;
case 47:return 70
break;
case 48:return 83 
break;
case 49:return 82
break;
case 50:return 44;
break;
case 51:return 42;
break;
case 52:return 39;
break;
case 53:return 21;
break;
case 54:return 22;
break;
case 55:return 30;
break;
case 56:return 29;
break;
case 57:return 27;
break;
case 58:return 24;
break;
case 59:return 18;
break;
case 60:return 15;
break;
case 61:return 33;
break;
case 62:return 16;
break;
case 63:return 31;
break;
case 64:return 32;
break;
case 65:return 17
break;
case 66:return 5
break;
case 67:console.log('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:(([0-9]+\.[0-9]+)|(\.[0-9]+)|([0-9]+)))/i,/^(?:["])/i,/^(?:[^"])/i,/^(?:[\\][n])/i,/^(?:[\\][t])/i,/^(?:[\\][r])/i,/^(?:[\\]["])/i,/^(?:[\\][\\])/i,/^(?:[\"])/i,/^(?:['])/i,/^(?:[^'])/i,/^(?:[\\][n])/i,/^(?:[\\][t])/i,/^(?:[\\][r])/i,/^(?:[\\]['])/i,/^(?:[\\][\\])/i,/^(?:[\'])/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:@)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?: )/i,/^(?:\n)/i,/^(?:::)/i,/^(?:child\b)/i,/^(?:attribute\b)/i,/^(?:descendant\b)/i,/^(?:text\b)/i,/^(?:last\b)/i,/^(?:position\b)/i,/^(?:else\b)/i,/^(?:then\b)/i,/^(?:if\b)/i,/^(?:ascending\b)/i,/^(?:descending\b)/i,/^(?:by\b)/i,/^(?:order\b)/i,/^(?:where\b)/i,/^(?:at\b)/i,/^(?:in\b)/i,/^(?:for\b)/i,/^(?:return\b)/i,/^(?:\$)/i,/^(?:let\b)/i,/^(?::=)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[0,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true},"INITIAL":{"rules":[0,1,9,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xQueryGrammarTraduccion;
exports.Parser = xQueryGrammarTraduccion.Parser;
exports.parse = function () { return xQueryGrammarTraduccion.parse.apply(xQueryGrammarTraduccion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}