/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xQueryGrammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,24],$V2=[1,20],$V3=[1,26],$V4=[1,16],$V5=[1,17],$V6=[1,18],$V7=[1,21],$V8=[1,22],$V9=[1,23],$Va=[1,13],$Vb=[1,14],$Vc=[5,6],$Vd=[5,6,82],$Ve=[5,6,29],$Vf=[1,30],$Vg=[1,31],$Vh=[1,32],$Vi=[1,33],$Vj=[1,34],$Vk=[1,35],$Vl=[1,36],$Vm=[1,37],$Vn=[1,38],$Vo=[1,39],$Vp=[1,40],$Vq=[1,41],$Vr=[1,42],$Vs=[1,55],$Vt=[1,45],$Vu=[1,46],$Vv=[1,53],$Vw=[1,47],$Vx=[1,48],$Vy=[1,49],$Vz=[1,50],$VA=[1,51],$VB=[1,52],$VC=[1,54],$VD=[5,6,22,29,48,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70],$VE=[5,6,22,29,47,48,52,82],$VF=[1,79],$VG=[1,80],$VH=[5,6,22,29,47,48,52,58,59,60,61,62,63,64,65,66,67,68,69,70,77,79,82,97],$VI=[1,83],$VJ=[5,6,22,29,41,42,47,48,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70],$VK=[5,6,22,29,48,52,57,58,59,63,64,65,66,67,68,69,70],$VL=[5,6,22,29,48,52,57,58,59,60,61,63,64,65,66,67,68,69,70],$VM=[5,6,22,29,48,52,57,63,64,69,70],$VN=[5,6,22,29,48,52,57,63,64,65,66,67,68,69,70],$VO=[5,6,22,29,47,48,52,58,59,60,61,62,63,64,65,66,67,68,69,70,77,79,82,95,97],$VP=[1,105],$VQ=[1,106],$VR=[1,107],$VS=[1,108],$VT=[1,112],$VU=[1,109],$VV=[1,110],$VW=[1,131],$VX=[1,132],$VY=[1,133],$VZ=[1,136],$V_=[1,137],$V$=[1,138],$V01=[1,139],$V11=[1,140],$V21=[1,141],$V31=[1,142],$V41=[1,143],$V51=[1,144],$V61=[1,145],$V71=[1,146],$V81=[1,147],$V91=[1,148],$Va1=[22,58,59,60,61,62,63,64,65,66,67,68,69,70,97],$Vb1=[1,171],$Vc1=[1,172],$Vd1=[5,6,22,29,41,42,47,48,52,57,58,59,60,61,62,63,64,65,66,67,68,69,70,77,79],$Ve1=[1,197],$Vf1=[1,196],$Vg1=[1,195],$Vh1=[47,48,52],$Vi1=[6,22],$Vj1=[22,58,59,63,64,65,66,67,68,69,70,97],$Vk1=[22,58,59,60,61,63,64,65,66,67,68,69,70,97],$Vl1=[22,63,64,69,70,97],$Vm1=[22,63,64,65,66,67,68,69,70,97],$Vn1=[1,209],$Vo1=[1,248],$Vp1=[6,29];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"LQUERYS":4,"EOF":5,",":6,"QUERY":7,"MULTIPATH":8,"XQUERY":9,"FUNC":10,"FOR":11,"LET":12,"IF":13,"EXPXQUERY":14,"declare":15,"function":16,"local":17,":":18,"id":19,"(":20,"DECPARAMS":21,")":22,"as":23,"xs":24,"string":25,"?":26,"{":27,"LEXPSRET":28,"}":29,"int":30,"decimal":31,"boolean":32,"DEC":33,"$":34,"TIPOS":35,"for":36,"in":37,"TIPOPATH":38,"RETURN":39,"ORDERBY":40,"ascending":41,"descending":42,"WHERE":43,"at":44,"XQUERYPATH":45,"PATH":46,"where":47,"order":48,"by":49,"let":50,":=":51,"return":52,"EXPRET":53,"if":54,"then":55,"ElSEst":56,"else":57,"+":58,"-":59,"*":60,"div":61,"mod":62,"=":63,"!=":64,"<":65,"<=":66,">":67,">=":68,"and":69,"or":70,"VALOREXPXQUERY":71,"cadena":72,"scadena":73,"number":74,"VALPARAMS":75,"VAL":76,"/":77,"LACCESOSXQUERY":78,"//":79,"ACCESOXQUERY":80,"@":81,"|":82,"LACCESOS":83,"ACCESO":84,".":85,"..":86,"text":87,"node":88,"child":89,"::":90,"descendant":91,"PREDICADOS":92,"attribute":93,"PREDI":94,"[":95,"EXP":96,"]":97,"VALOR":98,"position":99,"last":100,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:",",15:"declare",16:"function",17:"local",18:":",19:"id",20:"(",22:")",23:"as",24:"xs",25:"string",26:"?",27:"{",29:"}",30:"int",31:"decimal",32:"boolean",34:"$",36:"for",37:"in",41:"ascending",42:"descending",44:"at",47:"where",48:"order",49:"by",50:"let",51:":=",52:"return",54:"if",55:"then",57:"else",58:"+",59:"-",60:"*",61:"div",62:"mod",63:"=",64:"!=",65:"<",66:"<=",67:">",68:">=",69:"and",70:"or",72:"cadena",73:"scadena",74:"number",77:"/",79:"//",81:"@",82:"|",85:".",86:"..",87:"text",88:"node",89:"child",90:"::",91:"descendant",93:"attribute",95:"[",97:"]",99:"position",100:"last"},
productions_: [0,[3,2],[3,1],[4,3],[4,1],[7,1],[7,1],[9,1],[9,1],[9,1],[9,1],[9,1],[10,16],[10,16],[10,16],[10,16],[10,15],[10,15],[10,15],[10,15],[21,3],[21,1],[33,6],[35,2],[35,2],[35,2],[35,2],[11,6],[11,7],[11,8],[11,8],[11,7],[11,8],[11,9],[11,9],[11,9],[11,10],[11,11],[11,11],[11,10],[11,11],[11,12],[11,12],[38,1],[38,1],[43,2],[40,3],[12,5],[12,5],[12,6],[12,6],[39,4],[39,2],[28,3],[28,1],[53,1],[53,1],[53,1],[13,7],[56,2],[56,2],[56,0],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,1],[71,3],[71,1],[71,1],[71,1],[71,6],[71,1],[75,3],[75,1],[76,1],[76,1],[45,4],[45,4],[45,2],[78,3],[78,3],[78,1],[80,1],[80,1],[80,2],[80,2],[8,3],[8,1],[46,2],[46,2],[83,3],[83,3],[83,1],[84,1],[84,1],[84,1],[84,1],[84,3],[84,3],[84,3],[84,3],[84,3],[84,3],[84,2],[84,2],[84,4],[84,4],[84,4],[84,4],[84,2],[84,2],[84,3],[84,3],[84,3],[84,3],[84,4],[84,4],[84,1],[92,2],[92,1],[94,3],[96,3],[96,3],[96,3],[96,3],[96,3],[96,3],[96,3],[96,3],[96,3],[96,3],[96,3],[96,3],[96,3],[96,1],[98,3],[98,1],[98,1],[98,1],[98,3],[98,3],[98,1],[98,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
return $$[$0];
break;
case 3: case 20: case 53: case 82: case 96:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 4: case 21: case 54: case 83: case 91: case 97: case 102: case 129:
this.$ = [$$[$0]];
break;
case 5:
this.$ = new MultiXpaths(_$[$0].first_line, _$[$0].first_column, $$[$0]);
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 43: case 44: case 45: case 46: case 55: case 56: case 57: case 59: case 60: case 75: case 84: case 85: case 144:
this.$ = $$[$0];
break;
case 12:
this.$ = new DecFunction(_$[$0-15].first_line, _$[$0-15].first_column, $$[$0-11], $$[$0-9], tipoPrimitivo.STRING, $$[$0-1]);
break;
case 13: case 14:
this.$ = new DecFunction(_$[$0-15].first_line, _$[$0-15].first_column, $$[$0-11], $$[$0-9], tipoPrimitivo.NUMBER, $$[$0-1]);
break;
case 15:
this.$ = new DecFunction(_$[$0-15].first_line, _$[$0-15].first_column, $$[$0-11], $$[$0-9], tipoPrimitivo.BOOL, $$[$0-1]);
break;
case 16:
this.$ = new DecFunction(_$[$0-14].first_line, _$[$0-14].first_column, $$[$0-10], [], tipoPrimitivo.STRING, $$[$0-1]);
break;
case 17: case 18:
this.$ = new DecFunction(_$[$0-14].first_line, _$[$0-14].first_column, $$[$0-10], [], tipoPrimitivo.NUMBER, $$[$0-1]);
break;
case 19:
this.$ = new DecFunction(_$[$0-14].first_line, _$[$0-14].first_column, $$[$0-10], [], tipoPrimitivo.BOOL, $$[$0-1]);
break;
case 22:
this.$ = new Let(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], $$[$0], null);
break;
case 23:
this.$ = new Primitivo(_$[$0-1].first_line, _$[$0-1].first_column, "", tipoPrimitivo.STRING);
break;
case 24: case 25:
this.$ = new Primitivo(_$[$0-1].first_line, _$[$0-1].first_column, 0, tipoPrimitivo.NUMBER);
break;
case 26:
this.$ = new Primitivo(_$[$0-1].first_line, _$[$0-1].first_column, false, tipoPrimitivo.BOOL);
break;
case 27:
this.$ = new For(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], "", $$[$0-1], null, null, "", $$[$0]);
break;
case 28:
this.$ = new For(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], "", $$[$0-2], null, $$[$0-1], "", $$[$0]);
break;
case 29: case 30:
this.$ = new For(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], "", $$[$0-3], null, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 31:
this.$ = new For(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], "", $$[$0-2], $$[$0-1], null, "", $$[$0]);
break;
case 32:
this.$ = new For(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], "", $$[$0-3], $$[$0-2], $$[$0-1], "", $$[$0]);
break;
case 33: case 34:
this.$ = new For(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], "", $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 35:
this.$ = new For(_$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0-3], $$[$0-1], null, null, "", $$[$0]);
break;
case 36:
this.$ = new For(_$[$0-9].first_line, _$[$0-9].first_column, $$[$0-7], $$[$0-4], $$[$0-2], null, $$[$0-1], "", $$[$0]);
break;
case 37: case 38:
this.$ = new For(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-8], $$[$0-5], $$[$0-3], null, $$[$0-2], $$[$0-1], $$[$0]);
break;
case 39:
this.$ = new For(_$[$0-9].first_line, _$[$0-9].first_column, $$[$0-7], $$[$0-4], $$[$0-2], $$[$0-1], null, "", $$[$0]);
break;
case 40:
this.$ = new For(_$[$0-10].first_line, _$[$0-10].first_column, $$[$0-8], $$[$0-5], $$[$0-3], $$[$0-2], $$[$0-1], "", $$[$0]);
break;
case 41: case 42:
this.$ = new For(_$[$0-11].first_line, _$[$0-11].first_column, $$[$0-9], $$[$0-6], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 47: case 48:
this.$ = new Let(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], $$[$0], null);
break;
case 49: case 50:
this.$ = new Let(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1], $$[$0]);
break;
case 51:
this.$ = new Return (_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]);
break;
case 52:
this.$ = new Return (_$[$0-1].first_line, _$[$0-1].first_column, [$$[$0]]);
break;
case 58:
this.$ = new If(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-4], $$[$0-1], $$[$0]);
break;
case 61:
this.$ = null;
break;
case 62: case 131:
this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionAritmetica.SUMA, $$[$0-1]);
break;
case 63: case 132:
this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionAritmetica.RESTA, $$[$0-1]);
break;
case 64: case 133:
this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionAritmetica.MULT, $$[$0-1]);
break;
case 65: case 134:
this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionAritmetica.DIV, $$[$0-1]);
break;
case 66: case 135:
this.$ = new Aritmetico(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionAritmetica.MOD, $$[$0-1]);
break;
case 67: case 136:
this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionRelacional.IGUAL, $$[$0-1]);
break;
case 68: case 137:
this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionRelacional.DIFERENCIACION, $$[$0-1]);
break;
case 69: case 138:
this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionRelacional.MENOR, $$[$0-1]);
break;
case 70: case 139:
this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionRelacional.MENORIGUAL, $$[$0-1]);
break;
case 71: case 140:
this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionRelacional.MAYOR, $$[$0-1]);
break;
case 72: case 141:
this.$ = new Relacional(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionRelacional.MAYORIGUAL, $$[$0-1]);
break;
case 73: case 142:
this.$ = new Logica(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionLogica.AND, $$[$0-1]);
break;
case 74: case 143:
this.$ = new Logica(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-2], $$[$0], operacionLogica.OR, $$[$0-1]);
break;
case 76: case 130: case 145:
this.$ = $$[$0-1];
break;
case 77: case 78: case 146: case 147:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], tipoPrimitivo.STRING);
break;
case 79: case 148:
this.$ = new Primitivo(_$[$0].first_line, _$[$0].first_column, $$[$0], tipoPrimitivo.NUMBER);
break;
case 80:
this.$ = new LlamadaFunc(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]);
break;
case 81:
this.$ = $$[$0]
break;
case 86:
$$[$0][0].tipoQuery = 'relativa';
                                                             this.$ = new XqueryPath(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], new Path(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0], 'sub'));
break;
case 87:
$$[$0][0].tipoQuery = 'absoluta';
                                                             this.$ = new XqueryPath(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], new Path(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0], 'sub'));
break;
case 88:
this.$ = new XqueryPath(_$[$0].first_line, _$[$0].first_column, $$[$0], new Path(_$[$0].first_line, _$[$0].first_column, [], 'sub'));
break;
case 89: case 90:
$$[$0].tipoQuery = 'relativa'; $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 92: case 103:
this.$ = new Acceso(_$[$0].first_line, _$[$0].first_column, $$[$0], 'nodo', []);
break;
case 93: case 104:
this.$ = new Acceso(_$[$0].first_line, _$[$0].first_column, $$[$0], 'todosNodos', []);
break;
case 94: case 119:
this.$ = new Acceso(_$[$0].first_line, _$[$0].first_column, $$[$0], 'atributo', []);
break;
case 95: case 120:
this.$ = new Acceso(_$[$0].first_line, _$[$0].first_column, $$[$0], 'todosAtributos', []);
break;
case 98:
if($$[$0][0].tipoQuery === undefined){$$[$0][0].tipoQuery = 'relativa';}
                                                     this.$ = new Path(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 99:
if($$[$0][0].tipoQuery === undefined){$$[$0][0].tipoQuery = 'absoluta';}  
                                                     this.$ = new Path(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 100:
if($$[$0].tipoQuery === undefined){$$[$0].tipoQuery = 'relativa'} $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 101:
if($$[$0].tipoQuery === undefined){$$[$0].tipoQuery = 'absoluta'} $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 105:
this.$ = new Acceso(_$[$0].first_line, _$[$0].first_column, $$[$0], 'actual', []);
break;
case 106:
this.$ = new Acceso(_$[$0].first_line, _$[$0].first_column, $$[$0], 'padre', []);
break;
case 107:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], 'texto', []);
break;
case 108:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], 'todosNodos', []);
break;
case 109:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0], 'nodo', []);
break;
case 110:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0], 'todosNodos', []);
break;
case 111:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0], 'nodo', [], 'absoluta');
break;
case 112:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0], 'todosNodos', [], 'absoluta');
break;
case 113:
this.$ = new Acceso(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], 'nodo', $$[$0]);
break;
case 114:
this.$ = new Acceso(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], 'todosNodos', $$[$0]);
break;
case 115:
this.$ = new Acceso(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'nodo', $$[$0]);
break;
case 116:
this.$ = new Acceso(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'todosNodos', $$[$0]);
break;
case 117:
this.$ = new Acceso(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'nodo', $$[$0], 'absoluta');
break;
case 118:
this.$ = new Acceso(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], 'todosNodos', $$[$0], 'absoluta');
break;
case 121:
this.$ = new Acceso(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0], 'atributo', []);
break;
case 122:
this.$ = new Acceso(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0], 'todosAtributos', []);
break;
case 123:
this.$ = new Acceso(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], 'atributo', $$[$0]);
break;
case 124:
this.$ = new Acceso(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], 'todosAtributos', $$[$0]);
break;
case 125:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], 'atributo', $$[$0]);
break;
case 126:
this.$ = new Acceso(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], 'todosAtributos', $$[$0]);
break;
case 127:
listaErrores.push(new ClaseError('Sintactico','Se esperaba la definicion de una etiqueta',_$[$0].first_line, _$[$0].first_column))
break;
case 128:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 149: case 150:
this.$ = new Primitivo(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2]);
break;
case 151:
if($$[$0][0].tipoQuery === undefined){$$[$0][0].tipoQuery = 'relativa';}
                                                     this.$ = new Path(_$[$0].first_line, _$[$0].first_column, $$[$0], 'sub');
break;
case 152:
if($$[$0][0].tipoQuery === undefined){$$[$0][0].tipoQuery ='relativa';}
                                                     this.$ = new Path(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0], 'sub');
break;
}
},
table: [{3:1,4:2,5:[1,3],7:4,8:5,9:6,10:8,11:9,12:10,13:11,14:12,15:$V0,17:$V1,20:$V2,34:$V3,36:$V4,45:25,46:7,50:$V5,54:$V6,71:19,72:$V7,73:$V8,74:$V9,77:$Va,79:$Vb},{1:[3]},{5:[1,27],6:[1,28]},{1:[2,2]},o($Vc,[2,4]),o($Vc,[2,5],{82:[1,29]}),o($Vc,[2,6]),o($Vd,[2,97]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11],{58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr}),{2:$Vs,19:$Vt,60:$Vu,81:$Vv,83:43,84:44,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC},{2:$Vs,19:$Vt,60:$Vu,81:$Vv,83:56,84:44,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC},{16:[1,57]},{34:[1,58]},{34:[1,59]},{20:[1,60]},o($VD,[2,75]),{14:61,17:$V1,20:$V2,34:$V3,45:25,71:19,72:$V7,73:$V8,74:$V9},o($VD,[2,77]),o($VD,[2,78]),o($VD,[2,79]),{18:[1,62]},o($VD,[2,81]),{19:[1,63]},{1:[2,1]},{7:64,8:5,9:6,10:8,11:9,12:10,13:11,14:12,15:$V0,17:$V1,20:$V2,34:$V3,36:$V4,45:25,46:7,50:$V5,54:$V6,71:19,72:$V7,73:$V8,74:$V9,77:$Va,79:$Vb},{46:65,77:$Va,79:$Vb},{14:66,17:$V1,20:$V2,34:$V3,45:25,71:19,72:$V7,73:$V8,74:$V9},{14:67,17:$V1,20:$V2,34:$V3,45:25,71:19,72:$V7,73:$V8,74:$V9},{14:68,17:$V1,20:$V2,34:$V3,45:25,71:19,72:$V7,73:$V8,74:$V9},{14:69,17:$V1,20:$V2,34:$V3,45:25,71:19,72:$V7,73:$V8,74:$V9},{14:70,17:$V1,20:$V2,34:$V3,45:25,71:19,72:$V7,73:$V8,74:$V9},{14:71,17:$V1,20:$V2,34:$V3,45:25,71:19,72:$V7,73:$V8,74:$V9},{14:72,17:$V1,20:$V2,34:$V3,45:25,71:19,72:$V7,73:$V8,74:$V9},{14:73,17:$V1,20:$V2,34:$V3,45:25,71:19,72:$V7,73:$V8,74:$V9},{14:74,17:$V1,20:$V2,34:$V3,45:25,71:19,72:$V7,73:$V8,74:$V9},{14:75,17:$V1,20:$V2,34:$V3,45:25,71:19,72:$V7,73:$V8,74:$V9},{14:76,17:$V1,20:$V2,34:$V3,45:25,71:19,72:$V7,73:$V8,74:$V9},{14:77,17:$V1,20:$V2,34:$V3,45:25,71:19,72:$V7,73:$V8,74:$V9},{14:78,17:$V1,20:$V2,34:$V3,45:25,71:19,72:$V7,73:$V8,74:$V9},o($VE,[2,98],{77:$VF,79:$VG}),o($VH,[2,102]),o($VH,[2,103],{92:81,94:82,95:$VI}),o($VH,[2,104],{94:82,92:84,95:$VI}),o($VH,[2,105]),o($VH,[2,106]),{20:[1,85]},{20:[1,86]},{90:[1,87]},{90:[1,88]},{19:[1,89],60:[1,90]},{90:[1,91]},o($VH,[2,127]),o($VE,[2,99],{77:$VF,79:$VG}),{17:[1,92]},{19:[1,93]},{19:[1,94]},{14:95,17:$V1,20:$V2,34:$V3,45:25,71:19,72:$V7,73:$V8,74:$V9},{22:[1,96],58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr},{19:[1,97]},o($VJ,[2,88],{77:[1,98],79:[1,99]}),o($Vc,[2,3]),o($Vd,[2,96]),o($VK,[2,62],{60:$Vh,61:$Vi,62:$Vj}),o($VK,[2,63],{60:$Vh,61:$Vi,62:$Vj}),o($VL,[2,64],{62:$Vj}),o($VL,[2,65],{62:$Vj}),o($VD,[2,66]),o($VM,[2,67],{58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,65:$Vm,66:$Vn,67:$Vo,68:$Vp}),o($VM,[2,68],{58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,65:$Vm,66:$Vn,67:$Vo,68:$Vp}),o($VN,[2,69],{58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj}),o($VN,[2,70],{58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj}),o($VN,[2,71],{58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj}),o($VN,[2,72],{58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj}),o([5,6,22,29,48,52,57,69,70],[2,73],{58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp}),o([5,6,22,29,48,52,57,70],[2,74],{58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq}),{2:$Vs,19:$Vt,60:$Vu,81:$Vv,84:100,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC},{2:$Vs,19:$Vt,60:$Vu,81:$Vv,84:101,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC},o($VH,[2,113],{94:102,95:$VI}),o($VO,[2,129]),{2:$Vs,19:$Vt,20:$VP,60:$Vu,72:$VQ,73:$VR,74:$VS,79:$VT,81:$Vv,83:111,84:44,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC,96:103,98:104,99:$VU,100:$VV},o($VH,[2,114],{94:102,95:$VI}),{22:[1,113]},{22:[1,114]},{19:[1,115],60:[1,116]},{19:[1,117],60:[1,118]},o($VH,[2,119],{94:82,92:119,95:$VI}),o($VH,[2,120],{94:82,92:120,95:$VI}),{19:[1,121],60:[1,122]},{18:[1,123]},{37:[1,124],44:[1,125]},{51:[1,126]},{22:[1,127],58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr},o($VD,[2,76]),{20:[1,128]},{19:$VW,60:$VX,78:129,80:130,81:$VY},{19:$VW,60:$VX,78:134,80:130,81:$VY},o($VH,[2,100]),o($VH,[2,101]),o($VO,[2,128]),{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,63:$V21,64:$V31,65:$V41,66:$V51,67:$V61,68:$V71,69:$V81,70:$V91,97:[1,135]},o($Va1,[2,144]),{2:$Vs,19:$Vt,20:$VP,60:$Vu,72:$VQ,73:$VR,74:$VS,79:$VT,81:$Vv,83:111,84:44,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC,96:149,98:104,99:$VU,100:$VV},o($Va1,[2,146]),o($Va1,[2,147]),o($Va1,[2,148]),{20:[1,150]},{20:[1,151]},o($Va1,[2,151],{77:$VF,79:$VG}),{2:$Vs,19:$Vt,60:$Vu,81:$Vv,83:152,84:44,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC},o($VH,[2,107]),o($VH,[2,108]),o($VH,[2,109],{94:82,92:153,95:$VI}),o($VH,[2,110],{94:82,92:154,95:$VI}),o($VH,[2,111],{94:82,92:155,95:$VI}),o($VH,[2,112],{94:82,92:156,95:$VI}),o($VH,[2,123],{94:102,95:$VI}),o($VH,[2,124],{94:102,95:$VI}),o($VH,[2,121],{94:82,92:157,95:$VI}),o($VH,[2,122],{94:82,92:158,95:$VI}),{19:[1,159]},{34:$V3,38:160,45:161,46:162,77:$Va,79:$Vb},{34:[1,163]},{14:164,17:$V1,20:$V2,34:$V3,45:25,46:165,71:19,72:$V7,73:$V8,74:$V9,77:$Va,79:$Vb},{55:[1,166]},{14:169,17:$V1,20:$V2,34:$V3,45:25,46:170,71:19,72:$V7,73:$V8,74:$V9,75:167,76:168,77:$Va,79:$Vb},o($VJ,[2,86],{77:$Vb1,79:$Vc1}),o($Vd1,[2,91]),o($Vd1,[2,92]),o($Vd1,[2,93]),{19:[1,173],60:[1,174]},o($VJ,[2,87],{77:$Vb1,79:$Vc1}),o($VO,[2,130]),{2:$Vs,19:$Vt,20:$VP,60:$Vu,72:$VQ,73:$VR,74:$VS,79:$VT,81:$Vv,83:111,84:44,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC,96:175,98:104,99:$VU,100:$VV},{2:$Vs,19:$Vt,20:$VP,60:$Vu,72:$VQ,73:$VR,74:$VS,79:$VT,81:$Vv,83:111,84:44,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC,96:176,98:104,99:$VU,100:$VV},{2:$Vs,19:$Vt,20:$VP,60:$Vu,72:$VQ,73:$VR,74:$VS,79:$VT,81:$Vv,83:111,84:44,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC,96:177,98:104,99:$VU,100:$VV},{2:$Vs,19:$Vt,20:$VP,60:$Vu,72:$VQ,73:$VR,74:$VS,79:$VT,81:$Vv,83:111,84:44,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC,96:178,98:104,99:$VU,100:$VV},{2:$Vs,19:$Vt,20:$VP,60:$Vu,72:$VQ,73:$VR,74:$VS,79:$VT,81:$Vv,83:111,84:44,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC,96:179,98:104,99:$VU,100:$VV},{2:$Vs,19:$Vt,20:$VP,60:$Vu,72:$VQ,73:$VR,74:$VS,79:$VT,81:$Vv,83:111,84:44,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC,96:180,98:104,99:$VU,100:$VV},{2:$Vs,19:$Vt,20:$VP,60:$Vu,72:$VQ,73:$VR,74:$VS,79:$VT,81:$Vv,83:111,84:44,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC,96:181,98:104,99:$VU,100:$VV},{2:$Vs,19:$Vt,20:$VP,60:$Vu,72:$VQ,73:$VR,74:$VS,79:$VT,81:$Vv,83:111,84:44,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC,96:182,98:104,99:$VU,100:$VV},{2:$Vs,19:$Vt,20:$VP,60:$Vu,72:$VQ,73:$VR,74:$VS,79:$VT,81:$Vv,83:111,84:44,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC,96:183,98:104,99:$VU,100:$VV},{2:$Vs,19:$Vt,20:$VP,60:$Vu,72:$VQ,73:$VR,74:$VS,79:$VT,81:$Vv,83:111,84:44,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC,96:184,98:104,99:$VU,100:$VV},{2:$Vs,19:$Vt,20:$VP,60:$Vu,72:$VQ,73:$VR,74:$VS,79:$VT,81:$Vv,83:111,84:44,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC,96:185,98:104,99:$VU,100:$VV},{2:$Vs,19:$Vt,20:$VP,60:$Vu,72:$VQ,73:$VR,74:$VS,79:$VT,81:$Vv,83:111,84:44,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC,96:186,98:104,99:$VU,100:$VV},{2:$Vs,19:$Vt,20:$VP,60:$Vu,72:$VQ,73:$VR,74:$VS,79:$VT,81:$Vv,83:111,84:44,85:$Vw,86:$Vx,87:$Vy,88:$Vz,89:$VA,91:$VB,93:$VC,96:187,98:104,99:$VU,100:$VV},{22:[1,188],58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,63:$V21,64:$V31,65:$V41,66:$V51,67:$V61,68:$V71,69:$V81,70:$V91},{22:[1,189]},{22:[1,190]},o($Va1,[2,152],{77:$VF,79:$VG}),o($VH,[2,115],{94:102,95:$VI}),o($VH,[2,116],{94:102,95:$VI}),o($VH,[2,117],{94:102,95:$VI}),o($VH,[2,118],{94:102,95:$VI}),o($VH,[2,125],{94:102,95:$VI}),o($VH,[2,126],{94:102,95:$VI}),{20:[1,191]},{39:192,40:193,43:194,47:$Ve1,48:$Vf1,52:$Vg1},o($Vh1,[2,43]),o($Vh1,[2,44]),{19:[1,198]},o($Ve,[2,47],{39:199,52:$Vg1,58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr}),o($Ve,[2,48],{39:200,52:$Vg1}),{14:201,17:$V1,20:$V2,34:$V3,45:25,71:19,72:$V7,73:$V8,74:$V9},{6:[1,203],22:[1,202]},o($Vi1,[2,83]),o($Vi1,[2,84],{58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr}),o($Vi1,[2,85]),{19:$VW,60:$VX,80:204,81:$VY},{19:$VW,60:$VX,80:205,81:$VY},o($Vd1,[2,94]),o($Vd1,[2,95]),o($Vj1,[2,131],{60:$V$,61:$V01,62:$V11}),o($Vj1,[2,132],{60:$V$,61:$V01,62:$V11}),o($Vk1,[2,133],{62:$V11}),o($Vk1,[2,134],{62:$V11}),o($Va1,[2,135]),o($Vl1,[2,136],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,65:$V41,66:$V51,67:$V61,68:$V71}),o($Vl1,[2,137],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,65:$V41,66:$V51,67:$V61,68:$V71}),o($Vm1,[2,138],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11}),o($Vm1,[2,139],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11}),o($Vm1,[2,140],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11}),o($Vm1,[2,141],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11}),o([22,69,70,97],[2,142],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,63:$V21,64:$V31,65:$V41,66:$V51,67:$V61,68:$V71}),o([22,70,97],[2,143],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,63:$V21,64:$V31,65:$V41,66:$V51,67:$V61,68:$V71,69:$V81}),o($Va1,[2,145]),o($Va1,[2,149]),o($Va1,[2,150]),{21:206,22:[1,207],33:208,34:$Vn1},o($Ve,[2,27]),{39:210,41:[1,211],42:[1,212],52:$Vg1},{39:213,40:214,48:$Vf1,52:$Vg1},{9:217,10:8,11:9,12:10,13:11,14:12,15:$V0,17:$V1,20:$V2,27:[1,215],34:$V3,36:$V4,39:219,45:25,46:218,50:$V5,52:$Vg1,53:216,54:$V6,71:19,72:$V7,73:$V8,74:$V9,77:$Va,79:$Vb},{49:[1,220]},{14:221,17:$V1,20:$V2,34:$V3,45:25,71:19,72:$V7,73:$V8,74:$V9},{37:[1,222]},o($Ve,[2,49]),o($Ve,[2,50]),o($Ve,[2,61],{56:223,57:[1,224],58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr}),o($VD,[2,80]),{14:169,17:$V1,20:$V2,34:$V3,45:25,46:170,71:19,72:$V7,73:$V8,74:$V9,76:225,77:$Va,79:$Vb},o($Vd1,[2,89]),o($Vd1,[2,90]),{6:[1,227],22:[1,226]},{23:[1,228]},o($Vi1,[2,21]),{19:[1,229]},o($Ve,[2,28]),{39:230,52:$Vg1},{39:231,52:$Vg1},o($Ve,[2,31]),{39:232,41:[1,233],42:[1,234],52:$Vg1},{9:217,10:8,11:9,12:10,13:11,14:12,15:$V0,17:$V1,20:$V2,28:235,34:$V3,36:$V4,39:219,45:25,46:218,50:$V5,52:$Vg1,53:236,54:$V6,71:19,72:$V7,73:$V8,74:$V9,77:$Va,79:$Vb},o($Ve,[2,52]),o($Ve,[2,55]),o($Ve,[2,56]),o($Ve,[2,57]),{34:$V3,45:237},o([48,52],[2,45],{58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr}),{34:$V3,38:238,45:161,46:162,77:$Va,79:$Vb},o($Ve,[2,58]),{13:240,14:239,17:$V1,20:$V2,34:$V3,45:25,54:$V6,71:19,72:$V7,73:$V8,74:$V9},o($Vi1,[2,82]),{23:[1,241]},{33:242,34:$Vn1},{24:[1,243]},{23:[1,244]},o($Ve,[2,29]),o($Ve,[2,30]),o($Ve,[2,32]),{39:245,52:$Vg1},{39:246,52:$Vg1},{6:$Vo1,29:[1,247]},o($Vp1,[2,54]),o([41,42,52],[2,46]),{39:249,40:250,43:251,47:$Ve1,48:$Vf1,52:$Vg1},o($Ve,[2,59],{58:$Vf,59:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr}),o($Ve,[2,60]),{24:[1,252]},o($Vi1,[2,20]),{18:[1,253]},{24:[1,254]},o($Ve,[2,33]),o($Ve,[2,34]),o($Ve,[2,51]),{9:217,10:8,11:9,12:10,13:11,14:12,15:$V0,17:$V1,20:$V2,34:$V3,36:$V4,39:219,45:25,46:218,50:$V5,52:$Vg1,53:255,54:$V6,71:19,72:$V7,73:$V8,74:$V9,77:$Va,79:$Vb},o($Ve,[2,35]),{39:256,41:[1,257],42:[1,258],52:$Vg1},{39:259,40:260,48:$Vf1,52:$Vg1},{18:[1,261]},{25:[1,262],30:[1,263],31:[1,264],32:[1,265]},{18:[1,266]},o($Vp1,[2,53]),o($Ve,[2,36]),{39:267,52:$Vg1},{39:268,52:$Vg1},o($Ve,[2,39]),{39:269,41:[1,270],42:[1,271],52:$Vg1},{25:[1,272],30:[1,273],31:[1,274],32:[1,275]},{26:[1,276]},{26:[1,277]},{26:[1,278]},{26:[1,279]},{25:[1,281],30:[1,282],31:[1,283],32:[1,284],35:280},o($Ve,[2,37]),o($Ve,[2,38]),o($Ve,[2,40]),{39:285,52:$Vg1},{39:286,52:$Vg1},{26:[1,287]},{26:[1,288]},{26:[1,289]},{26:[1,290]},{27:[1,291]},{27:[1,292]},{27:[1,293]},{27:[1,294]},o($Vi1,[2,22]),{26:[1,295]},{26:[1,296]},{26:[1,297]},{26:[1,298]},o($Ve,[2,41]),o($Ve,[2,42]),{27:[1,299]},{27:[1,300]},{27:[1,301]},{27:[1,302]},{9:217,10:8,11:9,12:10,13:11,14:12,15:$V0,17:$V1,20:$V2,28:303,34:$V3,36:$V4,39:219,45:25,46:218,50:$V5,52:$Vg1,53:236,54:$V6,71:19,72:$V7,73:$V8,74:$V9,77:$Va,79:$Vb},{9:217,10:8,11:9,12:10,13:11,14:12,15:$V0,17:$V1,20:$V2,28:304,34:$V3,36:$V4,39:219,45:25,46:218,50:$V5,52:$Vg1,53:236,54:$V6,71:19,72:$V7,73:$V8,74:$V9,77:$Va,79:$Vb},{9:217,10:8,11:9,12:10,13:11,14:12,15:$V0,17:$V1,20:$V2,28:305,34:$V3,36:$V4,39:219,45:25,46:218,50:$V5,52:$Vg1,53:236,54:$V6,71:19,72:$V7,73:$V8,74:$V9,77:$Va,79:$Vb},{9:217,10:8,11:9,12:10,13:11,14:12,15:$V0,17:$V1,20:$V2,28:306,34:$V3,36:$V4,39:219,45:25,46:218,50:$V5,52:$Vg1,53:236,54:$V6,71:19,72:$V7,73:$V8,74:$V9,77:$Va,79:$Vb},o($Vi1,[2,23]),o($Vi1,[2,24]),o($Vi1,[2,25]),o($Vi1,[2,26]),{9:217,10:8,11:9,12:10,13:11,14:12,15:$V0,17:$V1,20:$V2,28:307,34:$V3,36:$V4,39:219,45:25,46:218,50:$V5,52:$Vg1,53:236,54:$V6,71:19,72:$V7,73:$V8,74:$V9,77:$Va,79:$Vb},{9:217,10:8,11:9,12:10,13:11,14:12,15:$V0,17:$V1,20:$V2,28:308,34:$V3,36:$V4,39:219,45:25,46:218,50:$V5,52:$Vg1,53:236,54:$V6,71:19,72:$V7,73:$V8,74:$V9,77:$Va,79:$Vb},{9:217,10:8,11:9,12:10,13:11,14:12,15:$V0,17:$V1,20:$V2,28:309,34:$V3,36:$V4,39:219,45:25,46:218,50:$V5,52:$Vg1,53:236,54:$V6,71:19,72:$V7,73:$V8,74:$V9,77:$Va,79:$Vb},{9:217,10:8,11:9,12:10,13:11,14:12,15:$V0,17:$V1,20:$V2,28:310,34:$V3,36:$V4,39:219,45:25,46:218,50:$V5,52:$Vg1,53:236,54:$V6,71:19,72:$V7,73:$V8,74:$V9,77:$Va,79:$Vb},{6:$Vo1,29:[1,311]},{6:$Vo1,29:[1,312]},{6:$Vo1,29:[1,313]},{6:$Vo1,29:[1,314]},{6:$Vo1,29:[1,315]},{6:$Vo1,29:[1,316]},{6:$Vo1,29:[1,317]},{6:$Vo1,29:[1,318]},o($Ve,[2,16]),o($Ve,[2,17]),o($Ve,[2,18]),o($Ve,[2,19]),o($Ve,[2,12]),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15])],
defaultActions: {3:[2,2],27:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Acceso} = require("../xqueryAST/ExpresionesXpath/Acceso");
    const {Aritmetico, operacionAritmetica} = require("../xqueryAST/ExpresionesXpath/Aritmetico");
    const {Logica, operacionLogica} = require("../xqueryAST/ExpresionesXpath/Logica");
    const {Path} = require("../xqueryAST/ExpresionesXpath/Path");
    const {Primitivo, tipoPrimitivo} = require("../xqueryAST/ExpresionesXpath/Primitivo");
    const {Relacional, operacionRelacional} = require("../xqueryAST/ExpresionesXpath/Relacional");
    const {ClaseError} = require("../xmlAST/ClaseError");

    const {DecFunction} = require("../xqueryAST/ExpresionesXquery/DecFunction");
    const {For} = require("../xqueryAST/ExpresionesXquery/For");
    const {If} = require("../xqueryAST/ExpresionesXquery/If");
    const {Let} = require("../xqueryAST/ExpresionesXquery/Let");
    const {LlamadaFunc} = require("../xqueryAST/ExpresionesXquery/LlamadaFunc.tsx");
    const {MultiXpaths} = require("../xqueryAST/ExpresionesXquery/MultiXpaths");
    const {Return} = require("../xqueryAST/ExpresionesXquery/Return");
    const {XqueryPath} = require("../xqueryAST/ExpresionesXquery/XqueryPath");
    
    
    var listaErrores = [];
    var tmp="";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 74
break;
case 1:this.begin('string'); tmp=""; 
break;
case 2:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 3:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 4:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 5:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 6:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 7: tmp= tmp+yy_.yytext;   this.begin('string');
break;
case 8:
                    this.begin('INITIAL');
                    yy_.yytext= tmp;
                    tmp = "";
                    return 72;
                  
break;
case 9:this.begin('string'); tmp=""; 
break;
case 10:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 11:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 12:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 13:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 14:tmp=tmp+yy_.yytext; this.begin('string');
break;
case 15: tmp= tmp+yy_.yytext;   this.begin('string');
break;
case 16:
                    this.begin('INITIAL');
                    yy_.yytext= tmp;
                    tmp = "";
                    return 73;
                  
break;
case 17://comentario
break;
case 18:return 79
break;
case 19:return 77
break;
case 20:return 86
break;
case 21:return 85
break;
case 22:return 6
break;
case 23:return 81
break;
case 24:return 95
break;
case 25:return 97
break;
case 26:return 20
break;
case 27:return 22
break;
case 28:return 27
break;
case 29:return 29
break;
case 30:return 82
break;
case 31:return 58
break;
case 32:return 59
break;
case 33:return 60
break;
case 34:return 61
break;
case 35:return 63
break;
case 36:return 64
break;
case 37:return 66
break;
case 38:return 68
break;
case 39:return 65
break;
case 40:return 67
break;
case 41:return 70
break;
case 42:return 69
break;
case 43:return 62
break;
case 44:
break;
case 45:
break;
case 46:return 26;
break;
case 47:return 90;
break;
case 48:return 51;
break;
case 49:return 18;
break;
case 50:return ';';
break;
case 51:return 89;
break;
case 52:return 93;
break;
case 53:return 91;
break;
case 54:return 87;
break;
case 55:return 100;
break;
case 56:return 99;
break;
case 57:return 15;
break;
case 58:return 16;
break;
case 59:return 17;
break;
case 60:return 23;
break;
case 61:return 24;
break;
case 62:return 30;
break;
case 63:return 'double';
break;
case 64:return 31;
break;
case 65:return 25;
break;
case 66:return 32;
break;
case 67:return 57;
break;
case 68:return 55;
break;
case 69:return 54;
break;
case 70:return 41;
break;
case 71:return 42;
break;
case 72:return 49;
break;
case 73:return 48;
break;
case 74:return 47;
break;
case 75:return 44;
break;
case 76:return 37;
break;
case 77:return 36;
break;
case 78:return 52;
break;
case 79:return 34;
break;
case 80:return 50;
break;
case 81:return 19
break;
case 82:return 5
break;
case 83:console.log('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:(([0-9]+\.[0-9]+)|(\.[0-9]+)|([0-9]+)))/i,/^(?:["])/i,/^(?:[^"])/i,/^(?:[\\][n])/i,/^(?:[\\][t])/i,/^(?:[\\][r])/i,/^(?:[\\]["])/i,/^(?:[\\][\\])/i,/^(?:[\"])/i,/^(?:['])/i,/^(?:[^'])/i,/^(?:[\\][n])/i,/^(?:[\\][t])/i,/^(?:[\\][r])/i,/^(?:[\\]['])/i,/^(?:[\\][\\])/i,/^(?:[\'])/i,/^(?:['('][':'][^':']*[':']+([^'(:'][^':']*[':']+)*[')'])/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:@)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?: )/i,/^(?:\n)/i,/^(?:\?)/i,/^(?:::)/i,/^(?::=)/i,/^(?::)/i,/^(?:;)/i,/^(?:child\b)/i,/^(?:attribute\b)/i,/^(?:descendant\b)/i,/^(?:text\b)/i,/^(?:last\b)/i,/^(?:position\b)/i,/^(?:declare\b)/i,/^(?:function\b)/i,/^(?:local\b)/i,/^(?:as\b)/i,/^(?:xs\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:decimal\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:else\b)/i,/^(?:then\b)/i,/^(?:if\b)/i,/^(?:ascending\b)/i,/^(?:descending\b)/i,/^(?:by\b)/i,/^(?:order\b)/i,/^(?:where\b)/i,/^(?:at\b)/i,/^(?:in\b)/i,/^(?:for\b)/i,/^(?:return\b)/i,/^(?:\$)/i,/^(?:let\b)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"string":{"rules":[0,2,3,4,5,6,7,8,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"inclusive":true},"INITIAL":{"rules":[0,1,9,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xQueryGrammar;
exports.Parser = xQueryGrammar.Parser;
exports.parse = function () { return xQueryGrammar.parse.apply(xQueryGrammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}