/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaOptimizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[1,10],$V2=[1,11],$V3=[1,12],$V4=[1,13],$V5=[1,20],$V6=[10,26,27,28,29],$V7=[26,27,28,29,37],$V8=[1,25],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[31,32,33,34,35,40],$Vd=[5,37],$Ve=[12,14,22,23,40,49,56,57,58,59,60,66,67,68,69],$Vf=[23,30],$Vg=[1,61],$Vh=[1,58],$Vi=[1,56],$Vj=[1,57],$Vk=[1,64],$Vl=[1,65],$Vm=[1,66],$Vn=[31,32,33,34,35,38,42,43,51,53,62,64,65],$Vo=[1,87],$Vp=[1,86],$Vq=[1,91],$Vr=[1,90],$Vs=[1,88],$Vt=[12,14,22,23,40,56,57,58,59,60,66,67,68,69],$Vu=[23,49];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"CODIGO":4,"EOF":5,"LIST_LIBRERIAS":6,"DEFINICIONES":7,"METODOS":8,"LIBRERIAS":9,"#":10,"include":11,"<":12,"LIBRERIA":13,">":14,"stdio.h":15,"math.h":16,"DEFINICION":17,"TIPO_DATO":18,"ESTRUCTURAS":19,"[":20,"digito":21,"]":22,";":23,"PUNTEROS":24,"TEMPORALES":25,"int":26,"float":27,"double":28,"char":29,",":30,"temporal":31,"heap":32,"stack":33,"P":34,"H":35,"METODO":36,"void":37,"identificador":38,"(":39,")":40,"{":41,"return":42,"}":43,"INSTRUCCIONES":44,"INSTRUCCION":45,"ASIGNACION_TEMPORAL":46,"ASIGNACION_PUNTERO":47,"ACCESO_ESTRUCTURAS":48,"=":49,"VALOR":50,"etiqueta":51,":":52,"goto":53,"SENTENCIA_PRINT":54,"SENTENCIA_IF":55,"+":56,"-":57,"*":58,"/":59,"%":60,"decimal":61,"printf":62,"cadena":63,"print":64,"if":65,"<=":66,">=":67,"==":68,"!=":69,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"#",11:"include",12:"<",14:">",15:"stdio.h",16:"math.h",20:"[",21:"digito",22:"]",23:";",26:"int",27:"float",28:"double",29:"char",30:",",31:"temporal",32:"heap",33:"stack",34:"P",35:"H",37:"void",38:"identificador",39:"(",40:")",41:"{",42:"return",43:"}",49:"=",51:"etiqueta",52:":",53:"goto",56:"+",57:"-",58:"*",59:"/",60:"%",61:"decimal",62:"printf",63:"cadena",64:"print",65:"if",66:"<=",67:">=",68:"==",69:"!="},
productions_: [0,[3,2],[3,1],[4,3],[4,2],[6,2],[6,1],[9,5],[13,1],[13,1],[7,2],[7,1],[17,6],[17,3],[17,3],[18,1],[18,1],[18,1],[18,1],[25,3],[25,1],[19,1],[19,1],[24,1],[24,1],[8,2],[8,1],[36,8],[36,9],[36,6],[36,7],[44,2],[44,1],[45,2],[45,2],[45,4],[45,2],[45,3],[45,4],[45,1],[45,1],[46,5],[46,5],[46,5],[46,5],[46,5],[46,3],[46,3],[47,5],[47,5],[47,5],[47,5],[47,5],[47,3],[50,1],[50,1],[50,1],[50,1],[50,2],[50,2],[48,4],[48,7],[54,7],[54,10],[54,7],[54,10],[55,12],[55,12],[55,12],[55,12],[55,12],[55,12]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

                      salida = {
                        instruccion: `${$$[$0-1].instruccion}`,
                        reporte: optimizaciones
                      };
                      optimizaciones = [];
                      return salida;
                    
break;
case 2:

                      salida = {
                        instruccion: '',
                        reporte: optimizaciones
                      };
                      optimizaciones = [];
                      return salida;
                    
break;
case 3:

                                                this.$ = {
                                                  instruccion: `${$$[$0-2].instruccion}${$$[$0-1].instruccion}${$$[$0].instruccion}`,
                                                  valor: undefined,
                                                  tipo: 'CODIGO'
                                                };
                                              
break;
case 4:

                                                this.$ = {
                                                  instruccion: `${$$[$0-1].instruccion}${$$[$0].instruccion}`,
                                                  valor: undefined,
                                                  tipo: 'CODIGO'
                                                };
                                              
break;
case 5:

                                              this.$ = {
                                                instruccion: `${$$[$0-1].instruccion}${$$[$0].instruccion}`,
                                                valor: undefined,
                                                tipo: 'LIST_LIBRERIAS'
                                              };
                                            
break;
case 6:

                                              this.$ = {
                                                instruccion: `${$$[$0].instruccion}`,
                                                valor: undefined,
                                                tipo: 'LIST_LIBRERIAS'
                                              };
                                            
break;
case 7:

                                              this.$ = {
                                                instruccion: `#include <${$$[$0-1].instruccion}>\n\r`,
                                                valor: undefined,
                                                tipo: 'LIBRERIAS'
                                              };
                                            
break;
case 8: case 9:

                        this.$ = {
                          instruccion: `${$$[$0]}`,
                          valor: undefined,
                          tipo: 'LIBRERIA'
                        };
                      
break;
case 10:

                                            this.$ = {
                                              instruccion: `${$$[$0-1].instruccion}${$$[$0].instruccion}`,
                                              valor: undefined,
                                              tipo: 'DEFINICIONES'
                                            };
                                          
break;
case 11:

                                            this.$ = {
                                              instruccion: `${$$[$0].instruccion}`,
                                              valor: undefined,
                                              tipo: 'DEFINICIONES'
                                            };
                                          
break;
case 12:

                                                          this.$ = {
                                                            instruccion: `${$$[$0-5].instruccion} ${$$[$0-4].instruccion}[${$$[$0-2]}];\n\r`,
                                                            valor: undefined,
                                                            tipo: 'TIPO_DATO'
                                                          };
                                                        
break;
case 13: case 14:

                                                          this.$ = {
                                                            instruccion: `${$$[$0-2].instruccion} ${$$[$0-1].instruccion};\n\r`,
                                                            valor: undefined,
                                                            tipo: 'TIPO_DATO'
                                                          };
                                                        
break;
case 15: case 16: case 17: case 18:

                        this.$ = {
                          instruccion: `${$$[$0]}`,
                          valor: undefined,
                          tipo: 'TIPO_DATO'
                        };
                      
break;
case 19:

                                          this.$ = {
                                            instruccion: `${$$[$0-2].instruccion}, ${$$[$0]}`,
                                            valor: undefined,
                                            tipo: 'TEMPORALES'
                                          };
                                        
break;
case 20:

                                          this.$ = {
                                            instruccion: `${$$[$0]}`,
                                            valor: undefined,
                                            tipo: 'TEMPORALES'
                                          };
                                        
break;
case 21: case 22:

                        this.$ = {
                          instruccion: `${$$[$0]}`,
                          valor: undefined,
                          tipo: 'ESTRUCTURAS'
                        };
                      
break;
case 23: case 24:

                  this.$ = {
                    instruccion: `${$$[$0]}`,
                    valor: undefined,
                    tipo: 'PUNTEROS'
                  };
                
break;
case 25:

                            this.$ = {
                              instruccion: `${$$[$0-1].instruccion}${$$[$0].instruccion}`,
                              valor: undefined,
                              tipo: 'METODOS'
                            };
                          
break;
case 26:

                            this.$ = {
                              instruccion: `${$$[$0].instruccion}`,
                              valor: undefined,
                              tipo: 'METODOS'
                            };
                          
break;
case 27:

                                                                              this.$ = {
                                                                                instruccion: `void ${$$[$0-6]}()\{\n\rreturn;\n\r\}\n\r`,
                                                                                valor: undefined,
                                                                                tipo: 'INSTRUCCIONES'
                                                                              };
                                                                            
break;
case 28:

                                                                              this.$ = {
                                                                                instruccion: `void ${$$[$0-7]}()\{\n\r${$$[$0-3].instruccion}return;\n\r\}\n\r`,
                                                                                valor: undefined,
                                                                                tipo: 'INSTRUCCIONES'
                                                                              };
                                                                            
break;
case 29:

                                                                              this.$ = {
                                                                                instruccion: `void ${$$[$0-4]}()\{\n\r\}\n\r`,
                                                                                valor: undefined,
                                                                                tipo: 'INSTRUCCIONES'
                                                                              };
                                                                            
break;
case 30:

                                                                              this.$ = {
                                                                                instruccion: `void ${$$[$0-5]}()\{\n\r${$$[$0-1].instruccion}\}\n\r`,
                                                                                valor: undefined,
                                                                                tipo: 'INSTRUCCIONES'
                                                                              };
                                                                            
break;
case 31:

                                              this.$ = {
                                                instruccion: `${$$[$0-1].instruccion}${$$[$0].instruccion}`,
                                                valor: undefined,
                                                tipo: 'INSTRUCCIONES'
                                              };
                                            
break;
case 32:

                                              this.$ = {
                                                instruccion: `${$$[$0].instruccion}`,
                                                valor: undefined,
                                                tipo: 'INSTRUCCIONES'
                                              };
                                            
break;
case 33: case 34:

                                                      this.$ = {
                                                        instruccion: `${$$[$0-1].instruccion};\n\r`,
                                                        valor: undefined,
                                                        tipo: 'INSTRUCCION'
                                                      };
                                                    
break;
case 35:

                                                      this.$ = {
                                                        instruccion: `${$$[$0-3].instruccion} = ${$$[$0-1].instruccion};\n\r`,
                                                        valor: undefined,
                                                        tipo: 'INSTRUCCION'
                                                      };
                                                    
break;
case 36:

                                                      this.$ = {
                                                        instruccion: `${$$[$0-1]}:\n\r`,
                                                        valor: undefined,
                                                        tipo: 'INSTRUCCION'
                                                      };
                                                    
break;
case 37:

                                                      this.$ = {
                                                        instruccion: `${$$[$0-2]} ${$$[$0-1]};\n\r`,
                                                        valor: undefined,
                                                        tipo: 'INSTRUCCION'
                                                      };
                                                    
break;
case 38:

                                                      this.$ = {
                                                        instruccion: `${$$[$0-3]}();\n\r`,
                                                        valor: undefined,
                                                        tipo: 'INSTRUCCION'
                                                      };
                                                    
break;
case 39:

                                                      this.$ = {
                                                        instruccion: `${$$[$0].instruccion};\n\r`,
                                                        valor: undefined,
                                                        tipo: 'INSTRUCCION'
                                                      };
                                                    
break;
case 40:

                                                      this.$ = {
                                                        instruccion: `${$$[$0].instruccion}`,
                                                        valor: undefined,
                                                        tipo: 'INSTRUCCION'
                                                      };
                                                    
break;
case 41:

                                                            this.$ = {
                                                              instruccion: `${$$[$0-4]} = ${$$[$0-2].instruccion} + ${$$[$0].instruccion}`,
                                                              valor: undefined,
                                                              tipo: 'ASIGNACION_TEMPORAL'
                                                            };

                                                            if ($$[$0].tipo == 'CONSTANTE' && $$[$0].valor == 0) {
                                                              if ($$[$0-4] == $$[$0-2].instruccion) {
                                                                optimizaciones.push({regla:'REGLA 6', descripcion: this.$.instruccion,
                                                                  linea: this._$.first_line, columna: this._$.first_column});
                                                                this.$.instruccion = `// Se aplicó la REGLA 6 en '${$$[$0-4]} = ${$$[$0-2].instruccion} + ${$$[$0].instruccion}'`;
                                                              } else {
                                                                optimizaciones.push({regla:'REGLA 10', descripcion: this.$.instruccion,
                                                                  linea: this._$.first_line, columna: this._$.first_column});
                                                                this.$.instruccion = `// Se aplicó la REGLA 10 en '${$$[$0-4]} = ${$$[$0-2].instruccion} + ${$$[$0].instruccion}';\n\r`;
                                                                this.$.instruccion += `${$$[$0-4]} = ${$$[$0-2].instruccion}`;
                                                              }
                                                            }
                                                          
break;
case 42:

                                                            this.$ = {
                                                              instruccion: `${$$[$0-4]} = ${$$[$0-2].instruccion} - ${$$[$0].instruccion}`,
                                                              valor: undefined,
                                                              tipo: 'ASIGNACION_TEMPORAL'
                                                            };

                                                            if ($$[$0].tipo == 'CONSTANTE' && $$[$0].valor == 0) {
                                                              if ($$[$0-4] == $$[$0-2].instruccion) {
                                                                optimizaciones.push({regla:'REGLA 7', descripcion: this.$.instruccion,
                                                                  linea: this._$.first_line, columna: this._$.first_column});
                                                                this.$.instruccion = `// Se aplicó la REGLA 7 en '${$$[$0-4]} = ${$$[$0-2].instruccion} - ${$$[$0].instruccion}'`;
                                                              } else {
                                                                optimizaciones.push({regla:'REGLA 11', descripcion: this.$.instruccion,
                                                                  linea: this._$.first_line, columna: this._$.first_column});
                                                                this.$.instruccion = `// Se aplicó la REGLA 11 en '${$$[$0-4]} = ${$$[$0-2].instruccion} - ${$$[$0].instruccion}';\n\r`;
                                                                this.$.instruccion += `${$$[$0-4]} = ${$$[$0-2].instruccion}`;
                                                              }
                                                            }
                                                          
break;
case 43:

                                                            this.$ = {
                                                              instruccion: `${$$[$0-4]} = ${$$[$0-2].instruccion} * ${$$[$0].instruccion}`,
                                                              valor: undefined,
                                                              tipo: 'ASIGNACION_TEMPORAL'
                                                            };

                                                            if ($$[$0].tipo == 'CONSTANTE') {
                                                              if ($$[$0].valor == 1) {
                                                                if ($$[$0-4] == $$[$0-2].instruccion) {
                                                                  optimizaciones.push({regla:'REGLA 8', descripcion: this.$.instruccion,
                                                                    linea: this._$.first_line, columna: this._$.first_column});
                                                                  this.$.instruccion = `// Se aplicó la REGLA 8 en '${$$[$0-4]} = ${$$[$0-2].instruccion} * ${$$[$0].instruccion}'`;
                                                                } else {
                                                                  optimizaciones.push({regla:'REGLA 12', descripcion: this.$.instruccion,
                                                                    linea: this._$.first_line, columna: this._$.first_column});
                                                                  this.$.instruccion = `// Se aplicó la REGLA 12 en '${$$[$0-4]} = ${$$[$0-2].instruccion} * ${$$[$0].instruccion}';\n\r`;
                                                                  this.$.instruccion += `${$$[$0-4]} = ${$$[$0-2].instruccion}`;
                                                                }
                                                              } else if ($$[$0].valor == 2) {
                                                                optimizaciones.push({regla:'REGLA 14', descripcion: this.$.instruccion,
                                                                  linea: this._$.first_line, columna: this._$.first_column});
                                                                this.$.instruccion = `// Se aplicó la REGLA 14 en '${$$[$0-4]} = ${$$[$0-2].instruccion} * ${$$[$0].instruccion}';\n\r`;
                                                                this.$.instruccion += `${$$[$0-4]} = ${$$[$0-2].instruccion} +  ${$$[$0-2].instruccion}`;
                                                              } else if ($$[$0].valor == 0) {
                                                                optimizaciones.push({regla:'REGLA 15', descripcion: this.$.instruccion,
                                                                  linea: this._$.first_line, columna: this._$.first_column});
                                                                this.$.instruccion = `// Se aplicó la REGLA 15 en '${$$[$0-4]} = ${$$[$0-2].instruccion} * ${$$[$0].instruccion}';\n\r`;
                                                                this.$.instruccion += `${$$[$0-4]} = ${$$[$0].instruccion}`;
                                                              }
                                                            }
                                                          
break;
case 44:

                                                            this.$ = {
                                                              instruccion: `${$$[$0-4]} = ${$$[$0-2].instruccion} / ${$$[$0].instruccion}`,
                                                              valor: undefined,
                                                              tipo: 'ASIGNACION_TEMPORAL'
                                                            };

                                                            if ($$[$0].tipo == 'CONSTANTE' && $$[$0].valor == 1) {
                                                              if ($$[$0-4] == $$[$0-2].instruccion) {
                                                                optimizaciones.push({regla:'REGLA 9', descripcion: this.$.instruccion,
                                                                  linea: this._$.first_line, columna: this._$.first_column});
                                                                this.$.instruccion = `// Se aplicó la REGLA 9 en '${$$[$0-4]} = ${$$[$0-2].instruccion} / ${$$[$0].instruccion}'`;
                                                              } else {
                                                                optimizaciones.push({regla:'REGLA 13', descripcion: this.$.instruccion,
                                                                  linea: this._$.first_line, columna: this._$.first_column});
                                                                this.$.instruccion = `// Se aplicó la REGLA 13 en '${$$[$0-4]} = ${$$[$0-2].instruccion} / ${$$[$0].instruccion}';\n\r`;
                                                                this.$.instruccion += `${$$[$0-4]} = ${$$[$0-2].instruccion}`;
                                                              }
                                                            }

                                                            if ($$[$0-2].tipo == 'CONSTANTE' && $$[$0-2].valor == 0) {
                                                                optimizaciones.push({regla:'REGLA 16', descripcion: this.$.instruccion,
                                                                  linea: this._$.first_line, columna: this._$.first_column});
                                                                this.$.instruccion = `// Se aplicó la REGLA 16 en '${$$[$0-4]} = ${$$[$0-2].instruccion} / ${$$[$0].instruccion}';\n\r`;
                                                                this.$.instruccion += `${$$[$0-4]} = ${$$[$0-2].instruccion}`;
                                                            }
                                                          
break;
case 45:

                                                            this.$ = {
                                                              instruccion: `${$$[$0-4]} = ${$$[$0-2].instruccion} % ${$$[$0].instruccion}`,
                                                              valor: undefined,
                                                              tipo: 'ASIGNACION_TEMPORAL'
                                                            };
                                                          
break;
case 46: case 47:

                                                            this.$ = {
                                                              instruccion: `${$$[$0-2]} = ${$$[$0].instruccion}`,
                                                              valor: undefined,
                                                              tipo: 'ASIGNACION_TEMPORAL'
                                                            };
                                                          
break;
case 48:

                                                            this.$ = {
                                                              instruccion: `${$$[$0-4].instruccion} = ${$$[$0-2].instruccion} + ${$$[$0].instruccion}`,
                                                              valor: undefined,
                                                              tipo: 'ASIGNACION_PUNTERO'
                                                            };

                                                            if ($$[$0].tipo == 'CONSTANTE' && $$[$0].valor == 0) {
                                                              if ($$[$0-4].instruccion == $$[$0-2].instruccion) {
                                                                optimizaciones.push({regla:'REGLA 6', descripcion: this.$.instruccion,
                                                                  linea: this._$.first_line, columna: this._$.first_column});
                                                                this.$.instruccion = `// Se aplicó la REGLA 6 en '${$$[$0-4].instruccion} = ${$$[$0-2].instruccion} + ${$$[$0].instruccion}'`;
                                                              } else {
                                                                optimizaciones.push({regla:'REGLA 10', descripcion: this.$.instruccion,
                                                                  linea: this._$.first_line, columna: this._$.first_column});
                                                                this.$.instruccion = `// Se aplicó la REGLA 10 en '${$$[$0-4].instruccion} = ${$$[$0-2].instruccion} + ${$$[$0].instruccion}';\n\r`;
                                                                this.$.instruccion += `${$$[$0-4].instruccion} = ${$$[$0-2].instruccion}`;
                                                              }
                                                            }
                                                          
break;
case 49:

                                                            this.$ = {
                                                              instruccion: `${$$[$0-4].instruccion} = ${$$[$0-2].instruccion} - ${$$[$0].instruccion}`,
                                                              valor: undefined,
                                                              tipo: 'ASIGNACION_PUNTERO'
                                                            };

                                                            if ($$[$0].tipo == 'CONSTANTE' && $$[$0].valor == 0) {
                                                              if ($$[$0-4].instruccion == $$[$0-2].instruccion) {
                                                                optimizaciones.push({regla:'REGLA 7', descripcion: this.$.instruccion,
                                                                  linea: this._$.first_line, columna: this._$.first_column});
                                                                this.$.instruccion = `// Se aplicó la REGLA 7 en '${$$[$0-4].instruccion} = ${$$[$0-2].instruccion} - ${$$[$0].instruccion}'`;
                                                              } else {
                                                                optimizaciones.push({regla:'REGLA 11', descripcion: this.$.instruccion,
                                                                  linea: this._$.first_line, columna: this._$.first_column});
                                                                this.$.instruccion = `// Se aplicó la REGLA 11 en '${$$[$0-4].instruccion} = ${$$[$0-2].instruccion} - ${$$[$0].instruccion}';\n\r`;
                                                                this.$.instruccion += `${$$[$0-4].instruccion} = ${$$[$0-2].instruccion}`;
                                                              }
                                                            }
                                                          
break;
case 50:

                                                            this.$ = {
                                                              instruccion: `${$$[$0-4].instruccion} = ${$$[$0-2].instruccion} * ${$$[$0].instruccion}`,
                                                              valor: undefined,
                                                              tipo: 'ASIGNACION_PUNTERO'
                                                            };

                                                            if ($$[$0].tipo == 'CONSTANTE') {
                                                              if ($$[$0].valor == 1) {
                                                                if ($$[$0-4].instruccion == $$[$0-2].instruccion) {
                                                                  optimizaciones.push({regla:'REGLA 8', descripcion: this.$.instruccion,
                                                                    linea: this._$.first_line, columna: this._$.first_column});
                                                                  this.$.instruccion = `// Se aplicó la REGLA 8 en '${$$[$0-4].instruccion} = ${$$[$0-2].instruccion} * ${$$[$0].instruccion}'`;
                                                                } else {
                                                                  optimizaciones.push({regla:'REGLA 12', descripcion: this.$.instruccion,
                                                                    linea: this._$.first_line, columna: this._$.first_column});
                                                                  this.$.instruccion = `// Se aplicó la REGLA 12 en '${$$[$0-4].instruccion} = ${$$[$0-2].instruccion} * ${$$[$0].instruccion}';\n\r`;
                                                                  this.$.instruccion += `${$$[$0-4].instruccion} = ${$$[$0-2].instruccion}`;
                                                                }
                                                              } else if ($$[$0].valor == 2) {
                                                                optimizaciones.push({regla:'REGLA 14', descripcion: this.$.instruccion,
                                                                  linea: this._$.first_line, columna: this._$.first_column});
                                                                this.$.instruccion = `// Se aplicó la REGLA 14 en '${$$[$0-4].instruccion} = ${$$[$0-2].instruccion} * ${$$[$0].instruccion}';\n\r`;
                                                                this.$.instruccion = `${$$[$0-4].instruccion} = ${$$[$0-2].instruccion} +  ${$$[$0-2].instruccion}`;
                                                              } else if ($$[$0].valor == 0) {
                                                                optimizaciones.push({regla:'REGLA 15', descripcion: this.$.instruccion,
                                                                  linea: this._$.first_line, columna: this._$.first_column});
                                                                this.$.instruccion = `// Se aplicó la REGLA 15 en '${$$[$0-4].instruccion} = ${$$[$0-2].instruccion} * ${$$[$0].instruccion}';\n\r`;
                                                                this.$.instruccion += `${$$[$0-4].instruccion} = ${$$[$0].instruccion}`;
                                                              }
                                                            }
                                                          
break;
case 51:

                                                            this.$ = {
                                                              instruccion: `${$$[$0-4].instruccion} = ${$$[$0-2].instruccion} / ${$$[$0].instruccion}`,
                                                              valor: undefined,
                                                              tipo: 'ASIGNACION_PUNTERO'
                                                            };

                                                            if ($$[$0].tipo == 'CONSTANTE' && $$[$0].valor == 1) {
                                                              if ($$[$0-4].instruccion == $$[$0-2].instruccion) {
                                                                optimizaciones.push({regla:'REGLA 9', descripcion: this.$.instruccion,
                                                                  linea: this._$.first_line, columna: this._$.first_column});
                                                                this.$.instruccion = `// Se aplicó la REGLA 9 en '${$$[$0-4].instruccion} = ${$$[$0-2].instruccion} / ${$$[$0].instruccion}'`;
                                                              } else {
                                                                optimizaciones.push({regla:'REGLA 13', descripcion: this.$.instruccion,
                                                                  linea: this._$.first_line, columna: this._$.first_column});
                                                                this.$.instruccion = `// Se aplicó la REGLA 13 en '${$$[$0-4].instruccion} = ${$$[$0-2].instruccion} / ${$$[$0].instruccion}';\n\r`;
                                                                this.$.instruccion += `${$$[$0-4].instruccion} = ${$$[$0-2].instruccion}`;
                                                              }
                                                            }

                                                            if ($$[$0-2].tipo == 'CONSTANTE' && $$[$0-2].valor == 0) {
                                                                optimizaciones.push({regla:'REGLA 16', descripcion: this.$.instruccion,
                                                                  linea: this._$.first_line, columna: this._$.first_column});
                                                                this.$.instruccion = `// Se aplicó la REGLA 16 en '${$$[$0-4].instruccion} = ${$$[$0-2].instruccion} / ${$$[$0].instruccion}';\n\r`;
                                                                this.$.instruccion += `${$$[$0-4].instruccion} = ${$$[$0-2].instruccion}`;
                                                            }
                                                          
break;
case 52:

                                                            this.$ = {
                                                              instruccion: `${$$[$0-4].instruccion} = ${$$[$0-2].instruccion} % ${$$[$0].instruccion}`,
                                                              valor: undefined,
                                                              tipo: 'ASIGNACION_PUNTERO'
                                                            };
                                                          
break;
case 53:

                                                          this.$ = {
                                                            instruccion: `${$$[$0-2].instruccion} = ${$$[$0].instruccion}`,
                                                            valor: undefined,
                                                            tipo: 'ASIGNACION_PUNTERO'
                                                          };
                                                        
break;
case 54:

                                    this.$ = {
                                      instruccion: $$[$0],
                                      valor: Number($$[$0]),
                                      tipo: 'TEMPORAL'
                                    };
                                  
break;
case 55: case 56:

                                    this.$ = {
                                      instruccion: $$[$0],
                                      valor: Number($$[$0]),
                                      tipo: 'CONSTANTE'
                                    };
                                  
break;
case 57:

                                    this.$ = {
                                      instruccion: $$[$0].instruccion,
                                      valor: undefined,
                                      tipo: 'PUNTERO'
                                    };
                                  
break;
case 58:

                                    this.$ = {
                                      instruccion: `-${$$[$0].instruccion}`,
                                      valor: Number($$[$0].valor) * -1,
                                      tipo: 'CONSTANTE'
                                    };
                                  
break;
case 59:

                                    this.$ = {
                                      instruccion: `+${$$[$0].instruccion}`,
                                      valor: $$[$0].valor,
                                      tipo: 'CONSTANTE'
                                    };
                                  
break;
case 60:

                                                                    this.$ = {
                                                                      instruccion: `${$$[$0-3].instruccion}[${$$[$0-1].instruccion}]`,
                                                                      valor: undefined,
                                                                      tipo: 'ACCESO_ESTRUCTURAS'
                                                                    };
                                                                  
break;
case 61:

                                                                    this.$ = {
                                                                      instruccion: `${$$[$0-6].instruccion}[(${$$[$0-3].instruccion})${$$[$0-1].instruccion}]`,
                                                                      valor: undefined,
                                                                      tipo: 'ACCESO_ESTRUCTURAS'
                                                                    };
                                                                  
break;
case 62:

                                                                                  this.$ = {
                                                                                    instruccion: `printf("${$$[$0-4]}", ${$$[$0-2].instruccion})`,
                                                                                    valor: undefined,
                                                                                    tipo: 'SENTENCIA_PRINT'
                                                                                  };
                                                                                
break;
case 63:

                                                                                  this.$ = {
                                                                                    instruccion: `printf("${$$[$0-7]}", (${$$[$0-4].instruccion})${$$[$0-2].instruccion})`,
                                                                                    valor: undefined,
                                                                                    tipo: 'SENTENCIA_PRINT'
                                                                                  };
                                                                                
break;
case 64:

                                                                                  this.$ = {
                                                                                    instruccion: `print("${$$[$0-4]}", ${$$[$0-2].instruccion})`,
                                                                                    valor: undefined,
                                                                                    tipo: 'SENTENCIA_PRINT'
                                                                                  };
                                                                                
break;
case 65:

                                                                                  this.$ = {
                                                                                    instruccion: `print("${$$[$0-7]}", (${$$[$0-4].instruccion})${$$[$0-2].instruccion})`,
                                                                                    valor: undefined,
                                                                                    tipo: 'SENTENCIA_PRINT'
                                                                                  };
                                                                                
break;
case 66:

                                                                                              this.$ = {
                                                                                                instruccion: `if(${$$[$0-9].instruccion} < ${$$[$0-7].instruccion}) goto ${$$[$0-4]};\n\rgoto ${$$[$0-1]};\n\r`,
                                                                                                valor: undefined,
                                                                                                tipo: 'SENTENCIA_PRINT'
                                                                                              };
                                                                                            
break;
case 67:

                                                                                              this.$ = {
                                                                                                instruccion: `if(${$$[$0-9].instruccion} > ${$$[$0-7].instruccion}) goto ${$$[$0-4]};\n\rgoto ${$$[$0-1]};\n\r`,
                                                                                                valor: undefined,
                                                                                                tipo: 'SENTENCIA_PRINT'
                                                                                              };
                                                                                            
break;
case 68:

                                                                                              this.$ = {
                                                                                                instruccion: `if(${$$[$0-9].instruccion} <= ${$$[$0-7].instruccion}) goto ${$$[$0-4]};\n\rgoto ${$$[$0-1]};\n\r`,
                                                                                                valor: undefined,
                                                                                                tipo: 'SENTENCIA_PRINT'
                                                                                              };
                                                                                            
break;
case 69:

                                                                                              this.$ = {
                                                                                                instruccion: `if(${$$[$0-9].instruccion} >= ${$$[$0-7].instruccion}) goto ${$$[$0-4]};\n\rgoto ${$$[$0-1]};\n\r`,
                                                                                                valor: undefined,
                                                                                                tipo: 'SENTENCIA_PRINT'
                                                                                              };
                                                                                            
break;
case 70:

                                                                                              this.$ = {
                                                                                                instruccion: `if(${$$[$0-9].instruccion} == ${$$[$0-7].instruccion}) goto ${$$[$0-4]};\n\rgoto ${$$[$0-1]};\n\r`,
                                                                                                valor: undefined,
                                                                                                tipo: 'SENTENCIA_PRINT'
                                                                                              };

                                                                                              if ($$[$0-9].tipo == 'CONSTANTE' && $$[$0-7].tipo == 'CONSTANTE') {
                                                                                                if ($$[$0-9].valor == $$[$0-7].valor) {
                                                                                                  optimizaciones.push({regla:'REGLA 3', descripcion: this.$.instruccion,
                                                                                                    linea: this._$.first_line, columna: this._$.first_column});
                                                                                                  this.$.instruccion = `// Se aplicó la REGLA 3 en 'if(${$$[$0-9].instruccion} == ${$$[$0-7].instruccion}) goto ${$$[$0-4]}; goto ${$$[$0-1]};'\n\r`;
                                                                                                  this.$.instruccion += `if(${$$[$0-9].instruccion} == ${$$[$0-7].instruccion}) goto ${$$[$0-4]};\n\r`;
                                                                                                }

                                                                                                if ($$[$0-9].valor != $$[$0-7].valor) {
                                                                                                  optimizaciones.push({regla:'REGLA 4', descripcion: this.$.instruccion,
                                                                                                    linea: this._$.first_line, columna: this._$.first_column});
                                                                                                  this.$.instruccion = `// Se aplicó la REGLA 4 en 'if(${$$[$0-9].instruccion} == ${$$[$0-7].instruccion}) goto ${$$[$0-4]}; goto ${$$[$0-1]};'\n\r`;
                                                                                                  this.$.instruccion += `if(${$$[$0-9].instruccion} == ${$$[$0-7].instruccion}) goto ${$$[$0-1]};\n\r`;
                                                                                                }
                                                                                              }
                                                                                            
break;
case 71:

                                                                                              this.$ = {
                                                                                                instruccion: `if(${$$[$0-9].instruccion} != ${$$[$0-7].instruccion}) goto ${$$[$0-4]};\n\rgoto ${$$[$0-1]};\n\r`,
                                                                                                valor: undefined,
                                                                                                tipo: 'SENTENCIA_PRINT'
                                                                                              };

                                                                                              if ($$[$0-9].tipo == 'CONSTANTE' && $$[$0-7].tipo == 'CONSTANTE') {
                                                                                                if ($$[$0-9].valor != $$[$0-7].valor) {
                                                                                                  optimizaciones.push({regla:'REGLA 3', descripcion: this.$.instruccion,
                                                                                                    linea: this._$.first_line, columna: this._$.first_column});
                                                                                                  this.$.instruccion = `// Se aplicó la REGLA 3 en 'if(${$$[$0-9].instruccion} != ${$$[$0-7].instruccion}) goto ${$$[$0-4]}; goto ${$$[$0-1]};'\n\r`;
                                                                                                  this.$.instruccion += `if(${$$[$0-9].instruccion} != ${$$[$0-7].instruccion}) goto ${$$[$0-4]};\n\r`;
                                                                                                }

                                                                                                if ($$[$0-9].valor == $$[$0-7].valor) {
                                                                                                  optimizaciones.push({regla:'REGLA 4', descripcion: this.$.instruccion,
                                                                                                    linea: this._$.first_line, columna: this._$.first_column});
                                                                                                  this.$.instruccion = `// Se aplicó la REGLA 4 en 'if(${$$[$0-9].instruccion} != ${$$[$0-7].instruccion}) goto ${$$[$0-4]}; goto ${$$[$0-1]};'\n\r`;
                                                                                                  this.$.instruccion += `if(${$$[$0-9].instruccion} != ${$$[$0-7].instruccion}) goto ${$$[$0-1]};\n\r`;
                                                                                                }
                                                                                              }
                                                                                            
break;
}
},
table: [{3:1,4:2,5:[1,3],6:4,7:5,9:6,10:$V0,17:7,18:9,26:$V1,27:$V2,28:$V3,29:$V4},{1:[3]},{5:[1,14]},{1:[2,2]},{7:15,9:16,10:$V0,17:7,18:9,26:$V1,27:$V2,28:$V3,29:$V4},{8:17,17:18,18:9,26:$V1,27:$V2,28:$V3,29:$V4,36:19,37:$V5},o($V6,[2,6]),o($V7,[2,11]),{11:[1,21]},{19:22,24:23,25:24,31:[1,29],32:$V8,33:$V9,34:$Va,35:$Vb},o($Vc,[2,15]),o($Vc,[2,16]),o($Vc,[2,17]),o($Vc,[2,18]),{1:[2,1]},{8:30,17:18,18:9,26:$V1,27:$V2,28:$V3,29:$V4,36:19,37:$V5},o($V6,[2,5]),{5:[2,4],36:31,37:$V5},o($V7,[2,10]),o($Vd,[2,26]),{38:[1,32]},{12:[1,33]},{20:[1,34]},{23:[1,35]},{23:[1,36],30:[1,37]},{20:[2,21]},{20:[2,22]},o($Ve,[2,23]),o($Ve,[2,24]),o($Vf,[2,20]),{5:[2,3],36:31,37:$V5},o($Vd,[2,25]),{39:[1,38]},{13:39,15:[1,40],16:[1,41]},{21:[1,42]},o($V7,[2,13]),o($V7,[2,14]),{31:[1,43]},{40:[1,44]},{14:[1,45]},{14:[2,8]},{14:[2,9]},{22:[1,46]},o($Vf,[2,19]),{41:[1,47]},o($V6,[2,7]),{23:[1,48]},{19:63,24:62,31:$Vg,32:$V8,33:$V9,34:$Va,35:$Vb,38:$Vh,42:[1,49],43:[1,51],44:50,45:52,46:53,47:54,48:55,51:$Vi,53:$Vj,54:59,55:60,62:$Vk,64:$Vl,65:$Vm},o($V7,[2,12]),{23:[1,67]},{19:63,24:62,31:$Vg,32:$V8,33:$V9,34:$Va,35:$Vb,38:$Vh,42:[1,68],43:[1,69],45:70,46:53,47:54,48:55,51:$Vi,53:$Vj,54:59,55:60,62:$Vk,64:$Vl,65:$Vm},o($Vd,[2,29]),o($Vn,[2,32]),{23:[1,71]},{23:[1,72]},{49:[1,73]},{52:[1,74]},{51:[1,75]},{39:[1,76]},o($Vn,[2,39]),o($Vn,[2,40]),{49:[1,77]},{49:[1,78]},{20:[1,79]},{39:[1,80]},{39:[1,81]},{39:[1,82]},{43:[1,83]},{23:[1,84]},o($Vd,[2,30]),o($Vn,[2,31]),o($Vn,[2,33]),o($Vn,[2,34]),{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:85,56:$Vq,57:$Vr,61:$Vs},o($Vn,[2,36]),{23:[1,92]},{40:[1,93]},{19:63,21:$Vo,24:89,31:$Vp,32:$V8,33:$V9,34:$Va,35:$Vb,48:95,50:94,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:96,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,39:[1,98],50:97,56:$Vq,57:$Vr,61:$Vs},{63:[1,99]},{63:[1,100]},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:101,56:$Vq,57:$Vr,61:$Vs},o($Vd,[2,27]),{43:[1,102]},{23:[1,103]},o($Vt,[2,54]),o($Vt,[2,55]),o($Vt,[2,56]),o($Vt,[2,57]),{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:104,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:105,56:$Vq,57:$Vr,61:$Vs},o($Vn,[2,37]),{23:[1,106]},{23:[2,46],56:[1,107],57:[1,108],58:[1,109],59:[1,110],60:[1,111]},{23:[2,47]},{23:[2,53],56:[1,112],57:[1,113],58:[1,114],59:[1,115],60:[1,116]},{22:[1,117]},{18:118,26:$V1,27:$V2,28:$V3,29:$V4},{30:[1,119]},{30:[1,120]},{12:[1,121],14:[1,122],66:[1,123],67:[1,124],68:[1,125],69:[1,126]},o($Vd,[2,28]),o($Vn,[2,35]),o($Vt,[2,58]),o($Vt,[2,59]),o($Vn,[2,38]),{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:127,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:128,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:129,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:130,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:131,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:132,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:133,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:134,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:135,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:136,56:$Vq,57:$Vr,61:$Vs},o($Vu,[2,60]),{40:[1,137]},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,39:[1,139],50:138,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,39:[1,141],50:140,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:142,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:143,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:144,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:145,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:146,56:$Vq,57:$Vr,61:$Vs},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:147,56:$Vq,57:$Vr,61:$Vs},{23:[2,41]},{23:[2,42]},{23:[2,43]},{23:[2,44]},{23:[2,45]},{23:[2,48]},{23:[2,49]},{23:[2,50]},{23:[2,51]},{23:[2,52]},{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:148,56:$Vq,57:$Vr,61:$Vs},{40:[1,149]},{18:150,26:$V1,27:$V2,28:$V3,29:$V4},{40:[1,151]},{18:152,26:$V1,27:$V2,28:$V3,29:$V4},{40:[1,153]},{40:[1,154]},{40:[1,155]},{40:[1,156]},{40:[1,157]},{40:[1,158]},{22:[1,159]},{23:[1,160]},{40:[1,161]},{23:[1,162]},{40:[1,163]},{53:[1,164]},{53:[1,165]},{53:[1,166]},{53:[1,167]},{53:[1,168]},{53:[1,169]},o($Vu,[2,61]),o($Vn,[2,62]),{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:170,56:$Vq,57:$Vr,61:$Vs},o($Vn,[2,64]),{21:$Vo,24:89,31:$Vp,34:$Va,35:$Vb,50:171,56:$Vq,57:$Vr,61:$Vs},{51:[1,172]},{51:[1,173]},{51:[1,174]},{51:[1,175]},{51:[1,176]},{51:[1,177]},{40:[1,178]},{40:[1,179]},{23:[1,180]},{23:[1,181]},{23:[1,182]},{23:[1,183]},{23:[1,184]},{23:[1,185]},{23:[1,186]},{23:[1,187]},{53:[1,188]},{53:[1,189]},{53:[1,190]},{53:[1,191]},{53:[1,192]},{53:[1,193]},o($Vn,[2,63]),o($Vn,[2,65]),{51:[1,194]},{51:[1,195]},{51:[1,196]},{51:[1,197]},{51:[1,198]},{51:[1,199]},{23:[1,200]},{23:[1,201]},{23:[1,202]},{23:[1,203]},{23:[1,204]},{23:[1,205]},o($Vn,[2,66]),o($Vn,[2,67]),o($Vn,[2,68]),o($Vn,[2,69]),o($Vn,[2,70]),o($Vn,[2,71])],
defaultActions: {3:[2,2],14:[2,1],25:[2,21],26:[2,22],40:[2,8],41:[2,9],95:[2,47],127:[2,41],128:[2,42],129:[2,43],130:[2,44],131:[2,45],132:[2,48],133:[2,49],134:[2,50],135:[2,51],136:[2,52]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  var salida = {};
  var optimizaciones = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignorar espacios en blanco */
break;
case 1:/* ignorar comentarios */
break;
case 2:return 41
break;
case 3:return 43
break;
case 4:return 39
break;
case 5:return 40
break;
case 6:return 20
break;
case 7:return 22
break;
case 8:return '.'
break;
case 9:return 30
break;
case 10:return 52
break;
case 11:return 23
break;
case 12:return 10
break;
case 13:return 31
break;
case 14:return 51
break;
case 15:return 26
break;
case 16:return 27
break;
case 17:return 28
break;
case 18:return 29
break;
case 19:return 37
break;
case 20:return 33
break;
case 21:return 34          // TODO PUNTERO STACK
break;
case 22:return 32
break;
case 23:return 35          // TODO PUNTERO HEAP
break;
case 24:return 11
break;
case 25:return 15
break;
case 26:return 16
break;
case 27:return 53
break;
case 28:return 64
break;
case 29:return 62
break;
case 30:return 65
break;
case 31:return 42
break;
case 32:return 66
break;
case 33:return 12
break;
case 34:return 68
break;
case 35:return 67
break;
case 36:return 14
break;
case 37:return 69
break;
case 38:return '!'
break;
case 39:return 49
break;
case 40:return 56
break;
case 41:return 57
break;
case 42:return 58
break;
case 43:return 59
break;
case 44:return 60
break;
case 45:return 38
break;
case 46:return 61
break;
case 47:return 21
break;
case 48: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 63; 
break;
case 49:return 5;
break;
case 50:
                          console.error(`[C3D] Error Léxico: ${yy_.yytext} en la linea ${yy_.yylloc.first_line} y columna ${yy_.yylloc.first_column}`);
                        
break;
}
},
rules: [/^(?:\s+)/i,/^(?:((\/\*[\s\S]*?\*\/|\/\/.*)))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:#)/i,/^(?:(((t|T)[0-9]+)))/i,/^(?:(((l|L)[0-9]+)))/i,/^(?:int\b)/i,/^(?:float\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:void\b)/i,/^(?:stack\b)/i,/^(?:P\b)/i,/^(?:heap\b)/i,/^(?:H\b)/i,/^(?:include\b)/i,/^(?:stdio\.h\b)/i,/^(?:math\.h\b)/i,/^(?:goto\b)/i,/^(?:print\b)/i,/^(?:printf\b)/i,/^(?:if\b)/i,/^(?:return\b)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:==)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:((([a-zA-Z_])[a-zA-Z0-9_]*)))/i,/^(?:(((([0-9]+))\.(([0-9]+))+)))/i,/^(?:(([0-9]+)))/i,/^(?:(((((("))|(('))))((?:\\(((("))|(('))))|(?:(?!(((("))|(('))))).))*)(((("))|((')))))))/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaOptimizador;
exports.Parser = gramaticaOptimizador.Parser;
exports.parse = function () { return gramaticaOptimizador.parse.apply(gramaticaOptimizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}