/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var c = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,11],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[9,26,27,28,29,30],$V7=[5,26,27,28,29,30],$V8=[12,32],$V9=[20,25],$Va=[1,46],$Vb=[1,45],$Vc=[1,48],$Vd=[1,49],$Ve=[12,35,42,47,49],$Vf=[1,60],$Vg=[1,62],$Vh=[1,63],$Vi=[1,58],$Vj=[1,59],$Vk=[1,61],$Vl=[1,66],$Vm=[11,14,20,23,32,55,56,57,58,59,60,61,62,63],$Vn=[2,59],$Vo=[1,78],$Vp=[2,53],$Vq=[12,22,31,56,65,66];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"ARCHIVO":4,"EOF":5,"Librerias":6,"DECLARACIONES":7,"Libreria":8,"almohadita":9,"rinclude":10,"menor":11,"id":12,"pt":13,"mayor":14,"DECLARACION":15,"DECLARACIONVARIABLE":16,"DECLARACIONFUNCION":17,"TIPO":18,"LIDS":19,"ptcoma":20,"corizq":21,"entero":22,"corder":23,"LDECLARACIONVARIABLE":24,"coma":25,"rint":26,"rfloat":27,"rdouble":28,"rchar":29,"rvoid":30,"parizq":31,"parder":32,"BLOQUE":33,"llaveizq":34,"llaveder":35,"LINSTRUCCION":36,"INSTRUCCION":37,"ASIGNACION":38,"SI":39,"IRA":40,"ETIQUETA":41,"rreturn":42,"EXPBASICO":43,"igual":44,"EXPASIGNACION":45,"EXPARRAY":46,"rif":47,"EXPCOMPARACION":48,"rgoto":49,"dospuntos":50,"EXP":51,"EXPARITMETICO":52,"COMPARADOR":53,"ARITMETICO":54,"mas":55,"menos":56,"por":57,"div":58,"mod":59,"mayori":60,"menori":61,"igualdad":62,"diferente":63,"EXPBASICONUMERO":64,"cadena":65,"numero":66,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"almohadita",10:"rinclude",11:"menor",12:"id",13:"pt",14:"mayor",20:"ptcoma",21:"corizq",22:"entero",23:"corder",25:"coma",26:"rint",27:"rfloat",28:"rdouble",29:"rchar",30:"rvoid",31:"parizq",32:"parder",34:"llaveizq",35:"llaveder",42:"rreturn",44:"igual",47:"rif",49:"rgoto",50:"dospuntos",55:"mas",56:"menos",57:"por",58:"div",59:"mod",60:"mayori",61:"menori",62:"igualdad",63:"diferente",65:"cadena",66:"numero"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[8,7],[7,2],[7,1],[15,1],[15,1],[16,3],[16,6],[24,3],[24,1],[18,1],[18,1],[18,1],[18,1],[18,1],[17,5],[19,3],[19,1],[33,2],[33,3],[36,2],[36,1],[37,2],[37,2],[37,2],[37,1],[37,3],[38,3],[38,3],[39,5],[40,2],[41,2],[41,3],[45,1],[45,1],[48,3],[52,3],[54,1],[54,1],[54,1],[54,1],[54,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[51,1],[51,1],[46,4],[43,1],[43,2],[43,1],[64,1],[64,1],[64,1],[64,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=$$[$0-1]; return $$[$0-1]
break;
case 2:
 this.$={lib:$$[$0-1],ins:$$[$0],} 
break;
case 3:
 this.$={lib:'',ins:$$[$0] } 
break;
case 4:
this.$=$$[$0-1] + '\n' + $$[$0]
break;
case 5: case 9: case 10: case 15: case 16: case 17: case 18: case 19: case 30: case 38: case 39: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54:
this.$=$$[$0]
break;
case 6:
this.$=$$[$0-6]+$$[$0-5]+" "+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 7:
this.$=$$[$0-1]; this.$.push($$[$0])
break;
case 8: case 14: case 22:
this.$=[]; this.$.push($$[$0])
break;
case 11:
this.$=new cDeclaracion.DeclaracionVariable($$[$0-2], $$[$0-1])
break;
case 12:
this.$=new cDeclaracion.DeclaracionArray($$[$0-5],$$[$0-4],$$[$0-2]) 
break;
case 13:
this.$=$$[$0-2]; this.$.push($$[$0-1])
break;
case 20:
this.$=new cDeclaracion.DeclaracionFuncion($$[$0-4],$$[$0-3],[],$$[$0])
break;
case 21:
this.$=$$[$0-2]; this.$.push($$[$0])
break;
case 23:
this.$=new cBloque.Bloque([])
break;
case 24:
this.$=new cBloque.Bloque($$[$0-1])
break;
case 25:
this.$=$$[$0-1];this.$.push($$[$0])
break;
case 26:
this.$=[];this.$.push($$[$0])
break;
case 27: case 28: case 29:
this.$=$$[$0-1]
break;
case 31:
this.$=new cReturn.Return($$[$0-2],$$[$0-1])
break;
case 32:
this.$=new cAsignacion.Asignacion($$[$0-2], $$[$0])
break;
case 33:
this.$=new cAsignacion.AsignacionArray($$[$0-2], $$[$0])
break;
case 34:
this.$=new cSi.Si($$[$0-2],$$[$0], false)
break;
case 35:
this.$=new cSi.Ira($$[$0])
break;
case 36:
this.$=new cSi.Etiqueta($$[$0-1])
break;
case 37:
this.$=new cSi.Etiqueta($$[$0-2])
break;
case 40:
this.$=new cExpresion.Comparacion($$[$0-2], $$[$0-1], $$[$0])
break;
case 41:
this.$=new cExpresion.Aritmetico($$[$0-2],$$[$0-1],$$[$0])
break;
case 55:
this.$= new cExpresion.Arreglo($$[$0-3],$$[$0-1])
break;
case 56:
this.$= $$[$0]
break;
case 57:
this.$= new cExpresion.Unario($$[$0-1], $$[$0])
break;
case 58:
this.$= new cExpresion.Literal('char',$$[$0])
break;
case 59:
this.$= new cExpresion.Id($$[$0])
break;
case 60:
this.$= new cExpresion.Literal('float',$$[$0])
break;
case 61:
this.$= new cExpresion.Literal('int',$$[$0])
break;
case 62:
this.$= new cExpresion.Casteo($$[$0-2], $$[$0])
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:$V0,15:6,16:8,17:9,18:10,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5},{1:[3]},{5:[1,16]},{7:17,8:18,9:$V0,15:6,16:8,17:9,18:10,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5},{5:[2,3],15:19,16:8,17:9,18:10,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5},o($V6,[2,5]),o($V7,[2,8]),{10:[1,20]},o($V7,[2,9]),o($V7,[2,10]),{12:[1,22],19:21},o($V8,[2,15]),o($V8,[2,16]),o($V8,[2,17]),o($V8,[2,18]),o($V8,[2,19]),{1:[2,1]},{5:[2,2],15:19,16:8,17:9,18:10,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5},o($V6,[2,4]),o($V7,[2,7]),{11:[1,23]},{20:[1,24],25:[1,25]},o($V9,[2,22],{21:[1,26],31:[1,27]}),{12:[1,28]},o($V7,[2,11]),{12:[1,29]},{22:[1,30]},{32:[1,31]},{13:[1,32]},o($V9,[2,21]),{23:[1,33]},{33:34,34:[1,35]},{12:[1,36]},{20:[1,37]},o($V7,[2,20]),{12:$Va,35:[1,38],36:39,37:40,38:41,39:42,40:43,41:44,42:$Vb,46:47,47:$Vc,49:$Vd},{14:[1,50]},o($V7,[2,12]),o($V7,[2,23]),{12:$Va,35:[1,51],37:52,38:41,39:42,40:43,41:44,42:$Vb,46:47,47:$Vc,49:$Vd},o($Ve,[2,26]),{20:[1,53]},{20:[1,54]},{20:[1,55]},o($Ve,[2,30]),{12:$Vf,22:$Vg,31:$Vh,43:56,56:$Vi,64:57,65:$Vj,66:$Vk},{21:$Vl,44:[1,64],50:[1,65]},{44:[1,67]},{31:[1,68]},{12:[1,69]},o($V6,[2,6]),o($V7,[2,24]),o($Ve,[2,25]),o($Ve,[2,27]),o($Ve,[2,28]),o($Ve,[2,29]),{20:[1,70]},o($Vm,[2,56]),{12:$Vf,22:$Vg,31:$Vh,43:71,56:$Vi,64:57,65:$Vj,66:$Vk},o($Vm,[2,58]),o($Vm,$Vn),o($Vm,[2,60]),o($Vm,[2,61]),{18:72,26:$V1,27:$V2,28:$V3,29:$V4,30:$V5},{12:$Vo,22:$Vg,31:$Vh,43:76,45:73,46:77,51:74,52:75,56:$Vi,64:57,65:$Vj,66:$Vk},o($Ve,[2,36],{20:[1,79]}),{12:$Vf,22:$Vg,31:$Vh,64:80,66:$Vk},{12:$Vf,22:$Vg,31:$Vh,43:81,56:$Vi,64:57,65:$Vj,66:$Vk},{12:$Vf,22:$Vg,31:$Vh,43:83,48:82,56:$Vi,64:57,65:$Vj,66:$Vk},{20:[2,35]},o($Ve,[2,31]),o($Vm,[2,57]),{32:[1,84]},{20:[2,32]},{20:[2,38]},{20:[2,39]},{20:$Vp,54:85,55:[1,86],56:[1,87],57:[1,88],58:[1,89],59:[1,90]},o($Vm,[2,54]),o($Vm,$Vn,{21:$Vl}),o($Ve,[2,37]),{23:[1,91]},{20:[2,33]},{32:[1,92]},{11:[1,95],14:[1,94],53:93,60:[1,96],61:[1,97],62:[1,98],63:[1,99]},{12:$Vo,22:$Vg,31:$Vh,43:101,46:77,51:100,56:$Vi,64:57,65:$Vj,66:$Vk},{12:$Vf,22:$Vg,31:$Vh,43:102,56:$Vi,64:57,65:$Vj,66:$Vk},o($Vq,[2,42]),o($Vq,[2,43]),o($Vq,[2,44]),o($Vq,[2,45]),o($Vq,[2,46]),o([11,14,20,23,32,44,55,56,57,58,59,60,61,62,63],[2,55]),{40:103,49:$Vd},{12:$Vf,22:$Vg,31:$Vh,43:104,56:$Vi,64:57,65:$Vj,66:$Vk},o($Vq,[2,47]),o($Vq,[2,48]),o($Vq,[2,49]),o($Vq,[2,50]),o($Vq,[2,51]),o($Vq,[2,52]),o($Vm,[2,62]),o($Vm,$Vp),{20:[2,41]},{20:[2,34]},{32:[2,40]}],
defaultActions: {16:[2,1],69:[2,35],73:[2,32],74:[2,38],75:[2,39],81:[2,33],102:[2,41],103:[2,34],104:[2,40]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const cDeclaracion  = require('./AST/instrucciones/declaracion') 
    const cAsignacion   = require('./AST/instrucciones/asignacion') 
    const cSi           = require('./AST/instrucciones/si') 
    const cBloque       = require('./AST/instrucciones/bloque') 
    const cExpresion    = require('./AST/expresiones/expresion') 
    const cReturn       = require('./AST/instrucciones/return')
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:return "rinclude";
break;
case 5:return "rprintf";
break;
case 6:return "rreturn";
break;
case 7:return "rif"; 
break;
case 8:return "rgoto"; 
break;
case 9:return "rint";
break;
case 10:return "rdouble";
break;
case 11:return "rfloat"
break;
case 12:return "rchar";
break;
case 13:return "rvoid";
break;
case 14:return 13
break;
case 15:return 20;
break;
case 16:return 50;
break;
case 17:return 25;
break;
case 18:return 31;
break;
case 19:return 32;
break;
case 20:return 21;
break;
case 21:return 23;
break;
case 22:return 34;
break;
case 23:return 35;
break;
case 24:return 9;
break;
case 25:return 60;
break;
case 26:return 61;
break;
case 27:return 62;
break;
case 28:return 63;
break;
case 29:return 44;
break;
case 30:return 55;
break;
case 31:return 56;
break;
case 32:return 57;
break;
case 33:return 58;
break;
case 34:return 59;
break;
case 35:return 14;
break;
case 36:return 11;
break;
case 37:return 'and';
break;
case 38:return 'or';
break;
case 39:return 'not';
break;
case 40:return 12;
break;
case 41:return 66;
break;
case 42:return 22;
break;
case 43: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 65; 
break;
case 44: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 65; 
break;
case 45:return 5;
break;
case 46: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:include\b)/i,/^(?:printf\b)/i,/^(?:return\b)/i,/^(?:if\b)/i,/^(?:goto\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:float\b)/i,/^(?:char\b)/i,/^(?:void\b)/i,/^(?:\.)/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:#)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>)/i,/^(?:<)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:[a-zA-Z][a-zA-Z0-9_]*)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:"((\\")|[^\n\"])*")/i,/^(?:'((\\')|[^\n\'])*')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = c;
exports.Parser = c.Parser;
exports.parse = function () { return c.parse.apply(c, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}