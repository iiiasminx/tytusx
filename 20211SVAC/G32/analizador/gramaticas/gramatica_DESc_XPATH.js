/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica_DESC_XPATH = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,4],$V1=[1,16],$V2=[1,18],$V3=[1,19],$V4=[1,20],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[1,36],$Ve=[1,29],$Vf=[1,30],$Vg=[1,31],$Vh=[1,32],$Vi=[1,33],$Vj=[1,34],$Vk=[1,35],$Vl=[5,7,20,23,25,26,27,28,29,30,31,32,33,34,38,39,40,41,42,44,45,46],$Vm=[2,57],$Vn=[1,42],$Vo=[1,44],$Vp=[2,5,7,20,23,25,26,27,28,29,30,31,32,33,34,38,39,40,41,42,44,45,46,57],$Vq=[1,46],$Vr=[1,47],$Vs=[1,49],$Vt=[1,50],$Vu=[2,47],$Vv=[1,56],$Vw=[1,57],$Vx=[1,98],$Vy=[1,101],$Vz=[1,103],$VA=[1,102],$VB=[1,99],$VC=[1,100],$VD=[1,92],$VE=[1,91],$VF=[1,90],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[2,5,7,20,23,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,44,45,46,57,59,68,72,73,74,75,76,77,78,79,80,81],$VM=[20,33,48,49],$VN=[1,124],$VO=[1,126],$VP=[1,125],$VQ=[1,113],$VR=[1,112],$VS=[1,122],$VT=[1,111],$VU=[1,114],$VV=[1,115],$VW=[1,116],$VX=[1,117],$VY=[1,118],$VZ=[1,119],$V_=[1,120],$V$=[1,121],$V01=[1,123],$V11=[26,27,30,33,36,37,59,68,72,73,74,75,76,77,78,79,80,81],$V21=[1,134],$V31=[1,135],$V41=[20,26,27,30,31,32,34,38,39,40,41,42,44,45,46,48,49,53,54,57,67,70,71,82,83,84],$V51=[36,37,59,68,72,75,76,77,78,79,80,81],$V61=[33,36,37,59,68,72,73,74,75,76,77,78,79,80,81],$V71=[37,59,68,75,76,77,78,79,80,81],$V81=[37,59,68,79,80,81],$V91=[26,30,33,36,37,59,68,72,73,74,75,76,77,78,79,80,81],$Va1=[30,33,36,37,59,68,72,73,74,75,76,77,78,79,80,81];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"o":7,"RUTA":8,"FILTROS":9,"ATRIBUTO_DESCENDIENTES":10,"DESCENDIENTES_NODO":11,"DESCENDIENTE":12,"PADRE":13,"ATRIBUTO_NODO":14,"HIJOS":15,"RAIZ":16,"NODO_ACTUAL":17,"PADRE_NODO":18,"ANY":19,"id":20,"EJES":21,"OPC_EJES":22,"diagonal_diagonal_arroba_ast":23,"OPC":24,"diagonal_diagonal_ast":25,"doble_diagonal":26,"diagonal_dos_pts":27,"diagonal_arroba_ast":28,"diagonal_ast":29,"diagonal":30,"punto":31,"dos_pts":32,"mul":33,"ancestor":34,"bi_pto":35,"menos":36,"or":37,"self":38,"attribute":39,"child":40,"descendant":41,"following":42,"sibling":43,"namespace":44,"parent":45,"preceding":46,"NODO_FUNCION":47,"node":48,"text":49,"PASOS":50,"ANY_ATRIBUTO":51,"ATRIBUTO":52,"any_atributo":53,"arroba":54,"LISTA_PREDICADO":55,"PREDICADO":56,"cor_izq":57,"EXPR":58,"cor_der":59,"ATRIBUTO_PREDICADO":60,"ARITMETICAS":61,"RELACIONALES":62,"LOGICAS":63,"ORDEN":64,"VALORES":65,"PATH":66,"par_izq":67,"par_der":68,"OPC_PATH":69,"last":70,"position":71,"mas":72,"div":73,"mod":74,"mayor":75,"menor":76,"mayor_igual":77,"menor_igual":78,"igual":79,"diferencia":80,"and":81,"integer":82,"double":83,"string":84,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"o",20:"id",23:"diagonal_diagonal_arroba_ast",25:"diagonal_diagonal_ast",26:"doble_diagonal",27:"diagonal_dos_pts",28:"diagonal_arroba_ast",29:"diagonal_ast",30:"diagonal",31:"punto",32:"dos_pts",33:"mul",34:"ancestor",35:"bi_pto",36:"menos",37:"or",38:"self",39:"attribute",40:"child",41:"descendant",42:"following",43:"sibling",44:"namespace",45:"parent",46:"preceding",48:"node",49:"text",53:"any_atributo",54:"arroba",57:"cor_izq",59:"cor_der",67:"par_izq",68:"par_der",70:"last",71:"position",72:"mas",73:"div",74:"mod",75:"mayor",76:"menor",77:"mayor_igual",78:"menor_igual",79:"igual",80:"diferencia",81:"and",82:"integer",83:"double",84:"string"},
productions_: [0,[3,2],[3,1],[4,2],[4,0],[6,4],[6,2],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,2],[10,2],[11,2],[12,2],[13,2],[14,2],[15,2],[16,2],[17,1],[18,1],[19,1],[21,2],[21,6],[21,2],[21,2],[21,2],[21,5],[21,2],[21,4],[21,2],[21,2],[21,2],[21,4],[21,2],[22,1],[22,1],[22,1],[47,1],[47,1],[24,0],[24,1],[24,1],[50,1],[50,1],[51,1],[52,2],[9,1],[9,1],[55,2],[55,0],[56,3],[58,1],[58,1],[58,1],[58,1],[58,1],[58,1],[58,2],[58,1],[58,1],[58,1],[58,3],[66,3],[66,3],[66,3],[66,3],[66,2],[66,1],[69,1],[69,2],[64,3],[64,3],[61,3],[61,3],[61,3],[61,3],[61,3],[62,3],[62,3],[62,3],[62,3],[62,3],[62,3],[63,3],[63,3],[60,2],[60,1],[60,2],[65,1],[65,1],[65,1],[65,1],[65,1],[65,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
   return new NodoAST({label: 'S', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 2:
                                                                                                        
                tablaErrores.Errores.getInstance().push(new errorGram.Error({ tipo: 'Sem√°ntico', linea: `${yylineno + 1}`, descripcion: `No coinciden ${yytext}, se recupero del error con el simbolo /`}));
      
break;
case 3:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 4:
 this.$ = new NodoAST({label: 'INSTRUCCIONES', hijos: [], linea: yylineno}); 
break;
case 5:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [...$$[$0-3].hijos, $$[$0-2], ...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 6:
 this.$ = new NodoAST({label: 'INSTRUCCION', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17:
 this.$ = new NodoAST({label: 'RUTA', hijos: [$$[$0]], linea: yylineno}); 
break;
case 18:
 this.$ = new NodoAST({label: 'RUTA', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 19:
 this.$ = new NodoAST({label: 'ATRIBUTO_DESCENDIENTES', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 20: case 21:
 this.$ = new NodoAST({label: 'DESCENDIENTES_NODO', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 22:
 this.$ = new NodoAST({label: 'PADRE', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 23:
 this.$ = new NodoAST({label: 'ATRIBUTO_NODO', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 24:
 this.$ = new NodoAST({label: 'HIJOS', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 25:
 this.$ = new NodoAST({label: 'RAIZ', hijos: [$$[$0-1], ...$$[$0].hijos], linea: yylineno}); 
break;
case 26:
 this.$ = new NodoAST({label: 'NODO_ACTUAL', hijos: [$$[$0]], linea: yylineno}); 
break;
case 27:
 this.$ = new NodoAST({label: 'PADRE_NODO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 28:
 this.$ = new NodoAST({label: 'ANY', hijos: [$$[$0]], linea: yylineno}); 
break;
case 29: case 31: case 32: case 33: case 35: case 37: case 38: case 39: case 41:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 30:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-5], $$[$0-4]], linea: yylineno}); 
break;
case 34:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-4], $$[$0-3]], linea: yylineno}); 
break;
case 36: case 40:
 this.$ = new NodoAST({label: 'EJES', hijos: [$$[$0-3], $$[$0-2]], linea: yylineno}); 
break;
case 42: case 43: case 44:
 this.$ = new NodoAST({label: 'OPC_EJES', hijos: [$$[$0]], linea: yylineno}); 
break;
case 45: case 46:
 this.$ = new NodoAST({label: 'NODO_FUNCION', hijos: [$$[$0]], linea: yylineno}); 
break;
case 47:
 this.$ = new NodoAST({label: 'OPC', hijos: [], linea: yylineno}); 
break;
case 48: case 49:
 this.$ = new NodoAST({label: 'OPC', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 50: case 51:
 this.$ = new NodoAST({label: 'PASOS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 52:
 this.$ = new NodoAST({label: 'ANY_ATRIBUTO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 53:
 this.$ = new NodoAST({label: 'ATRIBUTO', hijos: [$$[$0-1], $$[$0]], linea: yylineno}); 
break;
case 54:
 this.$ = new NodoAST({label: 'FILTROS', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 55:
                                                                                                        
                    tablaErrores.Errores.getInstance().push(new errorGram.Error({ tipo: 'Sem√°ntico', linea: `${yylineno + 1}`, descripcion: `No coinciden ${yytext}, se recupero del error con el simbolo [`}));
                
break;
case 56:
 this.$ = new NodoAST({label: 'LISTA_PREDICADO', hijos: [...$$[$0-1].hijos, ...$$[$0].hijos], linea: yylineno}); 
break;
case 57:
 this.$ = new NodoAST({label: 'LISTA_PREDICADO', hijos: [], linea: yylineno}); 
break;
case 58:
 this.$ = new NodoAST({label: 'PREDICADO', hijos: [$$[$0-2], ...$$[$0-1].hijos, $$[$0]], linea: yylineno}); 
break;
case 59: case 60: case 61: case 62: case 63: case 64: case 66: case 67: case 68:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0]], linea: yylineno}); 
break;
case 65:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 69:
 this.$ = new NodoAST({label: 'EXPR', hijos: [$$[$0-2],...$$[$0-1].hijos,$$[$0]], linea: yylineno}); 
break;
case 70: case 71:
 this.$ = new NodoAST({label: 'PATH', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 72: case 73:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0-2],...$$[$0-1].hijos,...$$[$0].hijos], linea: yylineno}); 
break;
case 74:
 this.$ = new NodoAST({label: 'PATH', hijos: [...$$[$0-1].hijos,$$[$0],$$[$01]], linea: yylineno}); 
break;
case 75:
 this.$ = new NodoAST({label: 'PATH', hijos: [$$[$0]], linea: yylineno}); 
break;
case 76:
 this.$ = new NodoAST({label: 'OPC_PATH', hijos: [$$[$0]], linea: yylineno}); 
break;
case 77:
 this.$ = new NodoAST({label: 'OPC_PATH', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 78: case 79:
 this.$ = new NodoAST({label: 'ORDEN', hijos: [$$[$0-2],$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 80: case 81: case 82: case 83: case 84:
 this.$ = new NodoAST({label: 'ARITMETICAS', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 85: case 86: case 87: case 88: case 89: case 90:
 this.$ = new NodoAST({label: 'RELACIONALES', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 91: case 92:
 this.$ = new NodoAST({label: 'LOGICAS', hijos: [...$$[$0-2].hijos,$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 93:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0-1],...$$[$0].hijos], linea: yylineno}); 
break;
case 94:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0]], linea: yylineno}); 
break;
case 95:
 this.$ = new NodoAST({label: 'ATRIBUTO_PREDICADO', hijos: [$$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 96:
 this.$ = new NodoAST({label: 'integer', hijos: [$$[$0]], linea: yylineno}); 
break;
case 97:
 this.$ = new NodoAST({label: 'double', hijos: [$$[$0]], linea: yylineno}); 
break;
case 98:
 this.$ = new NodoAST({label: 'string', hijos: [$$[$0]], linea: yylineno}); 
break;
case 99:
 this.$ = new NodoAST({label: 'id', hijos: [$$[$0]], linea: yylineno}); 
break;
case 100:
 this.$ = new NodoAST({label: 'punto', hijos: [$$[$0]], linea: yylineno}); 
break;
case 101:
 this.$ = new NodoAST({label: 'dos_pts', hijos: [$$[$0]], linea: yylineno}); 
break;
}
},
table: [{2:[1,3],3:1,4:2,5:$V0,6:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:17,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk},{1:[3]},{5:[1,37]},{1:[2,2]},{4:38,5:$V0,6:4,7:[1,39],8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:17,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk},o($Vl,$Vm,{9:40,55:41,56:43,2:$Vn,57:$Vo}),o($Vp,[2,7]),o($Vp,[2,8]),o($Vp,[2,9]),o($Vp,[2,10]),o($Vp,[2,11]),o($Vp,[2,12]),o($Vp,[2,13]),o($Vp,[2,14]),o($Vp,[2,15]),o($Vp,[2,16]),o($Vp,[2,17]),{20:$Vq,22:45,33:$Vr,47:48,48:$Vs,49:$Vt},o($Vp,$Vu,{24:51,47:52,50:53,51:54,52:55,48:$Vs,49:$Vt,53:$Vv,54:$Vw}),o($Vp,$Vu,{47:52,50:53,51:54,52:55,24:58,48:$Vs,49:$Vt,53:$Vv,54:$Vw}),o($Vp,$Vu,{47:52,50:53,51:54,52:55,24:59,48:$Vs,49:$Vt,53:$Vv,54:$Vw}),o($Vp,$Vu,{47:52,50:53,51:54,52:55,24:60,48:$Vs,49:$Vt,53:$Vv,54:$Vw}),o($Vp,$Vu,{47:52,50:53,51:54,52:55,24:61,48:$Vs,49:$Vt,53:$Vv,54:$Vw}),o($Vp,$Vu,{47:52,50:53,51:54,52:55,24:62,48:$Vs,49:$Vt,53:$Vv,54:$Vw}),o($Vp,$Vu,{47:52,50:53,51:54,52:55,24:63,48:$Vs,49:$Vt,53:$Vv,54:$Vw}),o($Vp,[2,26]),o($Vp,[2,27]),o($Vp,[2,28]),{35:[1,64],36:[1,65]},{35:[1,66]},{35:[1,67]},{35:[1,68],36:[1,69]},{35:[1,70],36:[1,71]},{35:[1,72]},{35:[1,73]},{35:[1,74],36:[1,75]},{35:[1,76]},{1:[2,1]},{5:[2,3]},{8:77,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,21:17,23:$V2,25:$V3,26:$V4,27:$V5,28:$V6,29:$V7,30:$V8,31:$V9,32:$Va,33:$Vb,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk},o($Vl,[2,6]),o($Vl,[2,54]),o($Vl,[2,55]),o($Vl,$Vm,{56:43,55:78,57:$Vo}),{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:79,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},o($Vp,[2,18]),o($VL,[2,42]),o($VL,[2,43]),o($VL,[2,44]),o($VL,[2,45]),o($VL,[2,46]),o($Vp,[2,19]),o($VL,[2,48]),o($VL,[2,49]),o($VL,[2,50]),o($VL,[2,51]),o($VL,[2,52]),{20:[1,104]},o($Vp,[2,20]),o($Vp,[2,21]),o($Vp,[2,22]),o($Vp,[2,23]),o($Vp,[2,24]),o($Vp,[2,25]),o($VM,[2,29]),{37:[1,105]},o($VM,[2,31]),o($VM,[2,32]),o($VM,[2,33]),{37:[1,106]},o($VM,[2,35]),{43:[1,107]},o($VM,[2,37]),o($VM,[2,38]),o($VM,[2,39]),{43:[1,108]},o($VM,[2,41]),o($Vl,$Vm,{55:41,56:43,9:109,2:$Vn,57:$Vo}),o($Vl,[2,56]),{26:$VN,27:$VO,30:$VP,33:$VQ,36:$VR,37:$VS,59:[1,110],72:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01},o($V11,[2,59]),o($V11,[2,60]),o($V11,[2,61]),o($V11,[2,62]),o($V11,[2,63]),o($V11,[2,64]),{20:$Vq,22:127,33:$Vr,47:48,48:$Vs,49:$Vt},o($V11,[2,66]),o($V11,[2,67]),o($V11,[2,68]),{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:128,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},o($V11,$Vu,{47:52,50:53,51:54,52:55,24:129,20:[1,130],48:$Vs,49:$Vt,53:$Vv,54:$Vw}),o($V11,[2,94]),{67:[1,131]},{67:[1,132]},o($V11,[2,96]),o($V11,[2,97]),o($V11,[2,98]),o($V11,[2,99]),o($V11,[2,100]),o($V11,[2,101]),{20:$V21,54:$V31,69:133},{20:$V21,54:$V31,69:136},o($V11,[2,75]),o($VL,[2,53]),{36:[1,137]},{38:[1,138]},{35:[1,139]},{35:[1,140]},o($Vl,[2,5]),o([5,7,20,23,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,44,45,46,57,59,68,72,73,74,75,76,77,78,79,80,81],[2,58]),{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:141,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:142,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:143,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:144,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:145,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:146,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:147,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:148,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:149,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:150,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:151,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:152,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:153,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:154,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:155,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},o($V11,[2,74]),o($V11,[2,65]),{26:$VN,27:$VO,30:$VP,33:$VQ,36:$VR,37:$VS,68:[1,156],72:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01},o($V11,[2,93]),o($V11,[2,95]),{68:[1,157]},{68:[1,158]},{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:159,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},o($V41,[2,76]),{20:[1,160]},{20:$Vx,21:86,26:$Vy,27:$Vz,30:$VA,31:$VB,32:$VC,34:$Vc,38:$Vd,39:$Ve,40:$Vf,41:$Vg,42:$Vh,44:$Vi,45:$Vj,46:$Vk,47:89,48:$Vs,49:$Vt,53:$VD,54:$VE,56:88,57:$Vo,58:161,60:80,61:81,62:82,63:83,64:84,65:85,66:87,67:$VF,70:$VG,71:$VH,82:$VI,83:$VJ,84:$VK},{38:[1,162]},{35:[1,163]},o($VM,[2,36]),o($VM,[2,40]),o($V51,[2,80],{26:$VN,27:$VO,30:$VP,33:$VQ,73:$VU,74:$VV}),o($V51,[2,81],{26:$VN,27:$VO,30:$VP,33:$VQ,73:$VU,74:$VV}),o($V61,[2,82],{26:$VN,27:$VO,30:$VP}),o($V61,[2,83],{26:$VN,27:$VO,30:$VP}),o($V61,[2,84],{26:$VN,27:$VO,30:$VP}),o($V71,[2,85],{26:$VN,27:$VO,30:$VP,33:$VQ,36:$VR,72:$VT,73:$VU,74:$VV}),o($V71,[2,86],{26:$VN,27:$VO,30:$VP,33:$VQ,36:$VR,72:$VT,73:$VU,74:$VV}),o($V71,[2,87],{26:$VN,27:$VO,30:$VP,33:$VQ,36:$VR,72:$VT,73:$VU,74:$VV}),o($V71,[2,88],{26:$VN,27:$VO,30:$VP,33:$VQ,36:$VR,72:$VT,73:$VU,74:$VV}),o($V81,[2,89],{26:$VN,27:$VO,30:$VP,33:$VQ,36:$VR,72:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ}),o($V81,[2,90],{26:$VN,27:$VO,30:$VP,33:$VQ,36:$VR,72:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ}),o([37,59,68],[2,91],{26:$VN,27:$VO,30:$VP,33:$VQ,36:$VR,72:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$,81:$V01}),o([37,59,68,81],[2,92],{26:$VN,27:$VO,30:$VP,33:$VQ,36:$VR,72:$VT,73:$VU,74:$VV,75:$VW,76:$VX,77:$VY,78:$VZ,79:$V_,80:$V$}),o($V91,[2,70],{27:$VO}),o($Va1,[2,71],{26:$VN,27:$VO}),o($V11,[2,69]),o($V11,[2,78]),o($V11,[2,79]),o($V91,[2,72],{27:$VO}),o($V41,[2,77]),o($Va1,[2,73],{26:$VN,27:$VO}),{35:[1,164]},o($VM,[2,34]),o($VM,[2,30])],
defaultActions: {3:[2,2],37:[2,1],38:[2,3]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { NodoAST }= require('../arbol/nodoAST');
    const errorGram = require("../arbol/error");
    const tablaErrores = require("../arbol/errores");
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 70;
break;
case 1:return 71;
break;
case 2:return 48;
break;
case 3:return 49;
break;
case 4:return 'comment';
break;
case 5:return 34;
break;
case 6:return 39;
break;
case 7:return 40;
break;
case 8:return 41;
break;
case 9:return 42;
break;
case 10:return 44;
break;
case 11:return 45;
break;
case 12:return 46;
break;
case 13:return 43;
break;
case 14:return 38;
break;
case 15:return 7;
break;
case 16:return 72;
break;
case 17:return 36;
break;
case 18:return 33;
break;
case 19:return 73;
break;
case 20:return 79;
break;
case 21:return 80;
break;
case 22:return 78;
break;
case 23:return 77;
break;
case 24:return 76;
break;
case 25:return 75;
break;
case 26:return 37;
break;
case 27:return 81;
break;
case 28:return 74;
break;
case 29:return 57;
break;
case 30:return 59;
break;
case 31:return 67;
break;
case 32:return 68;
break;
case 33:return 83;
break;
case 34:return 82;
break;
case 35:return 84;
break;
case 36:return 84;
break;
case 37:return 20;
break;
case 38:return 32;
break;
case 39:return 23;
break;
case 40:return 25;
break;
case 41:return 26;
break;
case 42:return 27;
break;
case 43:return 28;
break;
case 44:return 29;
break;
case 45:return 30;
break;
case 46:return 31;
break;
case 47:return 35;
break;
case 48:return 53;
break;
case 49:return 54;    
break;
case 50:
  const er = new errorGram.Error({ tipo: 'l√©xico', linea: `${yy_.yylineno + 1}`, descripcion: `El lexema "${yy_.yytext}" en la columna: ${yy_.yylloc.first_column + 1} no es v√°lido.` });
  tablaErrores.Errores.getInstance().push(er);

break;
case 51:return 5;
break;
}
},
rules: [/^(?:last\b)/,/^(?:position\b)/,/^(?:node\(\))/,/^(?:text\(\))/,/^(?:comment\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:sibling\b)/,/^(?:self\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:div\b)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/,/^(?:[0-9]+)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:[a-zA-Z√±√ë√°√©√≠√≥√∫√Å√â√ç√ì√ö0-9]+)/,/^(?:[.][.])/,/^(?:["/"]["/"]["@"]["*"])/,/^(?:["/"]["/"]["*"])/,/^(?:["/"]["/"])/,/^(?:["/"]["."]["."])/,/^(?:["/"]["@"]["*"])/,/^(?:["/"]["*"])/,/^(?:\/)/,/^(?:\.)/,/^(?:[":"][":"])/,/^(?:["@"]["*"])/,/^(?:@)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica_DESC_XPATH;
exports.Parser = gramatica_DESC_XPATH.Parser;
exports.parse = function () { return gramatica_DESC_XPATH.parse.apply(gramatica_DESC_XPATH, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}