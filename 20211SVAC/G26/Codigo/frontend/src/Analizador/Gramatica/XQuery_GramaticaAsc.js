"use strict";
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XQuery_GramaticaAsc = (function () {
    var o = function (k, v, o, l) { for (o = o || {}, l = k.length; l--; o[k[l]] = v)
        ; return o; }, $V0 = [1, 9], $V1 = [1, 10], $V2 = [1, 11], $V3 = [1, 12], $V4 = [29, 33, 36, 42, 56], $V5 = [1, 24], $V6 = [1, 23], $V7 = [1, 32], $V8 = [1, 28], $V9 = [1, 29], $Va = [1, 30], $Vb = [1, 31], $Vc = [1, 33], $Vd = [1, 40], $Ve = [19, 29, 33, 36, 42, 56], $Vf = [2, 72], $Vg = [1, 62], $Vh = [1, 87], $Vi = [1, 90], $Vj = [1, 82], $Vk = [1, 81], $Vl = [1, 83], $Vm = [1, 84], $Vn = [1, 85], $Vo = [1, 86], $Vp = [1, 94], $Vq = [1, 93], $Vr = [1, 91], $Vs = [1, 92], $Vt = [19, 29, 33, 36, 42, 56, 73], $Vu = [1, 101], $Vv = [1, 104], $Vw = [1, 106], $Vx = [1, 105], $Vy = [5, 15, 19, 29, 33, 36, 37, 42, 50, 56, 62, 73, 78, 82, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119], $Vz = [1, 113], $VA = [1, 116], $VB = [1, 117], $VC = [1, 118], $VD = [1, 119], $VE = [1, 120], $VF = [1, 121], $VG = [1, 122], $VH = [1, 123], $VI = [1, 124], $VJ = [1, 125], $VK = [1, 126], $VL = [1, 127], $VM = [1, 128], $VN = [1, 151], $VO = [1, 143], $VP = [1, 144], $VQ = [1, 145], $VR = [1, 146], $VS = [1, 147], $VT = [1, 148], $VU = [1, 149], $VV = [1, 150], $VW = [1, 152], $VX = [1, 153], $VY = [1, 154], $VZ = [1, 155], $V_ = [1, 156], $V$ = [1, 157], $V01 = [1, 158], $V11 = [1, 159], $V21 = [1, 160], $V31 = [1, 161], $V41 = [15, 29, 33, 36, 37, 42, 56, 78, 82, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119], $V51 = [5, 15, 19, 29, 31, 33, 36, 37, 42, 50, 56, 62, 73, 78, 82, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119], $V61 = [2, 105], $V71 = [1, 178], $V81 = [5, 15, 19, 29, 33, 36, 37, 42, 50, 56, 62, 78, 82, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119], $V91 = [1, 208], $Va1 = [15, 19], $Vb1 = [2, 44], $Vc1 = [1, 233], $Vd1 = [15, 29, 33, 36, 37, 42, 56, 78, 103, 104, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119], $Ve1 = [15, 29, 33, 36, 37, 42, 56, 78, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119], $Vf1 = [1, 274], $Vg1 = [1, 277], $Vh1 = [1, 275], $Vi1 = [1, 276], $Vj1 = [1, 297], $Vk1 = [1, 298], $Vl1 = [1, 299], $Vm1 = [5, 15, 19], $Vn1 = [1, 314], $Vo1 = [1, 319], $Vp1 = [1, 315], $Vq1 = [5, 15, 50, 62];
    var parser = { trace: function trace() { },
        yy: {},
        symbols_: { "error": 2, "START": 3, "DEFINICIONXQUERY": 4, "EOF": 5, "FLWOR": 6, "USERFUNCTION": 7, "declare": 8, "function": 9, "PREFIX": 10, "dospuntos": 11, "identifier": 12, "parA": 13, "PARAMETROS": 14, "parC": 15, "as": 16, "DATATYPE": 17, "LISTAPARAM": 18, "coma": 19, "PARAM": 20, "decimal": 21, "string": 22, "boolean": 23, "local": 24, "LISTAOP": 25, "RETURNTYPE": 26, "LISTAOPCIONALES": 27, "OPCIONAL": 28, "where": 29, "dolar": 30, "diag": 31, "EXPRESION": 32, "order": 33, "by": 34, "LISTASORT": 35, "let": 36, "igual": 37, "LISTACONSULTAS": 38, "IntegerLiteral": 39, "to": 40, "LISTAENTEROS": 41, "for": 42, "LISTADECLARACIONES": 43, "DECLARACIONFOR": 44, "in": 45, "at": 46, "LISTAVARIABLECALL": 47, "VARIABLECALL": 48, "llaveA": 49, "llaveC": 50, "LISTANODOS": 51, "TEXTCONTENT": 52, "TEXT": 53, "content": 54, "DoubleLiteral": 55, "return": 56, "FUNCIONXQUERY": 57, "IFDEF": 58, "if": 59, "then": 60, "TIPOIF": 61, "else": 62, "CONDICION": 63, "DECRETURN": 64, "LISTAATRIBUTOS": 65, "ATRIBUTOS": 66, "ATRIBUTO": 67, "asig": 68, "cadena": 69, "cadena2": 70, "SORT": 71, "CONSULTA": 72, "andSelect": 73, "MASTIPOS": 74, "NODO": 75, "TIPONODO": 76, "corA": 77, "corC": 78, "AXES": 79, "attr": 80, "PREDICATE": 81, "asterisco": 82, "dot": 83, "FUNCIONES": 84, "ancestor": 85, "NODETEST": 86, "ancestorSelf": 87, "attribute": 88, "child": 89, "descendant": 90, "descendantSelf": 91, "following": 92, "followingSib": 93, "namespace": 94, "parent": 95, "preced": 96, "precedSib": 97, "self": 98, "textFunc": 99, "nodeFunc": 100, "PRIMITIVA": 101, "OPERACION": 102, "mas": 103, "menos": 104, "div": 105, "lte": 106, "lt": 107, "gte": 108, "gt": 109, "nequal": 110, "or": 111, "and": 112, "mod": 113, "reserv_eq": 114, "reserv_ne": 115, "reserv_lt": 116, "reserv_le": 117, "reserv_gt": 118, "reserv_ge": 119, "data": 120, "upper-case": 121, "substring": 122, "lower-case": 123, "number": 124, "lastFunc": 125, "positionFunc": 126, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 8: "declare", 9: "function", 11: "dospuntos", 12: "identifier", 13: "parA", 15: "parC", 16: "as", 19: "coma", 21: "decimal", 22: "string", 23: "boolean", 24: "local", 29: "where", 30: "dolar", 31: "diag", 33: "order", 34: "by", 36: "let", 37: "igual", 39: "IntegerLiteral", 40: "to", 42: "for", 45: "in", 46: "at", 49: "llaveA", 50: "llaveC", 54: "content", 55: "DoubleLiteral", 56: "return", 59: "if", 60: "then", 62: "else", 68: "asig", 69: "cadena", 70: "cadena2", 73: "andSelect", 77: "corA", 78: "corC", 80: "attr", 82: "asterisco", 83: "dot", 85: "ancestor", 87: "ancestorSelf", 88: "attribute", 89: "child", 90: "descendant", 91: "descendantSelf", 92: "following", 93: "followingSib", 94: "namespace", 95: "parent", 96: "preced", 97: "precedSib", 98: "self", 99: "textFunc", 100: "nodeFunc", 103: "mas", 104: "menos", 105: "div", 106: "lte", 107: "lt", 108: "gte", 109: "gt", 110: "nequal", 111: "or", 112: "and", 113: "mod", 114: "reserv_eq", 115: "reserv_ne", 116: "reserv_lt", 117: "reserv_le", 118: "reserv_gt", 119: "reserv_ge", 120: "data", 121: "upper-case", 122: "substring", 123: "lower-case", 124: "number", 125: "lastFunc", 126: "positionFunc" },
        productions_: [0, [3, 2], [4, 1], [4, 1], [7, 10], [14, 1], [14, 0], [18, 3], [18, 1], [20, 3], [17, 1], [17, 1], [17, 1], [10, 1], [6, 2], [25, 1], [25, 0], [27, 2], [27, 1], [28, 5], [28, 6], [28, 3], [28, 6], [28, 10], [28, 8], [28, 2], [43, 3], [43, 1], [44, 4], [44, 8], [44, 6], [44, 7], [44, 1], [47, 2], [47, 1], [48, 3], [48, 5], [52, 2], [52, 1], [53, 1], [53, 1], [53, 1], [53, 1], [41, 3], [41, 1], [26, 4], [26, 2], [26, 2], [58, 11], [58, 12], [61, 3], [61, 3], [61, 1], [61, 2], [63, 1], [64, 1], [64, 3], [65, 1], [65, 0], [66, 2], [66, 1], [67, 3], [67, 3], [35, 3], [35, 1], [71, 3], [38, 3], [38, 1], [72, 2], [72, 2], [72, 1], [51, 2], [51, 0], [75, 2], [75, 3], [75, 2], [75, 3], [76, 1], [76, 4], [76, 1], [76, 1], [74, 3], [74, 3], [74, 2], [74, 3], [74, 2], [74, 1], [79, 4], [79, 4], [79, 4], [79, 4], [79, 4], [79, 4], [79, 4], [79, 4], [79, 4], [79, 4], [79, 4], [79, 4], [79, 4], [86, 2], [86, 2], [86, 2], [86, 2], [81, 3], [81, 0], [32, 1], [32, 1], [102, 3], [102, 3], [102, 3], [102, 3], [102, 3], [102, 3], [102, 3], [102, 3], [102, 3], [102, 3], [102, 3], [102, 3], [102, 3], [102, 3], [102, 3], [102, 3], [102, 3], [102, 3], [102, 3], [102, 3], [101, 1], [101, 1], [101, 1], [101, 1], [101, 2], [101, 2], [101, 1], [101, 2], [101, 1], [101, 1], [57, 6], [57, 6], [57, 10], [57, 6], [57, 6], [57, 6], [57, 4], [57, 4], [57, 8], [57, 4], [57, 4], [57, 4], [84, 1], [84, 1], [84, 1], [84, 1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */
            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    this.$ = $$[$0 - 1];
                    return this.$;
                    break;
                case 2:
                case 3:
                case 5:
                case 10:
                case 11:
                case 12:
                case 13:
                case 15:
                case 38:
                case 52:
                case 54:
                case 57:
                case 70:
                case 152:
                    this.$ = $$[$0];
                    break;
                case 4:
                    this.$ = $$[$0 - 9];
                    break;
                case 6:
                    this.$ = "";
                    break;
                case 7:
                    $$[$0 - 2].push($$[$0 - 2]);
                    this.$ = $$[$0 - 2];
                    break;
                case 8:
                case 44:
                case 60:
                case 64:
                    this.$ = [$$[$0]];
                    break;
                case 9:
                    this.$ = $$[$0 - 2];
                    break;
                case 14:
                    this.$ = new Flwor($$[$0 - 1], $$[$0], _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    break;
                case 16:
                case 58:
                case 105:
                    this.$ = [];
                    break;
                case 17:
                case 33:
                case 59:
                    $$[$0 - 1].push($$[$0]);
                    this.$ = $$[$0 - 1];
                    break;
                case 18:
                case 34:
                    this.$ = [$$[$0]];
                    break;
                case 19:
                    this.$ = new Where($$[$0 - 2], $$[$0], true, _$[$0 - 4].first_line, _$[$0 - 4].first_column);
                    break;
                case 20:
                    this.$ = new Where($$[$0 - 3], $$[$0], false, _$[$0 - 5].first_line, _$[$0 - 5].first_column);
                    break;
                case 21:
                    this.$ = new OrderBy($$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 22:
                    this.$ = new Let($$[$0 - 3], $$[$0], _$[$0 - 5].first_line, _$[$0 - 5].first_column);
                    break;
                case 23:
                    this.$ = new Let($$[$0 - 7], null, _$[$0 - 9].first_line, _$[$0 - 9].first_column, +$$[$0 - 3], +$$[$0 - 1]);
                    break;
                case 24:
                    this.$ = new Let($$[$0 - 5], null, _$[$0 - 7].first_line, _$[$0 - 7].first_column, undefined, undefined, $$[$0 - 1]);
                    break;
                case 25:
                    this.$ = new For($$[$0], _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    break;
                case 26:
                    $$[$0 - 2].push($$[$0 - 1]);
                    this.$ = $$[$0 - 2];
                    break;
                case 27:
                    this.$ = [$$[$0]];
                    break;
                case 28:
                    this.$ = new DeclaracionFor(TipoFor.NORMAL, $$[$0 - 2], $$[$0], _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                    break;
                case 29:
                    this.$ = new DeclaracionFor(TipoFor.ITERATIVO, $$[$0 - 6], null, _$[$0 - 7].first_line, _$[$0 - 7].first_column, undefined, +$$[$0 - 3], +$$[$0 - 1]);
                    break;
                case 30:
                    this.$ = new DeclaracionFor(TipoFor.ITERATIVO, $$[$0 - 4], null, _$[$0 - 5].first_line, _$[$0 - 5].first_column, undefined, undefined, undefined, $$[$0 - 1]);
                    break;
                case 31:
                    this.$ = new DeclaracionFor(TipoFor.AT, $$[$0 - 5], $$[$0], _$[$0 - 6].first_line, _$[$0 - 6].first_column, $$[$0 - 2]);
                    break;
                case 32:
                    this.$ = null;
                    break;
                case 35:
                    this.$ = new VarCall(undefined, undefined, $$[$0 - 1], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 36:
                    this.$ = new VarCall($$[$0 - 2], $$[$0 - 1], undefined, _$[$0 - 4].first_line, _$[$0 - 4].first_column);
                    break;
                case 37:
                    $$[$0 - 1] = $$[$0 - 1] + " " + $$[$0];
                    this.$ = $$[$0 - 1];
                    break;
                case 39:
                case 40:
                    this.$ = $$[$0].toString().replaceAll("\"", "");
                    break;
                case 41:
                case 42:
                    this.$ = $$[$0].toString().replaceAll("\"", "");
                    break;
                case 43:
                case 63:
                    $$[$0 - 2].push($$[$0]);
                    this.$ = $$[$0 - 2];
                    break;
                case 45:
                    this.$ = new Return(TipoReturn.NORMAL, $$[$0 - 1], $$[$0], undefined, undefined, undefined, _$[$0 - 3].first_line, _$[$0 - 3].first_column);
                    break;
                case 46:
                    this.$ = new Return(TipoReturn.FUNCIONXQUERY, undefined, undefined, undefined, undefined, $$[$0], _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    break;
                case 47:
                    this.$ = new Return(TipoReturn.IFTHENELSE, undefined, undefined, undefined, $$[$0], undefined, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    break;
                case 48:
                    this.$ = new IfThenElse($$[$0 - 7], $$[$0 - 5], $$[$0 - 2], $$[$0], true, _$[$0 - 10].first_line, _$[$0 - 10].first_column);
                    break;
                case 49:
                    this.$ = new IfThenElse($$[$0 - 8], $$[$0 - 5], $$[$0 - 2], $$[$0], false, _$[$0 - 11].first_line, _$[$0 - 11].first_column);
                    break;
                case 50:
                    this.$ = $$[$0 - 1];
                    break;
                case 51:
                case 104:
                    this.$ = $$[$0 - 1];
                    break;
                case 53:
                    this.$ = new CondicionIf(undefined, undefined, undefined, undefined, true, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    break;
                case 55:
                    this.$ = new CondicionIf(undefined, undefined, undefined, $$[$0], false, _$[$0].first_line, _$[$0].first_column);
                    break;
                case 56:
                    this.$ = new CondicionIf($$[$0 - 1], $$[$0], undefined, undefined, false, _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 61:
                case 62:
                    this.$ = new Atributo($$[$0 - 2].toString().replaceAll("\"", ""), $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 65:
                    this.$ = new Sort($$[$0 - 1], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 66:
                    this.$ = [new Consulta($$[$0 - 2], _$[$0 - 2].first_line, _$[$0 - 2].first_column)];
                    this.$ = this.$.concat($$[$0]);
                    break;
                case 67:
                    this.$ = [new Consulta($$[$0], _$[$0].first_line, _$[$0].first_column)];
                    break;
                case 68:
                    this.$ = [new Nodo($$[$0 - 1], TipoNodo.IDENTIFIER, _$[$0 - 1].first_line, _$[$0 - 1].first_column)];
                    if ($$[$0].length > 0) {
                        this.$ = this.$.concat($$[$0]);
                    }
                    break;
                case 69:
                    this.$ = [$$[$0 - 1]];
                    if ($$[$0].length > 0) {
                        this.$ = this.$.concat($$[$0]);
                    }
                    break;
                case 71:
                    this.$ = [$$[$0 - 1]];
                    this.$ = this.$.concat($$[$0]);
                    break;
                case 72:
                    this.$ = [];
                    break;
                case 73:
                    $$[$0].fromRoot = true;
                    this.$ = $$[$0];
                    break;
                case 74:
                    $$[$0].fromRoot = false;
                    this.$ = $$[$0];
                    break;
                case 75:
                    console.log('Entra a error sintactico de one diag');
                    errores.default.agregarError('sintactico', 'Token inesperado \'' + yytext + '\'', _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    this.$ = new Nodo($$[$0], TipoNodo.NODOERROR, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    break;
                case 76:
                    console.log('Entra a error sintactico de two diags');
                    errores.default.agregarError('sintactico', 'Token inesperado \'' + yytext + '\'', _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    this.$ = new Nodo($$[$0], TipoNodo.NODOERROR, _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 77:
                    this.$ = new Nodo($$[$0], TipoNodo.IDENTIFIER, _$[$0].first_line, _$[$0].first_column);
                    break;
                case 78:
                    this.$ = new Nodo($$[$0 - 3], TipoNodo.IDENTIFIER, _$[$0 - 3].first_line, _$[$0 - 3].first_column, new Predicate($$[$0 - 1], _$[$0 - 1].first_line, _$[$0 - 1].first_column));
                    break;
                case 79:
                case 80:
                case 106:
                case 150:
                case 151:
                case 153:
                    this.$ = $$[$0];
                    break;
                case 81:
                case 82:
                    this.$ = new Nodo($$[$0 - 1], TipoNodo.ATRIBUTO, _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 83:
                    this.$ = new Nodo($$[$0 - 1], TipoNodo.DOT, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    break;
                case 84:
                    this.$ = new Nodo($$[$0 - 2] + $$[$0 - 1], TipoNodo.DOTDOT, _$[$0 - 2].first_line, _$[$0 - 2].first_column);
                    break;
                case 85:
                    this.$ = new Nodo($$[$0 - 1], TipoNodo.ASTERISCO, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    break;
                case 86:
                    this.$ = new Nodo($$[$0], TipoNodo.FUNCION, _$[$0].first_line, _$[$0].first_column);
                    break;
                case 87:
                    this.$ = new Nodo($$[$0 - 3], TipoNodo.AXIS, _$[$0 - 3].first_line, _$[$0 - 3].first_column, undefined, TipoAxis.ANCESTOR, $$[$0 - 1]);
                    break;
                case 88:
                    this.$ = new Nodo($$[$0 - 3], TipoNodo.AXIS, _$[$0 - 3].first_line, _$[$0 - 3].first_column, undefined, TipoAxis.ANCESTORORSELF, $$[$0 - 1]);
                    break;
                case 89:
                    this.$ = new Nodo($$[$0 - 3], TipoNodo.AXIS, _$[$0 - 3].first_line, _$[$0 - 3].first_column, undefined, TipoAxis.ATTRIBUTE, $$[$0 - 1]);
                    break;
                case 90:
                    this.$ = new Nodo($$[$0 - 3], TipoNodo.AXIS, _$[$0 - 3].first_line, _$[$0 - 3].first_column, undefined, TipoAxis.CHILD, $$[$0 - 1]);
                    break;
                case 91:
                    this.$ = new Nodo($$[$0 - 3], TipoNodo.AXIS, _$[$0 - 3].first_line, _$[$0 - 3].first_column, undefined, TipoAxis.DESCENDANT, $$[$0 - 1]);
                    break;
                case 92:
                    this.$ = new Nodo($$[$0 - 3], TipoNodo.AXIS, _$[$0 - 3].first_line, _$[$0 - 3].first_column, undefined, TipoAxis.DESCENDANTORSELF, $$[$0 - 1]);
                    break;
                case 93:
                    this.$ = new Nodo($$[$0 - 3], TipoNodo.AXIS, _$[$0 - 3].first_line, _$[$0 - 3].first_column, undefined, TipoAxis.FOLLOWING, $$[$0 - 1]);
                    break;
                case 94:
                    this.$ = new Nodo($$[$0 - 3], TipoNodo.AXIS, _$[$0 - 3].first_line, _$[$0 - 3].first_column, undefined, TipoAxis.FOLLOWINGSIBLING, $$[$0 - 1]);
                    break;
                case 95:
                    this.$ = new Nodo($$[$0 - 3], TipoNodo.AXIS, _$[$0 - 3].first_line, _$[$0 - 3].first_column, undefined, TipoAxis.NAMESPACE, $$[$0 - 1]);
                    break;
                case 96:
                    this.$ = new Nodo($$[$0 - 3], TipoNodo.AXIS, _$[$0 - 3].first_line, _$[$0 - 3].first_column, undefined, TipoAxis.PARENT, $$[$0 - 1]);
                    break;
                case 97:
                    this.$ = new Nodo($$[$0 - 3], TipoNodo.AXIS, _$[$0 - 3].first_line, _$[$0 - 3].first_column, undefined, TipoAxis.PRECEDING, $$[$0 - 1]);
                    break;
                case 98:
                    this.$ = new Nodo($$[$0 - 3], TipoNodo.AXIS, _$[$0 - 3].first_line, _$[$0 - 3].first_column, undefined, TipoAxis.PRECEDINGSIBLING, $$[$0 - 1]);
                    break;
                case 99:
                    this.$ = new Nodo($$[$0 - 3], TipoNodo.AXIS, _$[$0 - 3].first_line, _$[$0 - 3].first_column, undefined, TipoAxis.SELF, $$[$0 - 1]);
                    break;
                case 100:
                    if ($$[$0] instanceof Predicate) {
                        this.$ = new Nodo($$[$0 - 1], TipoNodo.IDENTIFIER, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    }
                    else {
                        this.$ = new Nodo($$[$0 - 1], TipoNodo.IDENTIFIER, _$[$0 - 1].first_line, _$[$0 - 1].first_column, $$[$0]);
                    }
                    break;
                case 101:
                case 102:
                    if ($$[$0] instanceof Predicate) {
                        this.$ = new Nodo($$[$0 - 1], TipoNodo.FUNCION, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    }
                    else {
                        this.$ = new Nodo($$[$0 - 1], TipoNodo.FUNCION, _$[$0 - 1].first_line, _$[$0 - 1].first_column, $$[$0]);
                    }
                    break;
                case 103:
                    if ($$[$0] instanceof Predicate) {
                        this.$ = new Nodo($$[$0 - 1], TipoNodo.ASTERISCO, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    }
                    else {
                        this.$ = new Nodo($$[$0 - 1], TipoNodo.ASTERISCO, _$[$0 - 1].first_line, _$[$0 - 1].first_column, $$[$0]);
                    }
                    break;
                case 107:
                    this.$ = $$[$0];
                    break;
                case 108:
                    this.$ = new Operacion(TipoOperacion.MULTIPLICACION, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 109:
                    this.$ = new Operacion(TipoOperacion.SUMA, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 110:
                    this.$ = new Operacion(TipoOperacion.RESTA, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 111:
                    this.$ = new Operacion(TipoOperacion.DIVISION, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 112:
                    this.$ = new Operacion(TipoOperacion.MENORIGUALQUE, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 113:
                    this.$ = new Operacion(TipoOperacion.MENORQUE, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 114:
                    this.$ = new Operacion(TipoOperacion.MAYORIGUALQUE, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 115:
                    this.$ = new Operacion(TipoOperacion.MAYORQUE, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 116:
                    this.$ = new Operacion(TipoOperacion.IGUAL, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 117:
                    this.$ = new Operacion(TipoOperacion.DIFERENTEQUE, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 118:
                    this.$ = new Operacion(TipoOperacion.OR, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 119:
                    this.$ = new Operacion(TipoOperacion.AND, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 120:
                    this.$ = new Operacion(TipoOperacion.MOD, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 121:
                    this.$ = new Operacion(TipoOperacion.XQEQ, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 122:
                    this.$ = new Operacion(TipoOperacion.XQNE, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 123:
                    this.$ = new Operacion(TipoOperacion.XQLT, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 124:
                    this.$ = new Operacion(TipoOperacion.XQLE, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 125:
                    this.$ = new Operacion(TipoOperacion.XQGT, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 126:
                    this.$ = new Operacion(TipoOperacion.XQGE, $$[$0 - 2], $$[$0], _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 127:
                    this.$ = new Operacion(TipoOperacion.PAR, $$[$0 - 1], null, _$[$0 - 2].first_line, _$[$0 - 2].first_column, true);
                    break;
                case 128:
                    this.$ = new Primitiva($$[$0], TipoPrim.DOUBLE, _$[$0].first_line, _$[$0].first_column, true);
                    break;
                case 129:
                    this.$ = new Primitiva($$[$0], TipoPrim.INTEGER, _$[$0].first_line, _$[$0].first_column, true);
                    break;
                case 130:
                case 131:
                    this.$ = new Primitiva($$[$0], TipoPrim.CADENA, _$[$0].first_line, _$[$0].first_column, true);
                    break;
                case 132:
                case 133:
                    this.$ = new Primitiva($$[$0], TipoPrim.ATRIBUTO, _$[$0 - 1].first_line, _$[$0 - 1].first_column, true);
                    break;
                case 134:
                    this.$ = new Primitiva($$[$0], TipoPrim.DOT, _$[$0].first_line, _$[$0].first_column, true);
                    break;
                case 135:
                    if ($$[$0].length > 0) {
                        this.$ = [new Nodo($$[$0 - 1], TipoNodo.IDENTIFIER, _$[$0 - 1].first_line, _$[$0 - 1].first_column)];
                        this.$ = this.$.concat($$[$0]);
                        this.$ = new Primitiva(this.$, TipoPrim.CONSULTA, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    }
                    else {
                        this.$ = new Primitiva($$[$0 - 1], TipoPrim.IDENTIFIER, _$[$0 - 1].first_line, _$[$0 - 1].first_column);
                    }
                    break;
                case 136:
                    this.$ = new Primitiva($$[$0], TipoPrim.FUNCION, _$[$0].first_line, _$[$0].first_column);
                    break;
                case 137:
                    this.$ = new Primitiva($$[$0], TipoPrim.FUNCIONXQUERY, _$[$0].first_line, _$[$0].first_column);
                    break;
                case 138:
                    this.$ = new FuncionXQuery(TipoFuncionXQ.DATA, $$[$0 - 2], $$[$0 - 1], _$[$0 - 5].first_line, _$[$0 - 5].first_column);
                    break;
                case 139:
                    this.$ = new FuncionXQuery(TipoFuncionXQ.UPPERCASE, $$[$0 - 2], $$[$0 - 1], _$[$0 - 5].first_line, _$[$0 - 5].first_column);
                    break;
                case 140:
                    this.$ = new FuncionXQuery(TipoFuncionXQ.SUBSTRING, $$[$0 - 6], $$[$0 - 5], _$[$0 - 9].first_line, _$[$0 - 9].first_column, +$$[$0 - 3], +$$[$0 - 1]);
                    break;
                case 141:
                    this.$ = new FuncionXQuery(TipoFuncionXQ.LOWERCASE, $$[$0 - 2], $$[$0 - 1], _$[$0 - 5].first_line, _$[$0 - 5].first_column);
                    break;
                case 142:
                    this.$ = new FuncionXQuery(TipoFuncionXQ.STRING, $$[$0 - 2], $$[$0 - 1], _$[$0 - 5].first_line, _$[$0 - 5].first_column);
                    break;
                case 143:
                    this.$ = new FuncionXQuery(TipoFuncionXQ.NUMBER, $$[$0 - 2], $$[$0 - 1], _$[$0 - 5].first_line, _$[$0 - 5].first_column);
                    break;
                case 144:
                    this.$ = new FuncionXQuery(TipoFuncionXQ.DATA, undefined, undefined, _$[$0 - 3].first_line, _$[$0 - 3].first_column, undefined, undefined, $$[$0 - 1]);
                    break;
                case 145:
                    this.$ = new FuncionXQuery(TipoFuncionXQ.UPPERCASE, undefined, undefined, _$[$0 - 3].first_line, _$[$0 - 3].first_column, undefined, undefined, $$[$0 - 1]);
                    break;
                case 146:
                    this.$ = new FuncionXQuery(TipoFuncionXQ.SUBSTRING, undefined, undefined, _$[$0 - 7].first_line, _$[$0 - 7].first_column, +$$[$0 - 3], +$$[$0 - 1], $$[$0 - 5]);
                    break;
                case 147:
                    this.$ = new FuncionXQuery(TipoFuncionXQ.LOWERCASE, undefined, undefined, _$[$0 - 3].first_line, _$[$0 - 3].first_column, undefined, undefined, $$[$0 - 1]);
                    break;
                case 148:
                    this.$ = new FuncionXQuery(TipoFuncionXQ.STRING, undefined, undefined, _$[$0 - 3].first_line, _$[$0 - 3].first_column, undefined, undefined, $$[$0 - 1]);
                    break;
                case 149:
                    this.$ = new FuncionXQuery(TipoFuncionXQ.NUMBER, undefined, undefined, _$[$0 - 3].first_line, _$[$0 - 3].first_column, undefined, undefined, $$[$0 - 1]);
                    break;
            }
        },
        table: [{ 3: 1, 4: 2, 6: 3, 7: 4, 8: [1, 6], 25: 5, 27: 7, 28: 8, 29: $V0, 33: $V1, 36: $V2, 42: $V3, 56: [2, 16] }, { 1: [3] }, { 5: [1, 13] }, { 5: [2, 2] }, { 5: [2, 3] }, { 26: 14, 56: [1, 15] }, { 9: [1, 16] }, { 28: 17, 29: $V0, 33: $V1, 36: $V2, 42: $V3, 56: [2, 15] }, o($V4, [2, 18]), { 30: [1, 18] }, { 34: [1, 19] }, { 30: [1, 20] }, { 2: $V5, 30: $V6, 43: 21, 44: 22 }, { 1: [2, 1] }, { 5: [2, 14] }, { 22: $V7, 30: [1, 25], 57: 26, 58: 27, 59: [1, 34], 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc }, { 10: 35, 24: [1, 36] }, o($V4, [2, 17]), { 12: [1, 37] }, { 30: $Vd, 35: 38, 71: 39 }, { 12: [1, 41] }, o($V4, [2, 25], { 19: [1, 42] }), o($Ve, [2, 27]), { 12: [1, 43] }, o($Ve, [2, 32]), { 12: [1, 44] }, { 5: [2, 46] }, { 5: [2, 47] }, { 13: [1, 45] }, { 13: [1, 46] }, { 13: [1, 47] }, { 13: [1, 48] }, { 13: [1, 49] }, { 13: [1, 50] }, { 13: [1, 51] }, { 11: [1, 52] }, { 11: [2, 13] }, { 31: [1, 53] }, o($V4, [2, 21], { 19: [1, 54] }), o($Ve, [2, 64]), { 12: [1, 55] }, { 11: [1, 56] }, { 2: $V5, 30: $V6, 44: 57 }, { 45: [1, 58], 46: [1, 59] }, { 5: $Vf, 31: $Vg, 51: 60, 75: 61 }, { 22: $V7, 30: [1, 63], 57: 64, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc }, { 22: $V7, 30: [1, 65], 57: 66, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc }, { 22: $V7, 30: [1, 67], 57: 68, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc }, { 22: $V7, 30: [1, 69], 57: 70, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc }, { 22: $V7, 30: [1, 71], 57: 72, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc }, { 22: $V7, 30: [1, 73], 57: 74, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc }, { 30: [1, 75] }, { 12: [1, 76] }, { 12: $Vh, 13: $Vi, 22: $V7, 31: [1, 78], 32: 77, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 30: $Vd, 71: 95 }, o($Ve, $Vf, { 75: 61, 51: 96, 31: $Vg }), { 37: [1, 97] }, o($Ve, [2, 26]), o($Vt, $Vf, { 75: 61, 38: 98, 72: 100, 74: 102, 51: 103, 84: 107, 12: $Vu, 13: [1, 99], 31: $Vg, 80: $Vv, 82: $Vw, 83: $Vx, 99: $Vp, 100: $Vq, 125: $Vr, 126: $Vs }), { 30: [1, 108] }, { 5: [2, 45] }, o($Vy, $Vf, { 75: 61, 51: 109, 31: $Vg }), { 2: [1, 112], 12: $Vz, 31: [1, 111], 74: 114, 76: 110, 79: 115, 80: $Vv, 82: $Vw, 83: $Vx, 84: 107, 85: $VA, 87: $VB, 88: $VC, 89: $VD, 90: $VE, 91: $VF, 92: $VG, 93: $VH, 94: $VI, 95: $VJ, 96: $VK, 97: $VL, 98: $VM, 99: $Vp, 100: $Vq, 125: $Vr, 126: $Vs }, { 12: [1, 129] }, { 15: [1, 130] }, { 12: [1, 131] }, { 15: [1, 132] }, { 12: [1, 133] }, { 19: [1, 134] }, { 12: [1, 135] }, { 15: [1, 136] }, { 12: [1, 137] }, { 15: [1, 138] }, { 12: [1, 139] }, { 15: [1, 140] }, { 12: [1, 141] }, { 13: [1, 142] }, o($V4, [2, 19], { 37: $VN, 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 106: $VS, 107: $VT, 108: $VU, 109: $VV, 110: $VW, 111: $VX, 112: $VY, 113: $VZ, 114: $V_, 115: $V$, 116: $V01, 117: $V11, 118: $V21, 119: $V31 }), { 12: $Vh, 13: $Vi, 22: $V7, 32: 162, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, o($V41, [2, 106]), o($V41, [2, 107]), o($V41, [2, 128]), o($V41, [2, 129]), o($V41, [2, 130]), o($V41, [2, 131]), { 12: [1, 163], 82: [1, 164] }, o($V41, [2, 134]), o($V41, $Vf, { 75: 61, 51: 165, 31: $Vg }), o($V41, [2, 136]), o($V41, [2, 137]), { 12: $Vh, 13: $Vi, 22: $V7, 32: 166, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, o($V51, [2, 150]), o($V51, [2, 151]), o($V51, [2, 152]), o($V51, [2, 153]), o($Ve, [2, 63]), o($Ve, [2, 65]), o([29, 33, 36, 42, 56, 73], $Vf, { 75: 61, 72: 100, 74: 102, 51: 103, 84: 107, 38: 167, 12: $Vu, 13: [1, 168], 31: $Vg, 80: $Vv, 82: $Vw, 83: $Vx, 99: $Vp, 100: $Vq, 125: $Vr, 126: $Vs }), o($Ve, [2, 28]), { 39: [1, 169], 41: 170 }, o($Ve, [2, 67], { 73: [1, 171] }), o($Vt, $Vf, { 75: 61, 51: 172, 31: $Vg }), o($Vt, $Vf, { 75: 61, 51: 173, 31: $Vg }), o($Vt, [2, 70]), { 12: [1, 174], 82: [1, 175] }, o($V51, $V61, { 81: 176, 77: $V71, 83: [1, 177] }), o($V51, $V61, { 81: 179, 77: $V71 }), o($V51, [2, 86]), { 12: [1, 180] }, o($Vy, [2, 71]), o($V51, [2, 73]), { 2: [1, 182], 12: $Vz, 74: 114, 76: 181, 79: 115, 80: $Vv, 82: $Vw, 83: $Vx, 84: 107, 85: $VA, 87: $VB, 88: $VC, 89: $VD, 90: $VE, 91: $VF, 92: $VG, 93: $VH, 94: $VI, 95: $VJ, 96: $VK, 97: $VL, 98: $VM, 99: $Vp, 100: $Vq, 125: $Vr, 126: $Vs }, o($V51, [2, 75]), o($V51, [2, 77], { 77: [1, 183] }), o($V51, [2, 79]), o($V51, [2, 80]), { 11: [1, 184] }, { 11: [1, 185] }, { 11: [1, 186] }, { 11: [1, 187] }, { 11: [1, 188] }, { 11: [1, 189] }, { 11: [1, 190] }, { 11: [1, 191] }, { 11: [1, 192] }, { 11: [1, 193] }, { 11: [1, 194] }, { 11: [1, 195] }, { 11: [1, 196] }, { 15: $Vf, 31: $Vg, 51: 197, 75: 61 }, o($V81, [2, 144]), { 15: $Vf, 31: $Vg, 51: 198, 75: 61 }, o($V81, [2, 145]), { 19: $Vf, 31: $Vg, 51: 199, 75: 61 }, { 39: [1, 200] }, { 15: $Vf, 31: $Vg, 51: 201, 75: 61 }, o($V81, [2, 147]), { 15: $Vf, 31: $Vg, 51: 202, 75: 61 }, o($V81, [2, 148]), { 15: $Vf, 31: $Vg, 51: 203, 75: 61 }, o($V81, [2, 149]), { 31: [1, 204] }, { 12: $V91, 14: 205, 15: [2, 6], 18: 206, 20: 207 }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 209, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 210, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 211, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 212, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 213, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 214, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 215, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 216, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 217, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 218, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 219, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 220, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 221, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 222, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 223, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 224, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 225, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 226, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 227, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, o($V4, [2, 20], { 37: $VN, 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 106: $VS, 107: $VT, 108: $VU, 109: $VV, 110: $VW, 111: $VX, 112: $VY, 113: $VZ, 114: $V_, 115: $V$, 116: $V01, 117: $V11, 118: $V21, 119: $V31 }), o($V41, [2, 132]), o($V41, [2, 133]), o($V41, [2, 135]), { 15: [1, 228], 37: $VN, 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 106: $VS, 107: $VT, 108: $VU, 109: $VV, 110: $VW, 111: $VX, 112: $VY, 113: $VZ, 114: $V_, 115: $V$, 116: $V01, 117: $V11, 118: $V21, 119: $V31 }, o($V4, [2, 22]), { 39: [1, 229], 41: 230 }, o($Va1, $Vb1, { 40: [1, 231] }), { 15: [1, 232], 19: $Vc1 }, o($Vt, $Vf, { 75: 61, 72: 100, 74: 102, 51: 103, 84: 107, 38: 234, 12: $Vu, 31: $Vg, 80: $Vv, 82: $Vw, 83: $Vx, 99: $Vp, 100: $Vq, 125: $Vr, 126: $Vs }), o($Vt, [2, 68]), o($Vt, [2, 69]), o($V51, $V61, { 81: 235, 77: $V71 }), o($V51, $V61, { 81: 236, 77: $V71 }), o($V51, [2, 83]), o($V51, $V61, { 81: 237, 77: $V71 }), { 12: $Vh, 13: $Vi, 22: $V7, 32: 238, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, o($V51, [2, 85]), { 45: [1, 239] }, o($V51, [2, 74]), o($V51, [2, 76]), { 12: $Vh, 13: $Vi, 22: $V7, 32: 240, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 11: [1, 241] }, { 11: [1, 242] }, { 11: [1, 243] }, { 11: [1, 244] }, { 11: [1, 245] }, { 11: [1, 246] }, { 11: [1, 247] }, { 11: [1, 248] }, { 11: [1, 249] }, { 11: [1, 250] }, { 11: [1, 251] }, { 11: [1, 252] }, { 11: [1, 253] }, { 15: [1, 254] }, { 15: [1, 255] }, { 19: [1, 256] }, { 19: [1, 257] }, { 15: [1, 258] }, { 15: [1, 259] }, { 15: [1, 260] }, { 12: $Vh, 13: $Vi, 22: $V7, 31: [1, 262], 32: 261, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 15: [1, 263] }, { 15: [2, 5], 19: [1, 264] }, o($Va1, [2, 8]), { 16: [1, 265] }, o($V41, [2, 108]), o($Vd1, [2, 109], { 82: $VO, 105: $VR, 113: $VZ }), o($Vd1, [2, 110], { 82: $VO, 105: $VR, 113: $VZ }), o($V41, [2, 111]), o($Ve1, [2, 112], { 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 113: $VZ }), o($Ve1, [2, 113], { 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 113: $VZ }), o($Ve1, [2, 114], { 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 113: $VZ }), o($Ve1, [2, 115], { 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 113: $VZ }), o($Ve1, [2, 116], { 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 113: $VZ }), o($Ve1, [2, 117], { 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 113: $VZ }), o([15, 29, 33, 36, 42, 56, 78, 111], [2, 118], { 37: $VN, 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 106: $VS, 107: $VT, 108: $VU, 109: $VV, 110: $VW, 112: $VY, 113: $VZ, 114: $V_, 115: $V$, 116: $V01, 117: $V11, 118: $V21, 119: $V31 }), o([15, 29, 33, 36, 42, 56, 78, 111, 112], [2, 119], { 37: $VN, 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 106: $VS, 107: $VT, 108: $VU, 109: $VV, 110: $VW, 113: $VZ, 114: $V_, 115: $V$, 116: $V01, 117: $V11, 118: $V21, 119: $V31 }), o($V41, [2, 120]), o($Ve1, [2, 121], { 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 113: $VZ }), o($Ve1, [2, 122], { 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 113: $VZ }), o($Ve1, [2, 123], { 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 113: $VZ }), o($Ve1, [2, 124], { 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 113: $VZ }), o($Ve1, [2, 125], { 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 113: $VZ }), o($Ve1, [2, 126], { 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 113: $VZ }), o($V41, [2, 127]), o($Va1, $Vb1, { 40: [1, 266] }), { 15: [1, 267], 19: $Vc1 }, { 39: [1, 268] }, o($Ve, [2, 30]), { 39: [1, 269] }, o($Ve, [2, 66]), o($V51, [2, 81]), o($V51, [2, 82]), o($V51, [2, 84]), { 37: $VN, 78: [1, 270], 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 106: $VS, 107: $VT, 108: $VU, 109: $VV, 110: $VW, 111: $VX, 112: $VY, 113: $VZ, 114: $V_, 115: $V$, 116: $V01, 117: $V11, 118: $V21, 119: $V31 }, o($Vt, $Vf, { 75: 61, 72: 100, 74: 102, 51: 103, 84: 107, 38: 271, 12: $Vu, 31: $Vg, 80: $Vv, 82: $Vw, 83: $Vx, 99: $Vp, 100: $Vq, 125: $Vr, 126: $Vs }), { 37: $VN, 78: [1, 272], 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 106: $VS, 107: $VT, 108: $VU, 109: $VV, 110: $VW, 111: $VX, 112: $VY, 113: $VZ, 114: $V_, 115: $V$, 116: $V01, 117: $V11, 118: $V21, 119: $V31 }, { 12: $Vf1, 82: $Vg1, 86: 273, 99: $Vh1, 100: $Vi1 }, { 12: $Vf1, 82: $Vg1, 86: 278, 99: $Vh1, 100: $Vi1 }, { 12: $Vf1, 82: $Vg1, 86: 279, 99: $Vh1, 100: $Vi1 }, { 12: $Vf1, 82: $Vg1, 86: 280, 99: $Vh1, 100: $Vi1 }, { 12: $Vf1, 82: $Vg1, 86: 281, 99: $Vh1, 100: $Vi1 }, { 12: $Vf1, 82: $Vg1, 86: 282, 99: $Vh1, 100: $Vi1 }, { 12: $Vf1, 82: $Vg1, 86: 283, 99: $Vh1, 100: $Vi1 }, { 12: $Vf1, 82: $Vg1, 86: 284, 99: $Vh1, 100: $Vi1 }, { 12: $Vf1, 82: $Vg1, 86: 285, 99: $Vh1, 100: $Vi1 }, { 12: $Vf1, 82: $Vg1, 86: 286, 99: $Vh1, 100: $Vi1 }, { 12: $Vf1, 82: $Vg1, 86: 287, 99: $Vh1, 100: $Vi1 }, { 12: $Vf1, 82: $Vg1, 86: 288, 99: $Vh1, 100: $Vi1 }, { 12: $Vf1, 82: $Vg1, 86: 289, 99: $Vh1, 100: $Vi1 }, o($V81, [2, 138]), o($V81, [2, 139]), { 39: [1, 290] }, { 39: [1, 291] }, o($V81, [2, 141]), o($V81, [2, 142]), o($V81, [2, 143]), { 15: [1, 292], 37: $VN, 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 106: $VS, 107: $VT, 108: $VU, 109: $VV, 110: $VW, 111: $VX, 112: $VY, 113: $VZ, 114: $V_, 115: $V$, 116: $V01, 117: $V11, 118: $V21, 119: $V31 }, { 12: $Vh, 13: $Vi, 22: $V7, 32: 293, 39: $Vj, 55: $Vk, 57: 89, 69: $Vl, 70: $Vm, 80: $Vn, 83: $Vo, 84: 88, 99: $Vp, 100: $Vq, 101: 79, 102: 80, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc, 125: $Vr, 126: $Vs }, { 16: [1, 294] }, { 12: $V91, 20: 295 }, { 17: 296, 21: $Vj1, 22: $Vk1, 23: $Vl1 }, { 39: [1, 300] }, o($V4, [2, 24]), { 15: [1, 301] }, o($Va1, [2, 43]), o($V51, [2, 104]), o($Ve, [2, 31]), o($V51, [2, 78]), o($V51, [2, 87]), o($V51, $V61, { 81: 302, 77: $V71 }), o($V51, $V61, { 81: 303, 77: $V71 }), o($V51, $V61, { 81: 304, 77: $V71 }), o($V51, $V61, { 81: 305, 77: $V71 }), o($V51, [2, 88]), o($V51, [2, 89]), o($V51, [2, 90]), o($V51, [2, 91]), o($V51, [2, 92]), o($V51, [2, 93]), o($V51, [2, 94]), o($V51, [2, 95]), o($V51, [2, 96]), o($V51, [2, 97]), o($V51, [2, 98]), o($V51, [2, 99]), { 19: [1, 306] }, { 15: [1, 307] }, { 60: [1, 308] }, { 15: [1, 309], 37: $VN, 82: $VO, 103: $VP, 104: $VQ, 105: $VR, 106: $VS, 107: $VT, 108: $VU, 109: $VV, 110: $VW, 111: $VX, 112: $VY, 113: $VZ, 114: $V_, 115: $V$, 116: $V01, 117: $V11, 118: $V21, 119: $V31 }, { 17: 310, 21: $Vj1, 22: $Vk1, 23: $Vl1 }, o($Va1, [2, 7]), o($Va1, [2, 9]), o($Vm1, [2, 10]), o($Vm1, [2, 11]), o($Vm1, [2, 12]), { 15: [1, 311] }, o($Ve, [2, 29]), o($V51, [2, 100]), o($V51, [2, 101]), o($V51, [2, 102]), o($V51, [2, 103]), { 39: [1, 312] }, o($V81, [2, 146]), { 13: $Vn1, 22: $V7, 30: $Vo1, 49: $Vp1, 57: 318, 61: 313, 63: 316, 64: 317, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc }, { 60: [1, 320] }, { 5: [2, 4] }, o($V4, [2, 23]), { 15: [1, 321] }, { 62: [1, 322] }, { 13: $Vn1, 15: [1, 324], 22: $V7, 30: $Vo1, 49: $Vp1, 57: 318, 61: 323, 63: 316, 64: 317, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc }, { 13: $Vn1, 22: $V7, 30: $Vo1, 49: $Vp1, 57: 318, 61: 325, 63: 316, 64: 317, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc }, o($Vq1, [2, 52]), o($Vq1, [2, 54]), o($Vq1, [2, 55]), { 12: [1, 326] }, { 13: $Vn1, 22: $V7, 30: $Vo1, 49: $Vp1, 57: 318, 61: 327, 63: 316, 64: 317, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc }, o($V81, [2, 140]), { 13: $Vn1, 22: $V7, 30: $Vo1, 49: $Vp1, 57: 318, 61: 328, 63: 316, 64: 317, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc }, { 15: [1, 329] }, o($Vq1, [2, 53]), { 50: [1, 330] }, o($Vq1, $Vf, { 75: 61, 51: 331, 31: $Vg }), { 62: [1, 332] }, { 5: [2, 48] }, o($Vq1, [2, 50]), o($Vq1, [2, 51]), o($Vq1, [2, 56]), { 13: $Vn1, 22: $V7, 30: $Vo1, 49: $Vp1, 57: 318, 61: 333, 63: 316, 64: 317, 120: $V8, 121: $V9, 122: $Va, 123: $Vb, 124: $Vc }, { 5: [2, 49] }],
        defaultActions: { 3: [2, 2], 4: [2, 3], 13: [2, 1], 14: [2, 14], 26: [2, 46], 27: [2, 47], 36: [2, 13], 60: [2, 45], 310: [2, 4], 328: [2, 48], 333: [2, 49] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            }
            else {
                var error = new Error(str);
                error.hash = hash;
                throw error;
            }
        },
        parse: function parse(input) {
            var self = this, stack = [0], tstack = [], // token stack
            vstack = [null], // semantic value stack
            lstack = [], // location stack
            table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            //this.reductionCount = this.shiftCount = 0;
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            // copy state
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            }
            else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function () {
                var token;
                token = lexer.lex() || EOF;
                // if token isn't its numeric value, convert
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                // retreive state number from top of stack
                state = stack[stack.length - 1];
                // use default actions if available
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                }
                else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    // read action for current state and first input
                    action = table[state] && table[state][symbol];
                }
                _handle_error: 
                // handle parse error
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var error_rule_depth;
                    var errStr = '';
                    // Return the rule stack depth where the nearest error rule can be found.
                    // Return FALSE when no error recovery rule was found.
                    function locateNearestErrorRecoveryRule(state) {
                        var stack_probe = stack.length - 1;
                        var depth = 0;
                        // try to recover from error
                        for (;;) {
                            // check for error recovery rule in this state
                            if ((TERROR.toString()) in table[state]) {
                                return depth;
                            }
                            if (state === 0 || stack_probe < 2) {
                                return false; // No suitable error recovery rule available.
                            }
                            stack_probe -= 2; // popStack(1): [symbol, action]
                            state = stack[stack_probe];
                            ++depth;
                        }
                    }
                    if (!recovering) {
                        // first see if there's any chance at hitting an error recovery rule:
                        error_rule_depth = locateNearestErrorRecoveryRule(state);
                        // Report error
                        expected = [];
                        for (p in table[state]) {
                            if (this.terminals_[p] && p > TERROR) {
                                expected.push("'" + this.terminals_[p] + "'");
                            }
                        }
                        if (lexer.showPosition) {
                            errStr = 'Parse error on line ' + (yylineno + 1) + ":\n" + lexer.showPosition() + "\nExpecting " + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                        }
                        else {
                            errStr = 'Parse error on line ' + (yylineno + 1) + ": Unexpected " +
                                (symbol == EOF ? "end of input" :
                                    ("'" + (this.terminals_[symbol] || symbol) + "'"));
                        }
                        this.parseError(errStr, {
                            text: lexer.match,
                            token: this.terminals_[symbol] || symbol,
                            line: lexer.yylineno,
                            loc: yyloc,
                            expected: expected,
                            recoverable: (error_rule_depth !== false)
                        });
                    }
                    else if (preErrorSymbol !== EOF) {
                        error_rule_depth = locateNearestErrorRecoveryRule(state);
                    }
                    // just recovered from another error
                    if (recovering == 3) {
                        if (symbol === EOF || preErrorSymbol === EOF) {
                            throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                        }
                        // discard current lookahead and grab another
                        yyleng = lexer.yyleng;
                        yytext = lexer.yytext;
                        yylineno = lexer.yylineno;
                        yyloc = lexer.yylloc;
                        symbol = lex();
                    }
                    // try to recover from error
                    if (error_rule_depth === false) {
                        throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
                    }
                    popStack(error_rule_depth);
                    preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
                    symbol = TERROR; // insert generic error symbol as new lookahead
                    state = stack[stack.length - 1];
                    action = table[state] && table[state][TERROR];
                    recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
                }
                // this shouldn't happen, unless resolve defaults are off
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1: // shift
                        //this.shiftCount++;
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]); // push state
                        symbol = null;
                        if (!preErrorSymbol) { // normal execution/no error
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        }
                        else {
                            // error just occurred, resume old lookahead f/ before error
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        // reduce
                        //this.reductionCount++;
                        len = this.productions_[action[1]][1];
                        // perform semantic action
                        yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
                        // default location, uses first token for firsts, last for lasts
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        // pop off stack
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]); // push nonterminal (reduce)
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        // goto new state = table[STATE][NONTERMINAL]
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        // accept
                        return true;
                }
            }
            return true;
        } };
    //const Nodo = require("./AST/nodo_arbol");
    //var raiz;
    const { Primitiva } = require("../Expresiones/Primitiva");
    const { Operacion } = require("../Expresiones/Operacion");
    const { Consulta } = require("../XPath/Consulta");
    const { Nodo } = require("../XPath/Nodo");
    const { Predicate } = require("../XPath/Predicate");
    const { TipoPrim } = require("../Expresiones/Primitiva");
    const { TipoOperacion } = require("../Expresiones/Operacion");
    const { TipoNodo } = require("../XPath/Nodo");
    const { TipoAxis } = require("../XPath/Nodo");
    const errores = require('../Global/ListaError');
    //IMPORTS XQUERY
    const { Flwor } = require("../XQuery/Flwor");
    const { Return } = require("../XQuery/Return");
    const { TipoReturn } = require("../XQuery/Return");
    const { Where } = require("../XQuery/Where");
    const { For } = require("../XQuery/For");
    const { Let } = require("../XQuery/Let");
    const { OrderBy } = require("../XQuery/OrderBy");
    const { TipoFor } = require("../XQuery/DeclaracionFor");
    const { DeclaracionFor } = require("../XQuery/DeclaracionFor");
    const { Sort } = require("../XQuery/Sort");
    const { CondicionIf } = require("../XQuery/CondicionIf");
    const { FuncionXQuery } = require("../XQuery/FuncionXQuery");
    const { Html } = require("../XQuery/Html");
    const { IfThenElse } = require("../XQuery/IfThenElse");
    const { VarCall } = require("../XQuery/VarCall");
    const { TipoFuncionXQ } = require("../XQuery/FuncionXQuery");
    const { Atributo } = require("../XML/Atributo");
    /* generated by jison-lex 0.3.4 */
    var lexer = (function () {
        var lexer = ({
            EOF: 1,
            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                }
                else {
                    throw new Error(str);
                }
            },
            // resets the lexer, sets new input
            setInput: function (input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },
            // consumes and returns one char from the input
            input: function () {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                }
                else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }
                this._input = this._input.slice(1);
                return ch;
            },
            // unshifts one char (or a string) into the input
            unput: function (ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);
                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);
                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;
                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                            + oldLines[oldLines.length - lines.length].length - lines[0].length :
                        this.yylloc.first_column - len
                };
                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },
            // When called from action, caches matched text and appends it on next action
            more: function () {
                this._more = true;
                return this;
            },
            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function () {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                }
                else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },
            // retain first n characters of the match
            less: function (n) {
                this.unput(this.match.slice(n));
            },
            // displays already matched input, i.e. for error messages
            pastInput: function () {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },
            // displays upcoming input, i.e. for error messages
            upcomingInput: function () {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },
            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function () {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },
            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function (match, indexed_rule) {
                var token, lines, backup;
                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }
                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ?
                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                        this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                }
                else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },
            // return next match in input
            next: function () {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }
                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            }
                            else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            }
                            else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        }
                        else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                }
                else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },
            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                }
                else {
                    return this.lex();
                }
            },
            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },
            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                }
                else {
                    return this.conditionStack[0];
                }
            },
            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                }
                else {
                    return this.conditions["INITIAL"].rules;
                }
            },
            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                }
                else {
                    return "INITIAL";
                }
            },
            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },
            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "case-insensitive": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0: /* skip whitespace */
                        break;
                    case 1:
                        this.begin('comment');
                        break;
                    case 2:
                        this.popState();
                        break;
                    case 3: /* skip comment content*/
                        break;
                    case 4:
                        return 30;
                        break;
                    case 5:
                        return 37;
                        break;
                    case 6:
                        return 31;
                        break;
                    case 7:
                        return "dot";
                        break;
                    case 8:
                        return "attr";
                        break;
                    case 9:
                        return "corA";
                        break;
                    case 10:
                        return "corC";
                        break;
                    case 11:
                        return "andSelect";
                        break;
                    case 12:
                        return "dospuntos";
                        break;
                    case 13:
                        return "parA";
                        break;
                    case 14:
                        return "parC";
                        break;
                    case 15:
                        return "llaveA";
                        break;
                    case 16:
                        return "llaveC";
                        break;
                    case 17:
                        return "coma";
                        break;
                    case 18:
                        return 82;
                        break;
                    case 19:
                        return "mas";
                        break;
                    case 20:
                        return "menos";
                        break;
                    case 21:
                        return "div";
                        break;
                    case 22:
                        return 106;
                        break;
                    case 23:
                        return "gte";
                        break;
                    case 24:
                        return 107;
                        break;
                    case 25:
                        return 109;
                        break;
                    case 26:
                        return "nequal";
                        break;
                    case 27:
                        return "or";
                        break;
                    case 28:
                        return "and";
                        break;
                    case 29:
                        return "mod";
                        break;
                    case 30:
                        return "for";
                        break;
                    case 31:
                        return "in";
                        break;
                    case 32:
                        return "to";
                        break;
                    case 33:
                        return "at";
                        break;
                    case 34:
                        return "let";
                        break;
                    case 35:
                        return "where";
                        break;
                    case 36:
                        return "order";
                        break;
                    case 37:
                        return "by";
                        break;
                    case 38:
                        return "return";
                        break;
                    case 39:
                        return "if";
                        break;
                    case 40:
                        return "else";
                        break;
                    case 41:
                        return "then";
                        break;
                    case 42:
                        return "reserv_eq";
                        break;
                    case 43:
                        return "reserv_gt";
                        break;
                    case 44:
                        return "reserv_ge";
                        break;
                    case 45:
                        return "reserv_ne";
                        break;
                    case 46:
                        return "reserv_le";
                        break;
                    case 47:
                        return "reserv_lt";
                        break;
                    case 48:
                        return "ancestorSelf";
                        break;
                    case 49:
                        return "ancestor";
                        break;
                    case 50:
                        return "attribute";
                        break;
                    case 51:
                        return "child";
                        break;
                    case 52:
                        return "descendantSelf";
                        break;
                    case 53:
                        return "descendant";
                        break;
                    case 54:
                        return "followingSib";
                        break;
                    case 55:
                        return "following";
                        break;
                    case 56:
                        return "namespace";
                        break;
                    case 57:
                        return "parent";
                        break;
                    case 58:
                        return "precedSib";
                        break;
                    case 59:
                        return "preced";
                        break;
                    case 60:
                        return "self";
                        break;
                    case 61:
                        return "data";
                        break;
                    case 62:
                        return "upper-case";
                        break;
                    case 63:
                        return "substring";
                        break;
                    case 64:
                        return "lower-case";
                        break;
                    case 65:
                        return "number";
                        break;
                    case 66:
                        return "declare";
                        break;
                    case 67:
                        return "function";
                        break;
                    case 68:
                        return "local";
                        break;
                    case 69:
                        return "decimal";
                        break;
                    case 70:
                        return "string";
                        break;
                    case 71:
                        return "boolean";
                        break;
                    case 72:
                        return "as";
                        break;
                    case 73:
                        return "xs";
                        break;
                    case 74:
                        return "lastFunc";
                        break;
                    case 75:
                        return "positionFunc";
                        break;
                    case 76:
                        return "nodeFunc";
                        break;
                    case 77:
                        return "textFunc";
                        break;
                    case 78:
                        return 55;
                        break;
                    case 79:
                        return 39;
                        break;
                    case 80:
                        return 12;
                        break;
                    case 81:
                        return 69;
                        break;
                    case 82:
                        return 70;
                        break;
                    case 83:
                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                        break;
                    case 84:
                        return 5;
                        break;
                }
            },
            rules: [/^(?:\s+)/i, /^(?:\(:)/i, /^(?::\))/i, /^(?:.)/i, /^(?:\$)/i, /^(?:=)/i, /^(?:\/)/i, /^(?:\.)/i, /^(?:@)/i, /^(?:\[)/i, /^(?:\])/i, /^(?:\|)/i, /^(?::)/i, /^(?:\()/i, /^(?:\))/i, /^(?:\{)/i, /^(?:\})/i, /^(?:,)/i, /^(?:\*)/i, /^(?:\+)/i, /^(?:-)/i, /^(?:div\b)/i, /^(?:<=)/i, /^(?:>=)/i, /^(?:<)/i, /^(?:>)/i, /^(?:!=)/i, /^(?:or\b)/i, /^(?:and\b)/i, /^(?:mod\b)/i, /^(?:for\b)/i, /^(?:in\b)/i, /^(?:to\b)/i, /^(?:at\b)/i, /^(?:let\b)/i, /^(?:where\b)/i, /^(?:order\b)/i, /^(?:by\b)/i, /^(?:return\b)/i, /^(?:if\b)/i, /^(?:else\b)/i, /^(?:then\b)/i, /^(?:eq\b)/i, /^(?:gt\b)/i, /^(?:ge\b)/i, /^(?:ne\b)/i, /^(?:le\b)/i, /^(?:lt\b)/i, /^(?:ancestor-or-self\b)/i, /^(?:ancestor\b)/i, /^(?:attribute\b)/i, /^(?:child\b)/i, /^(?:descendant-or-self\b)/i, /^(?:descendant\b)/i, /^(?:following-sibling\b)/i, /^(?:following\b)/i, /^(?:namespace\b)/i, /^(?:parent\b)/i, /^(?:preceding-sibling\b)/i, /^(?:preceding\b)/i, /^(?:self\b)/i, /^(?:data\b)/i, /^(?:upper-case\b)/i, /^(?:substring\b)/i, /^(?:lower-case\b)/i, /^(?:number\b)/i, /^(?:declare\b)/i, /^(?:function\b)/i, /^(?:local\b)/i, /^(?:decimal\b)/i, /^(?:string\b)/i, /^(?:boolean\b)/i, /^(?:as\b)/i, /^(?:xs\b)/i, /^(?:last\(\))/i, /^(?:position\(\))/i, /^(?:node\(\))/i, /^(?:text\(\))/i, /^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i, /^(?:[0-9]+)/i, /^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ.-]*)/i, /^(?:("((\\([\'\"\\]))|([^\"\\]+))*"))/i, /^(?:('((\\([\'\"\\]))|([^\'\\]))*'))/i, /^(?:.)/i, /^(?:$)/i],
            conditions: { "comment": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "inclusive": true }, "INITIAL": { "rules": [0, 1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "inclusive": true } }
        });
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;
    parser.Parser = Parser;
    return new Parser;
})();
if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = XQuery_GramaticaAsc;
    exports.Parser = XQuery_GramaticaAsc.Parser;
    exports.parse = function () { return XQuery_GramaticaAsc.parse.apply(XQuery_GramaticaAsc, arguments); };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}
