/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XQuery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[16,24,114,123,132],$V1=[1,7],$V2=[1,6],$V3=[2,16,24,114,132],$V4=[2,123],$V5=[1,12],$V6=[2,11,16,24,114,123,132],$V7=[1,20],$V8=[1,21],$V9=[2,127],$Va=[2,16,24,114,123,132],$Vb=[1,28],$Vc=[1,32],$Vd=[1,39],$Ve=[1,51],$Vf=[1,46],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,47],$Vl=[1,48],$Vm=[1,49],$Vn=[1,50],$Vo=[1,52],$Vp=[1,57],$Vq=[1,59],$Vr=[1,60],$Vs=[2,26,118,119,123],$Vt=[5,22],$Vu=[1,65],$Vv=[1,66],$Vw=[1,67],$Vx=[1,68],$Vy=[1,69],$Vz=[1,70],$VA=[1,71],$VB=[1,72],$VC=[1,73],$VD=[1,74],$VE=[1,75],$VF=[1,76],$VG=[1,77],$VH=[1,78],$VI=[1,79],$VJ=[1,80],$VK=[1,81],$VL=[1,82],$VM=[1,83],$VN=[1,85],$VO=[2,5,16,18,22,24,26,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,78,114,118,119,123,132],$VP=[2,49],$VQ=[2,118,119,123],$VR=[2,52],$VS=[1,106],$VT=[2,118],$VU=[1,149],$VV=[2,26,118,119,123,130],$VW=[1,153],$VX=[1,158],$VY=[1,156],$VZ=[1,157],$V_=[1,163],$V$=[1,162],$V01=[1,160],$V11=[1,161],$V21=[1,171],$V31=[2,5,16,18,22,24,26,74,78,114,118,119,123,130,132],$V41=[1,176],$V51=[1,179],$V61=[1,180],$V71=[1,181],$V81=[1,182],$V91=[1,183],$Va1=[1,184],$Vb1=[1,185],$Vc1=[1,186],$Vd1=[1,187],$Ve1=[1,188],$Vf1=[1,189],$Vg1=[1,190],$Vh1=[1,191],$Vi1=[2,5,16,18,22,24,26,43,46,47,49,50,51,52,53,54,55,56,58,59,60,61,62,63,78,114,118,119,123,132],$Vj1=[2,5,16,18,22,24,26,43,49,50,51,52,53,54,55,56,58,59,60,61,62,63,78,114,118,119,123,132],$Vk1=[18,26],$Vl1=[1,210],$Vm1=[2,16,24,26,114,118,119,123,130,132],$Vn1=[2,93],$Vo1=[1,219],$Vp1=[2,16,24,114,118,119,123,132],$Vq1=[1,257],$Vr1=[1,255],$Vs1=[1,256],$Vt1=[2,78,118,119,123],$Vu1=[1,311],$Vv1=[1,314],$Vw1=[1,312],$Vx1=[1,313],$Vy1=[1,349],$Vz1=[1,350],$VA1=[1,351],$VB1=[1,352],$VC1=[1,353],$VD1=[18,20,26];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"INSTRUCCIONES":4,"EOF":5,"LISTFUNC":6,"LISTAD":7,"RETURNGLOBAL":8,"LFUNC":9,"USERFUNCTION":10,"declare":11,"function":12,"PREFIX":13,"dospuntos":14,"identifier":15,"parA":16,"ARGUMENTOS":17,"parC":18,"TIPOFUNCION":19,"llaveA":20,"LISTAINSTR":21,"llaveC":22,"puntocoma":23,"local":24,"LISTAARGS":25,"coma":26,"PARAM":27,"dolar":28,"as":29,"xs":30,"DATATYPE":31,"decimal":32,"string":33,"boolean":34,"double":35,"integer":36,"IF":37,"FLWOR":38,"if":39,"EXPRESIONXQUERY":40,"then":41,"LISTELSEIF":42,"else":43,"EIF":44,"asterisco":45,"mas":46,"menos":47,"div":48,"lte":49,"lt":50,"gte":51,"gt":52,"igual":53,"nequal":54,"or":55,"and":56,"mod":57,"reserv_eq":58,"reserv_ne":59,"reserv_lt":60,"reserv_le":61,"reserv_gt":62,"reserv_ge":63,"DoubleLiteral":64,"IntegerLiteral":65,"cadena":66,"cadena2":67,"LLAMADAFUNCION":68,"FUNCIONXQUERY":69,"LISTALLAMADA":70,"VARLLAMADA":71,"LISTANODOS":72,"NODO":73,"diag":74,"TIPONODO":75,"corA":76,"EXPRESION":77,"corC":78,"MASTIPOS":79,"AXES":80,"attr":81,"PREDICATE":82,"dot":83,"FUNCIONES":84,"ancestor":85,"NODETEST":86,"ancestorSelf":87,"attribute":88,"child":89,"descendant":90,"descendantSelf":91,"following":92,"followingSib":93,"namespace":94,"parent":95,"preced":96,"precedSib":97,"self":98,"textFunc":99,"nodeFunc":100,"PRIMITIVA":101,"data":102,"upper-case":103,"substring":104,"lower-case":105,"number":106,"lastFunc":107,"positionFunc":108,"LNODOS":109,"FOR":110,"RETURNTYPE":111,"LISTADEC":112,"DECLARACION":113,"for":114,"LISTADECLARACIONES":115,"SENTSFOR":116,"SENTFOR":117,"where":118,"order":119,"by":120,"LISTASORT":121,"SORT":122,"let":123,"LISTACONSULTAS":124,"to":125,"DECLARACIONFOR":126,"in":127,"LISTAENTEROS":128,"at":129,"andSelect":130,"CONSULTA":131,"return":132,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"declare",12:"function",14:"dospuntos",15:"identifier",16:"parA",18:"parC",20:"llaveA",22:"llaveC",23:"puntocoma",24:"local",26:"coma",28:"dolar",29:"as",30:"xs",32:"decimal",33:"string",34:"boolean",35:"double",36:"integer",39:"if",41:"then",43:"else",45:"asterisco",46:"mas",47:"menos",48:"div",49:"lte",50:"lt",51:"gte",52:"gt",53:"igual",54:"nequal",55:"or",56:"and",57:"mod",58:"reserv_eq",59:"reserv_ne",60:"reserv_lt",61:"reserv_le",62:"reserv_gt",63:"reserv_ge",64:"DoubleLiteral",65:"IntegerLiteral",66:"cadena",67:"cadena2",74:"diag",76:"corA",78:"corC",81:"attr",83:"dot",85:"ancestor",87:"ancestorSelf",88:"attribute",89:"child",90:"descendant",91:"descendantSelf",92:"following",93:"followingSib",94:"namespace",95:"parent",96:"preced",97:"precedSib",98:"self",99:"textFunc",100:"nodeFunc",102:"data",103:"upper-case",104:"substring",105:"lower-case",106:"number",107:"lastFunc",108:"positionFunc",114:"for",118:"where",119:"order",120:"by",123:"let",125:"to",127:"in",129:"at",130:"andSelect",132:"return"},
productions_: [0,[3,2],[4,3],[6,1],[6,0],[9,2],[9,1],[10,13],[10,1],[13,1],[17,1],[17,0],[25,3],[25,1],[27,6],[31,1],[31,1],[31,1],[31,1],[31,1],[19,4],[19,0],[21,1],[21,1],[37,9],[42,2],[42,0],[44,7],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,1],[40,1],[40,1],[40,1],[40,2],[40,1],[40,1],[68,6],[68,5],[70,3],[70,1],[71,1],[71,1],[73,2],[73,3],[73,2],[73,3],[75,1],[75,4],[75,1],[75,1],[79,3],[79,3],[79,2],[79,3],[79,2],[79,1],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[86,2],[86,2],[86,2],[86,2],[82,3],[82,0],[77,1],[77,1],[101,2],[101,2],[101,1],[101,2],[101,1],[69,6],[69,6],[69,10],[69,6],[69,6],[69,6],[69,4],[69,4],[69,8],[69,4],[69,4],[69,4],[84,1],[84,1],[84,1],[84,1],[72,1],[72,0],[109,2],[109,1],[38,3],[7,1],[7,0],[112,2],[112,1],[110,3],[110,0],[116,2],[116,1],[117,1],[117,2],[117,5],[117,6],[117,3],[121,3],[121,1],[122,3],[113,6],[113,10],[113,6],[115,3],[115,1],[126,4],[126,8],[126,6],[126,7],[124,3],[124,1],[131,2],[131,2],[131,1],[111,4],[111,2],[111,2],[128,3],[128,1],[8,1],[8,3],[8,2],[8,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 console.log($$[$0-1]); return $$[$0-1]; 
break;
case 2:

                    if ($$[$0-2] !== null) {
                        if ($$[$0-1] !== null) {
                            $$[$0-2] = $$[$0-2].concat($$[$0-1]);
                            $$[$0-2].push($$[$0]);
                            this.$ = $$[$0-2];
                        }
                        else {
                            $$[$0-2].push($$[$0]);
                            this.$ = $$[$0-2];
                        }
                    }else {
                        if ($$[$0-1] !== null){
                            $$[$0-1].push($$[$0]);
                            this.$ = $$[$0-1];
                        }else 
                            this.$ = [$$[$0]];
                    }
                
break;
case 3:
console.log("LISTA DE FUNCIONES"); this.$=$$[$0];
break;
case 4:
console.log("LISTA FUNC VACIA"); this.$=[];
break;
case 5:

            if ($$[$0] !== null)
                $$[$0-1].push($$[$0]); 
            this.$ = $$[$0-1];
        
break;
case 6:

            if ($$[$0] !== null)
                this.$=[$$[$0]];
            else
                this.$ = [];
        
break;
case 7:
 
                    this.$ = new UserFunction($$[$0-4], $$[$0-10], $$[$0-8], $$[$0-6], $$[$0-2], _$[$0-12].first_line, _$[$0-12].first_column);
                
break;
case 8:

                    this.$ = null;
                
break;
case 9: case 10: case 59: case 60: case 95: case 115:
 this.$ = $$[$0];
break;
case 11:
 this.$ =  []; 
break;
case 12: case 135: case 155:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 13: case 58: case 136: case 156:
 this.$ = [$$[$0]];
break;
case 14:
 this.$ = {tipo: $$[$0-2], nombre: $$[$0-4]};
break;
case 15:
 this.$ = TipoPrim.DECIMAL;
break;
case 16:
 this.$ = TipoPrim.CADENA;
break;
case 17:
 this.$ = TipoPrim.BOOLEAN;
break;
case 18:
 this.$ = TipoPrim.DOUBLE;
break;
case 19:
 this.$ = TipoPrim.INTEGER;
break;
case 20: case 53: case 67: case 68: case 94: case 113: case 114: case 116:
 this.$ = $$[$0]; 
break;
case 21:
 this.$ = TipoPrim.ANY; 
break;
case 22: case 23: case 142:
 this.$ = [$$[$0]]; 
break;
case 24:
this.$ = $$[$0-8];
break;
case 25: case 131:
this.$ = $$[$0-1];
break;
case 26:
this.$ = [];
break;
case 27:
this.$ = $$[$0-6];
break;
case 28:
 this.$ = new Operacion(TipoOperacion.MULTIPLICACION, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 29:
 this.$ = new Operacion(TipoOperacion.SUMA, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 30:
 this.$ = new Operacion(TipoOperacion.RESTA, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 31:
 this.$ = new Operacion(TipoOperacion.DIVISION, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 32:
 this.$ = new Operacion(TipoOperacion.MENORIGUALQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 33:
 this.$ = new Operacion(TipoOperacion.MENORQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 34:
 this.$ = new Operacion(TipoOperacion.MAYORIGUALQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 35:
 this.$ = new Operacion(TipoOperacion.MAYORQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 36:
 this.$ = new Operacion(TipoOperacion.IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 37:
 this.$ = new Operacion(TipoOperacion.DIFERENTEQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 38:
 this.$ = new Operacion(TipoOperacion.OR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 39:
 this.$ = new Operacion(TipoOperacion.AND, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 40:
 this.$ = new Operacion(TipoOperacion.MOD, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 41:
 this.$ = new Operacion(TipoOperacion.XQEQ, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 42:
 this.$ = new Operacion(TipoOperacion.XQNE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 43:
 this.$ = new Operacion(TipoOperacion.XQLT, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 44:
 this.$ = new Operacion(TipoOperacion.XQLE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 45:
 this.$ = new Operacion(TipoOperacion.XQGT, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 46:
 this.$ = new Operacion(TipoOperacion.XQGE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 47:
 this.$ = new Operacion(TipoOperacion.PAR, $$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 48:
 this.$ = new Primitiva($$[$0], TipoPrim.DOUBLE, _$[$0].first_line, _$[$0].first_column, true); 
break;
case 49:
 console.log($$[$0]); this.$ = new Primitiva($$[$0], TipoPrim.INTEGER, _$[$0].first_line, _$[$0].first_column, true); 
break;
case 50: case 51:
 this.$ = new Primitiva($$[$0], TipoPrim.CADENA, _$[$0].first_line, _$[$0].first_column, true); 
break;
case 52:
 console.log("ENTRA A EXPRESIONXQUERY ", $$[$0]); this.$ = new Primitiva($$[$0], TipoPrim.XQUERYIDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column, true); 
break;
case 54:
 this.$ = new Primitiva($$[$0], TipoPrim.FUNCIONXQUERY, _$[$0].first_line, _$[$0].first_column);
break;
case 55:
 this.$ = new Llamada($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column); 
break;
case 56:
 this.$ = new Llamada($$[$0-2], [], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 57:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 61:
 $$[$0].fromRoot = true; this.$ = $$[$0];
break;
case 62:
 $$[$0].fromRoot = false; this.$ = $$[$0];
break;
case 63:
 console.log('Entra a error sintactico de one diag');
                    errores.default.agregarError('sintactico', 'Token inesperado \'' + yytext + '\'', _$[$0-1].first_line, _$[$0-1].first_column); 
                this.$ = new Nodo($$[$0], TipoNodo.NODOERROR, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 64:
 console.log('Entra a error sintactico de two diags');
                errores.default.agregarError('sintactico', 'Token inesperado \'' + yytext + '\'', _$[$0-2].first_line, _$[$0-2].first_column); 
            this.$ = new Nodo($$[$0], TipoNodo.NODOERROR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 65:
 this.$ = new Nodo($$[$0], TipoNodo.IDENTIFIER, _$[$0].first_line, _$[$0].first_column);
break;
case 66:
 this.$ = new Nodo($$[$0-3], TipoNodo.IDENTIFIER, _$[$0-3].first_line, _$[$0-3].first_column, new Predicate($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column));
break;
case 69: case 70:
 this.$ = new Nodo($$[$0-1], TipoNodo.ATRIBUTO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 71:
 this.$ = new Nodo($$[$0-1], TipoNodo.DOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 72:
 this.$ = new Nodo($$[$0-2]+$$[$0-1], TipoNodo.DOTDOT, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 73:
  this.$ = new Nodo($$[$0-1], TipoNodo.ASTERISCO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 74:
 this.$ = new Nodo($$[$0], TipoNodo.FUNCION, _$[$0].first_line, _$[$0].first_column);
break;
case 75:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.ANCESTOR, $$[$0-1])
break;
case 76:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.ANCESTORORSELF, $$[$0-1])
break;
case 77:
 this.$ =new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.ATTRIBUTE, $$[$0-1])
break;
case 78:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.CHILD, $$[$0-1])
break;
case 79:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.DESCENDANT, $$[$0-1])
break;
case 80:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.DESCENDANTORSELF, $$[$0-1])
break;
case 81:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.FOLLOWING, $$[$0-1])
break;
case 82:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.FOLLOWINGSIBLING, $$[$0-1])
break;
case 83:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.NAMESPACE, $$[$0-1])
break;
case 84:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.PARENT, $$[$0-1])
break;
case 85:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.PRECEDING, $$[$0-1])
break;
case 86:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.PRECEDINGSIBLING, $$[$0-1])
break;
case 87:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.SELF, $$[$0-1])
break;
case 88:
 
                        if($$[$0] instanceof Predicate){
                                this.$ = new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column);
                        }else{
                                this.$ = new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
                        }
                
break;
case 89: case 90:
 
                        if($$[$0] instanceof Predicate){
                                this.$ = new Nodo($$[$0-1], TipoNodo.FUNCION, _$[$0-1].first_line, _$[$0-1].first_column);
                        }else{
                                this.$ = new Nodo($$[$0-1], TipoNodo.FUNCION, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
                        }
                
break;
case 91:
 
                        if($$[$0] instanceof Predicate){
                                this.$ = new Nodo($$[$0-1], TipoNodo.ASTERISCO, _$[$0-1].first_line, _$[$0-1].first_column);
                        }else{
                                this.$ = new Nodo($$[$0-1], TipoNodo.ASTERISCO, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
                        }
                
break;
case 92:
 this.$ = $$[$0-1]
break;
case 93:
 this.$ = [];
break;
case 96: case 97:
 this.$ = new Primitiva($$[$0], TipoPrim.ATRIBUTO, _$[$0-1].first_line, _$[$0-1].first_column, true);
break;
case 98:
 this.$ = new Primitiva($$[$0], TipoPrim.DOT, _$[$0].first_line, _$[$0].first_column, true);
break;
case 99:
 
            console.log("ID ", $$[$0-1]);
            console.log("LISTANODOS ", $$[$0]);
                if($$[$0].length > 0){
                        this.$ = [new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column)]; this.$ = this.$.concat($$[$0]); 
                        this.$ = new Primitiva(this.$, TipoPrim.CONSULTA, _$[$0-1].first_line, _$[$0-1].first_column);
                }else{
                        this.$ = new Primitiva($$[$0-1], TipoPrim.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column);

                }
        
break;
case 100:
 this.$ = new Primitiva($$[$0], TipoPrim.FUNCION, _$[$0].first_line, _$[$0].first_column);
break;
case 101:
 this.$ = new FuncionXQuery(TipoFuncionXQ.DATA, $$[$0-2], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 102:
 this.$ = new FuncionXQuery(TipoFuncionXQ.UPPERCASE, $$[$0-2],$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 103:
 this.$ = new FuncionXQuery(TipoFuncionXQ.SUBSTRING, $$[$0-6], $$[$0-5], _$[$0-9].first_line, _$[$0-9].first_column, +$$[$0-3], +$$[$0-1])
break;
case 104:
 this.$ = new FuncionXQuery(TipoFuncionXQ.LOWERCASE, $$[$0-2],$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 105:
 this.$ = new FuncionXQuery(TipoFuncionXQ.STRING, $$[$0-2],$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 106:
 this.$ = new FuncionXQuery(TipoFuncionXQ.NUMBER, $$[$0-2],$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 107:
 this.$ = new FuncionXQuery(TipoFuncionXQ.DATA, undefined, undefined, _$[$0-3].first_line, _$[$0-3].first_column, undefined, undefined, $$[$0-1])
break;
case 108:
 this.$ = new FuncionXQuery(TipoFuncionXQ.UPPERCASE, undefined,undefined , _$[$0-3].first_line, _$[$0-3].first_column, undefined, undefined, $$[$0-1])
break;
case 109:
 this.$ = new FuncionXQuery(TipoFuncionXQ.SUBSTRING, undefined, undefined, _$[$0-7].first_line, _$[$0-7].first_column, +$$[$0-3], +$$[$0-1], $$[$0-5])
break;
case 110:
 this.$ = new FuncionXQuery(TipoFuncionXQ.LOWERCASE, undefined,undefined, _$[$0-3].first_line, _$[$0-3].first_column,undefined, undefined, $$[$0-1])
break;
case 111:
 this.$ = new FuncionXQuery(TipoFuncionXQ.STRING, undefined,undefined, _$[$0-3].first_line, _$[$0-3].first_column, undefined, undefined, $$[$0-1])
break;
case 112:
 this.$ = new FuncionXQuery(TipoFuncionXQ.NUMBER, undefined,undefined, _$[$0-3].first_line, _$[$0-3].first_column, undefined, undefined, $$[$0-1] )
break;
case 117:
this.$ = $$[$0]; 
break;
case 118:
 this.$ =  [];
break;
case 119:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 120:
 console.log("NODO"); this.$ = [$$[$0]]; 
break;
case 121:
 this.$ = new Flwor($$[$0-2], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 122:
 console.log("LISTA DECLARACIONES"); this.$ = $$[$0];
break;
case 123:
 console.log("SIN VARIABLES"); this.$ = [];
break;
case 124:
 console.log("MAS DECLARACIONES"); $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 125:
 console.log("UNA DECLARACION"); this.$ = [$$[$0]]; 
break;
case 126:
 this.$ = new For($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 128:
console.log("PASA CON WHERE");
break;
case 129:
 console.log("PASA SIN WHERE"); this.$ = $$[$0]; 
break;
case 132:
 console.log("ENTRA A WHERE ", $$[$0]); this.$ = new Where($$[$0-2],$$[$0], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 133:
 this.$ = new Where($$[$0-3], $$[$0], false, _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 134:
 this.$ = new OrderBy($$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 137:
 this.$ = new Sort($$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 138:
 console.log($$[$0]); this.$ = new Let($$[$0-3], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 139:
 this.$ = new Let($$[$0-7], null, _$[$0-9].first_line, _$[$0-9].first_column, +$$[$0-3], +$$[$0-1]);
break;
case 140:
 console.log("ENTRA DECLARACION"); console.log($$[$0]); this.$ = new Let($$[$0-3], null, _$[$0-5].first_line, _$[$0-5].first_column, undefined, undefined, undefined, $$[$0]);
break;
case 141:
 $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2];
break;
case 143:
 this.$ = new DeclaracionFor(TipoFor.NORMAL, $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 144:
 this.$ = new DeclaracionFor(TipoFor.ITERATIVO, $$[$0-6], null, _$[$0-7].first_line, _$[$0-7].first_column, undefined, +$$[$0-3], +$$[$0-1]);
break;
case 145:
 this.$ = new DeclaracionFor(TipoFor.ITERATIVO, $$[$0-4], null, _$[$0-5].first_line, _$[$0-5].first_column, undefined, undefined,undefined, $$[$0-1]);
break;
case 146:
 this.$ = new DeclaracionFor(TipoFor.AT, $$[$0-5], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-2])
break;
case 147:
 $$[$0-2].push(new Consulta($$[$0], _$[$0-2].first_line, _$[$0-2].first_column)); this.$ = $$[$0-2];
break;
case 148:
 console.log("CONSULTA");  this.$ = [new Consulta($$[$0], _$[$0].first_line, _$[$0].first_column)];
break;
case 149:
       
                        this.$ = [new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column)];                                          
                        if($$[$0].length > 0){  
                                this.$ = this.$.concat($$[$0]);
                        }

                
break;
case 150:
 
                        this.$ = [$$[$0-1]]; 
                        if($$[$0].length > 0){
                               this.$ =  this.$.concat($$[$0]);
                        } 
                
break;
case 151:
 console.log("LISTANODOS ", $$[$0]); this.$ = $$[$0];
break;
case 152:
 this.$ = new Return(TipoReturn.NORMAL, $$[$0-1], $$[$0], undefined, undefined, undefined, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 153:
 this.$ = new Return(TipoReturn.FUNCIONXQUERY, undefined, undefined, undefined, undefined, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 154:
 this.$ = new Return(TipoReturn.IFTHENELSE, undefined, undefined, undefined, $$[$0], undefined, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 157: case 158: case 159:
this.$ = "return global";
break;
case 160:
console.log("Se espera un return");
break;
}
},
table: [o($V0,[2,4],{3:1,4:2,6:3,9:4,10:5,2:$V1,11:$V2}),{1:[3]},{5:[1,8]},o($V3,$V4,{7:9,112:10,113:11,123:$V5}),o($V0,[2,3],{10:13,2:$V1,11:$V2}),o($V6,[2,6]),{12:[1,14]},o($V6,[2,8]),{1:[2,1]},{2:[1,19],8:15,16:[1,17],24:$V7,68:16,110:18,114:$V8,132:$V9},o($V3,[2,122],{113:22,123:$V5}),o($Va,[2,125]),{28:[1,23]},o($V6,[2,5]),{13:24,24:[1,25]},{5:[2,2]},{5:[2,157]},{24:$V7,68:26},{111:27,132:$Vb},{5:[2,160]},{14:[1,29]},{28:$Vc,115:30,126:31},o($Va,[2,124]),{15:[1,33]},{14:[1,34]},{14:[2,9]},{18:[1,35]},{5:[2,159]},{16:$Vd,24:$V7,28:[1,36],33:$Ve,37:38,39:$Vf,40:37,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{15:[1,53]},{2:$Vp,26:[1,55],113:58,116:54,117:56,118:$Vq,119:$Vr,123:$V5},o($Vs,[2,142]),{15:[1,61]},{14:[1,62]},{15:[1,63]},{5:[2,158]},{15:[1,64]},o($Vt,[2,153],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM}),o($Vt,[2,154]),{16:$Vd,24:$V7,28:$VN,33:$Ve,40:84,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},o($VO,[2,48]),o($VO,$VP),o($VO,[2,50]),o($VO,[2,51]),o($VO,[2,53]),o($VO,[2,54]),{16:[1,86]},{16:[1,87]},{16:[1,88]},{16:[1,89]},{16:[1,90]},{16:[1,91]},{16:[1,92]},{16:[1,93]},{132:[2,126]},{28:$Vc,126:94},{2:$Vp,113:58,116:95,117:56,118:$Vq,119:$Vr,123:$V5},{132:[2,129]},o($VQ,[2,130]),{16:$Vd,24:$V7,28:[1,97],33:$Ve,40:96,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{120:[1,98]},{127:[1,99],129:[1,100]},{53:[1,101]},{16:[1,102]},o([5,22,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],$VR,{72:103,109:104,73:105,74:$VS}),{16:$Vd,24:$V7,28:$VN,33:$Ve,40:107,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:108,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:109,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:110,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:111,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:112,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:113,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:114,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:115,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:116,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:117,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:118,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:119,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:120,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:121,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:122,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:123,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:124,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:125,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{18:[1,126],45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM},{15:[1,127]},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:128,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{28:[1,129],33:$Ve,69:130,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{28:[1,131],33:$Ve,69:132,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{28:[1,133],33:$Ve,69:134,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{28:[1,135],33:$Ve,69:136,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{28:[1,137],33:$Ve,69:138,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{28:[1,139],33:$Ve,69:140,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{16:$Vd,18:[1,142],24:$V7,26:$VT,28:$VN,33:$Ve,40:144,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,70:141,71:143,72:145,73:105,74:$VS,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,109:104},o($Vs,[2,141]),{132:[2,128]},o($VQ,[2,131],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM}),{15:[1,146]},{28:$VU,121:147,122:148},o($VV,$VT,{109:104,73:105,124:150,131:152,79:154,72:155,84:159,15:$VW,16:[1,151],45:$VX,74:$VS,81:$VY,83:$VZ,99:$V_,100:$V$,107:$V01,108:$V11}),{28:[1,164]},o([2,114,118,119,123,130,132],$VT,{68:44,69:45,109:104,73:105,131:152,79:154,72:155,84:159,124:165,40:167,15:$VW,16:[1,166],24:$V7,28:$VN,33:$Ve,45:$VX,64:$Vg,65:$Vh,66:$Vi,67:$Vj,74:$VS,81:$VY,83:$VZ,99:$V_,100:$V$,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$V01,108:$V11}),{17:168,18:[2,11],25:169,27:170,28:$V21},o($Vt,[2,152]),o([2,5,16,18,22,24,26,78,114,118,119,123,130,132],[2,117],{73:172,74:$VS}),o($V31,[2,120]),{2:[1,175],15:$V41,45:$VX,74:[1,174],75:173,79:177,80:178,81:$VY,83:$VZ,84:159,85:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,98:$Vh1,99:$V_,100:$V$,107:$V01,108:$V11},o($VO,[2,28]),o($Vi1,[2,29],{45:$Vu,48:$Vx,57:$VG}),o($Vi1,[2,30],{45:$Vu,48:$Vx,57:$VG}),o($VO,[2,31]),o($Vj1,[2,32],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,57:$VG}),o($Vj1,[2,33],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,57:$VG}),o($Vj1,[2,34],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,57:$VG}),o($Vj1,[2,35],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,57:$VG}),o($Vj1,[2,36],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,57:$VG}),o($Vj1,[2,37],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,57:$VG}),o([2,5,16,18,22,24,26,43,55,78,114,118,119,123,132],[2,38],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM}),o([2,5,16,18,22,24,26,43,55,56,78,114,118,119,123,132],[2,39],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM}),o($VO,[2,40]),o($Vj1,[2,41],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,57:$VG}),o($Vj1,[2,42],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,57:$VG}),o($Vj1,[2,43],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,57:$VG}),o($Vj1,[2,44],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,57:$VG}),o($Vj1,[2,45],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,57:$VG}),o($Vj1,[2,46],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,57:$VG}),o($VO,[2,47]),o($VO,$VR),{18:[1,192],45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM},{15:[1,193]},{18:[1,194]},{15:[1,195]},{18:[1,196]},{15:[1,197]},{26:[1,198]},{15:[1,199]},{18:[1,200]},{15:[1,201]},{18:[1,202]},{15:[1,203]},{18:[1,204]},{18:[1,205],26:[1,206]},o($VO,[2,56]),o($Vk1,[2,58]),o($Vk1,[2,59],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM}),o($Vk1,[2,60]),o([2,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,118,119,123],$VR,{74:[1,207]}),o($VQ,[2,134],{26:[1,208]}),o($Vs,[2,136]),{15:[1,209]},o($Vs,[2,143],{130:$Vl1}),{65:[1,211],128:212},o($Vm1,[2,148]),o($Vm1,$VT,{109:104,73:105,72:213,74:$VS}),o($Vm1,$VT,{109:104,73:105,72:214,74:$VS}),o($Vm1,[2,151]),{15:[1,215],45:[1,216]},o($V31,$Vn1,{82:217,76:$Vo1,83:[1,218]}),o($V31,$Vn1,{82:220,76:$Vo1}),o($V31,[2,74]),o($V31,[2,113]),o($V31,[2,114]),o($V31,[2,115]),o($V31,[2,116]),{15:[1,221]},o($Vp1,[2,138],{130:$Vl1}),{16:$Vd,24:$V7,28:$VN,33:$Ve,40:84,64:$Vg,65:[1,222],66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},o($Vp1,[2,140],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM}),{18:[1,223]},{18:[2,10],26:[1,224]},o($Vk1,[2,13]),{15:[1,225]},o($V31,[2,119]),o($V31,[2,61]),{2:[1,227],15:$V41,45:$VX,75:226,79:177,80:178,81:$VY,83:$VZ,84:159,85:$V51,87:$V61,88:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,93:$Vc1,94:$Vd1,95:$Ve1,96:$Vf1,97:$Vg1,98:$Vh1,99:$V_,100:$V$,107:$V01,108:$V11},o($V31,[2,63]),o($V31,[2,65],{76:[1,228]}),o($V31,[2,67]),o($V31,[2,68]),{14:[1,229]},{14:[1,230]},{14:[1,231]},{14:[1,232]},{14:[1,233]},{14:[1,234]},{14:[1,235]},{14:[1,236]},{14:[1,237]},{14:[1,238]},{14:[1,239]},{14:[1,240]},{14:[1,241]},{41:[1,242]},{18:$VT,72:243,73:105,74:$VS,109:104},o($VO,[2,107]),{18:$VT,72:244,73:105,74:$VS,109:104},o($VO,[2,108]),{26:$VT,72:245,73:105,74:$VS,109:104},{65:[1,246]},{18:$VT,72:247,73:105,74:$VS,109:104},o($VO,[2,110]),{18:$VT,72:248,73:105,74:$VS,109:104},o($VO,[2,111]),{18:$VT,72:249,73:105,74:$VS,109:104},o($VO,[2,112]),o($VO,[2,55]),o($Vk1,$VT,{68:44,69:45,109:104,73:105,40:144,72:145,71:250,16:$Vd,24:$V7,28:$VN,33:$Ve,64:$Vg,65:$Vh,66:$Vi,67:$Vj,74:$VS,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo}),{15:$Vq1,16:$Vd,24:$V7,28:$VN,33:$Ve,40:254,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,74:[1,252],77:251,81:$Vr1,83:$Vs1,84:258,99:$V_,100:$V$,101:253,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$V01,108:$V11},{28:$VU,122:259},o($Vs,$VT,{109:104,73:105,72:260,74:$VS}),o($Vm1,$VT,{109:104,73:105,79:154,72:155,84:159,131:261,15:$VW,45:$VX,74:$VS,81:$VY,83:$VZ,99:$V_,100:$V$,107:$V01,108:$V11}),o($Vk1,[2,156],{125:[1,262]}),{18:[1,263],26:[1,264]},o($Vm1,[2,149]),o($Vm1,[2,150]),o($V31,$Vn1,{82:265,76:$Vo1}),o($V31,$Vn1,{82:266,76:$Vo1}),o($V31,[2,71]),o($V31,$Vn1,{82:267,76:$Vo1}),{15:$Vq1,16:$Vd,24:$V7,28:$VN,33:$Ve,40:254,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,77:268,81:$Vr1,83:$Vs1,84:258,99:$V_,100:$V$,101:253,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$V01,108:$V11},o($V31,[2,73]),{127:[1,269]},o([18,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],$VP,{125:[1,270]}),{19:271,20:[2,21],29:[1,272]},{27:273,28:$V21},{29:[1,274]},o($V31,[2,62]),o($V31,[2,64]),{15:$Vq1,16:$Vd,24:$V7,28:$VN,33:$Ve,40:254,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,77:275,81:$Vr1,83:$Vs1,84:258,99:$V_,100:$V$,101:253,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$V01,108:$V11},{14:[1,276]},{14:[1,277]},{14:[1,278]},{14:[1,279]},{14:[1,280]},{14:[1,281]},{14:[1,282]},{14:[1,283]},{14:[1,284]},{14:[1,285]},{14:[1,286]},{14:[1,287]},{14:[1,288]},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:289,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{18:[1,290]},{18:[1,291]},{26:[1,292]},{26:[1,293]},{18:[1,294]},{18:[1,295]},{18:[1,296]},o($Vk1,[2,57]),o($VQ,[2,132]),{15:$Vq1,16:$Vd,24:$V7,28:$VN,33:$Ve,40:254,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,77:297,81:$Vr1,83:$Vs1,84:258,99:$V_,100:$V$,101:253,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$V01,108:$V11},o($Vt1,[2,94]),o($Vt1,[2,95],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM}),{15:[1,298],45:[1,299]},o($Vt1,[2,98]),o($Vt1,$VT,{109:104,73:105,72:300,74:$VS}),o($Vt1,[2,100]),o($Vs,[2,135]),o($Vs,[2,137]),o($Vm1,[2,147]),{65:[1,301]},o($Vs,[2,145]),{65:[1,302]},o($V31,[2,69]),o($V31,[2,70]),o($V31,[2,72]),{78:[1,303]},o($VV,$VT,{109:104,73:105,131:152,79:154,72:155,84:159,124:304,15:$VW,45:$VX,74:$VS,81:$VY,83:$VZ,99:$V_,100:$V$,107:$V01,108:$V11}),{65:[1,305]},{20:[1,306]},{30:[1,307]},o($Vk1,[2,12]),{30:[1,308]},{78:[1,309]},{15:$Vu1,45:$Vv1,86:310,99:$Vw1,100:$Vx1},{15:$Vu1,45:$Vv1,86:315,99:$Vw1,100:$Vx1},{15:$Vu1,45:$Vv1,86:316,99:$Vw1,100:$Vx1},{15:$Vu1,45:$Vv1,86:317,99:$Vw1,100:$Vx1},{15:$Vu1,45:$Vv1,86:318,99:$Vw1,100:$Vx1},{15:$Vu1,45:$Vv1,86:319,99:$Vw1,100:$Vx1},{15:$Vu1,45:$Vv1,86:320,99:$Vw1,100:$Vx1},{15:$Vu1,45:$Vv1,86:321,99:$Vw1,100:$Vx1},{15:$Vu1,45:$Vv1,86:322,99:$Vw1,100:$Vx1},{15:$Vu1,45:$Vv1,86:323,99:$Vw1,100:$Vx1},{15:$Vu1,45:$Vv1,86:324,99:$Vw1,100:$Vx1},{15:$Vu1,45:$Vv1,86:325,99:$Vw1,100:$Vx1},{15:$Vu1,45:$Vv1,86:326,99:$Vw1,100:$Vx1},{42:327,43:[2,26],45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM},o($VO,[2,101]),o($VO,[2,102]),{65:[1,328]},{65:[1,329]},o($VO,[2,104]),o($VO,[2,105]),o($VO,[2,106]),o($VQ,[2,133]),o($Vt1,[2,96]),o($Vt1,[2,97]),o($Vt1,[2,99]),{18:[1,330]},o($Vk1,[2,155]),o($V31,[2,92]),o($Vs,[2,146],{130:$Vl1}),{18:[1,331]},o([114,132],$V4,{112:10,113:11,21:332,37:333,38:334,7:335,39:$Vf,123:$V5}),{14:[1,336]},{14:[1,337]},o($V31,[2,66]),o($V31,[2,75]),o($V31,$Vn1,{82:338,76:$Vo1}),o($V31,$Vn1,{82:339,76:$Vo1}),o($V31,$Vn1,{82:340,76:$Vo1}),o($V31,$Vn1,{82:341,76:$Vo1}),o($V31,[2,76]),o($V31,[2,77]),o($V31,[2,78]),o($V31,[2,79]),o($V31,[2,80]),o($V31,[2,81]),o($V31,[2,82]),o($V31,[2,83]),o($V31,[2,84]),o($V31,[2,85]),o($V31,[2,86]),o($V31,[2,87]),{43:[1,342],44:343},{26:[1,344]},{18:[1,345]},o($Vs,[2,144]),o($Vp1,[2,139]),{22:[1,346]},{22:[2,22]},{22:[2,23]},{110:347,114:$V8,132:$V9},{31:348,32:$Vy1,33:$Vz1,34:$VA1,35:$VB1,36:$VC1},{31:354,32:$Vy1,33:$Vz1,34:$VA1,35:$VB1,36:$VC1},o($V31,[2,88]),o($V31,[2,89]),o($V31,[2,90]),o($V31,[2,91]),{16:$Vd,24:$V7,28:$VN,33:$Ve,39:[1,356],40:355,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{43:[2,25]},{65:[1,357]},o($VO,[2,109]),{23:[1,358]},{111:359,132:$Vb},{20:[2,20]},o($VD1,[2,15]),o($VD1,[2,16]),o($VD1,[2,17]),o($VD1,[2,18]),o($VD1,[2,19]),o($Vk1,[2,14]),o($Vt,[2,24],{45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM}),{16:[1,360]},{18:[1,361]},o($V6,[2,7]),{22:[2,121]},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:362,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},o($VO,[2,103]),{18:[1,363],45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM},{41:[1,364]},{16:$Vd,24:$V7,28:$VN,33:$Ve,40:365,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:44,69:45,102:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo},{43:[2,27],45:$Vu,46:$Vv,47:$Vw,48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,54:$VD,55:$VE,56:$VF,57:$VG,58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM}],
defaultActions: {8:[2,1],15:[2,2],16:[2,157],19:[2,160],25:[2,9],27:[2,159],35:[2,158],54:[2,126],57:[2,129],95:[2,128],333:[2,22],334:[2,23],343:[2,25],348:[2,20],359:[2,121]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //const Nodo = require("./AST/nodo_arbol");
    //var raiz;

    const {Primitiva} = require("../Expresiones/Primitiva");
    const {Operacion} = require("../Expresiones/Operacion");
    const {Consulta} = require("../XPath/Consulta");
    const {Nodo} = require("../XPath/Nodo");
    const {Predicate} = require("../XPath/Predicate");
    const {TipoPrim} = require("../Expresiones/Primitiva")
    const {TipoOperacion} = require("../Expresiones/Operacion");
    const {TipoNodo} = require("../XPath/Nodo");
    const {TipoAxis} = require("../XPath/Nodo")

    const errores = require('../Global/ListaError');

    //IMPORTS XQUERY
    const {Flwor} = require("../XQuery/Flwor");
    const {Return} = require("../XQuery/Return");
    const {TipoReturn} = require("../XQuery/Return")
    const {Where} = require("../XQuery/Where");
    const {For} = require("../XQuery/For");
    const {Let} = require("../XQuery/Let");            
    const {OrderBy} = require("../XQuery/OrderBy");    
    const {TipoFor} = require("../XQuery/DeclaracionFor")
    const {DeclaracionFor} = require("../XQuery/DeclaracionFor")
    const {Sort} = require("../XQuery/Sort")
    const {CondicionIf} = require("../XQuery/CondicionIf")
    const {FuncionXQuery} = require("../XQuery/FuncionXQuery")
    const {Html} = require("../XQuery/Html")
    const {IfThenElse} = require("../XQuery/IfThenElse")
    const {ElseIf} = require("../XQuery/ElseIf")
    const {VarCall} = require("../XQuery/VarCall")
    const {TipoFuncionXQ} = require("../XQuery/FuncionXQuery")
    const {Atributo} = require("../XML/Atributo");
    const {UserFunction} = require("../XQuery/UserFunction");
    const {Llamada} = require("../XQuery/Llamada");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:return 28;
break;
case 5:return 53;
break;
case 6:return 74;
break;
case 7:return "dot";
break;
case 8:return "attr";
break;
case 9:return "corA";
break;
case 10:return "corC";
break;
case 11:return "andSelect";
break;
case 12:return "dospuntos";
break;
case 13:return "parA";
break;
case 14:return "parC";
break;
case 15:return "llaveA";
break;
case 16:return "llaveC";
break;
case 17:return "coma";
break;
case 18:return "puntocoma"
break;
case 19:return 45;
break;
case 20:return "mas";
break;
case 21:return "menos";
break;
case 22:return "div";
break;
case 23:return 49;
break;
case 24:return "gte";
break;
case 25:return 50;
break;
case 26:return 52;
break;
case 27:return "nequal";
break;
case 28:return "or";
break;
case 29:return "and";
break;
case 30:return "mod";
break;
case 31:return   "for";
break;
case 32:return "in";
break;
case 33:return "to";
break;
case 34:return "at";
break;
case 35:return "let";
break;
case 36:return "where";
break;
case 37:return "order";
break;
case 38:return "by";   
break;
case 39:return "return";
break;
case 40:return "if";
break;
case 41:return "else";
break;
case 42:return "then";
break;
case 43:return "reserv_eq";
break;
case 44:return "reserv_gt";
break;
case 45:return "reserv_ge";
break;
case 46:return "reserv_ne";
break;
case 47:return "reserv_le";
break;
case 48:return "reserv_lt"
break;
case 49:return "ancestorSelf";
break;
case 50:return "ancestor";
break;
case 51:return "attribute";
break;
case 52:return "child";
break;
case 53:return "descendantSelf";
break;
case 54:return "descendant";
break;
case 55:return "followingSib";
break;
case 56:return "following";
break;
case 57:return "namespace";
break;
case 58:return "parent";
break;
case 59:return "precedSib";
break;
case 60:return "preced";
break;
case 61:return "self";
break;
case 62:return "data";
break;
case 63:return "upper-case";
break;
case 64:return "substring";
break;
case 65:return "lower-case";
break;
case 66:return "number";
break;
case 67:return "declare";
break;
case 68:return "function";
break;
case 69:return "local";
break;
case 70:return "decimal";
break;
case 71:return "string";
break;
case 72:return "boolean";
break;
case 73:return "integer";
break;
case 74:return "as";
break;
case 75:return "xs";
break;
case 76:return "lastFunc";
break;
case 77:return "positionFunc";
break;
case 78:return "nodeFunc";
break;
case 79:return "textFunc";
break;
case 80:return 64;
break;
case 81:return 65;
break;
case 82:return 15;
break;
case 83:return 66;
break;
case 84:return 67;
break;
case 85:
                                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                    
break;
case 86:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\(:)/i,/^(?::\))/i,/^(?:.)/i,/^(?:\$)/i,/^(?:=)/i,/^(?:\/)/i,/^(?:\.)/i,/^(?:@)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:;)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:div\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:to\b)/i,/^(?:at\b)/i,/^(?:let\b)/i,/^(?:where\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:return\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:then\b)/i,/^(?:eq\b)/i,/^(?:gt\b)/i,/^(?:ge\b)/i,/^(?:ne\b)/i,/^(?:le\b)/i,/^(?:lt\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:data\b)/i,/^(?:upper-case\b)/i,/^(?:substring\b)/i,/^(?:lower-case\b)/i,/^(?:number\b)/i,/^(?:declare\b)/i,/^(?:function\b)/i,/^(?:local\b)/i,/^(?:decimal\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:integer\b)/i,/^(?:as\b)/i,/^(?:xs\b)/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:node\(\))/i,/^(?:text\(\))/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ.-]*)/i,/^(?:("((\\([\'\"\\]))|([^\"\\]+))*"))/i,/^(?:('((\\([\'\"\\]))|([^\'\\]))*'))/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XQuery;
exports.Parser = XQuery.Parser;
exports.parse = function () { return XQuery.parse.apply(XQuery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}