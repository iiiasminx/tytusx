/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XQuery_GramaticaAsc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[1,11],$V3=[1,12],$V4=[1,15],$V5=[37,40,43,50,64],$V6=[1,23],$V7=[1,33],$V8=[1,36],$V9=[1,29],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[1,34],$Ve=[1,42],$Vf=[19,37,40,43,50,64],$Vg=[19,26,37,40,43,50,64],$Vh=[5,19,37,40,43,50,64],$Vi=[2,92],$Vj=[1,66],$Vk=[15,44,94,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131],$Vl=[2,154],$Vm=[1,87],$Vn=[1,90],$Vo=[1,92],$Vp=[1,91],$Vq=[1,93],$Vr=[1,94],$Vs=[1,85],$Vt=[1,86],$Vu=[1,98],$Vv=[1,97],$Vw=[1,95],$Vx=[1,96],$Vy=[19,37,40,43,44,50,64,94,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131],$Vz=[1,103],$VA=[19,26,37,40,43,50,64,88],$VB=[1,110],$VC=[1,113],$VD=[1,115],$VE=[1,114],$VF=[5,15,19,26,37,40,43,44,50,58,64,76,88,94,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131],$VG=[1,122],$VH=[1,125],$VI=[1,126],$VJ=[1,127],$VK=[1,128],$VL=[1,129],$VM=[1,130],$VN=[1,131],$VO=[1,132],$VP=[1,133],$VQ=[1,134],$VR=[1,135],$VS=[1,136],$VT=[1,137],$VU=[1,160],$VV=[1,152],$VW=[1,153],$VX=[1,154],$VY=[1,155],$VZ=[1,156],$V_=[1,157],$V$=[1,158],$V01=[1,159],$V11=[1,161],$V21=[1,162],$V31=[1,163],$V41=[1,164],$V51=[1,165],$V61=[1,166],$V71=[1,167],$V81=[1,168],$V91=[1,169],$Va1=[1,170],$Vb1=[15,19,37,40,43,44,50,64,94,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131],$Vc1=[5,15,19,26,37,38,40,43,44,50,58,64,76,88,94,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131],$Vd1=[2,125],$Ve1=[1,191],$Vf1=[5,15,19,26,37,40,43,44,50,58,64,76,94,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131],$Vg1=[2,153],$Vh1=[1,241],$Vi1=[1,246],$Vj1=[15,26],$Vk1=[2,52],$Vl1=[1,251],$Vm1=[19,44,94,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131],$Vn1=[1,282],$Vo1=[1,287],$Vp1=[1,283],$Vq1=[15,19,37,40,43,44,50,64,115,116,118,119,120,121,122,123,124,126,127,128,129,130,131],$Vr1=[15,19,37,40,43,44,50,64,118,119,120,121,122,123,124,126,127,128,129,130,131],$Vs1=[1,303],$Vt1=[1,306],$Vu1=[1,304],$Vv1=[1,305],$Vw1=[2,67],$Vx1=[5,15,19,37,40,43,50,58,64,76],$Vy1=[1,351],$Vz1=[1,352],$VA1=[1,353],$VB1=[1,354],$VC1=[1,355],$VD1=[1,361],$VE1=[15,17,26];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"DEFINICIONXQUERY":4,"EOF":5,"FLWOR":6,"USERFUNCTION":7,"declare":8,"function":9,"PREFIX":10,"dospuntos":11,"identifier":12,"parA":13,"ARGUMENTOS":14,"parC":15,"TIPOFUNCION":16,"corA":17,"LISTAINSTR":18,"corC":19,"CUERPOFUNCION":20,"OPCIONAL":21,"RETURNTYPE":22,"as":23,"DATATYPE":24,"LISTAARGS":25,"coma":26,"PARAM":27,"dolar":28,"decimal":29,"string":30,"boolean":31,"double":32,"integer":33,"local":34,"LISTAOP":35,"LISTAOPCIONALES":36,"where":37,"diag":38,"EXPRESION":39,"order":40,"by":41,"LISTASORT":42,"let":43,"igual":44,"LISTACONSULTAS":45,"IntegerLiteral":46,"to":47,"LISTAENTEROS":48,"PRIMITIVAXPATH":49,"for":50,"LISTADECLARACIONES":51,"DECLARACIONFOR":52,"in":53,"at":54,"LISTAVARIABLECALL":55,"VARIABLECALL":56,"llaveA":57,"llaveC":58,"LISTANODOS":59,"TEXTCONTENT":60,"TEXT":61,"content":62,"DoubleLiteral":63,"return":64,"FUNCIONXQUERY":65,"IFDEF":66,"LLAMADAFUNCION":67,"LISTALLAMADA":68,"VARLLAMADA":69,"identifer":70,"NODO":71,"if":72,"then":73,"TIPOIF":74,"LISTAELSEIF":75,"else":76,"ELSEIF":77,"CONDICION":78,"DECRETURN":79,"LISTAATRIBUTOS":80,"ATRIBUTOS":81,"ATRIBUTO":82,"asig":83,"cadena":84,"cadena2":85,"SORT":86,"CONSULTA":87,"andSelect":88,"MASTIPOS":89,"TIPONODO":90,"AXES":91,"attr":92,"PREDICATE":93,"asterisco":94,"dot":95,"FUNCIONES":96,"ancestor":97,"NODETEST":98,"ancestorSelf":99,"attribute":100,"child":101,"descendant":102,"descendantSelf":103,"following":104,"followingSib":105,"namespace":106,"parent":107,"preced":108,"precedSib":109,"self":110,"textFunc":111,"nodeFunc":112,"PRIMITIVA":113,"OPERACION":114,"mas":115,"menos":116,"div":117,"lte":118,"lt":119,"gte":120,"gt":121,"nequal":122,"or":123,"and":124,"mod":125,"reserv_eq":126,"reserv_ne":127,"reserv_lt":128,"reserv_le":129,"reserv_gt":130,"reserv_ge":131,"data":132,"upper-case":133,"substring":134,"lower-case":135,"number":136,"lastFunc":137,"positionFunc":138,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"declare",9:"function",11:"dospuntos",12:"identifier",13:"parA",15:"parC",17:"corA",19:"corC",23:"as",26:"coma",28:"dolar",29:"decimal",30:"string",31:"boolean",32:"double",33:"integer",34:"local",37:"where",38:"diag",40:"order",41:"by",43:"let",44:"igual",46:"IntegerLiteral",47:"to",50:"for",53:"in",54:"at",57:"llaveA",58:"llaveC",62:"content",63:"DoubleLiteral",64:"return",70:"identifer",72:"if",73:"then",76:"else",83:"asig",84:"cadena",85:"cadena2",88:"andSelect",92:"attr",94:"asterisco",95:"dot",97:"ancestor",99:"ancestorSelf",100:"attribute",101:"child",102:"descendant",103:"descendantSelf",104:"following",105:"followingSib",106:"namespace",107:"parent",108:"preced",109:"precedSib",110:"self",111:"textFunc",112:"nodeFunc",115:"mas",116:"menos",117:"div",118:"lte",119:"lt",120:"gte",121:"gt",122:"nequal",123:"or",124:"and",125:"mod",126:"reserv_eq",127:"reserv_ne",128:"reserv_lt",129:"reserv_le",130:"reserv_gt",131:"reserv_ge",132:"data",133:"upper-case",134:"substring",135:"lower-case",136:"number",137:"lastFunc",138:"positionFunc"},
productions_: [0,[3,2],[4,1],[4,1],[7,12],[18,2],[18,1],[20,1],[20,1],[16,4],[16,0],[14,1],[14,0],[25,3],[25,1],[27,4],[24,1],[24,1],[24,1],[24,1],[24,1],[10,1],[6,2],[35,1],[35,0],[36,2],[36,1],[21,5],[21,6],[21,3],[21,6],[21,10],[21,8],[21,6],[21,2],[51,3],[51,1],[52,4],[52,8],[52,6],[52,7],[55,2],[55,1],[56,3],[56,5],[60,2],[60,1],[61,1],[61,1],[61,1],[61,1],[48,3],[48,1],[22,4],[22,2],[22,2],[22,4],[22,2],[67,6],[68,3],[68,1],[69,2],[69,1],[66,12],[66,13],[66,9],[75,2],[75,0],[77,10],[74,3],[74,3],[74,1],[74,2],[78,1],[79,1],[79,3],[79,1],[80,1],[80,0],[81,2],[81,1],[82,3],[82,3],[42,3],[42,1],[86,3],[45,3],[45,1],[87,2],[87,2],[87,1],[59,2],[59,0],[71,2],[71,3],[71,2],[71,3],[90,1],[90,4],[90,1],[90,1],[89,3],[89,3],[89,2],[89,3],[89,2],[89,1],[91,4],[91,4],[91,4],[91,4],[91,4],[91,4],[91,4],[91,4],[91,4],[91,4],[91,4],[91,4],[91,4],[98,2],[98,2],[98,2],[98,2],[93,3],[93,0],[39,1],[39,1],[39,1],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[114,3],[49,1],[49,1],[49,1],[49,1],[49,2],[113,0],[113,2],[113,2],[113,1],[113,2],[113,1],[113,1],[65,6],[65,6],[65,10],[65,6],[65,6],[65,6],[65,4],[65,4],[65,8],[65,4],[65,4],[65,4],[96,1],[96,1],[96,1],[96,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$; 
break;
case 2: case 3: case 7: case 8: case 11: case 16: case 17: case 18: case 19: case 20: case 21: case 23: case 46: case 57: case 62: case 71: case 73: case 77: case 90: case 128: case 175:
 this.$ = $$[$0];
break;
case 4:
 this.$ = $$[$0-11];
break;
case 5: case 25: case 41: case 66: case 79:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 6: case 26: case 42:
 this.$ = [$$[$0]]
break;
case 9: case 15:
 this.$ = $$[$0-3];
break;
case 10:
 this.$ = null
break;
case 12:
 this.$ =  []
break;
case 13:
 $$[$0-2].push($$[$0-2]); this.$ = $$[$0-2];
break;
case 14: case 52: case 60: case 80: case 84:
 this.$ = [$$[$0]];
break;
case 22:
 this.$ = new Flwor($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 24: case 67: case 78: case 125:
 this.$ = [];
break;
case 27:
 this.$ = new Where($$[$0-2],$$[$0], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 28:
 this.$ = new Where($$[$0-3], $$[$0], false, _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 29:
 this.$ = new OrderBy($$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 30:
 this.$ = new Let($$[$0-3], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 31:
 this.$ = new Let($$[$0-7], null, _$[$0-9].first_line, _$[$0-9].first_column, +$$[$0-3], +$$[$0-1]);
break;
case 32:
 this.$ = new Let($$[$0-5], null, _$[$0-7].first_line, _$[$0-7].first_column, undefined, undefined, $$[$0-1]);
break;
case 33:
 this.$ = new Let($$[$0-3], null, _$[$0-5].first_line, _$[$0-5].first_column, undefined, undefined, undefined, $$[$0]);
break;
case 34:
 this.$ = new For($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 35:
 $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2];
break;
case 36:
 this.$ = [$$[$0]]; 
break;
case 37:
 this.$ = new DeclaracionFor(TipoFor.NORMAL, $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 38:
 this.$ = new DeclaracionFor(TipoFor.ITERATIVO, $$[$0-6], null, _$[$0-7].first_line, _$[$0-7].first_column, undefined, +$$[$0-3], +$$[$0-1]);
break;
case 39:
 this.$ = new DeclaracionFor(TipoFor.ITERATIVO, $$[$0-4], null, _$[$0-5].first_line, _$[$0-5].first_column, undefined, undefined,undefined, $$[$0-1]);
break;
case 40:
 this.$ = new DeclaracionFor(TipoFor.AT, $$[$0-5], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-2])
break;
case 43:
 this.$ = new VarCall(undefined, undefined, $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 44:
 this.$ = new VarCall($$[$0-2], $$[$0-1], undefined, _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 45:
 $$[$0-1] = $$[$0-1] + " " + $$[$0]; this.$ = $$[$0-1];
break;
case 47: case 48:
 this.$ = $$[$0].toString().replaceAll("\"","");
break;
case 49: case 50:
 this.$ = $$[$0].toString().replaceAll("\"",""); 
break;
case 51: case 83:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 53:
 this.$ = new Return(TipoReturn.NORMAL, $$[$0-1], $$[$0], undefined, undefined, undefined, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 54:
 this.$ = new Return(TipoReturn.FUNCIONXQUERY, undefined, undefined, undefined, undefined, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 55:
 this.$ = new Return(TipoReturn.IFTHENELSE, undefined, undefined, undefined, $$[$0], undefined, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 56: case 61: case 69:
 this.$ = $$[$0-1];
break;
case 58:
 this.$ = "Llamada";
break;
case 59:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 63:
this.$ = new IfThenElse($$[$0-8], $$[$0-6], $$[$0-3], $$[$0-2], $$[$0], true, _$[$0-11].first_line, _$[$0-11].first_column);
break;
case 64:
this.$ = new IfThenElse($$[$0-9], $$[$0-6], $$[$0-3], $$[$0-2], $$[$0], false, _$[$0-12].first_line, _$[$0-12].first_column);
break;
case 65:
 new IfThenElse(undefined, $$[$0-6], $$[$0-3], $$[$0-2], $$[$0], false, _$[$0-8].first_line, _$[$0-8].first_column);
break;
case 68:
 this.$ = new ElseIf($$[$0-5], $$[$0-3], $$[$0], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 70: case 124:
 this.$ = $$[$0-1]
break;
case 72:
 this.$ = new CondicionIf(undefined, undefined, undefined, undefined, true, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 74:
 this.$ = new CondicionIf(undefined, undefined, undefined, $$[$0], false, _$[$0].first_line, _$[$0].first_column); 
break;
case 75:
 this.$ = new CondicionIf($$[$0-1], $$[$0], undefined, undefined, false,  _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 76:
 this.$ = new CondicionIf(undefined, undefined, undefined, undefined, false, _$[$0].first_line, _$[$0].first_column);
break;
case 81: case 82:
 this.$ = new Atributo($$[$0-2].toString().replaceAll("\"",""), $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 85:
 this.$ = new Sort($$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 86:
 this.$ = [new Consulta($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column)]; this.$ = this.$.concat($$[$0]);
break;
case 87:
  this.$ = [new Consulta($$[$0], _$[$0].first_line, _$[$0].first_column)];
break;
case 88:
       
                        this.$ = [new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column)];                                          
                        if($$[$0].length > 0){  
                                this.$ = this.$.concat($$[$0]);
                        }

                
break;
case 89:
 
                        this.$ = [$$[$0-1]]; 
                        if($$[$0].length > 0){
                               this.$ =  this.$.concat($$[$0]);
                        } 
                
break;
case 91:
 this.$ = [$$[$0-1]]; this.$ = this.$.concat($$[$0]); 
break;
case 92:
 this.$ = []; 
break;
case 93:
 $$[$0].fromRoot = true; this.$ = $$[$0];
break;
case 94:
 $$[$0].fromRoot = false; this.$ = $$[$0];
break;
case 95:
 console.log('Entra a error sintactico de one diag');
                    errores.default.agregarError('sintactico', 'Token inesperado \'' + yytext + '\'', _$[$0-1].first_line, _$[$0-1].first_column); 
                this.$ = new Nodo($$[$0], TipoNodo.NODOERROR, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 96:
 console.log('Entra a error sintactico de two diags');
                errores.default.agregarError('sintactico', 'Token inesperado \'' + yytext + '\'', _$[$0-2].first_line, _$[$0-2].first_column); 
            this.$ = new Nodo($$[$0], TipoNodo.NODOERROR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 97:
 this.$ = new Nodo($$[$0], TipoNodo.IDENTIFIER, _$[$0].first_line, _$[$0].first_column);
break;
case 98:
 this.$ = new Nodo($$[$0-3], TipoNodo.IDENTIFIER, _$[$0-3].first_line, _$[$0-3].first_column, new Predicate($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column));
break;
case 99: case 100: case 126: case 173: case 174: case 176:
 this.$ = $$[$0]; 
break;
case 101: case 102:
 this.$ = new Nodo($$[$0-1], TipoNodo.ATRIBUTO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 103:
 this.$ = new Nodo($$[$0-1], TipoNodo.DOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 104:
 this.$ = new Nodo($$[$0-2]+$$[$0-1], TipoNodo.DOTDOT, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 105:
  this.$ = new Nodo($$[$0-1], TipoNodo.ASTERISCO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 106:
 this.$ = new Nodo($$[$0], TipoNodo.FUNCION, _$[$0].first_line, _$[$0].first_column);
break;
case 107:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.ANCESTOR, $$[$0-1])
break;
case 108:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.ANCESTORORSELF, $$[$0-1])
break;
case 109:
 this.$ =new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.ATTRIBUTE, $$[$0-1])
break;
case 110:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.CHILD, $$[$0-1])
break;
case 111:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.DESCENDANT, $$[$0-1])
break;
case 112:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.DESCENDANTORSELF, $$[$0-1])
break;
case 113:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.FOLLOWING, $$[$0-1])
break;
case 114:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.FOLLOWINGSIBLING, $$[$0-1])
break;
case 115:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.NAMESPACE, $$[$0-1])
break;
case 116:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.PARENT, $$[$0-1])
break;
case 117:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.PRECEDING, $$[$0-1])
break;
case 118:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.PRECEDINGSIBLING, $$[$0-1])
break;
case 119:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.SELF, $$[$0-1])
break;
case 120:
 
                        if($$[$0] instanceof Predicate){
                                this.$ = new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column);
                        }else{
                                this.$ = new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
                        }
                
break;
case 121: case 122:
 
                        if($$[$0] instanceof Predicate){
                                this.$ = new Nodo($$[$0-1], TipoNodo.FUNCION, _$[$0-1].first_line, _$[$0-1].first_column);
                        }else{
                                this.$ = new Nodo($$[$0-1], TipoNodo.FUNCION, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
                        }
                
break;
case 123:
 
                        if($$[$0] instanceof Predicate){
                                this.$ = new Nodo($$[$0-1], TipoNodo.ASTERISCO, _$[$0-1].first_line, _$[$0-1].first_column);
                        }else{
                                this.$ = new Nodo($$[$0-1], TipoNodo.ASTERISCO, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
                        }
                
break;
case 127:
 this.$ = $$[$0] ;
break;
case 129:
 this.$ = new Operacion(TipoOperacion.MULTIPLICACION, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 130:
 this.$ = new Operacion(TipoOperacion.SUMA, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 131:
 this.$ = new Operacion(TipoOperacion.RESTA, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 132:
 this.$ = new Operacion(TipoOperacion.DIVISION, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 133: case 145:
 this.$ = new Operacion(TipoOperacion.MENORIGUALQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 134: case 144:
 this.$ = new Operacion(TipoOperacion.MENORQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 135: case 147:
 this.$ = new Operacion(TipoOperacion.MAYORIGUALQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 136: case 146:
 this.$ = new Operacion(TipoOperacion.MAYORQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 137: case 142:
 this.$ = new Operacion(TipoOperacion.IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 138: case 143:
 this.$ = new Operacion(TipoOperacion.DIFERENTEQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 139:
 this.$ = new Operacion(TipoOperacion.OR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 140:
 this.$ = new Operacion(TipoOperacion.AND, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 141:
 this.$ = new Operacion(TipoOperacion.MOD, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 148:
 this.$ = new Operacion(TipoOperacion.PAR, $$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 149:
 this.$ = new Primitiva($$[$0], TipoPrim.DOUBLE, _$[$0].first_line, _$[$0].first_column, true); 
break;
case 150:
 this.$ = new Primitiva($$[$0], TipoPrim.INTEGER, _$[$0].first_line, _$[$0].first_column, true); 
break;
case 151: case 152:
 this.$ = new Primitiva($$[$0], TipoPrim.CADENA, _$[$0].first_line, _$[$0].first_column, true); 
break;
case 153:
 this.$ = new Primitiva($$[$0-1], TipoPrim.XQUERYIDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column, true); 
break;
case 155: case 156:
 this.$ = new Primitiva($$[$0], TipoPrim.ATRIBUTO, _$[$0-1].first_line, _$[$0-1].first_column, true);
break;
case 157:
 this.$ = new Primitiva($$[$0], TipoPrim.DOT, _$[$0].first_line, _$[$0].first_column, true);
break;
case 158:
 
                if($$[$0].length > 0){
                        this.$ = [new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column)]; this.$ = this.$.concat($$[$0]); 
                        this.$ = new Primitiva(this.$, TipoPrim.CONSULTA, _$[$0-1].first_line, _$[$0-1].first_column);
                }else{
                        this.$ = new Primitiva($$[$0-1], TipoPrim.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column);

                }
        
break;
case 159:
 this.$ = new Primitiva($$[$0], TipoPrim.FUNCION, _$[$0].first_line, _$[$0].first_column);
break;
case 160:
 this.$ = new Primitiva($$[$0], TipoPrim.FUNCIONXQUERY, _$[$0].first_line, _$[$0].first_column);
break;
case 161:
 this.$ = new FuncionXQuery(TipoFuncionXQ.DATA, $$[$0-2], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 162:
 this.$ = new FuncionXQuery(TipoFuncionXQ.UPPERCASE, $$[$0-2],$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 163:
 this.$ = new FuncionXQuery(TipoFuncionXQ.SUBSTRING, $$[$0-6], $$[$0-5], _$[$0-9].first_line, _$[$0-9].first_column, +$$[$0-3], +$$[$0-1])
break;
case 164:
 this.$ = new FuncionXQuery(TipoFuncionXQ.LOWERCASE, $$[$0-2],$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 165:
 this.$ = new FuncionXQuery(TipoFuncionXQ.STRING, $$[$0-2],$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 166:
 this.$ = new FuncionXQuery(TipoFuncionXQ.NUMBER, $$[$0-2],$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 167:
 this.$ = new FuncionXQuery(TipoFuncionXQ.DATA, undefined, undefined, _$[$0-3].first_line, _$[$0-3].first_column, undefined, undefined, $$[$0-1])
break;
case 168:
 this.$ = new FuncionXQuery(TipoFuncionXQ.UPPERCASE, undefined,undefined , _$[$0-3].first_line, _$[$0-3].first_column, undefined, undefined, $$[$0-1])
break;
case 169:
 this.$ = new FuncionXQuery(TipoFuncionXQ.SUBSTRING, undefined, undefined, _$[$0-7].first_line, _$[$0-7].first_column, +$$[$0-3], +$$[$0-1], $$[$0-5])
break;
case 170:
 this.$ = new FuncionXQuery(TipoFuncionXQ.LOWERCASE, undefined,undefined, _$[$0-3].first_line, _$[$0-3].first_column,undefined, undefined, $$[$0-1])
break;
case 171:
 this.$ = new FuncionXQuery(TipoFuncionXQ.STRING, undefined,undefined, _$[$0-3].first_line, _$[$0-3].first_column, undefined, undefined, $$[$0-1])
break;
case 172:
 this.$ = new FuncionXQuery(TipoFuncionXQ.NUMBER, undefined,undefined, _$[$0-3].first_line, _$[$0-3].first_column, undefined, undefined, $$[$0-1] )
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,6],21:8,35:5,36:7,37:$V0,40:$V1,43:$V2,50:$V3,64:[2,24]},{1:[3]},{5:[1,13]},{5:[2,2]},{5:[2,3]},{22:14,64:$V4},{9:[1,16]},{21:17,37:$V0,40:$V1,43:$V2,50:$V3,64:[2,23]},o($V5,[2,26]),{28:[1,18]},{41:[1,19]},{28:[1,20]},{28:$V6,51:21,52:22},{1:[2,1]},{5:[2,22]},{13:[1,27],28:[1,24],30:$V7,34:$V8,65:25,66:26,67:28,72:[1,35],132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{10:37,34:[1,38]},o($V5,[2,25]),{12:[1,39]},{28:$Ve,42:40,86:41},{12:[1,43]},o($Vf,[2,34],{26:[1,44]}),o($Vg,[2,36]),{12:[1,45]},{12:[1,46]},o($Vh,[2,54]),o($Vh,[2,55]),{34:$V8,67:47},o($Vh,[2,57]),{13:[1,48]},{13:[1,49]},{13:[1,50]},{13:[1,51]},{13:[1,52]},{13:[1,53]},{13:[1,54]},{11:[1,55]},{11:[1,56]},{11:[2,21]},{38:[1,57]},o($Vf,[2,29],{26:[1,58]}),o($Vg,[2,84]),{12:[1,59]},{11:[1,60]},{28:$V6,52:61},{53:[1,62],54:[1,63]},o($Vh,$Vi,{59:64,71:65,38:$Vj}),{15:[1,67]},{28:[1,68],30:$V7,65:69,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{28:[1,70],30:$V7,65:71,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{28:[1,72],30:$V7,65:73,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{28:[1,74],30:$V7,65:75,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{28:[1,76],30:$V7,65:77,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{28:[1,78],30:$V7,65:79,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},o($Vk,$Vl,{39:81,113:82,114:83,49:84,96:88,65:89,12:$Vm,13:$Vn,28:[1,80],30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),{12:[1,99]},{12:[1,100]},o($Vy,$Vl,{113:82,114:83,49:84,96:88,65:89,39:101,12:$Vm,13:$Vn,28:$Vz,30:$V7,38:[1,102],46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),{28:$Ve,86:104},o($Vg,$Vi,{71:65,59:105,38:$Vj}),{44:[1,106]},o($Vg,[2,35]),o($VA,$Vi,{71:65,45:107,87:109,89:111,59:112,96:116,12:$VB,13:[1,108],38:$Vj,92:$VC,94:$VD,95:$VE,111:$Vu,112:$Vv,137:$Vw,138:$Vx}),{28:[1,117]},o($Vh,[2,53]),o($VF,$Vi,{71:65,59:118,38:$Vj}),{2:[1,121],12:$VG,38:[1,120],89:123,90:119,91:124,92:$VC,94:$VD,95:$VE,96:116,97:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,110:$VT,111:$Vu,112:$Vv,137:$Vw,138:$Vx},o($Vh,[2,56]),{12:[1,138]},{15:[1,139]},{12:[1,140]},{15:[1,141]},{12:[1,142]},{26:[1,143]},{12:[1,144]},{15:[1,145]},{12:[1,146]},{15:[1,147]},{12:[1,148]},{15:[1,149]},{12:[1,150]},{15:[1,151],44:$VU,94:$VV,115:$VW,116:$VX,117:$VY,118:$VZ,119:$V_,120:$V$,121:$V01,122:$V11,123:$V21,124:$V31,125:$V41,126:$V51,127:$V61,128:$V71,129:$V81,130:$V91,131:$Va1},o($Vb1,[2,126]),o($Vb1,[2,127]),o($Vb1,[2,128]),{12:[1,171],94:[1,172]},o($Vb1,[2,157]),o($Vb1,$Vi,{71:65,59:173,38:$Vj}),o($Vb1,[2,159]),o($Vb1,[2,160]),o($Vk,$Vl,{113:82,114:83,49:84,96:88,65:89,39:174,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,[2,149]),o($Vb1,[2,150]),o($Vb1,[2,151]),o($Vb1,[2,152]),o($Vc1,[2,173]),o($Vc1,[2,174]),o($Vc1,[2,175]),o($Vc1,[2,176]),{13:[1,175]},{13:[1,176]},o($Vf,[2,27],{44:$VU,94:$VV,115:$VW,116:$VX,117:$VY,118:$VZ,119:$V_,120:$V$,121:$V01,122:$V11,123:$V21,124:$V31,125:$V41,126:$V51,127:$V61,128:$V71,129:$V81,130:$V91,131:$Va1}),o($Vy,$Vl,{113:82,114:83,49:84,96:88,65:89,39:177,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),{12:[1,178]},o($Vg,[2,83]),o($Vg,[2,85]),o([19,37,40,43,50,64,88],$Vi,{71:65,87:109,89:111,59:112,96:116,45:179,49:181,12:$VB,13:[1,180],28:$Vz,38:$Vj,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$VC,94:$VD,95:$VE,111:$Vu,112:$Vv,137:$Vw,138:$Vx}),o($Vg,[2,37]),{46:[1,182],48:183},o($Vg,[2,87],{88:[1,184]}),o($VA,$Vi,{71:65,59:185,38:$Vj}),o($VA,$Vi,{71:65,59:186,38:$Vj}),o($VA,[2,90]),{12:[1,187],94:[1,188]},o($Vc1,$Vd1,{93:189,17:$Ve1,95:[1,190]}),o($Vc1,$Vd1,{93:192,17:$Ve1}),o($Vc1,[2,106]),{12:[1,193]},o($VF,[2,91]),o($Vc1,[2,93]),{2:[1,195],12:$VG,89:123,90:194,91:124,92:$VC,94:$VD,95:$VE,96:116,97:$VH,99:$VI,100:$VJ,101:$VK,102:$VL,103:$VM,104:$VN,105:$VO,106:$VP,107:$VQ,108:$VR,109:$VS,110:$VT,111:$Vu,112:$Vv,137:$Vw,138:$Vx},o($Vc1,[2,95]),o($Vc1,[2,97],{17:[1,196]}),o($Vc1,[2,99]),o($Vc1,[2,100]),{11:[1,197]},{11:[1,198]},{11:[1,199]},{11:[1,200]},{11:[1,201]},{11:[1,202]},{11:[1,203]},{11:[1,204]},{11:[1,205]},{11:[1,206]},{11:[1,207]},{11:[1,208]},{11:[1,209]},{15:$Vi,38:$Vj,59:210,71:65},o($Vf1,[2,167]),{15:$Vi,38:$Vj,59:211,71:65},o($Vf1,[2,168]),{26:$Vi,38:$Vj,59:212,71:65},{46:[1,213]},{15:$Vi,38:$Vj,59:214,71:65},o($Vf1,[2,170]),{15:$Vi,38:$Vj,59:215,71:65},o($Vf1,[2,171]),{15:$Vi,38:$Vj,59:216,71:65},o($Vf1,[2,172]),o($Vk,$Vg1,{38:[1,217]}),{73:[1,218]},o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:219,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:220,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:221,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:222,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:223,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:224,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:225,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:226,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:227,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:228,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:229,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:230,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:231,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:232,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:233,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:234,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:235,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:236,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:237,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vb1,[2,155]),o($Vb1,[2,156]),o($Vb1,[2,158]),{15:[1,238],44:$VU,94:$VV,115:$VW,116:$VX,117:$VY,118:$VZ,119:$V_,120:$V$,121:$V01,122:$V11,123:$V21,124:$V31,125:$V41,126:$V51,127:$V61,128:$V71,129:$V81,130:$V91,131:$Va1},{28:$Vh1,38:$Vj,68:239,69:240,71:242},{14:243,15:[2,12],25:244,27:245,28:$Vi1},o($Vf,[2,28],{44:$VU,94:$VV,115:$VW,116:$VX,117:$VY,118:$VZ,119:$V_,120:$V$,121:$V01,122:$V11,123:$V21,124:$V31,125:$V41,126:$V51,127:$V61,128:$V71,129:$V81,130:$V91,131:$Va1}),o($Vb1,$Vg1),o($Vf,[2,30]),{46:[1,247],48:248},o($Vf,[2,33]),o($Vj1,$Vk1,{47:[1,249]}),{15:[1,250],26:$Vl1},o($VA,$Vi,{71:65,87:109,89:111,59:112,96:116,45:252,12:$VB,38:$Vj,92:$VC,94:$VD,95:$VE,111:$Vu,112:$Vv,137:$Vw,138:$Vx}),o($VA,[2,88]),o($VA,[2,89]),o($Vc1,$Vd1,{93:253,17:$Ve1}),o($Vc1,$Vd1,{93:254,17:$Ve1}),o($Vc1,[2,103]),o($Vc1,$Vd1,{93:255,17:$Ve1}),o($Vm1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:256,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),o($Vc1,[2,105]),{53:[1,257]},o($Vc1,[2,94]),o($Vc1,[2,96]),o($Vm1,$Vl,{113:82,114:83,49:84,96:88,65:89,39:258,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),{11:[1,259]},{11:[1,260]},{11:[1,261]},{11:[1,262]},{11:[1,263]},{11:[1,264]},{11:[1,265]},{11:[1,266]},{11:[1,267]},{11:[1,268]},{11:[1,269]},{11:[1,270]},{11:[1,271]},{15:[1,272]},{15:[1,273]},{26:[1,274]},{26:[1,275]},{15:[1,276]},{15:[1,277]},{15:[1,278]},o($Vk,$Vl,{113:82,114:83,49:84,96:88,65:89,39:279,12:$Vm,13:$Vn,28:$Vz,30:$V7,38:[1,280],46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),{13:$Vn1,28:$Vo1,30:$V7,34:$V8,57:$Vp1,65:286,67:288,74:281,78:284,79:285,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},o($Vb1,[2,129]),o($Vq1,[2,130],{94:$VV,117:$VY,125:$V41}),o($Vq1,[2,131],{94:$VV,117:$VY,125:$V41}),o($Vb1,[2,132]),o($Vr1,[2,133],{94:$VV,115:$VW,116:$VX,117:$VY,125:$V41}),o($Vr1,[2,134],{94:$VV,115:$VW,116:$VX,117:$VY,125:$V41}),o($Vr1,[2,135],{94:$VV,115:$VW,116:$VX,117:$VY,125:$V41}),o($Vr1,[2,136],{94:$VV,115:$VW,116:$VX,117:$VY,125:$V41}),o($Vr1,[2,137],{94:$VV,115:$VW,116:$VX,117:$VY,125:$V41}),o($Vr1,[2,138],{94:$VV,115:$VW,116:$VX,117:$VY,125:$V41}),o([15,19,37,40,43,50,64,123],[2,139],{44:$VU,94:$VV,115:$VW,116:$VX,117:$VY,118:$VZ,119:$V_,120:$V$,121:$V01,122:$V11,124:$V31,125:$V41,126:$V51,127:$V61,128:$V71,129:$V81,130:$V91,131:$Va1}),o([15,19,37,40,43,50,64,123,124],[2,140],{44:$VU,94:$VV,115:$VW,116:$VX,117:$VY,118:$VZ,119:$V_,120:$V$,121:$V01,122:$V11,125:$V41,126:$V51,127:$V61,128:$V71,129:$V81,130:$V91,131:$Va1}),o($Vb1,[2,141]),o($Vr1,[2,142],{94:$VV,115:$VW,116:$VX,117:$VY,125:$V41}),o($Vr1,[2,143],{94:$VV,115:$VW,116:$VX,117:$VY,125:$V41}),o($Vr1,[2,144],{94:$VV,115:$VW,116:$VX,117:$VY,125:$V41}),o($Vr1,[2,145],{94:$VV,115:$VW,116:$VX,117:$VY,125:$V41}),o($Vr1,[2,146],{94:$VV,115:$VW,116:$VX,117:$VY,125:$V41}),o($Vr1,[2,147],{94:$VV,115:$VW,116:$VX,117:$VY,125:$V41}),o($Vb1,[2,148]),{15:[1,289],26:[1,290]},o($Vj1,[2,60]),{70:[1,291]},o($Vj1,[2,62]),{15:[1,292]},{15:[2,11],26:[1,293]},o($Vj1,[2,14]),{12:[1,294]},o($Vj1,$Vk1,{47:[1,295]}),{15:[1,296],26:$Vl1},{46:[1,297]},o($Vg,[2,39]),{46:[1,298]},o($Vg,[2,86]),o($Vc1,[2,101]),o($Vc1,[2,102]),o($Vc1,[2,104]),{19:[1,299],44:$VU,94:$VV,115:$VW,116:$VX,117:$VY,118:$VZ,119:$V_,120:$V$,121:$V01,122:$V11,123:$V21,124:$V31,125:$V41,126:$V51,127:$V61,128:$V71,129:$V81,130:$V91,131:$Va1},o($VA,$Vi,{71:65,87:109,89:111,59:112,96:116,45:300,12:$VB,38:$Vj,92:$VC,94:$VD,95:$VE,111:$Vu,112:$Vv,137:$Vw,138:$Vx}),{19:[1,301],44:$VU,94:$VV,115:$VW,116:$VX,117:$VY,118:$VZ,119:$V_,120:$V$,121:$V01,122:$V11,123:$V21,124:$V31,125:$V41,126:$V51,127:$V61,128:$V71,129:$V81,130:$V91,131:$Va1},{12:$Vs1,94:$Vt1,98:302,111:$Vu1,112:$Vv1},{12:$Vs1,94:$Vt1,98:307,111:$Vu1,112:$Vv1},{12:$Vs1,94:$Vt1,98:308,111:$Vu1,112:$Vv1},{12:$Vs1,94:$Vt1,98:309,111:$Vu1,112:$Vv1},{12:$Vs1,94:$Vt1,98:310,111:$Vu1,112:$Vv1},{12:$Vs1,94:$Vt1,98:311,111:$Vu1,112:$Vv1},{12:$Vs1,94:$Vt1,98:312,111:$Vu1,112:$Vv1},{12:$Vs1,94:$Vt1,98:313,111:$Vu1,112:$Vv1},{12:$Vs1,94:$Vt1,98:314,111:$Vu1,112:$Vv1},{12:$Vs1,94:$Vt1,98:315,111:$Vu1,112:$Vv1},{12:$Vs1,94:$Vt1,98:316,111:$Vu1,112:$Vv1},{12:$Vs1,94:$Vt1,98:317,111:$Vu1,112:$Vv1},{12:$Vs1,94:$Vt1,98:318,111:$Vu1,112:$Vv1},o($Vf1,[2,161]),o($Vf1,[2,162]),{46:[1,319]},{46:[1,320]},o($Vf1,[2,164]),o($Vf1,[2,165]),o($Vf1,[2,166]),{15:[1,321],44:$VU,94:$VV,115:$VW,116:$VX,117:$VY,118:$VZ,119:$V_,120:$V$,121:$V01,122:$V11,123:$V21,124:$V31,125:$V41,126:$V51,127:$V61,128:$V71,129:$V81,130:$V91,131:$Va1},o($Vk,$Vl,{113:82,114:83,49:84,96:88,65:89,39:322,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),{75:323,76:$Vw1},{13:$Vn1,15:[1,325],28:$Vo1,30:$V7,34:$V8,57:$Vp1,65:286,67:288,74:324,78:284,79:285,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{13:$Vn1,28:$Vo1,30:$V7,34:$V8,57:$Vp1,65:286,67:288,74:326,78:284,79:285,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},o($Vx1,[2,71]),o($Vx1,[2,73]),o($Vx1,[2,74]),{12:[1,327]},o($Vx1,[2,76]),o($Vx1,[2,58]),{28:$Vh1,38:$Vj,69:328,71:242},o($Vj1,[2,61]),{16:329,17:[2,10],23:[1,330]},{27:331,28:$Vi1},{23:[1,332]},{46:[1,333]},o($Vf,[2,32]),{15:[1,334]},o($Vj1,[2,51]),o($Vc1,[2,124]),o($Vg,[2,40]),o($Vc1,[2,98]),o($Vc1,[2,107]),o($Vc1,$Vd1,{93:335,17:$Ve1}),o($Vc1,$Vd1,{93:336,17:$Ve1}),o($Vc1,$Vd1,{93:337,17:$Ve1}),o($Vc1,$Vd1,{93:338,17:$Ve1}),o($Vc1,[2,108]),o($Vc1,[2,109]),o($Vc1,[2,110]),o($Vc1,[2,111]),o($Vc1,[2,112]),o($Vc1,[2,113]),o($Vc1,[2,114]),o($Vc1,[2,115]),o($Vc1,[2,116]),o($Vc1,[2,117]),o($Vc1,[2,118]),o($Vc1,[2,119]),{26:[1,339]},{15:[1,340]},{73:[1,341]},{15:[1,342],44:$VU,94:$VV,115:$VW,116:$VX,117:$VY,118:$VZ,119:$V_,120:$V$,121:$V01,122:$V11,123:$V21,124:$V31,125:$V41,126:$V51,127:$V61,128:$V71,129:$V81,130:$V91,131:$Va1},{76:[1,343],77:344},{15:[1,345]},o($Vx1,[2,72]),{58:[1,346]},o($Vx1,$Vi,{71:65,59:347,38:$Vj}),o($Vj1,[2,59]),{17:[1,348]},{12:[1,349]},o($Vj1,[2,13]),{24:350,29:$Vy1,30:$Vz1,31:$VA1,32:$VB1,33:$VC1},{15:[1,356]},o($Vg,[2,38]),o($Vc1,[2,120]),o($Vc1,[2,121]),o($Vc1,[2,122]),o($Vc1,[2,123]),{46:[1,357]},o($Vf1,[2,169]),{13:$Vn1,28:$Vo1,30:$V7,34:$V8,57:$Vp1,65:286,67:288,74:358,78:284,79:285,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{73:[1,359]},{13:$Vn1,28:$Vo1,30:$V7,34:$V8,57:$Vp1,65:286,67:288,72:$VD1,74:360,78:284,79:285,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{76:[2,66]},o($Vx1,[2,69]),o($Vx1,[2,70]),o($Vx1,[2,75]),{18:362,20:363,21:364,22:365,37:$V0,40:$V1,43:$V2,50:$V3,64:$V4},{11:[1,366]},o($Vj1,[2,15]),o($VE1,[2,16]),o($VE1,[2,17]),o($VE1,[2,18]),o($VE1,[2,19]),o($VE1,[2,20]),o($Vf,[2,31]),{15:[1,367]},{75:368,76:$Vw1},{13:$Vn1,28:$Vo1,30:$V7,34:$V8,57:$Vp1,65:286,67:288,74:369,78:284,79:285,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},o($Vh,[2,65]),{13:[1,370]},{19:[1,371],20:372,21:364,22:365,37:$V0,40:$V1,43:$V2,50:$V3,64:$V4},o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),{24:373,29:$Vy1,30:$Vz1,31:$VA1,32:$VB1,33:$VC1},o($Vf1,[2,163]),{76:[1,374],77:344},{75:375,76:$Vw1},{28:[1,376]},{5:[2,4]},o($Vf,[2,5]),{17:[2,9]},{13:$Vn1,28:$Vo1,30:$V7,34:$V8,57:$Vp1,65:286,67:288,72:$VD1,74:377,78:284,79:285,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{76:[1,378],77:344},{12:[1,379]},o($Vh,[2,63]),{13:$Vn1,28:$Vo1,30:$V7,34:$V8,57:$Vp1,65:286,67:288,72:$VD1,74:380,78:284,79:285,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{38:[1,381]},o($Vh,[2,64]),o($Vk,$Vl,{113:82,114:83,49:84,96:88,65:89,39:382,12:$Vm,13:$Vn,28:$Vz,30:$V7,46:$Vo,63:$Vp,84:$Vq,85:$Vr,92:$Vs,95:$Vt,111:$Vu,112:$Vv,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd,137:$Vw,138:$Vx}),{15:[1,383],44:$VU,94:$VV,115:$VW,116:$VX,117:$VY,118:$VZ,119:$V_,120:$V$,121:$V01,122:$V11,123:$V21,124:$V31,125:$V41,126:$V51,127:$V61,128:$V71,129:$V81,130:$V91,131:$Va1},{73:[1,384]},{13:$Vn1,28:$Vo1,30:$V7,34:$V8,57:$Vp1,65:286,67:288,74:385,78:284,79:285,132:$V9,133:$Va,134:$Vb,135:$Vc,136:$Vd},{76:[2,68]}],
defaultActions: {3:[2,2],4:[2,3],13:[2,1],14:[2,22],38:[2,21],344:[2,66],371:[2,4],373:[2,9],385:[2,68]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //const Nodo = require("./AST/nodo_arbol");
    //var raiz;

    const {Primitiva} = require("../Expresiones/Primitiva");
    const {Operacion} = require("../Expresiones/Operacion");
    const {Consulta} = require("../XPath/Consulta");
    const {Nodo} = require("../XPath/Nodo");
    const {Predicate} = require("../XPath/Predicate");
    const {TipoPrim} = require("../Expresiones/Primitiva")
    const {TipoOperacion} = require("../Expresiones/Operacion");
    const {TipoNodo} = require("../XPath/Nodo");
    const {TipoAxis} = require("../XPath/Nodo")

    const errores = require('../Global/ListaError');

    //IMPORTS XQUERY
    const {Flwor} = require("../XQuery/Flwor");
    const {Return} = require("../XQuery/Return");
    const {TipoReturn} = require("../XQuery/Return")
    const {Where} = require("../XQuery/Where");
    const {For} = require("../XQuery/For");
    const {Let} = require("../XQuery/Let");            
    const {OrderBy} = require("../XQuery/OrderBy");    
    const {TipoFor} = require("../XQuery/DeclaracionFor")
    const {DeclaracionFor} = require("../XQuery/DeclaracionFor")
    const {Sort} = require("../XQuery/Sort")
    const {CondicionIf} = require("../XQuery/CondicionIf")
    const {FuncionXQuery} = require("../XQuery/FuncionXQuery")
    const {Html} = require("../XQuery/Html")
    const {IfThenElse} = require("../XQuery/IfThenElse")
    const {ElseIf} = require("../XQuery/ElseIf")
    const {VarCall} = require("../XQuery/VarCall")
    const {TipoFuncionXQ} = require("../XQuery/FuncionXQuery")
    const {Atributo} = require("../XML/Atributo");


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:return 28;
break;
case 5:return 44;
break;
case 6:return 38;
break;
case 7:return "dot";
break;
case 8:return "attr";
break;
case 9:return "corA";
break;
case 10:return "corC";
break;
case 11:return "andSelect";
break;
case 12:return "dospuntos";
break;
case 13:return "parA";
break;
case 14:return "parC";
break;
case 15:return "llaveA";
break;
case 16:return "llaveC";
break;
case 17:return "coma";
break;
case 18:return 94;
break;
case 19:return "mas";
break;
case 20:return "menos";
break;
case 21:return "div";
break;
case 22:return 118;
break;
case 23:return "gte";
break;
case 24:return 119;
break;
case 25:return 121;
break;
case 26:return "nequal";
break;
case 27:return "or";
break;
case 28:return "and";
break;
case 29:return "mod";
break;
case 30:return   "for";
break;
case 31:return "in";
break;
case 32:return "to";
break;
case 33:return "at";
break;
case 34:return "let";
break;
case 35:return "where";
break;
case 36:return "order";
break;
case 37:return "by";   
break;
case 38:return "return";
break;
case 39:return "if";
break;
case 40:return "else";
break;
case 41:return "then";
break;
case 42:return "reserv_eq";
break;
case 43:return "reserv_gt";
break;
case 44:return "reserv_ge";
break;
case 45:return "reserv_ne";
break;
case 46:return "reserv_le";
break;
case 47:return "reserv_lt"
break;
case 48:return "ancestorSelf";
break;
case 49:return "ancestor";
break;
case 50:return "attribute";
break;
case 51:return "child";
break;
case 52:return "descendantSelf";
break;
case 53:return "descendant";
break;
case 54:return "followingSib";
break;
case 55:return "following";
break;
case 56:return "namespace";
break;
case 57:return "parent";
break;
case 58:return "precedSib";
break;
case 59:return "preced";
break;
case 60:return "self";
break;
case 61:return "data";
break;
case 62:return "upper-case";
break;
case 63:return "substring";
break;
case 64:return "lower-case";
break;
case 65:return "number";
break;
case 66:return "declare";
break;
case 67:return "function";
break;
case 68:return "local";
break;
case 69:return "decimal";
break;
case 70:return "string";
break;
case 71:return "boolean";
break;
case 72:return "as";
break;
case 73:return "xs";
break;
case 74:return "lastFunc";
break;
case 75:return "positionFunc";
break;
case 76:return "nodeFunc";
break;
case 77:return "textFunc";
break;
case 78:return 63;
break;
case 79:return 46;
break;
case 80:return 12;
break;
case 81:return 84;
break;
case 82:return 85;
break;
case 83:
                                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                    
break;
case 84:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\(:)/i,/^(?::\))/i,/^(?:.)/i,/^(?:\$)/i,/^(?:=)/i,/^(?:\/)/i,/^(?:\.)/i,/^(?:@)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:div\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:to\b)/i,/^(?:at\b)/i,/^(?:let\b)/i,/^(?:where\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:return\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:then\b)/i,/^(?:eq\b)/i,/^(?:gt\b)/i,/^(?:ge\b)/i,/^(?:ne\b)/i,/^(?:le\b)/i,/^(?:lt\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:data\b)/i,/^(?:upper-case\b)/i,/^(?:substring\b)/i,/^(?:lower-case\b)/i,/^(?:number\b)/i,/^(?:declare\b)/i,/^(?:function\b)/i,/^(?:local\b)/i,/^(?:decimal\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:as\b)/i,/^(?:xs\b)/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:node\(\))/i,/^(?:text\(\))/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ.-]*)/i,/^(?:("((\\([\'\"\\]))|([^\"\\]+))*"))/i,/^(?:('((\\([\'\"\\]))|([^\'\\]))*'))/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XQuery_GramaticaAsc;
exports.Parser = XQuery_GramaticaAsc.Parser;
exports.parse = function () { return XQuery_GramaticaAsc.parse.apply(XQuery_GramaticaAsc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}