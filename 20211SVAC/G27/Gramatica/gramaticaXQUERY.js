/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaXQUERY = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,15],$V2=[1,12],$V3=[1,10],$V4=[1,9],$V5=[1,14],$V6=[5,12,13,17,23,27,35],$V7=[5,12,13,17,23,27,35,36],$V8=[1,36],$V9=[1,44],$Va=[1,39],$Vb=[1,72],$Vc=[1,49],$Vd=[1,50],$Ve=[1,51],$Vf=[1,55],$Vg=[1,42],$Vh=[1,40],$Vi=[1,73],$Vj=[1,43],$Vk=[1,63],$Vl=[1,64],$Vm=[1,65],$Vn=[1,66],$Vo=[1,67],$Vp=[1,68],$Vq=[1,69],$Vr=[1,70],$Vs=[1,71],$Vt=[1,45],$Vu=[1,46],$Vv=[1,47],$Vw=[1,48],$Vx=[1,53],$Vy=[1,37],$Vz=[1,38],$VA=[1,41],$VB=[1,79],$VC=[1,82],$VD=[1,83],$VE=[1,84],$VF=[15,40,46,47,49],$VG=[13,15,18,19,35,40,54,55,58,65,74,76,80,86,88,91,92,93,95,96,97,98,102,103,104,105,110,114,115,116],$VH=[2,43],$VI=[1,88],$VJ=[1,99],$VK=[1,100],$VL=[1,96],$VM=[1,91],$VN=[1,90],$VO=[1,89],$VP=[1,92],$VQ=[1,93],$VR=[1,94],$VS=[1,95],$VT=[1,97],$VU=[1,98],$VV=[1,101],$VW=[1,102],$VX=[1,103],$VY=[1,104],$VZ=[1,105],$V_=[1,106],$V$=[1,107],$V01=[1,109],$V11=[5,12,13,15,17,18,19,23,27,32,35,36,40,46,47,49,51,54,55,56,58,63,64,65,68,74,76,80,82,83,85,86,88,91,92,93,95,96,97,98,99,102,103,104,105,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],$V21=[5,12,13,15,17,18,19,23,27,32,35,36,40,46,47,49,51,55,56,58,63,64,65,68,74,76,80,82,83,85,86,88,91,92,93,95,96,97,98,99,102,103,104,105,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],$V31=[2,124],$V41=[1,110],$V51=[2,126],$V61=[2,128],$V71=[1,115],$V81=[5,12,15,17,18,19,23,27,32,36,40,46,47,49,51,54,55,56,58,63,64,65,68,74,80,82,83,85,86,88,91,92,93,95,96,97,98,99,102,103,104,105,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],$V91=[1,118],$Va1=[1,119],$Vb1=[1,120],$Vc1=[1,129],$Vd1=[1,131],$Ve1=[1,130],$Vf1=[5,12,15,17,23,27,32,36,40,46,47,49,51,56,63,64,68,82,83,99,111,112,113,117,118,119,120,121,122,123,124,125,126,127],$Vg1=[5,12,13,15,17,18,19,23,27,32,35,36,40,46,47,49,51,55,56,58,63,64,65,74,76,80,82,83,85,86,88,91,92,93,95,96,97,98,99,102,103,104,105,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],$Vh1=[1,138],$Vi1=[1,139],$Vj1=[1,144],$Vk1=[1,142],$Vl1=[1,147],$Vm1=[1,146],$Vn1=[1,153],$Vo1=[1,152],$Vp1=[1,159],$Vq1=[1,160],$Vr1=[1,169],$Vs1=[5,12,13,17,23,27,35,36,46,47,49],$Vt1=[13,18,19,35,54,55,58,65,74,76,80,86,88,91,92,93,95,96,97,98,102,103,104,105,110,114,115,116],$Vu1=[2,64],$Vv1=[5,12,13,15,17,23,27,32,36,40,46,47,49,51,55,56,63,64,68,82,83,99,111,112,113,117,118,119,120,121,122,123,124,125,126,127],$Vw1=[5,12,13,15,17,18,19,23,27,32,35,36,40,46,47,49,51,54,55,56,58,65,74,76,80,82,83,86,88,91,92,93,95,96,97,98,102,103,104,105,110,114,115,116],$Vx1=[5,12,13,15,17,19,23,27,32,35,36,40,46,47,49,51,56,63,64,65,68,74,76,80,82,83,85,86,88,91,92,93,95,96,97,98,99,102,103,104,105,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],$Vy1=[5,12,13,15,17,18,19,23,27,32,35,36,40,46,47,49,51,54,55,56,58,63,64,65,68,74,76,80,82,83,85,86,88,91,92,93,95,96,97,98,99,102,103,104,105,110,111,112,113,114,115,116,117,118,119,120,121],$Vz1=[1,210],$VA1=[2,95],$VB1=[2,96],$VC1=[1,227],$VD1=[1,229],$VE1=[1,231],$VF1=[1,230],$VG1=[1,239],$VH1=[18,19,54,55,58,65,74,76,80,86,88,91,92,93,95,96,97,98,102,103,104,105,110,114,115,116],$VI1=[2,30],$VJ1=[18,19,54,55,58,63,64,65,68,74,76,80,85,86,88,91,92,93,95,96,97,98,99,102,103,104,105,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],$VK1=[2,31],$VL1=[5,12,13,15,17,18,19,23,27,32,35,36,40,46,47,49,51,54,55,56,58,63,64,65,68,74,76,80,82,83,85,86,88,91,92,93,95,96,97,98,102,103,104,105,110,112,113,114,115,116,117,118,119,120,121],$VM1=[5,12,13,15,17,18,19,23,27,32,35,36,40,46,47,49,51,54,55,56,58,63,64,65,68,74,76,80,82,83,86,88,91,92,93,95,96,97,98,102,103,104,105,110,114,115,116,117,118,119,120,121],$VN1=[5,12,13,15,17,18,19,23,27,32,35,36,40,46,47,49,51,54,55,56,58,63,64,65,68,74,76,80,82,83,86,88,91,92,93,95,96,97,98,102,103,104,105,110,114,115,116,121],$VO1=[2,42],$VP1=[2,97],$VQ1=[5,12,13,15,17,19,23,27,32,35,36,40,46,47,49,51,55,56,63,64,65,68,74,76,80,82,83,85,86,88,91,92,93,95,96,97,98,99,102,103,104,105,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],$VR1=[2,32],$VS1=[2,33],$VT1=[2,12],$VU1=[15,40],$VV1=[1,303],$VW1=[1,304];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"XQUERY":4,"EOF":5,"INSTRUCCION":6,"FUNCIONES":7,"CICLO_FOR":8,"SENTENCIA":9,"ASIGNACION":10,"LLAMADA_FUNCION":11,"doc":12,"parentesisa":13,"EXPRESION":14,"parentesisc":15,"LISTA_ACCESO":16,"let":17,"dolar":18,"nodoid":19,"dosPuntosIgual":20,"DECLARACION2":21,"COMPLEMENTO":22,"for":23,"in":24,"LST_DECLARACION":25,"at":26,"declare":27,"function":28,"PREFIX":29,"dosPuntos":30,"LST_PARAMETROS":31,"as":32,"TIPO_DATO":33,"interrogacion":34,"llaveAbre":35,"llaveCierra":36,"semicolon":37,"local":38,"hr":39,"coma":40,"PARAMETROS":41,"datoDecimal":42,"datoEntero":43,"INS_FOR":44,"ORDER_BY_FOR":45,"where":46,"return":47,"XPATH":48,"order":49,"by":50,"to":51,"LISTA_VALORES":52,"DECLARACION":53,"barraSimple":54,"cora":55,"corc":56,"LISTA_DATA":57,"data":58,"LISTA_NODOS":59,"NODO":60,"OPERADOR":61,"union":62,"or":63,"and":64,"barraDoble":65,"VALOR_NODO":66,"VALOR_LST":67,"igual":68,"NODO_COMPLEMENTO":69,"FUNCION":70,"SELECT":71,"sentenciaIf":72,"EJE":73,"arroba":74,"LISTA_OBJ":75,"punto":76,"si":77,"entonces":78,"entoncesSi":79,"if":80,"entSi":81,"else":82,"then":83,"SELECT_ARGUMENTO":84,"por":85,"ancestor":86,"OR_SELF":87,"attribute":88,"ddpuntos":89,"EJE_COMPLEMENTO":90,"child":91,"descendant":92,"following":93,"SIBLING":94,"namespace":95,"parent":96,"preceding":97,"self":98,"menos":99,"sibling":100,"EJE_COMPLEMENTO_2":101,"position":102,"last":103,"text":104,"node":105,"ARITMETICA":106,"LOGICA":107,"PRIMITIVO":108,"FUN_PRIMITIVAS":109,"substring":110,"mas":111,"div":112,"mod":113,"entero":114,"decimal":115,"STRING":116,"menor":117,"mayor":118,"menorigual":119,"mayorigual":120,"noigual":121,"eq":122,"ne":123,"lt":124,"le":125,"gt":126,"ge":127,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"doc",13:"parentesisa",15:"parentesisc",17:"let",18:"dolar",19:"nodoid",20:"dosPuntosIgual",23:"for",24:"in",26:"at",27:"declare",28:"function",30:"dosPuntos",32:"as",34:"interrogacion",35:"llaveAbre",36:"llaveCierra",37:"semicolon",38:"local",39:"hr",40:"coma",42:"datoDecimal",43:"datoEntero",46:"where",47:"return",49:"order",50:"by",51:"to",54:"barraSimple",55:"cora",56:"corc",58:"data",62:"union",63:"or",64:"and",65:"barraDoble",68:"igual",74:"arroba",76:"punto",80:"if",82:"else",83:"then",85:"por",86:"ancestor",88:"attribute",89:"ddpuntos",91:"child",92:"descendant",93:"following",95:"namespace",96:"parent",97:"preceding",98:"self",99:"menos",100:"sibling",102:"position",103:"last",104:"text",105:"node",110:"substring",111:"mas",112:"div",113:"mod",114:"entero",115:"decimal",116:"STRING",117:"menor",118:"mayor",119:"menorigual",120:"mayorigual",121:"noigual",122:"eq",123:"ne",124:"lt",125:"le",126:"gt",127:"ge"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[9,5],[10,6],[10,6],[10,5],[10,1],[8,7],[8,3],[8,10],[7,17],[29,1],[29,1],[31,3],[31,1],[41,6],[11,8],[33,1],[33,1],[33,1],[22,2],[22,1],[44,1],[44,2],[44,2],[45,3],[45,3],[21,6],[21,4],[21,5],[21,3],[25,3],[25,1],[53,4],[53,3],[52,3],[52,1],[16,3],[16,3],[16,2],[16,4],[16,2],[16,3],[16,1],[57,4],[48,1],[59,2],[59,1],[61,1],[61,1],[61,1],[61,0],[60,2],[60,2],[60,1],[67,3],[67,3],[67,1],[66,3],[66,2],[66,1],[66,1],[66,1],[66,1],[66,3],[66,1],[66,1],[66,1],[75,3],[75,4],[75,3],[75,2],[69,1],[69,3],[72,1],[72,2],[72,2],[72,3],[77,2],[79,2],[79,1],[81,2],[81,4],[78,2],[78,4],[71,2],[71,2],[84,2],[84,1],[84,1],[84,2],[73,2],[73,3],[73,3],[73,2],[73,2],[73,3],[73,3],[73,2],[73,3],[87,6],[87,2],[94,4],[94,2],[90,1],[90,2],[90,1],[101,3],[101,0],[70,3],[70,3],[70,3],[70,3],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[109,4],[106,3],[106,3],[106,3],[106,3],[106,3],[106,3],[108,1],[108,1],[108,1],[108,1],[108,1],[108,2],[108,1],[108,2],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3],[107,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    return $$[$0-1];

break;
case 2:

          $$[$0-1].instruccion.push($$[$0]);
          this.$ = $$[$0-1];
       
break;
case 3:

              this.$ = { instruccion: [$$[$0]] };
       
break;
case 4:

                    this.$ = $$[$0];
              
break;
case 5:

                    this.$ = $$[$0];
             
break;
case 6: case 7:

                    this.$ = $$[$0];
                
break;
case 8:

                    this.$ =$$[$0];
                
break;
case 9:

              this.$ = {nombre:"senDoc", exp:$$[$0-2], lstAcceso:$$[$0] };

break;
case 10:

              this.$ = {nombre:"asigLetComp", id:$$[$0-3], declaracion:$$[$0-1], complemento:$$[$0] };
       
break;
case 11:

              this.$ = {nombre:"asigLetCompEXP", id:$$[$0-3], exp:$$[$0-1], complemento:$$[$0] };
       
break;
case 12:

              this.$ = {nombre:"asigLet", id:$$[$0-2], declaracion:$$[$0] };
       
break;
case 13:

              this.$ = $$[$0];
       
break;
case 14:

              this.$ = {nombre:"for1", id:$$[$0-4], declaracion:$$[$0-1], complemento:$$[$0] };
           
break;
case 15:

               this.$ =   {nombre:"for2", lstDeclaracion:$$[$0-1] , complemento:$$[$0] };
           
break;
case 16:

              this.$ =   {nombre:"for3", id:$$[$0-7], id2:$$[$0-4], declaracion:$$[$0-1], complemento:$$[$0] };
          
break;
case 17:

              this.$ = {nombre:"funcion", prefix:$$[$0-14], id:$$[$0-12], lstParametros:$$[$0-10], id2:$$[$0-7], tipo:$$[$0-5], cuerpo:$$[$0-2]};
       
break;
case 18:

              this.$ =$$[$0];
       
break;
case 19:

               this.$=$$[$0];
        
break;
case 20:

                     $$[$0-2].lstParametros.push($$[$0]);
                     this.$ = $$[$0-2];
                 
break;
case 21:

                     this.$ = { lstParametros: [$$[$0]] };  
                
break;
case 22:

              this.$ = {nombre:"parametro", exp:$$[$0-5], id:$$[$0-3], tpDato:$$[$0-1]};
            
break;
case 23:

                this.$ = {nombre:"llamadaFuncion", id:$$[$0-4], lstParametros:$$[$0-2]};

break;
case 24:

              this.$ = $$[$0];
           
break;
case 25:

              this.$ = $$[$01];    
           
break;
case 26:

                  this.$= $$[$0];
           
break;
case 27:

                     $$[$0-1].lstComplemento.push($$[$0]);
                     this.$ = $$[$0-1];
              
break;
case 28: case 33:

                     this.$ = { lstComplemento: [$$[$0]] };  
                
break;
case 29:

              this.$ = {nombre:"orderBy", lstOrderBy:$$[$0] };
       
break;
case 30:

              this.$ = {nombre:"where", exp:$$[$0] };
       
break;
case 31:

              this.$ = {nombre:"return", exp:$$[$0] };
       
break;
case 32:

                     $$[$0-2].lstComplemento.push($$[$0]);
                     this.$ = $$[$0-2];
              
break;
case 34:

                     this.$ = { nombre:"decToXPath", exp1:$$[$0-4], exp2:$$[$0-2], xPath:$$[$0] };  
                
break;
case 35:

                     this.$ = { nombre:"decLstValoresXPath", lstVal:$$[$0-2], xPath:$$[$0] };  
                
break;
case 36:

                     this.$ = { nombre:"decTo", exp1:$$[$0-3], exp2:$$[$0-1] };  
                
break;
case 37:

                     this.$ = { nombre:"decLstValores", lstVal:$$[$0-1] };  
                
break;
case 38:

                     $$[$0-2].lstDeclaracion.push($$[$0]);
                     this.$ = $$[$0-2];
              
break;
case 39:

                       this.$ = { lstDeclaracion: [$$[$0]] }; 
                
break;
case 40:

                  this.$ = {nombre:"declaracion", id:$$[$0-2], declaracion:$$[$0] };
              
break;
case 41:

                 this.$ = {nombre:"declaracion2", id:$$[$0-1], lstObjetos:$$[$0] };
              
break;
case 42:

                     $$[$0-2].lstValores.push($$[$0]);
                     this.$ = $$[$0-2];
              
break;
case 43:

                       this.$ = { lstValores: [$$[$0]] }; 
                
break;
case 44:

                       this.$ = { nombre:"lstAcceso", id:$$[$0-1], lstAcceso:$$[$0] }; 
                
break;
case 45:

                     $$[$0-2].lstValores.push($$[$0]);
                     this.$ = $$[$0-2]; //---- tengo duda
                
break;
case 46:

                       this.$ = { nombre:"lstAcceso2", exp:$$[$0] };  
                
break;
case 47:

                      this.$ = { nombre:"lstAcceso4", exp:$$[$0-2], lstAcceso:$$[$0] }; 
                
break;
case 48:

                      this.$ = { nombre:"lstAcceso5", id:$$[$0] }; 
                
break;
case 49:

                         this.$ = { nombre:"lstAcceso6", exp:$$[$0-1] }; 
                
break;
case 50:

                       this.$ = $$[$0];
                
break;
case 51:

              this.$ = { nombre:"data", lstAcceso:$$[$0-1] }; 
       
break;
case 52:

       this.$ = $$[$0];
       
break;
case 53:

                     
                     //$$[$0-1].lstNodos.push({nombre:"lstNodos", operador:$$[$0], lstNodos:$$[$01] });
                     $$[$0-1].lstNodos.push($$[$0]);
                     this.$ =$$[$0-1] ; //------------- tengo duda
              
break;
case 54:

                     this.$ = [$$[$0]];
                     //this.$ = { nonbre:"lstNodos", nodo:[$$[$0]] };  
              
break;
case 55: case 56: case 57:

       this.$ =$$[$0];

break;
case 59:

        this.$ = {nombre:"nodo", valorNodo:$$[$0]}; 
       
break;
case 60:

              this.$ = {nombre:"nodo2", valorNodo:$$[$0]};
      
break;
case 61:

             this.$ = $$[$0];
      
break;
case 62:

                     $$[$0-2].lstValor.push($$[$0]);
                     this.$ = $$[$0-2];
              
break;
case 63:

                   $$[$0-2].lstValor.push($$[$0]);
                     this.$ = $$[$0-2];
            
break;
case 64:

                  this.$ = { lstValor: [$$[$0]] };
           
break;
case 65:

                  this.$ = { nombre:"valorNodo", id:$$[$0-2], exp:$$[$0] };
           
break;
case 66:

                   this.$ = { nombre:"valorNodo2", id:$$[$0-1], nodoComplemento:$$[$0] };
           
break;
case 67: case 68: case 69: case 70: case 72: case 73: case 74:

                  this.$ = $$[$0];
           
break;
case 71:

               this.$ = { nombre:"valorNodo3", id:$$[$0-1], nodoComplemento:$$[$0] };
           
break;
case 75:

              this.$ = $$[$0-2];
           
break;
case 76:

                this.$ = {nombre:"lstObj", lstAcceso:$$[$0-2], lstObj:$$[$0] };  
          
break;
case 77:

              this.$ = {nombre:"lstObj2", exp:$$[$0-1] };
           
break;
case 78:

                this.$ = {nombre:"lstObj3",  lstObj:$$[$0] };
          
break;
case 79:

                     this.$ =$$[$0];
                   
break;
case 80:

                        this.$ =$$[$0-1];
                
break;
case 81:

                   console.log("Se encontró instrucción sentenciaIf[si entoncesSi entonces]\n");
                   this.$ = {nombre: "sentenciaIf_simple", senIf: $$[$0]};
            
break;
case 82:

                   console.log("Se encontró instrucción sentenciaIf[si entonces]\n");
                   this.$ = {nombre: "sentenciaIf_si_entonces1", senIf: $$[$0-1], senElse:$$[$0] };
            
break;
case 83:

                   console.log("Se encontró instrucción sentenciaIf[si entoncesSi]\n");
                   this.$ = {nombre: "sentenciaIf_si_entonces2", senIf: $$[$0-1], senIfElse: $$[$0]};
            
break;
case 84:

                   console.log("Se encontró instrucción sentenciaIf[si entoncesSi entonces]\n");
                   this.$ = {nombre: "sentenciaIf_si_entonces3", senIf: $$[$0-2], senIfElse: $$[$0-1], senElse:$$[$0] };
            
break;
case 85:

           console.log("Se encontró instrucción si[if EXPRESION]\n");
              this.$ = {nombre: "si_if", tipo: $$[$0-1], expresion: $$[$0] };
    
break;
case 86:

                   console.log("Se encontró instrucción entoncesSI[entonces entSi]\n");
                   this.$ = {nombre: "entoncesSi_else_elseif", else: $$[$0-1], elseIf: $$[$0] };
            
break;
case 87:

                   console.log("Se encontró instrucción entoncesSi[entSi]\n");
                   this.$ = {nombre: "entoncesSi_elseIf", elseIf: $$[$0] };
            
break;
case 88:

              console.log("Se encontró instrucción entSi[else EXPRESION]\n");
              this.$ = {nombre: "entSi_simple", tipo: $$[$0-1], expresion: $$[$0] };
       
break;
case 89:

              console.log("Se encontró instrucción entSi[else llaveAbre EXPRESION llaveCierra]\n");
              this.$ = {nombre: "entSi_extendido", tipo: $$[$0-3], expresion: $$[$0-2] }; 
       
break;
case 90:

               console.log("Se encontró instrucción entonces[then Expresion]\n");
              this.$ = {nombre: "entonces_simple", tipo: $$[$0-1], expresion: $$[$0] }; 
        
break;
case 91:

              console.log("Se encontró instrucción entonces[then llaveAbre Expresion llaveCierra]\n");
              this.$ = {nombre: "entonces_extendido", tipo: $$[$0-3], expresion: $$[$0-2] };  
        
break;
case 92:

              console.log("Se encontró instrucción SELECT[barraDoble SELECT_ARGUMENTO]\n");
              this.$ = {nombre: "select_doble", tipo: $$[$0-1], complemento: $$[$0] };  
        
break;
case 93:

              console.log("Se encontró instrucción SELECT[barraSimple SELECT_ARGUMENTO]\n");
              this.$ = {nombre: "select_simple", tipo: $$[$0-1], complemento: $$[$0] };  
        
break;
case 94:

                         console.log("Se encontró instrucción SELECT_ARGUMENTO[punto punto]\n");
                         this.$ = {nombre: "select_argumento_arroba", simbolo1: $$[$0-1], simbolo2: $$[$0] };
                  
break;
case 95:

                         console.log("Se encontró instrucción SELECT_ARGUMENTO[por]\n");
                         this.$ = {nombre: "select_argumento_por", simbolo1: $$[$0]};
                  
break;
case 96:

                         console.log("Se encontró instrucción SELECT_ARGUMENTO[punto]\n");
                         this.$ = {nombre: "select_argumento_punto", simbolo1: $$[$0]};
                  
break;
case 97:

                         console.log("Se encontró instrucción SELECT_ARGUMENTO[punto punto]\n");
                         this.$ = {nombre: "select_argumento_doblePunto", simbolo1: $$[$0-1], simbolo2: $$[$0] };
                  
break;
case 98:

              console.log("Se encontró instrucción EJE[ancestor OR_SELF]\n");
              this.$ = {nombre: "eje_ancestor", tipo: $$[$0-1], complemento: $$[$0] };
       
break;
case 99:

              console.log("Se encontró instrucción EJE[attribute ddpuntos EJE_COMPLEMENTO]\n");
              this.$ = {nombre: "eje_attribute", tipo: $$[$0-2], simbolo:$$[$0-1], complemento: $$[$0] };
       
break;
case 100:

              console.log("Se encontró instrucción EJE[child ddpuntos EJE_COMPLEMENTO]\n");
              this.$ = {nombre: "eje_child", tipo: $$[$0-2], simbolo:$$[$0-1], complemento: $$[$0] };
       
break;
case 101:

              console.log("Se encontró instrucción EJE[descendant OR_SELF]\n");
              this.$ = {nombre: "eje_descendant", tipo: $$[$0-1], complemento: $$[$0] };
       
break;
case 102:

              console.log("Se encontró instrucción EJE[following SIBLING]\n");
              this.$ = {nombre: "eje_following", tipo: $$[$0-1], complemento: $$[$0] };
       
break;
case 103:

              console.log("Se encontró instrucción EJE[namespace ddpuntos EJE_COMPLEMENTO]\n");
              this.$ = {nombre: "eje_namespace", tipo: $$[$0-2], simbolo:$$[$0-1], complemento: $$[$0] };
       
break;
case 104:

              console.log("Se encontró instrucción EJE[parent ddpuntos EJE_COMPLEMENTO]\n");
              this.$ = {nombre: "eje_parent", tipo: $$[$0-2], simbolo:$$[$0-1], complemento: $$[$0] };
       
break;
case 105:

              console.log("Se encontró instrucción EJE[preceding SIBLING]\n");
              this.$ = {nombre: "eje_preceding", tipo: $$[$0-1], complemento: $$[$0] };
       
break;
case 106:

              console.log("Se encontró instrucción EJE[self ddpuntos EJE_COMPLEMENTO]\n");
              this.$ = {nombre: "eje_self", tipo: $$[$0-2], complemento: $$[$0] };
       
break;
case 107:

              console.log("Se encontró instrucción SIBLING[menos sibling ddpuntos EJE_COMPLEMENTO]\n");
              this.$ = {nombre: "or_self_extendido", simbolo1: $$[$0-5], simbolo2:$$[$0-4], simbolo3:$$[$0-3], simbolo4: $$[$0-2], simbolo5: $$[$0-1], complemento: $$[$0] };
       
break;
case 108:

              console.log("Se encontró instrucción OR_SELF[ddpuntos EJE_COMPLEMENTO]\n");
              this.$ = {nombre: "or_self_simple", simbolo: $$[$0-1], complemento: $$[$0] };
       
break;
case 109:

              console.log("Se encontró instrucción SIBLING[menos sibling ddpuntos EJE_COMPLEMENTO]\n");
              this.$ = {nombre: "sibling_extendido", simbolo1:$$[$0-3], simbolo2:$$[$0-2], simbolo3:$$[$0-1], complemento: $$[$0] };
       
break;
case 110:

              console.log("Se encontró instrucción SIBLING[ddpuntos EJE_COMPLEMENTO]\n");
              this.$ = {nombre: "sibling_simple", simbolo1:$$[$0-1], complemento: $$[$0] };
       
break;
case 111:

                       console.log("Se encontró instrucción EJE_COMPLEMENTO[FUNCION]\n");
                       this.$ = [$$[$0]];
                
break;
case 112:

                       console.log("Se encontró instrucción EJE_COMPLEMENTO[NODOID EJE_COMPLEMENTO_2]\n");
                       this.$ = [$$[$0-1] + $$[$0]];
                
break;
case 113:

                     console.log("Se encontró instrucción EJE_COMPLEMENTO[SELECT_ARGUMENTO]\n");
                     this.$ = [$$[$0]];  
                
break;
case 114:

                       this.$ = $$[$0-2];
                
break;
case 116:

                console.log("Se encontró instrucción FUNCION[position()]\n");
                this.$ = {nombre: "funcion", tipo: $$[$0-2]};
         
break;
case 117:

                console.log("Se encontró instrucción FUNCION[last()]\n");
                this.$ = {nombre: "funcion", tipo: $$[$0-2]};
         
break;
case 118:

                console.log("Se encontró instrucción FUNCION[text()]\n");
                this.$ = {nombre: "funcion", tipo: $$[$0-2]};
         
break;
case 119:

                console.log("Se encontró instrucción FUNCION[node()]\n");
                this.$ = {nombre: "funcion", tipo: $$[$0-2]};
         
break;
case 120:

                   console.log("Se encontró instrucción EXPRESION TIPO[ARITMETICA]\n");
                   this.$ = $$[$0];
            
break;
case 121:

                   console.log("Se encontró instrucción EXPRESION TIPO[LOGICA]\n");
                   this.$ = $$[$0];
            
break;
case 122:

                   console.log("Se encontró instrucción EXPRESION TIPO[PRIMITIVO]\n");
                   this.$ = $$[$0];
            
break;
case 123:

                   console.log("Se encontró instrucción EXPRESION TIPO[FUNCION]\n");
                   this.$ = $$[$0];
            
break;
case 124:

                   console.log("Se encontró instrucción EXPRESION TIPO[LISTA_ACCESO]\n");
                   this.$ = $$[$0];
            
break;
case 125:

                   console.log("Se encontró instrucción EXPRESION TIPO[LISTA_DATA]\n");
                   this.$ = $$[$0];
            
break;
case 126:

                   console.log("Se encontró instrucción EXPRESION TIPO[XPATH]\n");
                   this.$ = $$[$0];
            
break;
case 127:

                   console.log("Se encontró instrucción FUNCION PRIMITIVAS\n");
                   this.$ = $$[$0];
            
break;
case 128:

                this.$ =$$[$0];
            
break;
case 129:

                     this.$ = {nombre: "funPrimitivaSubString", lstVal:$$[$0-1] };
                
break;
case 130:

                   console.log("Se encontró instrucción ARITMETICA[EXPRESION + EXPRESION]\n");
                   this.$ = {nombre: "expresionAritmetica", tipo: $$[$0-1], op1: $$[$0-2], op2: $$[$0]};
            
break;
case 131:

                   console.log("Se encontró instrucción ARITMETICA[EXPRESION - EXPRESION]\n");
                   this.$ = {nombre: "expresionAritmetica", tipo: $$[$0-1], op1: $$[$0-2], op2: $$[$0]};
            
break;
case 132:

                   console.log("Se encontró instrucción ARITMETICA[EXPRESION * EXPRESION]\n");
                   this.$ = {nombre: "expresionAritmetica", tipo: $$[$0-1], op1: $$[$0-2], op2: $$[$0]};
            
break;
case 133:

                   console.log("Se encontró instrucción ARITMETICA[EXPRESION / EXPRESION]\n");
                   this.$ = {nombre: "expresionAritmetica", tipo: $$[$0-1], op1: $$[$0-2], op2: $$[$0]};
            
break;
case 134:

                   console.log("Se encontró instrucción ARITMETICA[EXPRESION mod EXPRESION]\n");
                   this.$ = {nombre: "expresionAritmetica", tipo: $$[$0-1], op1: $$[$0-2], op2: $$[$0]};
            
break;
case 135:

                   console.log("Se encontró instrucción ARITMETICA[ ( EXPRESION ) ]\n");
                   this.$ = $$[$0-1];
            
break;
case 136:

                    console.log("Se encontró instrucción PRIMITIVO[entero]\n");
                    this.$ = {nombre: "primitivoEntero", op1: $$[$0]};
             
break;
case 137:

                    console.log("Se encontró instrucción PRIMITIVO[decimal]\n");
                    this.$ = {nombre: "primitivoDecimal", op1: $$[$0]};
             
break;
case 138:

                    console.log("Se encontró instrucción PRIMITIVO[nodoid]\n");
                    this.$ = {nombre: "primitivoNodoid", op1: $$[$0]};
             
break;
case 139:

                    console.log("Se encontró instrucción PRIMITIVO[punto]\n");
                    this.$ = {nombre: "primitivoPunto", op1: $$[$0]};
             
break;
case 140:

                    console.log("Se encontró instrucción PRIMITIVO[string]\n");
                    this.$ = {nombre: "primitivoString", op1: $$[$0]};
             
break;
case 141:

                    console.log("Se encontró instrucción PRIMITIVO[arroba nodoid]\n");
                    this.$ = {nombre: "primitivoArroba", op1: $$[$0]};
             
break;
case 142:

                    console.log("Se encontró instrucción PRIMITIVO[por]\n");
                    this.$ = {nombre: "primitivoPor", op1: $$[$01]};
             
break;
case 143:

                    console.log("Se encontró instrucción PRIMITIVO[dolar nodoid]\n");
                    this.$ = {nombre: "primitivoDolar", op1: $$[$0]};
             
break;
case 144:

               console.log("Se encontró instrucción LOGICA[EXPRESION < EXPRESION]\n");
               this.$ = {nombre: "expresionLogica", tipo: $$[$0-1], op1: $$[$0-2], op2:$$[$0]};
        
break;
case 145:

               console.log("Se encontró instrucción LOGICA[EXPRESION > EXPRESION]\n");
               this.$ = {nombre: "expresionLogica", tipo: $$[$0-1], op1: $$[$0-2], op2:$$[$0]};
        
break;
case 146: case 151:

               console.log("Se encontró instrucción LOGICA[EXPRESION = EXPRESION]\n");
               this.$ = {nombre: "expresionLogica", tipo: $$[$0-1], op1: $$[$0-2], op2:$$[$0]};
        
break;
case 147:

               console.log("Se encontró instrucción LOGICA[EXPRESION <= EXPRESION]\n");
               this.$ = {nombre: "expresionLogica", tipo: $$[$0-1], op1: $$[$0-2], op2:$$[$0]};
        
break;
case 148:

               console.log("Se encontró instrucción LOGICA[EXPRESION >= EXPRESION]\n");
               this.$ = {nombre: "expresionLogica", tipo: $$[$0-1], op1: $$[$0-2], op2:$$[$0]};
        
break;
case 149:

               console.log("Se encontró instrucción LOGICA[EXPRESION | EXPRESION]\n");
               this.$ = {nombre: "expresionLogica", tipo: $$[$0-1], op1: $$[$0-2], op2:$$[$0]};
        
break;
case 150:

               console.log("Se encontró instrucción LOGICA[EXPRESION & EXPRESION]\n");
               this.$ = {nombre: "expresionLogica", tipo: $$[$0-1], op1: $$[$0-2], op2:$$[$0]};
        
break;
case 152:

               console.log("Se encontró instrucción LOGICA[EXPRESION != EXPRESION]\n");
               this.$ = {nombre: "expresionLogica", tipo: $$[$0-1], op1: $$[$0-2], op2:$$[$0]};
        
break;
case 153:

               console.log("Se encontró instrucción LOGICA[EXPRESION eq EXPRESION]\n");
               this.$ = {nombre: "expresionLogica", tipo: $$[$0-1], op1: $$[$0-2], op2:$$[$0]};
        
break;
case 154:

              console.log("Se encontró instrucción LOGICA[EXPRESION ne EXPRESION]\n");
              this.$ = {nombre: "expresionLogica", tipo: $$[$0-1], op1: $$[$0-2], op2:$$[$0]};
        
break;
case 155:

               console.log("Se encontró instrucción LOGICA[EXPRESION lt EXPRESION]\n");
               this.$ = {nombre: "expresionLogica", tipo: $$[$0-1], op1: $$[$0-2], op2:$$[$0]};
        
break;
case 156:

               console.log("Se encontró instrucción LOGICA[EXPRESION le EXPRESION]\n");
               this.$ = {nombre: "expresionLogica", tipo: $$[$0-1], op1: $$[$0-2], op2:$$[$0]};
        
break;
case 157:

               console.log("Se encontró instrucción LOGICA[EXPRESION gt EXPRESION]\n");
               this.$ = {nombre: "expresionLogica", tipo: $$[$0-1], op1: $$[$0-2], op2:$$[$0]};
        
break;
case 158:

               console.log("Se encontró instrucción LOGICA[EXPRESION ge EXPRESION]\n");
               this.$ = {nombre: "expresionLogica", tipo: $$[$0-1], op1: $$[$0-2], op2:$$[$0]};
        
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:$V0,13:$V1,17:$V2,21:13,23:$V3,27:$V4,35:$V5},{1:[3]},{5:[1,16],6:17,7:4,8:5,9:6,10:7,11:8,12:$V0,13:$V1,17:$V2,21:13,23:$V3,27:$V4,35:$V5},o($V6,[2,3]),o($V7,[2,4]),o($V7,[2,5]),o($V7,[2,6]),o($V7,[2,7]),o($V7,[2,8]),{28:[1,18]},{18:[1,19],25:20,53:21},{13:[1,22]},{18:[1,23]},o($V7,[2,13]),{38:[1,24]},{13:$V8,14:25,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,52:26,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{1:[2,1]},o($V6,[2,2]),{29:74,38:[1,75],39:[1,76]},{19:[1,77]},{22:78,40:$VB,44:80,45:81,46:$VC,47:$VD,49:$VE},o($VF,[2,39]),{13:$V8,14:85,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{19:[1,86]},{30:[1,87]},o($VG,$VH,{51:$VI,63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),{15:[1,108],40:$V01},o($V11,[2,120]),o($V11,[2,121]),o($V11,[2,122]),o($V11,[2,123]),o($V21,$V31,{54:$V41}),o($V11,[2,125]),o($V11,$V51),o($V11,[2,127]),o($V11,$V61),{13:$V8,14:111,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,52:26,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},o($V11,[2,136]),o($V11,[2,137]),o([5,12,15,17,23,27,32,36,40,46,47,49,51,56,63,64,82,83,99,111,112,113,117,118,119,120,121,122,123,124,125,126,127],[2,138],{106:27,107:28,108:29,70:30,16:31,57:32,48:33,109:34,21:35,59:52,60:54,66:56,71:57,72:58,73:59,75:60,77:62,69:113,67:114,14:116,13:$V8,18:$V9,19:$Va,35:$Vb,54:$Vc,55:$V71,58:$Ve,65:$Vf,68:[1,112],74:$Vg,76:$Vh,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,110:$Vx,114:$Vy,115:$Vz,116:$VA}),o($V81,[2,139],{75:117,13:$V91,35:$Vb,76:$Va1}),o($V11,[2,140]),{19:$Vb1},o($V11,[2,142]),{19:[1,121]},{13:[1,122]},{13:[1,123]},{13:[1,124]},{13:[1,125]},{13:$V8,14:126,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:127,67:61,70:30,71:57,72:58,73:59,74:$Vc1,75:60,76:$Vd1,77:62,80:$Vi,84:128,85:$Ve1,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:132,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:[1,133]},o($Vf1,[2,52],{106:27,107:28,108:29,70:30,16:31,57:32,48:33,109:34,21:35,59:52,66:56,71:57,72:58,73:59,75:60,67:61,77:62,14:116,60:134,13:$V8,18:$V9,19:$Va,35:$Vb,54:$Vc,55:$Vd,58:$Ve,65:$Vf,74:$Vg,76:$Vh,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,110:$Vx,114:$Vy,115:$Vz,116:$VA}),{13:[1,135]},o($V11,[2,54]),{13:$V8,14:116,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:136,67:61,70:30,71:57,72:58,73:59,74:$Vc1,75:60,76:$Vd1,77:62,80:$Vi,84:137,85:$Ve1,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},o($V11,[2,61]),o($V11,[2,68]),o($V11,[2,69]),o($V11,[2,70]),o($V11,[2,72]),o($Vg1,[2,74],{54:$Vh1,68:$Vi1}),o([5,12,13,15,17,18,19,23,27,32,35,36,40,46,47,49,51,54,55,56,58,63,64,65,68,74,76,80,85,86,88,91,92,93,95,96,97,98,99,102,103,104,105,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],[2,81],{78:140,79:141,81:143,82:$Vj1,83:$Vk1}),{87:145,89:$Vl1,99:$Vm1},{89:[1,148]},{89:[1,149]},{87:150,89:$Vl1,99:$Vm1},{89:$Vn1,94:151,99:$Vo1},{89:[1,154]},{89:[1,155]},{89:$Vn1,94:156,99:$Vo1},{89:[1,157]},{16:158,18:$Vp1,54:$Vq1,55:$Vd,57:161,58:$Ve},{13:$V8,14:162,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{30:[1,163]},{30:[2,18]},{30:[2,19]},{16:166,18:$Vp1,24:[1,164],26:[1,165],54:$Vq1,55:$Vd,57:161,58:$Ve},o($V7,[2,15],{45:81,44:167,46:$VC,47:$VD,49:$VE}),{18:$Vr1,53:168},o($Vs1,[2,28]),o($Vs1,[2,29],{40:[1,170]}),{13:$V8,14:171,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:116,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:172,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{50:[1,173]},o($Vt1,$Vu1,{15:[1,174],63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),{20:[1,175]},{19:[1,176]},{13:$V8,14:177,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:178,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:179,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:180,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:181,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:182,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:183,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:184,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:185,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:186,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:187,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:188,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:189,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:190,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:191,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:192,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:193,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:194,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:195,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:196,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},o($Vv1,[2,37],{106:27,107:28,108:29,70:30,16:31,57:32,109:34,21:35,59:52,60:54,66:56,71:57,72:58,73:59,75:60,67:61,77:62,14:116,48:197,18:$V9,19:$Va,35:$Vb,54:$Vc,58:$Ve,65:$Vf,74:$Vg,76:$Vh,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,110:$Vx,114:$Vy,115:$Vz,116:$VA}),{13:$V8,14:198,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:199,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},o([13,18,19,35,40,54,55,58,65,74,76,80,86,88,91,92,93,95,96,97,98,102,103,104,105,110,114,115,116],$VH,{15:[1,200],51:$VI,63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),{13:$V8,14:201,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},o($V11,[2,66]),o($Vg1,[2,79],{54:$Vh1,68:$Vi1}),{13:$V8,14:202,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},o($Vw1,$Vu1,{63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($V11,[2,78]),{13:$V8,14:203,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V91,35:$Vb,75:117,76:$Va1},o($Vf1,[2,141],{106:27,107:28,108:29,70:30,16:31,57:32,48:33,109:34,21:35,59:52,60:54,66:56,71:57,72:58,73:59,75:60,77:62,67:114,14:116,69:204,13:$V8,18:$V9,19:$Va,35:$Vb,54:$Vc,55:$V71,58:$Ve,65:$Vf,74:$Vg,76:$Vh,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,110:$Vx,114:$Vy,115:$Vz,116:$VA}),o($Vx1,[2,143],{57:161,16:205,18:$Vp1,54:$Vq1,55:$Vd,58:$Ve}),{15:[1,206]},{15:[1,207]},{15:[1,208]},{15:[1,209]},o($Vy1,[2,46],{122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($V11,[2,60]),o($V11,[2,93]),{19:$Vb1,85:$Vz1},o($V11,$VA1),o($V81,$VB1,{75:117,13:$V91,35:$Vb,76:[1,211]}),o($Vt1,$Vu1,{56:[1,212],63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),{16:213,18:$Vp1,54:$Vq1,55:$Vd,57:161,58:$Ve},o($V11,[2,53]),{13:$V8,14:215,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,52:214,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},o($V11,[2,59]),o($V11,[2,92]),{13:$V8,14:216,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:$V8,14:217,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},o([5,12,13,15,17,18,19,23,27,32,35,36,40,46,47,49,51,54,55,56,58,63,64,65,68,74,76,80,83,85,86,88,91,92,93,95,96,97,98,99,102,103,104,105,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],[2,82],{81:218,82:$Vj1}),o([5,12,13,15,17,18,19,23,27,32,35,36,40,46,47,49,51,54,55,56,58,63,64,65,68,74,76,80,82,85,86,88,91,92,93,95,96,97,98,99,102,103,104,105,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],[2,83],{78:219,83:$Vk1}),{13:$V8,14:220,16:31,18:$V9,19:$Va,21:35,35:[1,221],48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},o($V11,[2,87]),{13:$V8,14:222,16:31,18:$V9,19:$Va,21:35,35:[1,223],48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},o($V11,[2,98]),{63:[1,224]},{19:$VC1,70:226,74:$VD1,76:$VE1,84:228,85:$VF1,90:225,102:$Vt,103:$Vu,104:$Vv,105:$Vw},{19:$VC1,70:226,74:$VD1,76:$VE1,84:228,85:$VF1,90:232,102:$Vt,103:$Vu,104:$Vv,105:$Vw},{19:$VC1,70:226,74:$VD1,76:$VE1,84:228,85:$VF1,90:233,102:$Vt,103:$Vu,104:$Vv,105:$Vw},o($V11,[2,101]),o($V11,[2,102]),{100:[1,234]},{19:$VC1,70:226,74:$VD1,76:$VE1,84:228,85:$VF1,90:235,102:$Vt,103:$Vu,104:$Vv,105:$Vw},{19:$VC1,70:226,74:$VD1,76:$VE1,84:228,85:$VF1,90:236,102:$Vt,103:$Vu,104:$Vv,105:$Vw},{19:$VC1,70:226,74:$VD1,76:$VE1,84:228,85:$VF1,90:237,102:$Vt,103:$Vu,104:$Vv,105:$Vw},o($V11,[2,105]),{19:$VC1,70:226,74:$VD1,76:$VE1,84:228,85:$VF1,90:238,102:$Vt,103:$Vu,104:$Vv,105:$Vw},{36:$VG1,54:$V41},{19:[1,240]},{13:$V8,14:126,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},o($V11,[2,50]),o($Vw1,[2,85],{63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),{19:[1,241]},{12:[1,242],13:$V1,21:243},{18:[1,244]},o($VF,[2,41],{54:$V41}),o($Vs1,[2,27]),o($VF,[2,38]),{19:[1,245]},{13:$V8,14:246,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},o($VH1,$Vu1,{5:$VI1,12:$VI1,13:$VI1,17:$VI1,23:$VI1,27:$VI1,35:$VI1,36:$VI1,46:$VI1,47:$VI1,49:$VI1,63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($VJ1,$V51,{5:$VK1,12:$VK1,13:$VK1,17:$VK1,23:$VK1,27:$VK1,35:$VK1,36:$VK1,46:$VK1,47:$VK1,49:$VK1}),{13:$V8,14:247,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{16:248,18:$Vp1,54:$Vq1,55:$Vd,57:161,58:$Ve},{13:$V8,14:250,16:31,18:$V9,19:$Va,21:249,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{13:[1,251]},o($Vt1,$Vu1,{15:[1,252],63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($Vy1,[2,130],{122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($Vy1,[2,131],{122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($VL1,[2,132],{99:$VN,111:$VO,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($VL1,[2,133],{99:$VN,111:$VO,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($VL1,[2,134],{99:$VN,111:$VO,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($VM1,[2,144],{85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($VM1,[2,145],{85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($VN1,[2,146],{85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($VM1,[2,147],{85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($VM1,[2,148],{85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o([5,12,13,15,17,18,19,23,27,32,35,36,40,46,47,49,51,54,55,56,58,63,65,74,76,80,82,83,86,88,91,92,93,95,96,97,98,102,103,104,105,110,114,115,116],[2,149],{64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o([5,12,13,15,17,18,19,23,27,32,35,36,40,46,47,49,51,54,55,56,58,63,64,65,74,76,80,82,83,86,88,91,92,93,95,96,97,98,102,103,104,105,110,114,115,116],[2,150],{68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($VN1,[2,152],{85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($Vw1,[2,153],{63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($Vw1,[2,154],{63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($Vw1,[2,155],{63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($Vw1,[2,156],{63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($Vw1,[2,157],{63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($Vw1,[2,158],{63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($V11,[2,35]),o($Vt1,$Vu1,{15:$VO1,40:$VO1,63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($Vy1,[2,45],{122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($V11,[2,135]),o($VN1,[2,65],{85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($Vt1,$Vu1,{56:[1,253],63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($Vt1,$Vu1,{15:[1,254],63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($V11,[2,71]),o($V21,[2,44],{54:$V41}),o($V11,[2,116]),o($V11,[2,117]),o($V11,[2,118]),o($V11,[2,119]),o($V11,[2,94]),o($V81,$VP1,{75:117,13:$V91,35:$Vb,76:$Va1}),o($VQ1,[2,49],{57:161,16:255,18:$Vp1,54:$Vq1,58:$Ve}),{15:[1,256],54:$V41},{15:[1,257],40:$V01},o($VG,$VH,{63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($Vy1,[2,62],{122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($VN1,[2,63],{85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($V11,[2,86]),o($V11,[2,84]),o($Vw1,[2,90],{63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),{13:$V8,14:258,16:259,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},o($Vw1,[2,88],{63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),{13:$V8,14:260,16:259,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{99:[1,261]},o($V11,[2,108]),o($V11,[2,111]),o([5,12,13,15,17,18,19,23,27,32,35,36,40,46,47,49,51,54,56,58,63,64,65,68,74,76,80,82,83,85,86,88,91,92,93,95,96,97,98,99,102,103,104,105,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],[2,115],{101:262,55:[1,263]}),o($V11,[2,113]),{85:$Vz1},o($V11,$VA1),o([5,12,13,15,17,18,19,23,27,32,35,36,40,46,47,49,51,54,55,56,58,63,64,65,68,74,80,82,83,85,86,88,91,92,93,95,96,97,98,99,102,103,104,105,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],$VB1,{76:[1,264]}),o($V11,[2,99]),o($V11,[2,100]),{89:[1,265]},o($V11,[2,110]),o($V11,[2,103]),o($V11,[2,104]),o($V11,[2,106]),o($V81,[2,75],{75:266,13:$V91,35:$Vb,76:$Va1}),o($Vx1,[2,48],{57:161,16:205,18:$Vp1,54:$Vq1,55:$Vd,58:$Ve}),{13:[1,267]},{13:$V1,21:268},o($VF,[2,40]),{19:[1,269]},{16:166,18:$Vp1,24:[1,270],54:$Vq1,55:$Vd,57:161,58:$Ve},o($VH1,$Vu1,{5:$VR1,12:$VR1,13:$VR1,17:$VR1,23:$VR1,27:$VR1,35:$VR1,36:$VR1,40:$VR1,46:$VR1,47:$VR1,49:$VR1,63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($VH1,$Vu1,{5:$VS1,12:$VS1,13:$VS1,17:$VS1,23:$VS1,27:$VS1,35:$VS1,36:$VS1,40:$VS1,46:$VS1,47:$VS1,49:$VS1,63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($V7,[2,9],{54:$V41}),o($VJ1,$V61,{44:80,45:81,22:271,5:$VT1,12:$VT1,13:$VT1,17:$VT1,23:$VT1,27:$VT1,35:$VT1,36:$VT1,46:$VC,47:$VD,49:$VE}),o($Vt1,$Vu1,{44:80,45:81,22:272,46:$VC,47:$VD,49:$VE,63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),{18:$Vr1,25:273,53:21},o($Vv1,[2,36],{106:27,107:28,108:29,70:30,16:31,57:32,109:34,21:35,59:52,60:54,66:56,71:57,72:58,73:59,75:60,67:61,77:62,14:116,48:274,18:$V9,19:$Va,35:$Vb,54:$Vc,58:$Ve,65:$Vf,74:$Vg,76:$Vh,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,110:$Vx,114:$Vy,115:$Vz,116:$VA}),o($VQ1,[2,80],{57:161,16:255,18:$Vp1,54:$Vq1,58:$Ve}),o($V11,[2,77]),o($V21,[2,47],{54:$V41}),o($V11,[2,51]),o($V11,[2,129]),o($Vt1,$Vu1,{36:[1,275],63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o([13,18,19,35,55,58,63,64,65,68,74,76,80,85,86,88,91,92,93,95,96,97,98,99,102,103,104,105,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127],$V31,{36:$VG1,54:$V41}),o($Vt1,$Vu1,{36:[1,276],63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),{98:[1,277]},o($V11,[2,112]),{13:$V8,14:278,16:31,18:$V9,19:$Va,21:35,35:$Vb,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},o($V11,$VP1),{19:$VC1,70:226,74:$VD1,76:$VE1,84:228,85:$VF1,90:279,102:$Vt,103:$Vu,104:$Vv,105:$Vw},o($V11,[2,76]),{13:$V8,14:282,16:31,18:$V9,19:$Va,21:35,31:280,35:$Vb,41:281,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{22:283,44:80,45:81,46:$VC,47:$VD,49:$VE},{24:[1,284]},{13:$V1,21:243},o($V7,[2,10],{45:81,44:167,46:$VC,47:$VD,49:$VE}),o($V7,[2,11],{45:81,44:167,46:$VC,47:$VD,49:$VE}),{15:[1,285],40:$VB},o($V11,[2,34]),o($V11,[2,91]),o($V11,[2,89]),{89:[1,286]},o($Vt1,$Vu1,{56:[1,287],63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($V11,[2,109]),{15:[1,288],40:[1,289]},o($VU1,[2,21]),o($Vt1,$Vu1,{32:[1,290],63:$VJ,64:$VK,68:$VL,85:$VM,99:$VN,111:$VO,112:$VP,113:$VQ,117:$VR,118:$VS,119:$VT,120:$VU,121:$VV,122:$VW,123:$VX,124:$VY,125:$VZ,126:$V_,127:$V$}),o($V7,[2,14],{45:81,44:167,46:$VC,47:$VD,49:$VE}),{12:[1,291]},{36:[1,292]},{19:$VC1,70:226,74:$VD1,76:$VE1,84:228,85:$VF1,90:293,102:$Vt,103:$Vu,104:$Vv,105:$Vw},o($V11,[2,114]),{32:[1,294]},{13:$V8,14:282,16:31,18:$V9,19:$Va,21:35,35:$Vb,41:295,48:33,54:$Vc,55:$Vd,57:32,58:$Ve,59:52,60:54,65:$Vf,66:56,67:61,70:30,71:57,72:58,73:59,74:$Vg,75:60,76:$Vh,77:62,80:$Vi,85:$Vj,86:$Vk,88:$Vl,91:$Vm,92:$Vn,93:$Vo,95:$Vp,96:$Vq,97:$Vr,98:$Vs,102:$Vt,103:$Vu,104:$Vv,105:$Vw,106:27,107:28,108:29,109:34,110:$Vx,114:$Vy,115:$Vz,116:$VA},{19:[1,296]},{13:$V1,21:297},o($V7,[2,23]),o($V11,[2,107]),{19:[1,298]},o($VU1,[2,20]),{30:[1,299]},{22:300,44:80,45:81,46:$VC,47:$VD,49:$VE},{30:[1,301]},{33:302,42:$VV1,43:$VW1},o($V7,[2,16],{45:81,44:167,46:$VC,47:$VD,49:$VE}),{33:305,42:$VV1,43:$VW1},{34:[1,306]},{34:[2,24]},{34:[2,25]},{34:[1,307]},o($VU1,[2,22]),{35:[1,308]},{6:309,7:4,8:5,9:6,10:7,11:8,12:$V0,13:$V1,17:$V2,21:13,23:$V3,27:$V4,35:$V5},{36:[1,310]},{37:[1,311]},o($V7,[2,17])],
defaultActions: {16:[2,1],75:[2,18],76:[2,19],303:[2,24],304:[2,25]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* comentario en XQUERY */
break;
case 2:/* Cometario de múltiples líneas XQUERY */
break;
case 3:return 63;
break;
case 4:return 64;
break;
case 5:return 17;
break;
case 6:return 23;
break;
case 7:return 80;
break;
case 8:return 83;
break;
case 9:return 82;
break;
case 10:return 113;
break;
case 11:return 12;
break;
case 12:return 51;
break;
case 13:return 24;
break;
case 14:return 26;
break;
case 15:return 46;
break;
case 16:return 49;
break;
case 17:return 50;
break;
case 18:return 47;
break;
case 19:return 58;
break;
case 20:return 126;
break;
case 21:return 122;
break;
case 22:return 123;
break;
case 23:return 124;
break;
case 24:return 125;
break;
case 25:return 127;
break;
case 26:return 'ancestor-or-self';
break;
case 27:return 'descendant-or-self';
break;
case 28:return 'following-sibling';
break;
case 29:return 'preceding-sibling';
break;
case 30:return  'last';
break;
case 31:return  'position';
break;
case 32:return  'text';
break;
case 33:return  'ancestor'; 
break;
case 34:return  'attribute'
break;
case 35:return  'child';
break;
case 36:return  'descendant';
break;
case 37:return  'following';
break;
case 38:return  'namespace';
break;
case 39:return  'parent';
break;
case 40:return  'preceding';
break;
case 41:return  'sibling';
break;
case 42:return  'self';
break;
case 43:return  'node';
break;
case 44:return 110;
break;
case 45:return 27;
break;
case 46:return 28;
break;
case 47:return 38;
break;
case 48:return 39;
break;
case 49:return 32;
break;
case 50:return 'datoString';
break;
case 51:return 43;
break;
case 52:return 42;
break;
case 53:yy_.yytext = yy_.yytext.slice(1,-1); return 116;
break;
case 54:return 111;
break;
case 55:return 99;
break;
case 56:return 85;
break;
case 57:return 113;
break;
case 58:return 112;
break;
case 59:return 119;
break;
case 60:return 120;
break;
case 61:return 117;
break;
case 62:return 118;
break;
case 63:return 68;
break;
case 64:return 'digual';
break;
case 65:return 121;
break;
case 66:return 20;
break;
case 67:return 30;
break;
case 68:return 34;
break;
case 69:return 63;
break;
case 70:return 'not';
break;
case 71:return 37;
break;
case 72:return 13;
break;
case 73:return 15
break;
case 74:return 65;
break;
case 75:return 54;
break;
case 76:return 63;
break;
case 77:return 'not';
break;
case 78:return 62;
break;
case 79:return 55;
break;
case 80:return 56;
break;
case 81:return 76;
break;
case 82:return 89;
break;
case 83:return 'puntosDobles';
break;
case 84:return 74;
break;
case 85:return 18;
break;
case 86:return 35;
break;
case 87:return "llaveCierra";
break;
case 88:return 40;
break;
case 89:return 115;
break;
case 90:return 114;
break;
case 91:return 19;
break;
case 92:return 'ID'
break;
case 93:
                                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                    
break;
case 94:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:\(:[\s\S\n]*?:\))/,/^(?:<!--[\s\S\n]*?-->)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:let\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:mod\b)/,/^(?:doc\b)/,/^(?:to\b)/,/^(?:in\b)/,/^(?:at\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:return\b)/,/^(?:data\b)/,/^(?:gt\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:ge\b)/,/^(?:ancestor-or-self\b)/,/^(?:descendant-or-self\b)/,/^(?:following-sibling\b)/,/^(?:preceding-sibling\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:text\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:sibling\b)/,/^(?:self\b)/,/^(?:node\b)/,/^(?:substring\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:local\b)/,/^(?:hr\b)/,/^(?:as\b)/,/^(?:string\b)/,/^(?:entero\b)/,/^(?:decimal\b)/,/^(?:"[^"]+")/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:%)/,/^(?:div\b)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:=)/,/^(?:==)/,/^(?:!=)/,/^(?::=)/,/^(?::)/,/^(?:\?)/,/^(?:or\b)/,/^(?:!)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\/\\\/)/,/^(?:\/)/,/^(?:\|\|)/,/^(?:!)/,/^(?:\|)/,/^(?:\[)/,/^(?:\])/,/^(?:\.)/,/^(?:::)/,/^(?:\.\.)/,/^(?:@)/,/^(?:\$)/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/,/^(?:[0-9]+)/,/^(?:[a-zA-Z0-9_nÑ]+)/,/^(?:(([A-Za-z])|[A-Za-z])([A-Za-z0-9])*)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaXQUERY;
exports.Parser = gramaticaXQUERY.Parser;
exports.parse = function () { return gramaticaXQUERY.parse.apply(gramaticaXQUERY, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}