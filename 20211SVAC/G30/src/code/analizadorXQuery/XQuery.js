/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XQuery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[28,33,50,54],$V1=[2,9],$V2=[1,10],$V3=[1,8],$V4=[1,9],$V5=[5,15,28,33,50,54,61,71],$V6=[5,15,28,33,50,54,61,71,79],$V7=[33,50,54],$V8=[2,12],$V9=[1,18],$Va=[1,19],$Vb=[50,54],$Vc=[2,20],$Vd=[1,23],$Ve=[1,24],$Vf=[2,25],$Vg=[1,32],$Vh=[1,33],$Vi=[1,43],$Vj=[1,44],$Vk=[2,44],$Vl=[1,57],$Vm=[1,56],$Vn=[1,51],$Vo=[1,54],$Vp=[1,58],$Vq=[2,66],$Vr=[1,62],$Vs=[1,64],$Vt=[1,55],$Vu=[1,65],$Vv=[1,66],$Vw=[1,67],$Vx=[1,68],$Vy=[1,63],$Vz=[1,71],$VA=[1,74],$VB=[17,36,50,54],$VC=[2,27],$VD=[1,83],$VE=[1,89],$VF=[1,90],$VG=[1,91],$VH=[1,92],$VI=[1,93],$VJ=[5,15,17,18,21,23,24,25,28,33,37,50,54,59,61,64,65,66,67,68,69,71,79,92,93,94,95,96,102],$VK=[1,103],$VL=[1,107],$VM=[1,95],$VN=[1,96],$VO=[1,97],$VP=[1,98],$VQ=[1,99],$VR=[1,100],$VS=[1,101],$VT=[1,102],$VU=[1,104],$VV=[1,106],$VW=[1,105],$VX=[5,15,17,18,21,23,24,25,28,31,33,36,37,39,40,41,42,43,44,45,46,47,48,50,54,59,61,64,65,66,67,68,69,71,79,92,93,94,95,96,98,99,102],$VY=[5,15,17,18,21,23,24,25,28,31,33,36,39,40,41,42,43,44,45,46,47,48,50,54,59,61,64,65,66,67,68,69,71,79,92,93,94,95,96,98,99],$VZ=[1,111],$V_=[1,112],$V$=[18,53,94,118,119,120,121],$V01=[2,135],$V11=[1,114],$V21=[1,115],$V31=[1,116],$V41=[1,117],$V51=[1,118],$V61=[1,119],$V71=[1,120],$V81=[1,121],$V91=[1,122],$Va1=[1,123],$Vb1=[1,124],$Vc1=[1,125],$Vd1=[1,126],$Ve1=[17,21,28,33,50,54],$Vf1=[17,21,54],$Vg1=[2,47],$Vh1=[1,141],$Vi1=[2,112],$Vj1=[1,174],$Vk1=[1,178],$Vl1=[1,177],$Vm1=[1,175],$Vn1=[1,176],$Vo1=[1,179],$Vp1=[1,180],$Vq1=[1,201],$Vr1=[1,202],$Vs1=[2,72],$Vt1=[1,215],$Vu1=[1,217],$Vv1=[1,219],$Vw1=[1,221],$Vx1=[1,223],$Vy1=[1,224],$Vz1=[17,31,36,37,39,40,41,42,43,44,45,46,47,48,50,54],$VA1=[5,15,17,18,21,23,24,25,28,33,37,50,54,59,61,64,65,66,67,68,69,71,79,92,93,102],$VB1=[5,15,17,18,21,23,24,25,28,33,37,50,54,59,61,64,65,66,67,68,69,71,79,92,93,94,95,102],$VC1=[5,15,17,18,21,23,24,25,28,31,33,36,37,39,41,43,45,50,54,59,61,64,65,66,67,68,69,71,79,92,93,94,95,96,98,99,102],$VD1=[2,114],$VE1=[2,145],$VF1=[1,232],$VG1=[2,48],$VH1=[1,277],$VI1=[1,275],$VJ1=[1,278],$VK1=[1,273],$VL1=[1,270],$VM1=[1,276],$VN1=[1,279],$VO1=[1,271],$VP1=[1,272],$VQ1=[2,152],$VR1=[1,280],$VS1=[1,281],$VT1=[17,31,36,37,39,41,43,45,50,54],$VU1=[1,306],$VV1=[1,308],$VW1=[1,302],$VX1=[1,303],$VY1=[1,304],$VZ1=[1,305],$V_1=[1,297],$V$1=[1,298],$V02=[1,299],$V12=[1,300],$V22=[1,301],$V32=[1,307],$V42=[1,309],$V52=[18,23,24,25,31,36,37,39,41,43,45,53,65,92,93,94,95,96,98,99,118,120,121,125,128,129],$V62=[1,319],$V72=[1,320],$V82=[1,321],$V92=[1,328],$Va2=[5,15,28,33,50,54,59,61,71,79],$Vb2=[18,23,24,25,31,36,37,39,41,43,45,53,65,92,93,98,99,118,120,121,125,128,129],$Vc2=[18,23,24,25,31,36,37,39,41,43,45,53,65,92,93,94,95,98,99,118,120,121,125,128,129],$Vd2=[18,23,24,25,31,36,37,39,41,43,45,53,65,98,99,118,120,121,125,128,129],$Ve2=[1,358],$Vf2=[1,360],$Vg2=[1,359],$Vh2=[1,361],$Vi2=[1,362],$Vj2=[1,363],$Vk2=[1,364],$Vl2=[1,365],$Vm2=[1,366],$Vn2=[1,367],$Vo2=[2,77],$Vp2=[1,373],$Vq2=[17,21,25,78,83],$Vr2=[17,21,25],$Vs2=[2,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"BEGIN":3,"INSTRUCCIONES":4,"EOF":5,"XQUERY":6,"FLWOR":7,"CALL":8,"FUNCTION":9,"FOR":10,"LET":11,"WHERE":12,"ORDER":13,"RETURN":14,"for":15,"DEFINITION":16,"dollasign":17,"identificador":18,"in":19,"SOURCE":20,"coma":21,"doc":22,"p_abre":23,"StringLiteral":24,"p_cierra":25,"PATH":26,"RANK":27,"let":28,"DEF_LET":29,"dpuntos":30,"igual":31,"EXPRESION":32,"where":33,"DEF_WHERE":34,"WHERE_PATH":35,"land":36,"axis":37,"EXP_WHERE":38,"menorque":39,"lt":40,"menorigual":41,"le":42,"mayorque":43,"gt":44,"mayorigual":45,"ge":46,"eq":47,"ne":48,"F":49,"order":50,"CONT_ORDER":51,"ORDER_PATH":52,"at":53,"return":54,"CONDITION":55,"rif":56,"rthen":57,"IF_RES":58,"relse":59,"INST":60,"local":61,"VALORES":62,"CALL_PRIM":63,"substring":64,"numero":65,"up_case":66,"low_case":67,"string":68,"number":69,"to":70,"dec":71,"fun":72,"VARIABLES":73,"as":74,"PREFIX":75,"TYPE":76,"POSTFIX":77,"l_abre":78,"l_cierra":79,"pyc":80,"xs":81,"fn":82,"quest":83,"date":84,"integer":85,"int":86,"long":87,"short":88,"boolean":89,"double":90,"float":91,"mas":92,"menos":93,"por":94,"div":95,"mod":96,"T":97,"diferente":98,"lor":99,"AXISNAME":100,"NODO":101,"d_axis":102,"ancestor":103,"cpuntos":104,"ancestororself":105,"attribute":106,"child":107,"descendant":108,"descendantorself":109,"following":110,"followingsibling":111,"namespace":112,"parent":113,"preceding":114,"precedingsibling":115,"self":116,"PREDICADOS":117,"punto":118,"ppunto":119,"text":120,"node":121,"PREDICADO":122,"c_abre":123,"CONTENIDO":124,"c_cierra":125,"EP":126,"K":127,"last":128,"position":129,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"for",17:"dollasign",18:"identificador",19:"in",21:"coma",22:"doc",23:"p_abre",24:"StringLiteral",25:"p_cierra",28:"let",30:"dpuntos",31:"igual",33:"where",36:"land",37:"axis",39:"menorque",40:"lt",41:"menorigual",42:"le",43:"mayorque",44:"gt",45:"mayorigual",46:"ge",47:"eq",48:"ne",50:"order",53:"at",54:"return",56:"rif",57:"rthen",59:"relse",61:"local",64:"substring",65:"numero",66:"up_case",67:"low_case",68:"string",69:"number",70:"to",71:"dec",72:"fun",74:"as",78:"l_abre",79:"l_cierra",80:"pyc",81:"xs",82:"fn",83:"quest",84:"date",85:"integer",86:"int",87:"long",88:"short",89:"boolean",90:"double",91:"float",92:"mas",93:"menos",94:"por",95:"div",96:"mod",98:"diferente",99:"lor",102:"d_axis",103:"ancestor",104:"cpuntos",105:"ancestororself",106:"attribute",107:"child",108:"descendant",109:"descendantorself",110:"following",111:"followingsibling",112:"namespace",113:"parent",114:"preceding",115:"precedingsibling",116:"self",118:"punto",119:"ppunto",120:"text",121:"node",123:"c_abre",125:"c_cierra",128:"last",129:"position"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[7,5],[10,2],[10,0],[16,5],[16,6],[16,0],[20,5],[20,1],[20,1],[11,2],[11,0],[29,6],[29,7],[29,0],[12,2],[12,0],[34,4],[34,5],[34,0],[35,3],[35,0],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,1],[13,2],[13,0],[51,4],[51,5],[51,0],[52,3],[52,4],[52,0],[14,4],[14,2],[14,2],[55,8],[58,1],[58,1],[58,1],[58,1],[8,6],[63,8],[63,4],[63,4],[63,4],[63,4],[27,5],[27,5],[62,2],[62,3],[62,0],[9,17],[9,17],[60,8],[73,8],[73,9],[73,0],[75,1],[75,1],[75,1],[77,1],[77,0],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[32,3],[32,3],[32,3],[32,3],[32,3],[32,1],[97,3],[97,3],[97,3],[97,3],[97,3],[97,3],[97,3],[97,3],[97,3],[97,3],[97,3],[97,3],[97,3],[97,3],[97,1],[49,3],[49,1],[49,1],[49,2],[49,1],[49,3],[49,1],[49,1],[49,1],[26,4],[26,4],[26,3],[26,3],[100,2],[100,2],[100,2],[100,2],[100,2],[100,2],[100,2],[100,2],[100,2],[100,2],[100,2],[100,2],[100,2],[100,0],[101,2],[101,2],[101,2],[101,2],[101,3],[101,3],[101,3],[101,3],[117,2],[117,0],[122,3],[124,2],[124,3],[124,4],[124,4],[124,2],[124,0],[126,3],[126,3],[126,3],[126,3],[126,3],[126,3],[126,3],[126,3],[126,3],[126,3],[126,3],[126,3],[126,3],[126,1],[127,3],[127,1],[127,1],[127,1],[127,1],[127,3],[127,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  
                            console.log(Arbol_AST);
                            return this.$;
                        
break;
case 2: case 151:
 this.$ = $$[$0-1]+$$[$0] 
break;
case 3: case 16: case 116: case 117:
 this.$ = $$[$0] 
break;
case 4:
 this.$ = $$[$0]; console.log($$[$0]); 
break;
case 5:
 this.$ = $$[$0].getValorImplicito(Arbol_AST.getEntorno('global')); 
break;
case 6: case 152:
 this.$ = '' 
break;
case 7:
 
                                                //ejecutando for
                                                if ($$[$0-4] != undefined){
                                                    for(let inst_for of $$[$0-4]){
                                                    inst_for.ejecutar(Arbol_AST.getEntorno('global'));
                                                    }
                                                }
                                                //ejecutando let
                                                console.log($$[$0-3]);
                                                if($$[$0-3] != undefined){
                                                    for(let inst_let of $$[$0-3]){
                                                    inst_let.ejecutar(Arbol_AST.getEntorno('global'));
                                                    }
                                                }
                                                if($$[$0-2] != undefined){
                                                    //ejecutando where
                                                    for(let inst_where of $$[$0-2]){
                                                    inst_where.ejecutar(Arbol_AST.getEntorno('global'));
                                                    }
                                                }
                                                //ejecutando return
                                                this.$ = $$[$0].ejecutar(Arbol_AST.getEntorno('global'));
                                            
break;
case 8:
   
                                  this.$ = $$[$0];
                                
break;
case 9: case 12: case 17: case 20: case 25: case 66: case 72:
 this.$ = [] 
break;
case 10:
 
                                                                let inst1 = [];
                                                                let inst_for1 = new For(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1], $$[$0-3]);
                                                                inst1.push(inst_for1);                                                                
                                                                this.$ = inst1.concat($$[$0]);
                                                            
break;
case 11:

                                                                let inst2 = [];
                                                                let inst_for2 = new For(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-1], $$[$0-3]);
                                                                inst2.push(inst_for2);
                                                                this.$ = inst2.concat($$[$0]);
                                                            
break;
case 13: case 15:
  
                                                    this.$ = $$[$0];
                                                    //Arbol_AST.CrearEntorno('flwor', Entorno_Global);
                                                
break;
case 14:
 
                                                    this.$ = $$[$0];
                                                    //Arbol_AST.CrearEntorno('flwor', Entorno_Global);
                                                
break;
case 18:

                                                                //Arbol_AST.CrearEntorno('flwor', Entorno_Global); 
                                                                let let1 = [];
                                                                let inst_let1 = new Let(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-1], $$[$0-4]);
                                                                let1.push(inst_let1);                                                                
                                                                this.$ = let1.concat($$[$0]);
                                                            
break;
case 19:

                                                                //Arbol_AST.CrearEntorno('flwor', Entorno_Global); 
                                                                let let2 = [];
                                                                let inst_let2 = new Let(_$[$0-6].first_line, _$[$0-6].first_column, $$[$0-1], $$[$0-4]);
                                                                let2.push(inst_let2);                                                                
                                                                this.$ = let2.concat($$[$0]);
                                                            
break;
case 21:

                                this.$ = $$[$0];
                            
break;
case 23:

                                                                let where1 = [];
                                                                let inst_where1 = new Where(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], $$[$0-2]);
                                                                where1.push(inst_where1);                                                                
                                                                this.$ = where1.concat($$[$0]);
                                                            
break;
case 24:

                                                                let where2 = [];
                                                                let inst_where2 = new Where(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1], $$[$0-2]);
                                                                where2.push(inst_where2);                                                                
                                                                this.$ = where2.concat($$[$0]);
                                                            
break;
case 26:
 
                                            this.$ = [];
                                            this.$.push($$[$0-1]);
                                            this.$ = this.$.concat($$[$0]);
                                        
break;
case 27:
 this.$ = []; 
break;
case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38:
 this.$ = $$[$0-2].getValorImplicito({})+$$[$0-1]+$$[$0].getValorImplicito({});
break;
case 39: case 73: case 74: case 75: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 93: case 108:
 this.$ = $$[$0]; 
break;
case 48:
 
                                                            this.$ = new Return(_$[$0-3].first_line, _$[$0-3].first_column, '', '/'+$$[$0-1]+$$[$0]);
                                                        
break;
case 49: case 50:
                     
                                                            this.$ = new Return(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0],'');
                                                        
break;
case 51:

                                                                        this.$ = new If(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], $$[$0-2], $$[$0]);
                                                                    
break;
case 52:

                                    this.$ = $$[$0]; 
                                
break;
case 53: case 54: case 55:

                                    this.$ = $$[$0];
                                
break;
case 56:

                                                this.$ = new Call($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column );
                                            
break;
case 57:

                                                                                this.$ = new Substring(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], Number($$[$0-3]), Number($$[$0-1])); 
                                                                            
break;
case 58:

                                                                                this.$ = new UpperCase(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
                                                                            
break;
case 59:

                                                                                this.$ = new LowerCase(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
                                                                            
break;
case 60:

                                                                                this.$ = new ToString(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
                                                                            
break;
case 61:

                                                                                this.$ = new ToNumber(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
                                                                            
break;
case 62: case 63:
 this.$ = [Number($$[$0-3]),Number($$[$0-1])] 
break;
case 64: case 65:
 
                                                    this.$ = [];
                                                    this.$.push($$[$0-1]);
                                                    this.$ = this.$.concat($$[$0]);
                                                
break;
case 67: case 68:

                                                    var new_func = new Function($$[$0-10], $$[$0-12], $$[$0-2], $$[$0-5], _$[$0-16].first_line, _$[$0-16].first_column);
                                                    var new_simbol = new Simbolo($$[$0-12], $$[$0-5].toUpperCase(), _$[$0-16].first_line, _$[$0-16].first_column, new_func);
                                                    if(Arbol_AST.getEntorno('global').existe($$[$0-12])){
                                                        //ya existe, se remplaza
                                                        Arbol_AST.getEntorno('global').reemplazar($$[$0-12], new_simbol)
                                                    }else{
                                                        //no existe, se crea
                                                        Arbol_AST.getEntorno('global').agregar(new_simbol);
                                                    }
                                                
break;
case 69:

                                                            this.$ = new If(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5], $$[$0-2], $$[$0]);
                                                        
break;
case 70: case 71:

                                                                                this.$ = [];
                                                                                this.$.push([$$[$0-6],$$[$0-2]]);
                                                                                this.$ = this.$.concat($$[$0]);
                                                                            
break;
case 88:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 89:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 90:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 91:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 92:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 94: case 95:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 96: case 97:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MENOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 98: case 99:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 100: case 101:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.MAYOR_IGUA_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 102: case 103:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 104: case 105:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 106:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 107:
 this.$ = new Operacion($$[$0-2],$$[$0],Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 109:
 this.$ = $$[$0-1]; 
break;
case 110:
 this.$ = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column); 
break;
case 111:
 this.$ = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 112:
 this.$ = new Variable($$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 113:
 this.$ = new Primitivo($$[$0].split('"')[1], _$[$0].first_line, _$[$0].first_column); 
break;
case 114:
 this.$ = new Path('/'+$$[$0-1]+$$[$0], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 115:
 this.$ = new SourcePath($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 118: case 119:
 this.$ = $$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]; 
break;
case 120: case 121:
 this.$ = $$[$0-2]+$$[$0-1]+$$[$0]; 
break;
case 122: case 123: case 124: case 125: case 126: case 127: case 128: case 129: case 130: case 131: case 132: case 133: case 134:
 this.$ = $$[$0-1]+$$[$0]; 
break;
case 135:
 this.$ = ''; 
break;
case 136: case 137: case 138: case 139: case 144: case 147:
this.$=$$[$0-1]+$$[$0]
break;
case 140: case 141: case 142: case 143: case 146: case 148: case 153: case 154: case 155: case 156: case 157: case 158: case 159: case 160: case 161: case 162: case 163: case 164: case 165: case 167: case 172: case 173:
this.$=$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 145:
this.$=''
break;
case 149: case 150:
this.$=$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 166: case 168: case 169: case 170: case 171:
this.$=$$[$0]
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:3,7:4,8:5,9:6,10:7,15:$V2,61:$V3,71:$V4}),{1:[3]},o($V0,$V1,{7:4,8:5,9:6,10:7,6:12,5:[1,11],15:$V2,61:$V3,71:$V4}),o($V5,[2,3]),o($V6,[2,4]),o($V6,[2,5]),o($V6,[2,6]),o($V7,[2,17],{11:13,28:[1,14]}),{30:[1,15]},{72:[1,16]},o($V0,$V8,{16:17,17:$V9,21:$Va}),{1:[2,1]},o($V5,[2,2]),o($Vb,[2,22],{12:20,33:[1,21]}),o($V7,$Vc,{29:22,17:$Vd,21:$Ve}),{18:[1,25]},{61:[1,26]},o($V0,[2,8]),{18:[1,27]},{17:[1,28]},{13:29,50:[1,30],54:[2,41]},o($Vb,$Vf,{34:31,17:$Vg,36:$Vh}),o($V7,[2,16]),{18:[1,34]},{17:[1,35]},{23:[1,36]},{30:[1,37]},{19:[1,38]},{18:[1,39]},{14:40,54:[1,41]},{17:$Vi,21:$Vj,51:42,54:$Vk},o($Vb,[2,21]),{18:[1,45]},{17:[1,46]},{30:[1,47]},{18:[1,48]},{8:60,17:$Vl,18:$Vm,21:$Vn,23:$Vo,24:$Vp,25:$Vq,26:59,32:50,37:$Vr,49:53,61:$V3,62:49,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{18:[1,69]},{20:70,22:$Vz,23:$VA,26:72,27:73,37:$Vr,102:$Vy},{19:[1,75]},o($V6,[2,7]),{8:60,17:[1,76],18:$Vm,23:$Vo,24:$Vp,26:59,32:77,37:$Vr,49:53,55:78,56:[1,79],61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{54:[2,40]},{18:[1,80]},{17:[1,81]},o($VB,$VC,{35:82,37:$VD}),{18:[1,84]},{31:[1,85]},{30:[1,86]},{25:[1,87]},{8:60,17:$Vl,18:$Vm,21:$Vn,23:$Vo,24:$Vp,25:$Vq,26:59,32:50,37:$Vr,49:53,61:$V3,62:88,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:52,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:94,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},o($VJ,[2,93],{31:$VK,36:$VL,39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,98:$VW,99:[1,108]}),o($VX,[2,108]),{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:109,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},o($VX,[2,110]),o($VX,[2,111]),{18:[1,110]},o($VX,[2,113]),o($VY,[2,115],{37:$VZ,102:$V_}),o($VX,[2,116]),o($VX,[2,117]),o($V$,$V01,{100:113,103:$V11,105:$V21,106:$V31,107:$V41,108:$V51,109:$V61,110:$V71,111:$V81,112:$V91,113:$Va1,114:$Vb1,115:$Vc1,116:$Vd1}),o($V$,$V01,{100:127,103:$V11,105:$V21,106:$V31,107:$V41,108:$V51,109:$V61,110:$V71,111:$V81,112:$V91,113:$Va1,114:$Vb1,115:$Vc1,116:$Vd1}),{23:[1,128]},{23:[1,129]},{23:[1,130]},{23:[1,131]},{23:[1,132]},{23:[1,133]},o($V0,$V8,{16:134,17:$V9,21:$Va}),{23:[1,135]},o($Ve1,[2,14],{37:$VZ,102:$V_}),o($Ve1,[2,15]),{65:[1,136]},{20:137,22:$Vz,23:$VA,26:72,27:73,37:$Vr,102:$Vy},{18:[1,138]},o($V6,[2,49],{92:$VE,93:$VF,94:$VG,95:$VH,96:$VI}),o($V6,[2,50]),{23:[1,139]},o($Vf1,$Vg1,{52:140,37:$Vh1}),{18:[1,142]},o($Vb,$Vf,{34:143,17:$Vg,36:$Vh}),{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,38:144,49:145,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,102:$Vy},o($VB,$VC,{35:146,37:$VD}),{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:147,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{31:[1,148]},o($VX,[2,56]),{25:[2,64]},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:149,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:150,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:151,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:152,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:153,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{8:60,17:$Vl,18:$Vm,21:$Vn,23:$Vo,24:$Vp,25:$Vq,26:59,32:50,37:$Vr,49:53,61:$V3,62:154,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI,97:52,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:155,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:156,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:157,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:158,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:159,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:160,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:161,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:162,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:163,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:164,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:165,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:166,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:167,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:168,102:$Vy},{25:[1,169],92:$VE,93:$VF,94:$VG,95:$VH,96:$VI},o($VY,$Vi1,{26:170,37:$Vr,102:$Vy}),o($V$,$V01,{100:171,103:$V11,105:$V21,106:$V31,107:$V41,108:$V51,109:$V61,110:$V71,111:$V81,112:$V91,113:$Va1,114:$Vb1,115:$Vc1,116:$Vd1}),o($V$,$V01,{100:172,103:$V11,105:$V21,106:$V31,107:$V41,108:$V51,109:$V61,110:$V71,111:$V81,112:$V91,113:$Va1,114:$Vb1,115:$Vc1,116:$Vd1}),{18:$Vj1,53:$Vk1,94:$Vl1,101:173,118:$Vm1,119:$Vn1,120:$Vo1,121:$Vp1},{104:[1,181]},{104:[1,182]},{104:[1,183]},{104:[1,184]},{104:[1,185]},{104:[1,186]},{104:[1,187]},{104:[1,188]},{104:[1,189]},{104:[1,190]},{104:[1,191]},{104:[1,192]},{104:[1,193]},{18:$Vj1,53:$Vk1,94:$Vl1,101:194,118:$Vm1,119:$Vn1,120:$Vo1,121:$Vp1},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:195,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:196,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:197,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:198,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:199,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{17:$Vq1,21:$Vr1,25:$Vs1,73:200},o($V0,[2,10]),{24:[1,203]},{21:[1,205],70:[1,204]},o($V0,$V8,{16:206,17:$V9,21:$Va}),o([5,15,28,31,33,36,39,40,41,42,43,44,45,46,47,48,50,54,61,71,79,92,93,94,95,96,98,99],$Vi1,{26:207,37:$Vr,102:$Vy}),{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:208,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{17:$Vi,21:$Vj,51:209,54:$Vk},{18:[1,210],53:[1,211]},o($Vf1,$Vg1,{52:212,37:$Vh1}),o($Vb,[2,23]),o($VB,$VC,{35:213,31:[1,222],37:$VD,39:[1,214],40:$Vt1,41:[1,216],42:$Vu1,43:[1,218],44:$Vv1,45:[1,220],46:$Vw1,47:$Vx1,48:$Vy1}),o($Vz1,[2,39]),o($Vb,$Vf,{34:225,17:$Vg,36:$Vh}),o($V7,$Vc,{29:226,17:$Vd,21:$Ve,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI}),{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:227,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},o($VA1,[2,88],{94:$VG,95:$VH,96:$VI}),o($VA1,[2,89],{94:$VG,95:$VH,96:$VI}),o($VB1,[2,90],{96:$VI}),o($VB1,[2,91],{96:$VI}),o($VJ,[2,92]),{25:[2,65]},o($VC1,[2,94],{40:$VN,42:$VP,44:$VR,46:$VT,47:$VU,48:$VV}),o($VX,[2,95]),o($VC1,[2,96],{40:$VN,42:$VP,44:$VR,46:$VT,47:$VU,48:$VV}),o($VX,[2,97]),o($VC1,[2,98],{40:$VN,42:$VP,44:$VR,46:$VT,47:$VU,48:$VV}),o($VX,[2,99]),o($VC1,[2,100],{40:$VN,42:$VP,44:$VR,46:$VT,47:$VU,48:$VV}),o($VX,[2,101]),o($VC1,[2,102],{40:$VN,42:$VP,44:$VR,46:$VT,47:$VU,48:$VV}),o($VX,[2,103]),o($VC1,[2,104],{40:$VN,42:$VP,44:$VR,46:$VT,47:$VU,48:$VV}),o($VX,[2,105]),o([5,15,17,18,21,23,24,25,28,33,36,37,50,54,59,61,64,65,66,67,68,69,71,79,92,93,94,95,96,99,102],[2,106],{31:$VK,39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,98:$VW}),o([5,15,17,18,21,23,24,25,28,33,37,50,54,59,61,64,65,66,67,68,69,71,79,92,93,94,95,96,99,102],[2,107],{31:$VK,36:$VL,39:$VM,40:$VN,41:$VO,42:$VP,43:$VQ,44:$VR,45:$VS,46:$VT,47:$VU,48:$VV,98:$VW}),o($VX,[2,109]),o($VY,$VD1,{37:$VZ,102:$V_}),{18:$Vj1,53:$Vk1,94:$Vl1,101:228,118:$Vm1,119:$Vn1,120:$Vo1,121:$Vp1},{18:$Vj1,53:$Vk1,94:$Vl1,101:229,118:$Vm1,119:$Vn1,120:$Vo1,121:$Vp1},o($VX,[2,120]),o($VX,$VE1,{117:230,122:231,123:$VF1}),o($VX,$VE1,{122:231,117:233,123:$VF1}),o($VX,$VE1,{122:231,117:234,123:$VF1}),o($VX,$VE1,{122:231,117:235,123:$VF1}),{18:[1,236],94:[1,237]},{23:[1,238]},{23:[1,239]},o($V$,[2,122]),o($V$,[2,123]),o($V$,[2,124]),o($V$,[2,125]),o($V$,[2,126]),o($V$,[2,127]),o($V$,[2,128]),o($V$,[2,129]),o($V$,[2,130]),o($V$,[2,131]),o($V$,[2,132]),o($V$,[2,133]),o($V$,[2,134]),o($VX,[2,121]),{21:[1,240],92:$VE,93:$VF,94:$VG,95:$VH,96:$VI},{25:[1,241],92:$VE,93:$VF,94:$VG,95:$VH,96:$VI},{25:[1,242],92:$VE,93:$VF,94:$VG,95:$VH,96:$VI},{25:[1,243],92:$VE,93:$VF,94:$VG,95:$VH,96:$VI},{25:[1,244],92:$VE,93:$VF,94:$VG,95:$VH,96:$VI},{25:[1,245]},{18:[1,246]},{17:[1,247]},{25:[1,248]},{65:[1,249]},{65:[1,250]},o($V0,[2,11]),o([31,36,39,40,41,42,43,44,45,46,47,48,92,93,94,95,96,98,99],$VD1,{5:$VG1,15:$VG1,28:$VG1,33:$VG1,50:$VG1,54:$VG1,61:$VG1,71:$VG1,79:$VG1,37:$VZ,102:$V_}),{25:[1,251],92:$VE,93:$VF,94:$VG,95:$VH,96:$VI},{54:[2,42]},o($Vf1,$Vg1,{52:252,37:$Vh1}),{18:[1,253]},{17:$Vi,21:$Vj,51:254,54:$Vk},o($VB,[2,26]),{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,38:255,49:145,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,38:256,49:145,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,38:257,49:145,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,38:258,49:145,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,38:259,49:145,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,38:260,49:145,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,38:261,49:145,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,38:262,49:145,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,38:263,49:145,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,38:264,49:145,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,37:$Vr,38:265,49:145,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,102:$Vy},o($Vb,[2,24]),o($V7,[2,18]),o($V7,$Vc,{29:266,17:$Vd,21:$Ve,92:$VE,93:$VF,94:$VG,95:$VH,96:$VI}),o($VX,[2,118]),o($VX,[2,119]),o($VX,[2,136]),o($VX,$VE1,{122:231,117:267,123:$VF1}),{18:$VH1,23:$VI1,24:$VJ1,37:$VK1,53:$VL1,65:$VM1,118:$VN1,120:$VO1,121:$VP1,124:268,125:$VQ1,126:269,127:274,128:$VR1,129:$VS1},o($VX,[2,137]),o($VX,[2,138]),o($VX,[2,139]),o($VX,$VE1,{122:231,117:282,123:$VF1}),o($VX,$VE1,{122:231,117:283,123:$VF1}),{25:[1,284]},{25:[1,285]},{65:[1,286]},o($VX,[2,58]),o($VX,[2,59]),o($VX,[2,60]),o($VX,[2,61]),{74:[1,287]},{74:[1,288]},{18:[1,289]},{26:290,37:$Vr,102:$Vy},{25:[1,291]},{25:[1,292]},{57:[1,293]},o($Vf1,[2,45]),o($Vf1,$Vg1,{52:294,37:$Vh1}),{54:[2,43]},o($VT1,[2,28],{40:$Vt1,42:$Vu1,44:$Vv1,46:$Vw1,47:$Vx1,48:$Vy1}),o($Vz1,[2,29]),o($VT1,[2,30],{40:$Vt1,42:$Vu1,44:$Vv1,46:$Vw1,47:$Vx1,48:$Vy1}),o($Vz1,[2,31]),o($VT1,[2,32],{40:$Vt1,42:$Vu1,44:$Vv1,46:$Vw1,47:$Vx1,48:$Vy1}),o($Vz1,[2,33]),o($VT1,[2,34],{40:$Vt1,42:$Vu1,44:$Vv1,46:$Vw1,47:$Vx1,48:$Vy1}),o($Vz1,[2,35]),o($VT1,[2,36],{40:$Vt1,42:$Vu1,44:$Vv1,46:$Vw1,47:$Vx1,48:$Vy1}),o($Vz1,[2,37]),o($Vz1,[2,38]),o($V7,[2,19]),o($VX,[2,144]),{125:[1,295]},{18:$VH1,23:$VI1,24:$VJ1,31:$VU1,36:$VV1,37:$VK1,39:$VW1,41:$VX1,43:$VY1,45:$VZ1,53:$VL1,65:$VM1,92:$V_1,93:$V$1,94:$V02,95:$V12,96:$V22,98:$V32,99:$V42,118:$VN1,120:$VO1,121:$VP1,124:296,125:$VQ1,126:269,127:274,128:$VR1,129:$VS1},{18:$VH1,23:$VI1,24:$VJ1,65:$VM1,118:$VN1,126:310,127:274,128:$VR1,129:$VS1},{23:[1,311]},{23:[1,312]},{18:$VH1,23:$VI1,24:$VJ1,37:$VK1,53:$VL1,65:$VM1,118:$VN1,120:$VO1,121:$VP1,124:313,125:$VQ1,126:269,127:274,128:$VR1,129:$VS1},o($V52,[2,166]),{18:$VH1,23:$VI1,24:$VJ1,65:$VM1,118:$VN1,126:314,127:274,128:$VR1,129:$VS1},o($V52,[2,168]),o($V52,[2,169]),o($V52,[2,170]),o($V52,[2,171]),{23:[1,315]},{23:[1,316]},o($VX,[2,140]),o($VX,[2,141]),o($VX,[2,142]),o($VX,[2,143]),{21:[1,317]},{75:318,81:$V62,82:$V72,83:$V82},{75:322,81:$V62,82:$V72,83:$V82},{74:[1,323]},o($Ve1,[2,13],{37:$VZ,102:$V_}),o($Ve1,[2,62]),o($Ve1,[2,63]),{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:325,37:$Vr,49:53,55:326,56:$V92,58:324,60:327,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},o($Vf1,[2,46]),o([5,15,17,18,21,23,24,25,28,31,33,36,37,39,40,41,42,43,44,45,46,47,48,50,54,59,61,64,65,66,67,68,69,71,79,92,93,94,95,96,98,99,102,123],[2,146]),{125:[2,147]},{18:$VH1,23:$VI1,24:$VJ1,65:$VM1,118:$VN1,126:329,127:274,128:$VR1,129:$VS1},{18:$VH1,23:$VI1,24:$VJ1,65:$VM1,118:$VN1,126:330,127:274,128:$VR1,129:$VS1},{18:$VH1,23:$VI1,24:$VJ1,65:$VM1,118:$VN1,126:331,127:274,128:$VR1,129:$VS1},{18:$VH1,23:$VI1,24:$VJ1,65:$VM1,118:$VN1,126:332,127:274,128:$VR1,129:$VS1},{18:$VH1,23:$VI1,24:$VJ1,65:$VM1,118:$VN1,126:333,127:274,128:$VR1,129:$VS1},{18:$VH1,23:$VI1,24:$VJ1,65:$VM1,118:$VN1,126:334,127:274,128:$VR1,129:$VS1},{18:$VH1,23:$VI1,24:$VJ1,65:$VM1,118:$VN1,126:335,127:274,128:$VR1,129:$VS1},{18:$VH1,23:$VI1,24:$VJ1,65:$VM1,118:$VN1,126:336,127:274,128:$VR1,129:$VS1},{18:$VH1,23:$VI1,24:$VJ1,65:$VM1,118:$VN1,126:337,127:274,128:$VR1,129:$VS1},{18:$VH1,23:$VI1,24:$VJ1,65:$VM1,118:$VN1,126:338,127:274,128:$VR1,129:$VS1},{18:$VH1,23:$VI1,24:$VJ1,65:$VM1,118:$VN1,126:339,127:274,128:$VR1,129:$VS1},{18:$VH1,23:$VI1,24:$VJ1,65:$VM1,118:$VN1,126:340,127:274,128:$VR1,129:$VS1},{18:$VH1,23:$VI1,24:$VJ1,65:$VM1,118:$VN1,126:341,127:274,128:$VR1,129:$VS1},{18:$VH1,23:$VI1,24:$VJ1,31:$VU1,36:$VV1,37:$VK1,39:$VW1,41:$VX1,43:$VY1,45:$VZ1,53:$VL1,65:$VM1,92:$V_1,93:$V$1,94:$V02,95:$V12,96:$V22,98:$V32,99:$V42,118:$VN1,120:$VO1,121:$VP1,124:342,125:$VQ1,126:269,127:274,128:$VR1,129:$VS1},{25:[1,343]},{25:[1,344]},{125:[2,151]},{25:[1,345],31:$VU1,36:$VV1,39:$VW1,41:$VX1,43:$VY1,45:$VZ1,92:$V_1,93:$V$1,94:$V02,95:$V12,96:$V22,98:$V32,99:$V42},{25:[1,346]},{25:[1,347]},{65:[1,348]},{30:[1,349]},{30:[2,73]},{30:[2,74]},{30:[2,75]},{30:[1,350]},{75:351,81:$V62,82:$V72,83:$V82},{59:[1,352]},o($Va2,[2,52],{92:$VE,93:$VF,94:$VG,95:$VH,96:$VI}),o($Va2,[2,53]),o($Va2,[2,55]),{23:[1,353]},o($Vb2,[2,153],{94:$V02,95:$V12,96:$V22}),o($Vb2,[2,154],{94:$V02,95:$V12,96:$V22}),o($Vc2,[2,155],{96:$V22}),o($Vc2,[2,156],{96:$V22}),o($V52,[2,157]),o($Vd2,[2,158],{92:$V_1,93:$V$1,94:$V02,95:$V12,96:$V22}),o($Vd2,[2,159],{92:$V_1,93:$V$1,94:$V02,95:$V12,96:$V22}),o($Vd2,[2,160],{92:$V_1,93:$V$1,94:$V02,95:$V12,96:$V22}),o($Vd2,[2,161],{92:$V_1,93:$V$1,94:$V02,95:$V12,96:$V22}),o($Vd2,[2,162],{92:$V_1,93:$V$1,94:$V02,95:$V12,96:$V22}),o($Vd2,[2,163],{92:$V_1,93:$V$1,94:$V02,95:$V12,96:$V22}),o([18,23,24,25,36,37,53,65,99,118,120,121,125,128,129],[2,164],{31:$VU1,39:$VW1,41:$VX1,43:$VY1,45:$VZ1,92:$V_1,93:$V$1,94:$V02,95:$V12,96:$V22,98:$V32}),o([18,23,24,25,37,53,65,99,118,120,121,125,128,129],[2,165],{31:$VU1,36:$VV1,39:$VW1,41:$VX1,43:$VY1,45:$VZ1,92:$V_1,93:$V$1,94:$V02,95:$V12,96:$V22,98:$V32}),{125:[2,148]},{18:$VH1,23:$VI1,24:$VJ1,37:$VK1,53:$VL1,65:$VM1,118:$VN1,120:$VO1,121:$VP1,124:354,125:$VQ1,126:269,127:274,128:$VR1,129:$VS1},{18:$VH1,23:$VI1,24:$VJ1,37:$VK1,53:$VL1,65:$VM1,118:$VN1,120:$VO1,121:$VP1,124:355,125:$VQ1,126:269,127:274,128:$VR1,129:$VS1},o($V52,[2,167]),o($V52,[2,172]),o($V52,[2,173]),{25:[1,356]},{68:$Ve2,71:$Vf2,76:357,84:$Vg2,85:$Vh2,86:$Vi2,87:$Vj2,88:$Vk2,89:$Vl2,90:$Vm2,91:$Vn2},{68:$Ve2,71:$Vf2,76:368,84:$Vg2,85:$Vh2,86:$Vi2,87:$Vj2,88:$Vk2,89:$Vl2,90:$Vm2,91:$Vn2},{30:[1,369]},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:325,37:$Vr,49:53,55:326,56:$V92,58:370,60:327,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:371,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{125:[2,149]},{125:[2,150]},o($VX,[2,57]),{77:372,78:$Vo2,83:$Vp2},o($Vq2,[2,78]),o($Vq2,[2,79]),o($Vq2,[2,80]),o($Vq2,[2,81]),o($Vq2,[2,82]),o($Vq2,[2,83]),o($Vq2,[2,84]),o($Vq2,[2,85]),o($Vq2,[2,86]),o($Vq2,[2,87]),o($Vr2,$Vo2,{77:374,83:$Vp2}),{68:$Ve2,71:$Vf2,76:375,84:$Vg2,85:$Vh2,86:$Vi2,87:$Vj2,88:$Vk2,89:$Vl2,90:$Vm2,91:$Vn2},o($V6,$Vs2),{25:[1,376],92:$VE,93:$VF,94:$VG,95:$VH,96:$VI},{78:[1,377]},o([17,21,25,78],[2,76]),{17:$Vq1,21:$Vr1,25:$Vs1,73:378},o($Vr2,$Vo2,{77:379,83:$Vp2}),{57:[1,380]},o($V0,$V1,{7:4,8:5,9:6,10:7,6:381,60:382,15:$V2,56:[1,383],61:$V3,71:$V4}),{25:[2,70]},{17:$Vq1,21:$Vr1,25:$Vs1,73:384},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:325,37:$Vr,49:53,55:326,56:$V92,58:385,60:327,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{79:[1,386]},{79:[1,387]},{23:[1,388]},{25:[2,71]},{59:[1,389]},{80:[1,390]},{80:[1,391]},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:392,37:$Vr,49:53,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:325,37:$Vr,49:53,55:326,56:$V92,58:393,60:327,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},o($V6,[2,67]),o($V6,[2,68]),{25:[1,394],92:$VE,93:$VF,94:$VG,95:$VH,96:$VI},o($Va2,$Vs2),{57:[1,395]},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:325,37:$Vr,49:53,55:326,56:$V92,58:396,60:327,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{59:[1,397]},{8:60,17:$Vl,18:$Vm,23:$Vo,24:$Vp,26:59,32:325,37:$Vr,49:53,55:326,56:$V92,58:398,60:327,61:$V3,63:61,64:$Vs,65:$Vt,66:$Vu,67:$Vv,68:$Vw,69:$Vx,97:52,102:$Vy},{79:[2,69]}],
defaultActions: {11:[2,1],42:[2,40],88:[2,64],154:[2,65],209:[2,42],254:[2,43],296:[2,147],313:[2,151],319:[2,73],320:[2,74],321:[2,75],342:[2,148],354:[2,149],355:[2,150],378:[2,70],384:[2,71],398:[2,69]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    /********************AST**************************/
    const { Simbolo } = require ('./AST/Simbolo')
    const { Entorno } = require ('./AST/Entorno')
    const { AST } = require ('./AST/AST')
    const { Tipo } = require('./AST/Tipo')

     /***************INSTRUCCIONES*********************/
    const { For } = require ('./Instrucciones/For')
    const { Let } = require ('./Instrucciones/Let')
    const { Where } = require ('./Instrucciones/Where')
    const { Return } = require ('./Instrucciones/Return')
    const { Function } = require ('./Instrucciones/Function')
    const { HeaderC3D } = require ('./Instrucciones/HeaderC3D')
    const { MainC3D } = require ('./Instrucciones/MainC3D')
    const { FunctionsC3D } = require ('./Instrucciones/FunctionsC3D')

    /*****************EXPRESIONES**********************/
    const { Primitivo } = require ('./Expresiones/Primitivo')
    const { Operacion, Operador } = require ('./Expresiones/Operacion')
    const { Path } = require ('./Expresiones/Path')
    const { SourcePath } = require ('./Expresiones/SourcePath')
    const { Variable } = require ('./Expresiones/Variable')
    const { If } = require ('./Expresiones/If')
    const { Call } = require ('./Expresiones/Call')
    const { Substring } = require ('./Expresiones/Substring')
    const { UpperCase } = require ('./Expresiones/UpperCase')
    const { LowerCase } = require ('./Expresiones/LowerCase')
    const { ToString } = require ('./Expresiones/ToString')
    const { ToNumber } = require ('./Expresiones/ToNumber')

    //se crea el entorno global
    var Entorno_Global = new Entorno('global',null)

    //se crea el ast y se le pasa el entorno global
    var Arbol_AST = new AST([],Entorno_Global)

    //manejo de errores
    var errores = [];

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip white space */
break;
case 1:return 107  
break;
case 2:return 109
break;
case 3:return 111
break;
case 4:return 115
break;
case 5:return 105
break;
case 6:return 108
break;
case 7:return 110
break;
case 8:return 114
break;
case 9:return 103
break;
case 10:return 106
break;
case 11:return 116
break;
case 12:return 112
break;
case 13:return 113
break;
case 14:return 120
break;
case 15:return 121
break;
case 16:return 129
break;
case 17:return 128
break;
case 18:return 15
break;
case 19:return 28
break;
case 20:return 33
break;
case 21:return 50
break;
case 22:return 54
break;
case 23:return 70
break;
case 24:return 19
break;
case 25:return 22
break;
case 26:return 47 // =
break;
case 27:return 48 // !=
break;
case 28:return 'it' // <
break;
case 29:return 42 // <=
break;
case 30:return 44 // >
break;
case 31:return 46 // >=
break;
case 32:return 21
break;
case 33:return 74
break;
case 34:return 56
break;
case 35:return 57
break;
case 36:return 59
break;
case 37:return 68
break;
case 38:return 84
break;
case 39:return 71
break;
case 40:return 85
break;
case 41:return 86
break;
case 42:return 87
break;
case 43:return 88
break;
case 44:return 89
break;
case 45:return 90
break;
case 46:return 91
break;
case 47:return 71
break;
case 48:return 72
break;
case 49:return 69
break;
case 50:return 64
break;
case 51:return 66
break;
case 52:return 67
break;
case 53:return 82
break;
case 54:return 81
break;
case 55:return  'quest'
break;
case 56:return 61
break;
case 57:return 36
break;
case 58:return 99
break;
case 59:return 31
break;
case 60:return 47
break;
case 61:return 98
break;
case 62:return 48
break;
case 63:return 41
break;
case 64:return 42
break;
case 65:return 39
break;
case 66:return 40
break;
case 67:return 45
break;
case 68:return 46
break;
case 69:return 43
break;
case 70:return 44
break;
case 71:return 92
break;
case 72:return 93
break;
case 73:return 94
break;
case 74:return 95 
break;
case 75:return 96
break;
case 76:return 123
break;
case 77:return 125
break;
case 78:return 78
break;
case 79:return 79
break;
case 80:return 23
break;
case 81:return 25
break;
case 82:return 104
break;
case 83:return 30
break;
case 84:return 119
break;
case 85:return 118
break;
case 86:return 80
break;
case 87:return 17
break;
case 88:return 53
break;
case 89:return 'or'
break;
case 90:return 102
break;
case 91:return 37
break;
case 92:return 24
break;
case 93:return 'CharLiteral'
break;
case 94:return 65;
break;
case 95:return 18;  
break;
case 96:  
    console.error('Error léxico: ' + yy_.yytext + ', linea: ' + yy_.yylloc.first_line + ', columna: ' + yy_.yylloc.first_column);
    errores.push({'Error Type': 'Lexico', 'Row': yy_.yylloc.first_line, 'Column': yy_.yylloc.first_column, 'Description': 'El caracter: '+yy_.yytext+' no pertenece al lenguaje' });

break;
case 97:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:following-sibling\b)/,/^(?:preceding-sibling\b)/,/^(?:ancestor-or-self\b)/,/^(?:descendant\b)/,/^(?:following\b)/,/^(?:preceding\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:self\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:text\b)/,/^(?:node\b)/,/^(?:position\b)/,/^(?:last\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:to\b)/,/^(?:in\b)/,/^(?:doc\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:it\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:,)/,/^(?:as\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:string\b)/,/^(?:date\b)/,/^(?:decimal\b)/,/^(?:integer\b)/,/^(?:int\b)/,/^(?:long\b)/,/^(?:short\b)/,/^(?:boolean\b)/,/^(?:double\b)/,/^(?:float\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:number\b)/,/^(?:substring\b)/,/^(?:upper-case\b)/,/^(?:lower-case\b)/,/^(?:fn\b)/,/^(?:xs\b)/,/^(?:\?)/,/^(?:local\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:=)/,/^(?:eq\b)/,/^(?:!=)/,/^(?:ne\b)/,/^(?:<=)/,/^(?:le\b)/,/^(?:<)/,/^(?:lt\b)/,/^(?:>=)/,/^(?:ge\b)/,/^(?:>)/,/^(?:gt\b)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:div\b)/,/^(?:mod\b)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:::)/,/^(?::)/,/^(?:\.\.)/,/^(?:\.)/,/^(?:;)/,/^(?:\$)/,/^(?:@)/,/^(?:\|)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/,/^(?:{charliteral})/,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+))|[0-9]+)/,/^(?:[a-zA-ZÀ-ÿ][a-zA-ZÀ-ÿ0-9_ñÑ]*)/,/^(?:.)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XQuery;
exports.Parser = XQuery.Parser;
exports.parse = function () { return XQuery.parse.apply(XQuery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}