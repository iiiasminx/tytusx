/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador_xqueryizq = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,29],$V1=[1,37],$V2=[1,38],$V3=[1,33],$V4=[1,17],$V5=[1,34],$V6=[1,31],$V7=[1,36],$V8=[1,35],$V9=[1,13],$Va=[1,32],$Vb=[1,14],$Vc=[1,41],$Vd=[1,42],$Ve=[1,18],$Vf=[1,19],$Vg=[1,20],$Vh=[1,21],$Vi=[52,75],$Vj=[5,33],$Vk=[5,33,45],$Vl=[1,52],$Vm=[2,5,24,26,33,38,41,46],$Vn=[5,33,45,52,54,75],$Vo=[2,70],$Vp=[1,57],$Vq=[1,56],$Vr=[5,27,32,33,45,64],$Vs=[2,5,24,26,30,33,35,38,41,45,46,52,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,90,93,94],$Vt=[2,137],$Vu=[2,5,24,26,30,33,35,38,41,45,46,52,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,82,84,90,93,94],$Vv=[1,90],$Vw=[1,91],$Vx=[1,92],$Vy=[1,98],$Vz=[1,106],$VA=[1,97],$VB=[1,99],$VC=[1,105],$VD=[1,100],$VE=[1,101],$VF=[2,91],$VG=[1,121],$VH=[1,134],$VI=[1,135],$VJ=[1,136],$VK=[1,137],$VL=[1,138],$VM=[1,139],$VN=[1,140],$VO=[1,141],$VP=[1,142],$VQ=[1,143],$VR=[1,144],$VS=[1,145],$VT=[1,146],$VU=[1,147],$VV=[1,148],$VW=[1,149],$VX=[1,150],$VY=[30,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],$VZ=[1,156],$V_=[1,157],$V$=[1,158],$V01=[1,159],$V11=[1,160],$V21=[1,165],$V31=[1,166],$V41=[1,164],$V51=[1,163],$V61=[1,161],$V71=[1,162],$V81=[1,167],$V91=[1,168],$Va1=[1,169],$Vb1=[1,170],$Vc1=[1,171],$Vd1=[1,172],$Ve1=[1,173],$Vf1=[1,174],$Vg1=[2,5,24,26,30,33,35,38,41,45,46,52,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,90,93,94],$Vh1=[2,122],$Vi1=[1,176],$Vj1=[30,35],$Vk1=[30,52,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75],$Vl1=[52,54,75],$Vm1=[2,5,24,26,30,33,35,38,41,45,46,52,58,59,63,64,65,66,67,68,69,70,71,72,73,74,75,90,93,94],$Vn1=[30,52,63,64,65,66,67,68,69,70,71,72,73,74,75],$Vo1=[2,5,24,26,30,33,35,38,41,45,46,52,63,64,65,66,67,68,69,70,71,72,73,74,75,90,93,94],$Vp1=[1,265],$Vq1=[1,275];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"XQUERYGRA":4,"EOF":5,"HTML":6,"INSTRUCCIONES":7,"INSTRUCCION":8,"FOR_IN":9,"WHERE":10,"ORDEN":11,"RETURN":12,"LLAMADA":13,"F_DATA":14,"F_UPPER":15,"F_LOWER":16,"F_SUBSTRING":17,"CREAR_V":18,"ASIGNAR_V":19,"IF_":20,"CREAR_F":21,"tk_punto_coma":22,"LLAMADA_F":23,"tk_declare":24,"tk_function":25,"tk_local":26,"tk_identificador":27,"tk_parentesis_izq":28,"PARAMETROS":29,"tk_parentesis_der":30,"RETURNFUNC":31,"tk_llave_izq":32,"tk_llave_der":33,"PARAMETROS_ENTRADA":34,"tk_coma":35,"DATO":36,"PARAMETRO":37,"tk_dolar":38,"tk_as":39,"tk_xs":40,"tk_if":41,"THEN_":42,"ELSE_":43,"tk_then":44,"tk_else":45,"tk_let":46,"VARIABLE":47,"tk_let_igual":48,"tk_for":49,"tk_in":50,"tk_at":51,"tk_order_by":52,"XPATHGRA":53,"tk_where":54,"CONDICIONAL":55,"tk_numero":56,"tk_hilera":57,"tk_mas":58,"tk_menos":59,"tk_asterisco":60,"tk_div":61,"tk_mod":62,"tk_mayor":63,"tk_menor":64,"tk_mayor_igual":65,"tk_menor_igual":66,"tk_igual":67,"tk_indiferente":68,"tk_gt":69,"tk_lt":70,"tk_ge":71,"tk_le":72,"tk_eq":73,"tk_ne":74,"tk_return":75,"IF":76,"tk_doc":77,"tk_to":78,"CONSULTA_":79,"CONSULTA":80,"NODO":81,"tk_diagonal":82,"PREDICADO":83,"tk_diagonal_doble":84,"tk_puntos_seguidos":85,"tk_arroba":86,"tk_punto":87,"tk_node":88,"tk_corchete_izq":89,"tk_corchete_der":90,"F_NATIVAS":91,"tk_last":92,"tk_and":93,"tk_or":94,"tk_data":95,"CONS":96,"tk_upper":97,"tk_lower":98,"tk_substring":99,"CONTENIDO":100,"L_CONTENIDO":101,"COD":102,"THEN":103,"ELSE":104,"FUNCACKERMAN":105,"CABEZAFUNC":106,"LISTAFUNC":107,"FUNCOPERACION":108,"LLAMADAFUNCION":109,"LISTACONF":110,"CODIGOFUNCION":111,"LLAFCONT":112,"L_LLAFCONT":113,"LLAD":114,"FF":115,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",22:"tk_punto_coma",24:"tk_declare",25:"tk_function",26:"tk_local",27:"tk_identificador",28:"tk_parentesis_izq",30:"tk_parentesis_der",32:"tk_llave_izq",33:"tk_llave_der",35:"tk_coma",38:"tk_dolar",39:"tk_as",40:"tk_xs",41:"tk_if",44:"tk_then",45:"tk_else",46:"tk_let",48:"tk_let_igual",49:"tk_for",50:"tk_in",51:"tk_at",52:"tk_order_by",54:"tk_where",56:"tk_numero",57:"tk_hilera",58:"tk_mas",59:"tk_menos",60:"tk_asterisco",61:"tk_div",62:"tk_mod",63:"tk_mayor",64:"tk_menor",65:"tk_mayor_igual",66:"tk_menor_igual",67:"tk_igual",68:"tk_indiferente",69:"tk_gt",70:"tk_lt",71:"tk_ge",72:"tk_le",73:"tk_eq",74:"tk_ne",75:"tk_return",77:"tk_doc",78:"tk_to",82:"tk_diagonal",84:"tk_diagonal_doble",85:"tk_puntos_seguidos",86:"tk_arroba",87:"tk_punto",88:"tk_node",89:"tk_corchete_izq",90:"tk_corchete_der",92:"tk_last",93:"tk_and",94:"tk_or",95:"tk_data",97:"tk_upper",98:"tk_lower",99:"tk_substring"},
productions_: [0,[3,2],[3,2],[3,2],[7,2],[7,1],[4,4],[4,1],[4,1],[4,1],[4,1],[4,1],[8,1],[8,1],[8,1],[8,2],[8,1],[8,2],[21,11],[21,10],[23,5],[34,3],[34,1],[29,3],[29,1],[37,5],[20,5],[20,6],[42,2],[43,2],[43,2],[18,2],[18,4],[19,3],[9,4],[9,6],[11,0],[11,2],[11,3],[10,2],[10,0],[55,2],[55,1],[55,1],[55,1],[55,3],[55,3],[55,3],[55,3],[55,3],[55,2],[55,3],[55,3],[55,3],[55,3],[55,3],[55,3],[55,3],[55,3],[55,3],[55,3],[55,3],[55,3],[12,2],[12,3],[12,2],[12,2],[13,5],[13,1],[13,2],[13,1],[13,5],[47,2],[53,1],[79,2],[79,1],[80,2],[80,1],[81,3],[81,3],[81,2],[81,3],[81,2],[81,3],[81,3],[81,3],[81,5],[81,5],[81,3],[81,3],[83,3],[83,0],[36,1],[36,2],[36,1],[36,2],[36,3],[36,2],[36,1],[36,1],[36,3],[36,3],[36,3],[36,3],[36,3],[36,2],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[36,3],[91,5],[91,0],[14,4],[15,4],[16,4],[17,6],[17,8],[96,2],[96,1],[6,1],[100,2],[100,1],[100,2],[100,1],[101,3],[101,4],[101,1],[102,3],[76,6],[76,5],[103,2],[103,2],[104,2],[104,2],[105,8],[106,4],[107,3],[107,1],[110,5],[31,3],[108,3],[111,1],[111,0],[109,1],[112,2],[112,1],[112,2],[112,1],[113,3],[113,4],[113,1],[114,7],[115,1],[115,3],[115,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
return {instr:"HTML",valor:$$[$0-1]};
break;
case 3:
return {instr:"MULTIPLES",valor:$$[$0-1]};
break;
case 4: case 76:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 5: case 22: case 24: case 77: case 132: case 134:
this.$=[$$[$0]];
break;
case 6:
this.$={instr:"FOR_IN",iterador:$$[$0-3],retorno:$$[$0],where:$$[$0-2],order:$$[$0-1]};
break;
case 7:
this.$={instr:"LLAMADA",valor:$$[$0]};
break;
case 8:
this.$={instr:"F_DATA",valor:$$[$0]};
break;
case 9:
this.$={instr:"F_UPPER",valor:$$[$0]};
break;
case 10:
this.$={instr:"F_LOWER",valor:$$[$0]};
break;
case 11:
this.$={instr:"F_SUBSTRING",valor:$$[$0]};
break;
case 12:
this.$={instr:"CREAR",valor:$$[$0]};
break;
case 13:
this.$={instr:"ASIGNAR",valor:$$[$0]};
break;
case 14:
this.$={instr:"IF_",valor:$$[$0]};
break;
case 15:
this.$={instr:"CREAR_F",valor:$$[$0-1]};
break;
case 16:
this.$={instr:"LLAMADA_F",valor:$$[$0]};
break;
case 17:

            listaErrores.push(new TokenError("XQUERY",'Este es un error sint√°ctico ' , "Me recupero con: " + yytext , _$[$0-1].first_line, _$[$0].first_column ));
        
break;
case 18:
this.$={id:$$[$0-7],parametros:$$[$0-5],instr:$$[$0-1]};
break;
case 19:
this.$={id:$$[$0-6],parametros:null,instr:$$[$0-1]};
break;
case 20:
this.$={id:$$[$0-3],parametros:$$[$0-1]};
break;
case 21: case 23:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 25:
this.$={id:$$[$0-3],valor:null};
break;
case 26:
this.$={condicion:$$[$0-2],accion:$$[$0],siguiente:null};
break;
case 27:
this.$={condicion:$$[$0-3],accion:$$[$0-1],siguiente:$$[$0]};
break;
case 28: case 29:
this.$={regreso:"DATA",data:$$[$0]};
break;
case 30:
this.$={regreso:"ELSEIF",data:$$[$0]};
break;
case 31:
this.$={id:$$[$0],valor:null};
break;
case 32: case 33:
this.$={id:$$[$0-2],valor:$$[$0]};
break;
case 34:
this.$={variable:$$[$0-2],consulta:$$[$0],contador:null}
break;
case 35:
this.$={variable:$$[$0-4],consulta:$$[$0],contador:$$[$0-2]}
break;
case 36: case 40:
this.$=null;
break;
case 37: case 42:
this.$={tipo:"VARIABLE",variable:$$[$0],consulta:null}
break;
case 38: case 41:
this.$={tipo:"VARIABLE",variable:$$[$0-1],consulta:$$[$0]}
break;
case 39:
this.$={instr:"WHERE",condicion:$$[$0]};
break;
case 43:
this.$={tipo:"NUMERO",valor:$$[$0]}
break;
case 44:
this.$={tipo:"CADENA",valor:$$[$0].slice(1,-1)}
break;
case 45: case 100:
this.$= {tipo:"OP_MAS",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 46: case 101:
this.$= {tipo:"OP_MENOS",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 47: case 102:
this.$= {tipo:"OP_MUL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 48: case 103:
this.$= {tipo:"OP_DIV",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 49: case 104:
this.$= {tipo:"OP_MOD",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 50: case 105:
this.$= {tipo:"OP_NEG",valor1:$$[$0]}
break;
case 51: case 57: case 112:
this.$={tipo:"MAYOR",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 52: case 58: case 113:
this.$={tipo:"MENOR",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 53: case 59: case 114:
this.$={tipo:"MAYOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 54: case 60: case 115:
this.$={tipo:"MENOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 55: case 61: case 116:
this.$={tipo:"IGUAL",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 56: case 62: case 117:
this.$={tipo:"DIFERENTE",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 63:
this.$={tipo:"VAR",variable:$$[$0],consulta:null}
break;
case 64:
this.$={tipo:"VAR",variable:$$[$0-1],consulta:$$[$0]}
break;
case 65: case 141: case 143:
this.$={tipo:"HTML",valor:$$[$0]}
break;
case 66:
this.$={tipo:"IF",valor:$$[$0]}
break;
case 67: case 68: case 72: case 73: case 75: case 130:
this.$=$$[$0];
break;
case 69: case 128:
this.$={variable:$$[$0-1],consulta:$$[$0]}
break;
case 70: case 129:
this.$={variable:$$[$0],consulta:null}
break;
case 71:
this.$={tipo:"TO",inicio:$$[$0-3],fin:$$[$0-1]}
break;
case 74:
$$[$0].unshift({instr:"NODO",valor:$$[$0-1]}); this.$=$$[$0];
break;
case 78: case 83:
this.$= {instr:"ACCESO",valor:$$[$0-1],index:$$[$0]};
break;
case 79: case 84:
this.$= {instr:"ACCESODOBLE",valor:$$[$0-1],index:$$[$0]};
break;
case 80:
this.$= {instr:"RETROCESO"};
break;
case 81: case 85:
this.$= {instr:"ATRIBUTO",valor:$$[$0]};
break;
case 82:
this.$= {instr:"ACTUAL"};
break;
case 86:
this.$= {instr:"ACCESO",valor:"*",index:$$[$0]};
break;
case 87:
this.$= {instr:"ACCESODOBLE",valor:"*",index:$$[$0]};
break;
case 88: case 89:
this.$= {instr:"ATRIBUTODOBLE",valor:$$[$0]};
break;
case 90:
this.$= $$[$0-1];
break;
case 91:
this.$= null;
break;
case 92:
this.$= {tipo:"NUMERO",valor:$$[$0]}
break;
case 93:
this.$= {tipo:"ID",valor:$$[$0-1]}
break;
case 94:
this.$= {tipo:"CADENA",valor:$$[$0]}
break;
case 95:
this.$= {tipo:"ATRIBUTO",valor:$$[$0]}
break;
case 96:
this.$= {tipo:"LAST"}
break;
case 97:
this.$= {tipo:"VARIABLE",valor:$$[$0-1]}
break;
case 98:
this.$= {tipo:"LLAMADA_F",valor:$$[$0]}
break;
case 99:
this.$= {tipo:"xPath",valor:$$[$0]}
break;
case 106:
this.$= {tipo:"OP_IGUAL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 107:
this.$= {tipo:"OP_DIFERENTE",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 108:
this.$= {tipo:"OP_MENOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 109:
this.$= {tipo:"OP_MAYOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 110:
this.$= {tipo:"OP_MAYOR",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 111:
this.$= {tipo:"OP_MENOR",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 118:
this.$={tipo:"AND",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 119:
this.$={tipo:"OR",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 120: case 123: case 124: case 125:
this.$=$$[$0-1];
break;
case 126:
this.$={valor:$$[$0-3],inicio:$$[$0-1],fin:null};
break;
case 127:
this.$={valor:$$[$0-5],inicio:$$[$0-3],fin:$$[$0-1]};
break;
case 131: case 133:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 135: case 159:
this.$={tipo:"TXT",valor:$$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()};
break;
case 136: case 160:
this.$={tipo:"TXT",valor:$$[$0-3].toString()+$$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()};
break;
case 137: case 161:
this.$={tipo:"TXT",valor:$$[$0].toString()};
break;
case 138:
this.$={tipo:"COD",valor:$$[$0-1]};
break;
case 139:
this.$={condicion:$$[$0-3],else:$$[$0],then:$$[$0-1]};
break;
case 140:
this.$={condicion:$$[$0-2],else:null,then:$$[$0]};
break;
case 142: case 144:
this.$={tipo:"LLAMADA",valor:$$[$0]}
break;
case 162:
this.$={tipo:"COD",valor:$$[$0-5]};
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:12,9:5,13:6,14:7,15:8,16:9,17:10,18:24,19:25,20:26,21:27,23:28,24:$V1,26:$V2,27:$V3,28:$V4,32:$V5,38:$V6,41:$V7,46:$V8,47:16,49:$V9,53:15,64:$Va,77:$Vb,79:30,80:39,81:40,82:$Vc,84:$Vd,95:$Ve,97:$Vf,98:$Vg,99:$Vh,100:11,101:22,102:23},{1:[3]},{5:[1,43]},{5:[1,44]},{2:$V0,5:[1,45],8:46,18:24,19:25,20:26,21:27,23:28,24:$V1,26:$V2,38:$V6,41:$V7,46:$V8,47:47},o($Vi,[2,40],{10:48,54:[1,49]}),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vk,[2,130],{101:50,102:51,27:$Vl,32:$V5,64:$Va}),o($Vm,[2,5]),{38:$V6,47:53},{28:[1,54]},o($Vn,[2,68]),{5:$Vo,27:$Vp,48:$Vq,53:55,79:30,80:39,81:40,82:$Vc,84:$Vd},{56:[1,58]},{28:[1,59]},{28:[1,60]},{28:[1,61]},{28:[1,62]},o($Vr,[2,132]),o($Vr,[2,134]),o($Vm,[2,12]),o($Vm,[2,13]),o($Vm,[2,14]),{22:[1,63]},o($Vm,[2,16]),{22:[1,64]},o($Vs,[2,73]),{27:[1,65]},{27:[1,66],82:[1,67]},o($Vr,$Vt,{81:40,80:68,82:$Vc,84:$Vd}),{4:69,9:5,13:6,14:7,15:8,16:9,17:10,27:$Vp,28:$V4,38:$V6,47:70,49:$V9,53:15,77:$Vb,79:30,80:39,81:40,82:$Vc,84:$Vd,95:$Ve,97:$Vf,98:$Vg,99:$Vh},{38:$V6,47:71},{28:[1,72]},{25:[1,73]},{27:[1,74]},o($Vs,[2,75],{81:75,82:$Vc,84:$Vd}),o($Vu,[2,77]),{27:[1,76],60:[1,80],85:[1,77],86:[1,78],87:[1,79],88:[1,81]},{27:[1,82],60:[1,83],86:[1,85],88:[1,84]},{1:[2,1]},{1:[2,2]},{1:[2,3]},o($Vm,[2,4]),{48:$Vq},{11:86,52:[1,87],75:[2,36]},{38:$V6,47:89,55:88,56:$Vv,57:$Vw,59:$Vx},o($Vr,[2,131]),o($Vr,[2,133]),o($Vr,$Vt),{50:[1,93],51:[1,94]},{57:[1,95]},o($Vn,[2,69]),{23:103,26:$V2,27:$Vy,28:$Vz,36:96,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{80:68,81:40,82:$Vc,84:$Vd},{78:[1,107]},{38:$V6,47:109,96:108},{38:$V6,47:109,96:110},{38:$V6,47:109,96:111},{38:$V6,47:109,96:112},o($Vm,[2,15]),o($Vm,[2,17]),o([2,5,24,26,27,30,33,35,38,41,45,46,48,50,51,52,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,82,84,87,90,93,94],[2,72]),{63:[1,113]},{27:[1,114]},o($Vs,[2,74],{81:75,82:$Vc,84:$Vd}),{33:[1,115]},o($Vn,$Vo,{79:30,80:39,81:40,53:55,27:$Vp,82:$Vc,84:$Vd}),o($Vm,[2,31],{48:[1,116]}),{23:103,26:$V2,27:$Vy,28:$Vz,36:117,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{26:[1,118]},{28:[1,119]},o($Vu,[2,76]),o($Vu,$VF,{83:120,89:$VG}),o($Vu,[2,80]),{27:[1,122],60:[1,123]},o($Vu,[2,82]),o($Vu,$VF,{83:124,89:$VG}),{28:[1,125]},o($Vu,$VF,{83:126,89:$VG}),o($Vu,$VF,{83:127,89:$VG}),{28:[1,128]},{27:[1,129],60:[1,130]},{12:131,75:[1,132]},{38:$V6,47:133},o($Vi,[2,39],{58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX}),o($VY,[2,42],{79:30,80:39,81:40,53:151,27:$Vp,82:$Vc,84:$Vd}),o($VY,[2,43]),o($VY,[2,44]),{23:103,26:$V2,27:$Vy,28:$Vz,36:152,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{13:153,27:$Vp,28:$V4,38:$V6,47:70,53:15,77:$Vb,79:30,80:39,81:40,82:$Vc,84:$Vd},{38:$V6,47:154},{30:[1,155]},o($Vm,[2,33],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,63:$V21,64:$V31,65:$V41,66:$V51,67:$V61,68:$V71,69:$V81,70:$V91,71:$Va1,72:$Vb1,73:$Vc1,74:$Vd1,93:$Ve1,94:$Vf1}),o($Vg1,[2,92]),o($Vg1,$Vh1,{81:40,80:68,91:175,82:$Vc,84:$Vd,87:$Vi1}),o($Vg1,[2,94]),{27:[1,177]},{28:[1,178]},o($Vg1,$Vh1,{91:179,87:$Vi1}),o($Vg1,[2,98]),o($Vg1,[2,99]),{23:103,26:$V2,27:$Vy,28:$Vz,36:180,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:181,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{56:[1,182]},{30:[1,183]},o($Vj1,[2,129],{79:30,80:39,81:40,53:184,27:$Vp,82:$Vc,84:$Vd}),{30:[1,185]},{30:[1,186]},{35:[1,187]},o($Vr,[2,135]),{63:[1,188]},o($Vr,[2,138]),{23:103,26:$V2,27:$Vy,28:$Vz,36:189,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{30:[1,190],58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,63:$V21,64:$V31,65:$V41,66:$V51,67:$V61,68:$V71,69:$V81,70:$V91,71:$Va1,72:$Vb1,73:$Vc1,74:$Vd1,93:$Ve1,94:$Vf1},{27:[1,191]},{23:103,26:$V2,27:$Vy,28:$Vz,34:192,36:193,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},o($Vu,[2,78]),{23:103,26:$V2,27:$Vy,28:$Vz,36:194,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},o($Vu,[2,81]),o($Vu,[2,85]),o($Vu,[2,83]),{30:[1,195]},o($Vu,[2,79]),o($Vu,[2,84]),{30:[1,196]},o($Vu,[2,88]),o($Vu,[2,89]),o($Vj,[2,6]),{6:198,27:$Vl,32:$V5,38:$V6,41:[1,200],47:197,64:$Va,76:199,100:11,101:22,102:23},{27:$Vp,53:201,75:[2,37],79:30,80:39,81:40,82:$Vc,84:$Vd},{38:$V6,47:89,55:202,56:$Vv,57:$Vw,59:$Vx},{38:$V6,47:89,55:203,56:$Vv,57:$Vw,59:$Vx},{38:$V6,47:89,55:204,56:$Vv,57:$Vw,59:$Vx},{38:$V6,47:89,55:205,56:$Vv,57:$Vw,59:$Vx},{38:$V6,47:89,55:206,56:$Vv,57:$Vw,59:$Vx},{38:$V6,47:89,55:207,56:$Vv,57:$Vw,59:$Vx},{38:$V6,47:89,55:208,56:$Vv,57:$Vw,59:$Vx},{38:$V6,47:89,55:209,56:$Vv,57:$Vw,59:$Vx},{38:$V6,47:89,55:210,56:$Vv,57:$Vw,59:$Vx},{38:$V6,47:89,55:211,56:$Vv,57:$Vw,59:$Vx},{38:$V6,47:89,55:212,56:$Vv,57:$Vw,59:$Vx},{38:$V6,47:89,55:213,56:$Vv,57:$Vw,59:$Vx},{38:$V6,47:89,55:214,56:$Vv,57:$Vw,59:$Vx},{38:$V6,47:89,55:215,56:$Vv,57:$Vw,59:$Vx},{38:$V6,47:89,55:216,56:$Vv,57:$Vw,59:$Vx},{38:$V6,47:89,55:217,56:$Vv,57:$Vw,59:$Vx},{38:$V6,47:89,55:218,56:$Vv,57:$Vw,59:$Vx},o($VY,[2,41]),o($Vk1,[2,50],{60:$V$,61:$V01,62:$V11,93:$Ve1,94:$Vf1}),o($Vl1,[2,34]),{50:[1,219]},{27:$Vp,53:220,79:30,80:39,81:40,82:$Vc,84:$Vd},{23:103,26:$V2,27:$Vy,28:$Vz,36:221,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:222,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:223,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:224,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:225,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:226,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:227,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:228,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:229,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:230,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:231,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:232,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:233,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:234,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:235,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:236,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:237,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:238,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{23:103,26:$V2,27:$Vy,28:$Vz,36:239,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},o($Vg1,[2,93]),{78:[1,240]},o($Vg1,[2,95]),{30:[1,241]},o($Vg1,[2,97]),o($Vm1,[2,105],{60:$V$,61:$V01,62:$V11}),{30:[1,242],58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,63:$V21,64:$V31,65:$V41,66:$V51,67:$V61,68:$V71,69:$V81,70:$V91,71:$Va1,72:$Vb1,73:$Vc1,74:$Vd1,93:$Ve1,94:$Vf1},{30:[1,243]},o($Vj,[2,123]),o($Vj1,[2,128]),o($Vj,[2,124]),o($Vj,[2,125]),{56:[1,244]},o($Vr,[2,136]),o($Vm,[2,32],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,63:$V21,64:$V31,65:$V41,66:$V51,67:$V61,68:$V71,69:$V81,70:$V91,71:$Va1,72:$Vb1,73:$Vc1,74:$Vd1,93:$Ve1,94:$Vf1}),{42:245,44:[1,246]},{28:[1,247]},{30:[1,248],35:[1,249]},o($Vj1,[2,22],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,63:$V21,64:$V31,65:$V41,66:$V51,67:$V61,68:$V71,69:$V81,70:$V91,71:$Va1,72:$Vb1,73:$Vc1,74:$Vd1,93:$Ve1,94:$Vf1}),{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,63:$V21,64:$V31,65:$V41,66:$V51,67:$V61,68:$V71,69:$V81,70:$V91,71:$Va1,72:$Vb1,73:$Vc1,74:$Vd1,90:[1,250],93:$Ve1,94:$Vf1},o($Vu,$VF,{83:251,89:$VG}),o($Vu,$VF,{83:252,89:$VG}),o($Vj,[2,63],{79:30,80:39,81:40,53:253,27:$Vp,82:$Vc,84:$Vd}),o($Vj,[2,65]),o($Vj,[2,66]),{28:[1,254]},{75:[2,38]},o($Vk1,[2,45],{60:$VJ,61:$VK,62:$VL}),o($Vk1,[2,46],{60:$VJ,61:$VK,62:$VL}),o($VY,[2,47]),o($VY,[2,48]),o($VY,[2,49]),o($Vn1,[2,51],{58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL}),o($Vn1,[2,52],{58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL}),o($Vn1,[2,53],{58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL}),o($Vn1,[2,54],{58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL}),o($Vn1,[2,55],{58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL}),o([30,52,68,75],[2,56],{58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX}),o($Vn1,[2,57],{58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL}),o($Vn1,[2,58],{58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL}),o($Vn1,[2,59],{58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL}),o($Vn1,[2,60],{58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL}),o($Vn1,[2,61],{58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL}),o($Vn1,[2,62],{58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL}),{13:255,27:$Vp,28:$V4,38:$V6,47:70,53:15,77:$Vb,79:30,80:39,81:40,82:$Vc,84:$Vd},o($Vn,[2,67]),o($Vm1,[2,100],{60:$V$,61:$V01,62:$V11}),o($Vm1,[2,101],{60:$V$,61:$V01,62:$V11}),o($Vg1,[2,102]),o($Vg1,[2,103]),o($Vg1,[2,104]),o($Vo1,[2,106],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11}),o([2,5,24,26,30,33,35,38,41,45,46,52,68,75,90,93,94],[2,107],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,63:$V21,64:$V31,65:$V41,66:$V51,67:$V61,69:$V81,70:$V91,71:$Va1,72:$Vb1,73:$Vc1,74:$Vd1}),o($Vo1,[2,108],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11}),o($Vo1,[2,109],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11}),o($Vo1,[2,110],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11}),o($Vo1,[2,111],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11}),o($Vo1,[2,112],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11}),o($Vo1,[2,113],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11}),o($Vo1,[2,114],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11}),o($Vo1,[2,115],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11}),o($Vo1,[2,116],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11}),o($Vo1,[2,117],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11}),o([2,5,24,26,30,33,35,38,41,45,46,52,75,90,93,94],[2,118],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,63:$V21,64:$V31,65:$V41,66:$V51,67:$V61,68:$V71,69:$V81,70:$V91,71:$Va1,72:$Vb1,73:$Vc1,74:$Vd1}),o([2,5,24,26,30,33,35,38,41,45,46,52,75,90,94],[2,119],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,63:$V21,64:$V31,65:$V41,66:$V51,67:$V61,68:$V71,69:$V81,70:$V91,71:$Va1,72:$Vb1,73:$Vc1,74:$Vd1,93:$Ve1}),{27:[1,256]},o($Vg1,[2,96]),o($Vg1,[2,120]),o($Vn,[2,71]),{30:[1,257],35:[1,258]},o($Vm,[2,26],{43:259,45:[1,260]}),{23:103,26:$V2,27:$Vy,28:$Vz,36:261,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},{29:262,30:[1,263],37:264,38:$Vp1},o($Vg1,[2,20]),{23:103,26:$V2,27:$Vy,28:$Vz,36:266,38:$V6,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},o($Vu,[2,90]),o($Vu,[2,86]),o($Vu,[2,87]),o($Vj,[2,64]),{38:$V6,47:89,55:267,56:$Vv,57:$Vw,59:$Vx},o($Vl1,[2,35]),{28:[1,268]},o($Vj,[2,126]),{56:[1,269]},o($Vm,[2,27]),{20:271,23:103,26:$V2,27:$Vy,28:$Vz,36:270,38:$V6,41:$V7,47:102,53:104,56:$VA,57:$VB,59:$VC,79:30,80:39,81:40,82:$Vc,84:$Vd,86:$VD,92:$VE},o([2,5,24,26,33,38,41,45,46],[2,28],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,63:$V21,64:$V31,65:$V41,66:$V51,67:$V61,68:$V71,69:$V81,70:$V91,71:$Va1,72:$Vb1,73:$Vc1,74:$Vd1,93:$Ve1,94:$Vf1}),{30:[1,272],35:[1,273]},{31:274,39:$Vq1},o($Vj1,[2,24]),{27:[1,276]},o($Vj1,[2,21],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,63:$V21,64:$V31,65:$V41,66:$V51,67:$V61,68:$V71,69:$V81,70:$V91,71:$Va1,72:$Vb1,73:$Vc1,74:$Vd1,93:$Ve1,94:$Vf1}),{30:[1,277],58:$VH,59:$VI,60:$VJ,61:$VK,62:$VL,63:$VM,64:$VN,65:$VO,66:$VP,67:$VQ,68:$VR,69:$VS,70:$VT,71:$VU,72:$VV,73:$VW,74:$VX},{30:[1,278]},{30:[1,279]},o($Vm,[2,29],{58:$VZ,59:$V_,60:$V$,61:$V01,62:$V11,63:$V21,64:$V31,65:$V41,66:$V51,67:$V61,68:$V71,69:$V81,70:$V91,71:$Va1,72:$Vb1,73:$Vc1,74:$Vd1,93:$Ve1,94:$Vf1}),o($Vm,[2,30]),{31:280,39:$Vq1},{37:281,38:$Vp1},{32:[1,282]},{40:[1,283]},{39:[1,284]},{44:[1,286],103:285},o($Vg1,[2,121]),o($Vj,[2,127]),{32:[1,287]},o($Vj1,[2,23]),{2:$V0,7:288,8:12,18:24,19:25,20:26,21:27,23:28,24:$V1,26:$V2,38:$V6,41:$V7,46:$V8,47:47},{27:[1,289]},{40:[1,290]},o($Vj,[2,140],{104:291,45:[1,292]}),{6:293,13:294,27:$V3,28:$V4,32:$V5,38:$V6,47:70,53:15,64:$Va,77:$Vb,79:30,80:39,81:40,82:$Vc,84:$Vd,100:11,101:22,102:23},{2:$V0,7:295,8:12,18:24,19:25,20:26,21:27,23:28,24:$V1,26:$V2,38:$V6,41:$V7,46:$V8,47:47},{2:$V0,8:46,18:24,19:25,20:26,21:27,23:28,24:$V1,26:$V2,33:[1,296],38:$V6,41:$V7,46:$V8,47:47},{32:[2,150]},{27:[1,297]},o($Vj,[2,139]),{6:298,13:299,27:$V3,28:$V4,32:$V5,38:$V6,47:70,53:15,64:$Va,77:$Vb,79:30,80:39,81:40,82:$Vc,84:$Vd,100:11,101:22,102:23},o($Vk,[2,141]),o($Vk,[2,142]),{2:$V0,8:46,18:24,19:25,20:26,21:27,23:28,24:$V1,26:$V2,33:[1,300],38:$V6,41:$V7,46:$V8,47:47},{22:[2,19]},o($Vj1,[2,25]),o($Vj,[2,143]),o($Vj,[2,144]),{22:[2,18]}],
defaultActions: {43:[2,1],44:[2,2],45:[2,3],201:[2,38],289:[2,150],296:[2,19],300:[2,18]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Omitir espacios en blanco */ 
break;
case 1: /* Omitir saltos de linea, tabs y retornos*/ 
break;
case 2:
break;
case 3: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 77;
break;
case 4: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 49;
break;
case 5: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46;
break;
case 6: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 54;
break;
case 7: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 52;
break;
case 8: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 75;
break;
case 9: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 95;
break;
case 10: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 41;
break;
case 11: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 44;
break;
case 12: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 45;
break;
case 13: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 50;
break;
case 14: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 78;
break;
case 15: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 51;
break;
case 16: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 73;
break;
case 17: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 74;
break;
case 18: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 70;
break;
case 19: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 72;
break;
case 20: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 69;
break;
case 21: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 71;
break;
case 22: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 24;
break;
case 23: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 25;
break;
case 24: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 26;
break;
case 25: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 39;
break;
case 26: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 40;
break;
case 27: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 22;
break;
case 28: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 38;
break;
case 29: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 94;
break;
case 30: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 93;
break;
case 31: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62;
break;
case 32: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 61;
break;
case 33: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 88;
break;
case 34: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 35: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace_node';
break;
case 36: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor_or_self';
break;
case 37: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor';
break;
case 38: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 39: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 40: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant_or_self';
break;
case 41: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant';
break;
case 42: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following_sibling';
break;
case 43: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following';
break;
case 44: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace';
break;
case 45: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_parent';
break;
case 46: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding_sibling';
break;
case 47: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding';
break;
case 48: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_self';
break;
case 49: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 50: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 51: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 92;
break;
case 52: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_position';
break;
case 53: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 54: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 97;
break;
case 55: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 98;
break;
case 56: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 99;
break;
case 57: listaTokens.push(new Token("ComparacionLet", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 48;
break;
case 58: listaTokens.push(new Token("Barra", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_barra_or';
break;
case 59: listaTokens.push(new Token("Suma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 58;
break;
case 60: listaTokens.push(new Token("Resta", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 59;
break;
case 61: listaTokens.push(new Token("Asterisco", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60;
break;
case 62: listaTokens.push(new Token("Indiferente", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 68;
break;
case 63: listaTokens.push(new Token("Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 67;
break;
case 64: listaTokens.push(new Token("Menor_igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 66;
break;
case 65: listaTokens.push(new Token("Menor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 64;
break;
case 66: listaTokens.push(new Token("Mayor_Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 65;
break;
case 67: listaTokens.push(new Token("Mayor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 63;
break;
case 68: listaTokens.push(new Token("Cuatro_Puntos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_cuatro_puntos';
break;
case 69: listaTokens.push(new Token("Diagonal_doble", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 84;
break;
case 70: listaTokens.push(new Token("Division", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 82;
break;
case 71: listaTokens.push(new Token("Arroba", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 86;
break;
case 72: listaTokens.push(new Token("Puntos_Seguidos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 85;
break;
case 73: listaTokens.push(new Token("Parentesis_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 28;
break;
case 74: listaTokens.push(new Token("Parentesis_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 30;
break;
case 75: listaTokens.push(new Token("Corchete_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_izq";
break;
case 76: listaTokens.push(new Token("Corchete_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_der";
break;
case 77: listaTokens.push(new Token("Llave_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_izq";
break;
case 78: listaTokens.push(new Token("Llave_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_der";
break;
case 79: listaTokens.push(new Token("Coma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_coma";
break;
case 80: listaTokens.push(new Token("Punto", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 87;
break;
case 81: listaTokens.push(new Token("Caracter", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_caracter";
break;
case 82: listaTokens.push(new Token("Cadena", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_hilera";
break;
case 83: listaTokens.push(new Token("Identificador", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_identificador";
break;
case 84: listaTokens.push(new Token("Numero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_numero";
break;
case 85: return "EOF"; 
break;
case 86: listaErrores.push(new TokenError("xQuery","ERROR LEXICO","Caracter no reconocido: "+ yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column )); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[\t\r]+)/,/^(?:[(][:][^:]*[:]+[)])/,/^(?:doc\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:data\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:in\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:local:)/,/^(?:as\b)/,/^(?:xs:)/,/^(?:;)/,/^(?:\$)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:namespace-node\b)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:text\b)/,/^(?:upper-case\b)/,/^(?:lower-case\b)/,/^(?:substring\b)/,/^(?::=)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:!=)/,/^(?:=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:::)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:@)/,/^(?:\.\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:'[^\']*')/,/^(?:"([^\\\"]|\\.)*")/,/^(?:[a-zA-Z_√Ä-√ø\u00F1\u00D1]([a-zA-Z√Ä-√ø\-\.\u00F1\u00D10-9_])*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador_xqueryizq;
exports.Parser = analizador_xqueryizq.Parser;
exports.parse = function () { return analizador_xqueryizq.parse.apply(analizador_xqueryizq, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}