/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gdagram = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,13],$V3=[1,9],$V4=[1,10],$V5=[1,11],$V6=[1,12],$V7=[1,14],$V8=[1,15],$V9=[1,16],$Va=[1,17],$Vb=[1,18],$Vc=[1,20],$Vd=[1,19],$Ve=[5,11,16,17,18,19,23,25,28,30,32,34,44,46,47,50],$Vf=[9,18,33,36,47,50,55],$Vg=[2,50],$Vh=[1,36],$Vi=[1,35],$Vj=[1,59],$Vk=[1,58],$Vl=[1,63],$Vm=[1,62],$Vn=[1,61],$Vo=[1,64],$Vp=[9,21],$Vq=[1,81],$Vr=[14,21],$Vs=[9,14,38,39,40,41,42,43,49,54,55,56,57,58],$Vt=[9,14,49],$Vu=[18,33,36,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INICIO":4,"EOF":5,"SENTENCIAS":6,"SENTENCIA":7,"DECLARACION":8,"tk_punto_coma":9,"ASIGNACION":10,"tk_int":11,"tk_main":12,"tk_parent_izq":13,"tk_parent_der":14,"tk_llave_izq":15,"tk_llave_der":16,"tk_void":17,"tk_identificador":18,"tk_printf":19,"TIPO_PRINT":20,"tk_coma":21,"PARVALOR":22,"tk_goto":23,"PRODGOTO":24,"tk_if":25,"VALOR":26,"OP_REL":27,"tk_call":28,"tk_dos_puntos":29,"tk_proc":30,"tk_begin":31,"tk_return":32,"tk_decimal":33,"tk_end":34,"tk_caracter":35,"tk_entero":36,"tk_hilera":37,"tk_igualdad":38,"tk_desigual":39,"tk_menor_igual":40,"tk_menor":41,"tk_mayor_igual":42,"tk_mayor":43,"tk_float":44,"LISTA_IDS":45,"tk_var":46,"tk_stack":47,"tk_corchete_izq":48,"tk_corchete_der":49,"tk_heap":50,"tk_igual":51,"ASIGNACIONSIGNO":52,"EXP":53,"tk_suma":54,"tk_resta":55,"tk_asterisco":56,"tk_diagonal":57,"tk_modulo":58,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"tk_punto_coma",11:"tk_int",12:"tk_main",13:"tk_parent_izq",14:"tk_parent_der",15:"tk_llave_izq",16:"tk_llave_der",17:"tk_void",18:"tk_identificador",19:"tk_printf",21:"tk_coma",23:"tk_goto",25:"tk_if",28:"tk_call",29:"tk_dos_puntos",30:"tk_proc",31:"tk_begin",32:"tk_return",33:"tk_decimal",34:"tk_end",35:"tk_caracter",36:"tk_entero",37:"tk_hilera",38:"tk_igualdad",39:"tk_desigual",40:"tk_menor_igual",41:"tk_menor",42:"tk_mayor_igual",43:"tk_mayor",44:"tk_float",46:"tk_var",47:"tk_stack",48:"tk_corchete_izq",49:"tk_corchete_der",50:"tk_heap",51:"tk_igual",54:"tk_suma",55:"tk_resta",56:"tk_asterisco",57:"tk_diagonal",58:"tk_modulo"},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[6,1],[7,2],[7,2],[7,7],[7,7],[7,7],[7,7],[7,5],[7,7],[7,3],[7,9],[7,3],[7,2],[7,3],[7,2],[7,3],[7,1],[24,1],[24,1],[20,1],[20,1],[20,1],[20,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[8,2],[8,4],[8,4],[8,4],[45,3],[45,1],[10,3],[10,4],[10,6],[10,6],[10,6],[10,6],[10,6],[10,6],[52,1],[52,3],[52,0],[53,3],[53,3],[53,3],[53,3],[53,3],[53,1],[53,0],[22,4],[22,4],[22,1],[26,1],[26,1],[26,1],[26,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
this.$= new Nodo("INIC", "INIC" );
	 //console.log($$[$0]);
	 this.$.agregarHijo($$[$0]);
	
break;
case 3:

    this.$= new Nodo("INIC","INIC");
	//console.log("ε");
    this.$.agregarHijo(new Nodo("ε","ε"));
    
break;
case 4:

    	contador++;
	this.$= new Nodo("GDA", "GDA");
	this.$.agregarHijo($$[$0-1]);
    this.$.agregarHijo($$[$0]);
    
break;
case 5:

		contador++;
    this.$= new Nodo("GDA","GDA");
	this.$.agregarHijo($$[$0]);
	
break;
case 6: case 7:

    this.$= new Nodo("GDA"+contador,"GDA"+contador);
	this.$.agregarHijo($$[$0-1]);
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 8: case 9: case 10: case 11:

    this.$= new Nodo("SEN","SEN");
	this.$.agregarHijo(new Nodo($$[$0-6],$$[$0-6]));
	this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
	this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
	this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
	this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
	this.$.agregarHijo($$[$0-1]);
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 12:

    this.$= new Nodo("SEN","SEN");
	this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
	this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
	this.$.agregarHijo($$[$0-2]);
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 13:

    this.$= new Nodo("SEN","SEN");
	this.$.agregarHijo(new Nodo($$[$0-6],$$[$0-6]));
	this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
	this.$.agregarHijo($$[$0-4]);
	this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
	this.$.agregarHijo($$[$0-2]);
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 14:

    this.$= new Nodo("SEN","SEN");
	this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo($$[$0]);
	
break;
case 15:

    this.$= new Nodo("SEN","SEN");
	this.$.agregarHijo(new Nodo($$[$0-8],$$[$0-8]));
	this.$.agregarHijo(new Nodo($$[$0-7],$$[$0-7]));
	this.$.agregarHijo($$[$0-6]);
	this.$.agregarHijo($$[$0-5]);
	this.$.agregarHijo($$[$0-4]);
	this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
	this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo($$[$0]);
	
break;
case 16: case 18: case 20:

    this.$= new Nodo("SEN","SEN");
	this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 17: case 19:

    this.$= new Nodo("SEN","SEN");
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 21:

    this.$= new Nodo("SEN","SEN");
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 22: case 23:

    this.$= new Nodo("PGT","PGT");
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 24: case 25: case 26: case 27:

    this.$= new Nodo("TPR","TPR");
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 28: case 29: case 30: case 31: case 32: case 33:

    this.$= new Nodo("OPR","OPR");
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 34:

    this.$= new Nodo("DEC","DEC");
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo($$[$0]);
	
break;
case 35: case 36:

    this.$= new Nodo("DEC","DEC");
	this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
	this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 37:

    this.$= new Nodo("DEC","DEC");
	this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
	this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo($$[$0]);
	
break;
case 38:

    this.$= new Nodo("LID","LID");
	this.$.agregarHijo($$[$0-2]);
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 39:

    this.$= new Nodo("LID","LID");
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 40:

//	this.$=new Nodo($$[$0-2],$$[$0-2]);
	this.$=new Nodo($$[$0-2],$$[$0-2]);
	this.$.agregarHijo($$[$0-1]);
	this.$.agregarHijo($$[$0]);	
	
break;
case 41:

    this.$= new Nodo("ASIG","ASIG");
	this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
	this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
	this.$.agregarHijo($$[$0-1]);
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 42: case 43: case 44: case 45:

    this.$= new Nodo("ASIG","ASIG");
	this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
	this.$.agregarHijo($$[$0-4]);
	this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
	this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
	this.$.agregarHijo($$[$0-1]);
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 46: case 47:

    this.$= new Nodo("ASIG","ASIG");
	this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
	this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
	this.$.agregarHijo($$[$0-3]);
	this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
	this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo($$[$0]);
	
break;
case 48:
this.$=new Nodo($$[$0],$$[$0]);
break;
case 49:
this.$=new Nodo($$[$0-2]+$$[$0-1],$$[$0-2]+$$[$0-1]);
			this.$.agregarHijo($$[$0]);			
			
break;
case 50:

			this.$= new Nodo("ε","ε");
			
break;
case 51: case 53: case 54: case 55:
this.$=new Nodo($$[$0-1],$$[$0-1]);
	this.$.agregarHijo($$[$0-2]);
	this.$.agregarHijo($$[$0]);
	
break;
case 52:
this.$=new Nodo($$[$0-1],$$[$0-1]);
    this.$.agregarHijo($$[$0-2]);
	this.$.agregarHijo($$[$0]);
	
break;
case 56: case 60:
this.$=$$[$0];
break;
case 57:
this.$= new Nodo("ε","ε");
	
break;
case 58: case 59:
this.$= new Nodo("VAL", "VAL" );
    this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
    this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));	
    this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
	this.$.agregarHijo($$[$0]);
	
break;
case 61: case 62: case 63:

	this.$= new Nodo($$[$0],$$[$0]);
	
break;
case 64:

	this.$= new Nodo($$[$0-1]+$$[$0],$$[$0-1]+$$[$0]);
	
break;
}
},
table: [{3:1,4:2,5:[2,3],6:3,7:4,8:5,10:6,11:$V0,17:$V1,18:$V2,19:$V3,23:$V4,25:$V5,28:$V6,30:$V7,32:$V8,34:$V9,44:$Va,46:$Vb,47:$Vc,50:$Vd},{1:[3]},{5:[1,21]},{5:[2,2],7:22,8:5,10:6,11:$V0,17:$V1,18:$V2,19:$V3,23:$V4,25:$V5,28:$V6,30:$V7,32:$V8,34:$V9,44:$Va,46:$Vb,47:$Vc,50:$Vd},o($Ve,[2,5]),{9:[1,23]},{9:[1,24]},{12:[1,25],18:[1,26]},{12:[1,27],18:[1,28]},{13:[1,29]},{18:[1,30]},{13:[1,31]},{18:[1,32]},o($Vf,$Vg,{52:34,13:$Vh,29:[1,33],51:$Vi}),{18:[1,37]},{9:[1,38],33:[1,39]},o($Ve,[2,21]),o([47,50],$Vg,{45:40,52:42,13:$Vh,18:[1,41],51:$Vi}),{18:[1,45],47:[1,43],50:[1,44]},{48:[1,46]},{48:[1,47]},{1:[2,1]},o($Ve,[2,4]),o($Ve,[2,6]),o($Ve,[2,7]),{13:[1,48]},{13:[1,49]},{13:[1,50]},{13:[1,51]},{20:52,33:[1,55],35:[1,53],36:[1,54],37:[1,56]},{9:$Vj,24:57,29:$Vk},{18:$Vl,26:60,33:$Vm,36:$Vn,55:$Vo},{9:[1,65]},o($Ve,[2,17]),{9:[2,57],18:$Vl,26:69,33:$Vm,36:$Vn,47:[1,67],50:[1,68],53:66,55:$Vo},o($Vf,[2,48]),{14:[1,70]},{31:[1,71]},o($Ve,[2,19]),{9:[1,72]},{9:[2,34],21:[1,73]},o($Vp,[2,39],{52:74,13:$Vh,33:$Vg,51:$Vi}),{47:[1,76],50:[1,75]},{48:[1,77]},{48:[1,78]},{51:[1,79]},{13:$Vq,18:$Vl,22:80,26:82,33:$Vm,36:$Vn,55:$Vo},{13:$Vq,18:$Vl,22:83,26:82,33:$Vm,36:$Vn,55:$Vo},{14:[1,84]},{14:[1,85]},{14:[1,86]},{14:[1,87]},{14:[1,88],21:[1,89]},o($Vr,[2,24]),o($Vr,[2,25]),o($Vr,[2,26]),o($Vr,[2,27]),o($Ve,[2,14]),o($Ve,[2,22]),o($Ve,[2,23]),{27:90,38:[1,91],39:[1,92],40:[1,93],41:[1,94],42:[1,95],43:[1,96]},o($Vs,[2,61]),o($Vs,[2,62]),o($Vs,[2,63]),{18:$Vl,26:97,33:$Vm,36:$Vn,55:$Vo},o($Ve,[2,16]),{9:[2,40]},{48:[1,98]},{48:[1,99]},{9:[2,56],54:[1,100],55:[1,101],56:[1,102],57:[1,103],58:[1,104]},{9:[1,105]},o($Ve,[2,18]),o($Ve,[2,20]),{18:[1,106]},{33:[1,107]},{48:[1,108]},{48:[1,109]},{49:[1,110]},{49:[1,111]},{18:$Vl,26:112,33:$Vm,36:$Vn,55:$Vo},{49:[1,113]},{11:[1,114],44:[1,115]},o($Vt,[2,60]),{49:[1,116]},{15:[1,117]},{15:[1,118]},{15:[1,119]},{15:[1,120]},{9:[1,121]},{13:$Vq,18:$Vl,22:122,26:82,33:$Vm,36:$Vn,55:$Vo},{18:$Vl,26:123,33:$Vm,36:$Vn,55:$Vo},o($Vu,[2,28]),o($Vu,[2,29]),o($Vu,[2,30]),o($Vu,[2,31]),o($Vu,[2,32]),o($Vu,[2,33]),o($Vs,[2,64]),{13:$Vq,18:$Vl,22:124,26:82,33:$Vm,36:$Vn,55:$Vo},{13:$Vq,18:$Vl,22:125,26:82,33:$Vm,36:$Vn,55:$Vo},{18:$Vl,26:126,33:$Vm,36:$Vn,55:$Vo},{18:$Vl,26:127,33:$Vm,36:$Vn,55:$Vo},{18:$Vl,26:128,33:$Vm,36:$Vn,55:$Vo},{18:$Vl,26:129,33:$Vm,36:$Vn,55:$Vo},{18:$Vl,26:130,33:$Vm,36:$Vn,55:$Vo},o($Vf,[2,49]),o($Vp,[2,38]),{9:[2,41]},{13:$Vq,18:$Vl,22:131,26:82,33:$Vm,36:$Vn,55:$Vo},{13:$Vq,18:$Vl,22:132,26:82,33:$Vm,36:$Vn,55:$Vo},{9:[2,35]},{9:[2,36]},{9:[2,37]},{51:[1,133]},{14:[1,134]},{14:[1,135]},{51:[1,136]},{6:137,7:4,8:5,10:6,11:$V0,17:$V1,18:$V2,19:$V3,23:$V4,25:$V5,28:$V6,30:$V7,32:$V8,34:$V9,44:$Va,46:$Vb,47:$Vc,50:$Vd},{6:138,7:4,8:5,10:6,11:$V0,17:$V1,18:$V2,19:$V3,23:$V4,25:$V5,28:$V6,30:$V7,32:$V8,34:$V9,44:$Va,46:$Vb,47:$Vc,50:$Vd},{6:139,7:4,8:5,10:6,11:$V0,17:$V1,18:$V2,19:$V3,23:$V4,25:$V5,28:$V6,30:$V7,32:$V8,34:$V9,44:$Va,46:$Vb,47:$Vc,50:$Vd},{6:140,7:4,8:5,10:6,11:$V0,17:$V1,18:$V2,19:$V3,23:$V4,25:$V5,28:$V6,30:$V7,32:$V8,34:$V9,44:$Va,46:$Vb,47:$Vc,50:$Vd},o($Ve,[2,12]),{14:[1,141]},{14:[1,142]},{49:[1,143]},{49:[1,144]},{9:[2,51]},{9:[2,52]},{9:[2,53]},{9:[2,54]},{9:[2,55]},{49:[1,145]},{49:[1,146]},{13:$Vq,18:$Vl,22:147,26:82,33:$Vm,36:$Vn,55:$Vo},{18:$Vl,26:148,33:$Vm,36:$Vn,55:$Vo},{18:$Vl,26:149,33:$Vm,36:$Vn,55:$Vo},{13:$Vq,18:$Vl,22:150,26:82,33:$Vm,36:$Vn,55:$Vo},{7:22,8:5,10:6,11:$V0,16:[1,151],17:$V1,18:$V2,19:$V3,23:$V4,25:$V5,28:$V6,30:$V7,32:$V8,34:$V9,44:$Va,46:$Vb,47:$Vc,50:$Vd},{7:22,8:5,10:6,11:$V0,16:[1,152],17:$V1,18:$V2,19:$V3,23:$V4,25:$V5,28:$V6,30:$V7,32:$V8,34:$V9,44:$Va,46:$Vb,47:$Vc,50:$Vd},{7:22,8:5,10:6,11:$V0,16:[1,153],17:$V1,18:$V2,19:$V3,23:$V4,25:$V5,28:$V6,30:$V7,32:$V8,34:$V9,44:$Va,46:$Vb,47:$Vc,50:$Vd},{7:22,8:5,10:6,11:$V0,16:[1,154],17:$V1,18:$V2,19:$V3,23:$V4,25:$V5,28:$V6,30:$V7,32:$V8,34:$V9,44:$Va,46:$Vb,47:$Vc,50:$Vd},{9:[1,155]},{23:[1,156]},{9:[2,44]},{9:[2,45]},{9:[2,42]},{9:[2,43]},{9:[2,46]},o($Vt,[2,58]),o($Vt,[2,59]),{9:[2,47]},o($Ve,[2,8]),o($Ve,[2,10]),o($Ve,[2,9]),o($Ve,[2,11]),o($Ve,[2,13]),{18:[1,157]},{9:$Vj,24:158,29:$Vk},o($Ve,[2,15])],
defaultActions: {21:[2,1],66:[2,40],107:[2,41],110:[2,35],111:[2,36],112:[2,37],126:[2,51],127:[2,52],128:[2,53],129:[2,54],130:[2,55],143:[2,44],144:[2,45],145:[2,42],146:[2,43],147:[2,46],150:[2,47]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	let contador = 0;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Omitir espacios en blanco */ 
break;
case 1: /* Omitir saltos de linea, tabs y retornos*/ 
break;
case 2:
break;
case 3:
break;
case 4:// comentario simple línea
break;
case 5:/* IGNORE */
break;
case 6: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 17;
break;
case 7: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 12;
break;
case 8: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46;
break;
case 9: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 32;
break;
case 10: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 44;
break;
case 11: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 11;
break;
case 12: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 50;
break;
case 13: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 47;
break;
case 14: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 23;
break;
case 15: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 30;
break;
case 16: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31;
break;
case 17: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 34;
break;
case 18: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 28;
break;
case 19: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 19;
break;
case 20: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 25;
break;
case 21: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 35;
break;
case 22: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 36;
break;
case 23: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 33;
break;
case 24: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 9;
break;
case 25: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 29;
break;
case 26: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 21;
break;
case 27: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 13;
break;
case 28: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 14;
break;
case 29: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 48;
break;
case 30: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 49;
break;
case 31: listaTokens.push(new Token("LLave_izquierda", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 15;
break;
case 32: listaTokens.push(new Token("LLave_derecha", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 16;
break;
case 33: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 54;
break;
case 34: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 55;
break;
case 35: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 56;
break;
case 36: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 57;
break;
case 37: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 58;
break;
case 38: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 38;
break;
case 39: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 51;
break;
case 40: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 39;
break;
case 41: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 40;
break;
case 42: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 41;
break;
case 43: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 42;
break;
case 44: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 43;
break;
case 45: listaTokens.push(new Token("Cadena", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_hilera";
break;
case 46: listaTokens.push(new Token("Identificador", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_identificador";
break;
case 47: listaTokens.push(new Token("Numero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_decimal";
break;
case 48: listaTokens.push(new Token("Numero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_entero";
break;
case 49: return "EOF"; 
break;
case 50: return "error"; 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[\t\r]+)/i,/^(?:\n)/i,/^(?:((#[^\r\n]*[^\r\n])))/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:var\b)/i,/^(?:return\b)/i,/^(?:float\b)/i,/^(?:int\b)/i,/^(?:heap\b)/i,/^(?:stack\b)/i,/^(?:goto\b)/i,/^(?:proc\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:call\b)/i,/^(?:printf\b)/i,/^(?:if\b)/i,/^(?:"%c")/i,/^(?:"%i")/i,/^(?:"%d")/i,/^(?:;)/i,/^(?::)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:<>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:"([^\\\"]|\\.)*")/i,/^(?:[a-zA-Z_À-ÿ\u00F1\u00D1]([a-zA-ZÀ-ÿ\-\.\u00F1\u00D10-9_])*)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gdagram;
exports.Parser = gdagram.Parser;
exports.parse = function () { return gdagram.parse.apply(gdagram, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}