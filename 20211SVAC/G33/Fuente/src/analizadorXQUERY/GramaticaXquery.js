/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaXquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,12],$V2=[1,17],$V3=[1,14],$V4=[1,11],$V5=[1,15],$V6=[1,16],$V7=[1,18],$V8=[1,19],$V9=[1,9],$Va=[5,7,20,26,28,37,39,46,49,50,51,53],$Vb=[1,24],$Vc=[1,33],$Vd=[1,32],$Ve=[1,34],$Vf=[1,29],$Vg=[1,30],$Vh=[1,31],$Vi=[5,7,20,23,26,28,37,39,46,49,50,51,53],$Vj=[1,47],$Vk=[1,48],$Vl=[1,49],$Vm=[1,50],$Vn=[1,51],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[5,7,14,20,23,26,28,37,39,41,46,47,49,50,51,53,57,58,59,60,61,62,63,64,65,66,67,68],$Vx=[1,70],$Vy=[1,72],$Vz=[1,69],$VA=[1,71],$VB=[1,73],$VC=[14,23],$VD=[14,23,73],$VE=[1,101],$VF=[2,75],$VG=[1,108],$VH=[1,109],$VI=[1,106],$VJ=[1,110],$VK=[1,111],$VL=[5,7,14,20,23,26,28,37,39,41,46,49,50,51,53,58,59,60,61,62,63,64,65,66,67,68],$VM=[5,7,14,20,23,26,28,37,39,41,46,49,50,51,53,59,61,62,63,64,65,66,67,68],$VN=[5,7,14,20,23,26,28,37,39,41,46,49,50,51,53,59,65,66,67,68],$VO=[11,60,75,81,82],$VP=[14,23,73,79],$VQ=[1,155],$VR=[1,176],$VS=[1,177],$VT=[1,178],$VU=[1,179],$VV=[1,180],$VW=[2,4],$VX=[1,183],$VY=[14,19,22,23];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO_XQUERY":3,"INSTRUCCIONES":4,"EOF":5,"FUNCION":6,"tk_declare":7,"tk_function":8,"MENU_LOCAL":9,"tk_dosPuntos":10,"tk_identificador":11,"tk_parA":12,"LISTA_DECLARACION_FUNCION":13,"tk_parC":14,"tk_as":15,"tk_xs":16,"TIPO_DATO":17,"MENU_INTERROGA":18,"llaveA":19,"llaveC":20,"tk_punto_coma":21,"tk_Interroga":22,"tk_coma":23,"DECLARACION_FUNCION":24,"tk_identificadorXQUERY":25,"tk_local":26,"tk_int":27,"tk_string":28,"tk_double":29,"tk_DECIMAL":30,"tk_integer":31,"INSTRUCCION":32,"DECLARACION_GLOBAL":33,"IF":34,"LLAMADA_FUNCION":35,"RETURN_CICLO":36,"tk_return":37,"EXP_XQUERY":38,"tk_if":39,"tk_then":40,"tk_else":41,"Parametros_llamada":42,"NATIVAS":43,"DUALIDAD":44,"XPATH":45,"tk_upper":46,"tk_menos":47,"tk_case":48,"tk_lower":49,"tk_tonumber":50,"tk_subString":51,"Parametros_funcion":52,"tk_let":53,"LISTA_ID":54,"DECLARACION_INDIVIDUAL":55,"tk_igualXQUERY":56,"tk_mas":57,"tk_div":58,"tk_mod":59,"tk_asterisco":60,"tk_menor":61,"tk_mayor":62,"tk_menorIgual":63,"tk_mayorIgual":64,"tk_igual":65,"tk_distinto":66,"tk_or":67,"tk_and":68,"tk_entero":69,"tk_decimal":70,"tk_stringTexto":71,"INICIO":72,"tk_barra":73,"INICIALES":74,"tk_punto":75,"DIAGONALES":76,"DERIVADOSLIMITADO":77,"DERIVACIONDIAGONAL":78,"tk_diagonal":79,"DERIVADOS":80,"tk_node":81,"tk_arroba":82,"ATRIBUTO":83,"tk_ParC":84,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"tk_declare",8:"tk_function",10:"tk_dosPuntos",11:"tk_identificador",12:"tk_parA",14:"tk_parC",15:"tk_as",16:"tk_xs",19:"llaveA",20:"llaveC",21:"tk_punto_coma",22:"tk_Interroga",23:"tk_coma",25:"tk_identificadorXQUERY",26:"tk_local",27:"tk_int",28:"tk_string",29:"tk_double",30:"tk_DECIMAL",31:"tk_integer",37:"tk_return",39:"tk_if",40:"tk_then",41:"tk_else",46:"tk_upper",47:"tk_menos",48:"tk_case",49:"tk_lower",50:"tk_tonumber",51:"tk_subString",53:"tk_let",56:"tk_igualXQUERY",57:"tk_mas",58:"tk_div",59:"tk_mod",60:"tk_asterisco",61:"tk_menor",62:"tk_mayor",63:"tk_menorIgual",64:"tk_mayorIgual",65:"tk_igual",66:"tk_distinto",67:"tk_or",68:"tk_and",69:"tk_entero",70:"tk_decimal",71:"tk_stringTexto",73:"tk_barra",75:"tk_punto",79:"tk_diagonal",81:"tk_node",82:"tk_arroba",84:"tk_ParC"},
productions_: [0,[3,2],[6,17],[18,1],[18,0],[13,3],[13,1],[24,6],[9,1],[17,1],[17,1],[17,1],[17,1],[17,1],[4,2],[4,1],[32,1],[32,1],[32,1],[32,1],[32,1],[36,2],[34,6],[34,8],[34,8],[35,6],[35,1],[44,1],[44,1],[43,6],[43,6],[43,4],[43,4],[43,6],[43,8],[42,3],[42,1],[52,3],[52,1],[33,2],[54,3],[54,1],[55,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,1],[38,1],[38,1],[38,1],[38,3],[38,6],[38,1],[45,1],[72,3],[72,1],[74,4],[74,2],[74,3],[74,4],[74,2],[74,4],[76,1],[76,2],[78,3],[78,0],[77,1],[77,1],[77,3],[77,2],[80,1],[80,2],[80,1],[83,1],[83,1],[83,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        produccion.push(`<INICIO_XQUERY> ::= <INSTRUCCIONES> EOF`);
        accion.push(`INICIO_XQUERY.Val ::= new Tree()`);
        let arbol = new Tree($$[$0-1]);
        arbol.accion = accion;
        arbol.produccion = produccion;
        arbol.salida3d = codigo3Dxpath
        return arbol;
    
break;
case 2:

            produccion.push(`<FUNCION> ::= declare function <MENU_LOCAL> : identificador ( <LISTA_DECLARACION_FUNCION> ) as xs : <TIPO_DATO> <MENU_INTERROGA> { <INSTRUCCIONES>  } ;`);
            accion.push(`FUNCION.Val ::= new Declaracion()`);
            this.$ = new DeclaracionMetodo($$[$0-5], $$[$0-12], $$[$0-10], $$[$0-2], _$[$0-16].first_line, _$[$0-16].first_column);
        
break;
case 3:

            produccion.push(`<MENU_INTERROGA> ::= ?`);
            accion.push(`MENU_INTERROGA.Val ::= ?`);
            this.$ = $$[$0]
        
break;
case 4:

            produccion.push(`<MENU_INTERROGA> ::= epsilon`);
            accion.push(`MENU_INTERROGA.Val ::= vacio`);
            this.$ = ''
        
break;
case 5:

            produccion.push(`<LISTA_DECLARACION_FUNCION> ::= <LISTA_DECLARACION_FUNCION> , <DECLARACION_FUNCION>`);
            accion.push(`LISTA_DECLARACION_FUNCION.Val.push(DECLARACION_FUNCION.Val)`);
            this.$.push($$[$0]);
        
break;
case 6:

            produccion.push(`<LISTA_DECLARACION_FUNCION> ::= <DECLARACION_FUNCION>`);
            accion.push(`LISTA_DECLARACION_FUNCION.Val = [DECLARACION_FUNCION.Val]`);
            this.$ = [$$[$0]]
        
break;
case 7:

            produccion.push(`<DECLARACION_FUNCION> ::= identificador as xs : <TIPO_DATO> <MENU_INTERROGA>`);
            accion.push(`DECLARACION_FUNCION.Val = new Declaracion()`);
            this.$ = new Declaracion($$[$0-1], $$[$0-5], null, _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 8:

        produccion.push(`<LMENU_LOCAL> ::= local`);
        accion.push(`MENU_LOCAL.Val = local`);
        this.$ = $$[$0];
    
break;
case 9:

            produccion.push(`<TIPO_DATO> ::= int`);
            accion.push(`TIPO_DATO.Val = new Tipo()`);
            this.$ = new Tipo(tipos.ENTERO);
        
break;
case 10:

            produccion.push(`<TIPO_DATO> ::= string`);
            accion.push(`TIPO_DATO.Val = new Tipo()`);
            this.$ = new Tipo(tipos.STRING);
        
break;
case 11:

            produccion.push(`<TIPO_DATO> ::= double`);
            accion.push(`TIPO_DATO.Val = new Tipo()`);
            this.$ = new Tipo(tipos.DECIMAL);
        
break;
case 12:

            produccion.push(`<TIPO_DATO> ::= decimal`);
            accion.push(`TIPO_DATO.Val = new Tipo()`);
            this.$ = new Tipo(tipos.DECIMAL);
        
break;
case 13:

            produccion.push(`<TIPO_DATO> ::= integer`);
            accion.push(`TIPO_DATO.Val = new Tipo()`);
            this.$ = new Tipo(tipos.ENTERO);
        
break;
case 14:
 
            produccion.push(`<INSTRUCCIONES> ::= <INSTRUCCIONES> <INSTRUCCION>`);
            accion.push(`INSTRUCCIONES.Val.push(INSTRUCCION.Val)`);
            this.$.push(...$$[$0]); 
        
break;
case 15:
 
            produccion.push(`<INSTRUCCIONES> ::= <INSTRUCCION>`);
            accion.push(`INSTRUCCIONES.Val = [INSRUCCION.Val]`);
            this.$ = [...$$[$0]] 
        
break;
case 16:

            produccion.push(`<INSTRUCCION> ::= <DECLARACION_GLOBAL>`);
            accion.push(`INSTRUCCION.Val = DECLARACION_GLOBAL.Val`);
            this.$ = $$[$0]
        
break;
case 17:

            produccion.push(`<INSTRUCCION> ::= <FUNCION>`);
            accion.push(`INSTRUCCION.Val = Funcion.Val`);
            this.$ = [$$[$0]]
        
break;
case 18:

            produccion.push(`<INSTRUCCION> ::= <IF>`);
            accion.push(`INSTRUCCION.Val = IF.Val`);
            this.$ = [$$[$0]]
        
break;
case 19:

            produccion.push(`<INSTRUCCION> ::= <LLAMDA_FUNCION>`);
            accion.push(`INSTRUCCION.Val = LLAMDA_FUNCION.Val`);
            this.$ = [$$[$0]]
        
break;
case 20:

            produccion.push(`<INSTRUCCION> ::= <RETURN_CICLO>`);
            accion.push(`INSTRUCCION.Val = RETURN_CICLO.Val`);
            this.$ = [$$[$0]]
        
break;
case 21:

            produccion.push(`<RETURN_CICLO> ::= return <EXP_QUERY>`);
            accion.push(`RETURN_CICLO.Val = new Retorno()`);
            this.$ = new Retorno($$[$0], _$[$0-1].first_line, _$[$0-1].first_column)
        
break;
case 22:

            produccion.push(`<IF> ::= if ( <EXP_QUERY> ) then <EXP_QUERY>`);
            accion.push(`IF.Val = new If()`);
            this.$ = new If($$[$0-3], 
                    [new Retorno($$[$0], _$[$0-5].first_line, _$[$0-5].first_column)], 
                    [], _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 23:

            produccion.push(`<IF> ::= if ( <EXP_QUERY> ) then <EXP_QUERY> else <EXP_QUERY>`);
            accion.push(`IF.Val = new If()`);
            this.$ = new If($$[$0-5], 
                    [new Retorno($$[$0-2], _$[$0-7].first_line, _$[$0-7].first_column)], 
                    [new Retorno($$[$0], _$[$0-7].first_line, _$[$0-7].first_column)], 
                    _$[$0-7].first_line, _$[$0-7].first_column);
        
break;
case 24:

            produccion.push(`<IF> ::= if ( <EXP_QUERY> ) then <EXP_QUERY> else <If>`);
            accion.push(`IF.Val = new If()`);
            this.$ = new If($$[$0-5], 
                [new Retorno($$[$0-2], _$[$0-7].first_line, _$[$0-7].first_column)], 
                [$$[$0]], 
                _$[$0-7].first_line, _$[$0-7].first_column);
        
break;
case 25:

            produccion.push(`<LLAMADA_FUNCION> ::= local : identificador ( <PARAMETROS_LLAMADA> )`);
            accion.push(`LLAMADA_FUNCION.Val = new LlamadaMetodo()`);
            this.$ = new Print(new LlamadaMetodo($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column), _$[$0-5].first_line, _$[$0-5].first_column)
        
break;
case 26:

            this.$ = new Print($$[$0]);
        
break;
case 27:

        this.$  = $$[$0]
    
break;
case 28:

        this.$ = $$[$0]
    
break;
case 29:

            this.$ = new ToUpper($$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
        
break;
case 30:

            this.$ = new ToLower($$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
        
break;
case 31:
     
            this.$ = new ToString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
        
break;
case 32:

            this.$ = new ToNumber($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)
        
break;
case 33:

            this.$ = new Substrings($$[$0-3], $$[$0-1], new Primitivo(new Tipo(esEntero(Number(-1))), Number(-1), _$[$0-5].first_line, _$[$0-5].first_column), _$[$0-5].first_line, _$[$0-5].first_column)
        
break;
case 34:

            this.$ = new Substrings($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column)
        
break;
case 35:

            produccion.push(`<PARAMETROS_LLAMADA> ::= <PARAMETROS_LLAMADA> , <XPATH>`);
            accion.push(`PARAMETROS_LLAMDA.Val.push(XPATH.Val)`);
            this.$.push($$[$0]); 
        
break;
case 36:

            produccion.push(`<PARAMETROS_LLAMADA> ::= <XPATH>`);
            accion.push(`PARAMETROS_LLAMADA.Val = [XPATH.Val]`);
            this.$ = [$$[$0]]
        
break;
case 37:

            produccion.push(`<PARAMETROS_FUNCION> ::= <PARAMETROS_FUNCION> , <EXP_QUERY>`);
            accion.push(`PARAMETROS_FUNCION.Val.push(EXP_QUERY.Val)`);
            this.$.push($$[$0])
        
break;
case 38:

            produccion.push(`<PARAMETROS_FUNCION> ::= <EXP_QUERY>`);
            accion.push(`PARAMETROS_FUNCION.Val = [EXP_QUERY.Val]`);
            this.$ = [$$[$0]]
        
break;
case 39:

            produccion.push(`<DECLARACION_GLOBAL> ::= let <LISTA_ID>`);
            accion.push(`DECLARACION_GLOBAL.Val = LISTA_ID.Val`);
            this.$ = $$[$0]
        
break;
case 40:

            produccion.push(`<LISTA_ID> ::= <LISTA_ID> , <DECLARACION_INDIVIDUAL>`);
            accion.push(`LISTA_ID.Val.push(DECLARACION_INDIVIDUAL.Val)`);
            this.$.push($$[$0]); 
        
break;
case 41:

            produccion.push(`<LISTA_ID> ::= <DECLARACION_INDIVIDUAL>`);
            accion.push(`LISTA_ID.Val = [DECLARACION_INDIVIDUAL.Val]`);
            this.$ = [$$[$0]]
        
break;
case 42:

            produccion.push(`<DECLARACION_INDIVIDUAL> ::= identificador igual <EXP_QUERY>`);
            accion.push(`DECLARACION_INDIVIDUAL.Val = new Declaracion()`);
            this.$ = new Declaracion($$[$0].tipo, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 43:

            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> - <EXP_QUERY>`);
            accion.push(`EXP_QUERY.Val = new Aritmetica()`);
            this.$ = new Aritmetica($$[$0-2], $$[$0], '-', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 44:

            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> + <EXP_QUERY>`);
            accion.push(`EXP_QUERY.Val = new Aritmetica()`);
            this.$ = new Aritmetica($$[$0-2], $$[$0], '+', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 45:

            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> div <EXP_QUERY>`);
            accion.push(`EXP_QUERY.Val = new Aritmetica()`);
            this.$ = new Aritmetica($$[$0-2], $$[$0], '/', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 46:

            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> mod <EXP_QUERY>`);
            accion.push(`EXP_QUERY.Val = new Aritmetica()`);
            this.$ = new Aritmetica($$[$0-2], $$[$0], '%', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 47:

            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> * <EXP_QUERY>`);
            accion.push(`EXP_QUERY.Val = new Aritmetica()`);
            this.$ = new Aritmetica($$[$0-2], $$[$0], '*', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 48:

            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> < <EXP_QUERY>`);
            accion.push(`EXP_QUERY.Val = new Relacional()`);
            this.$ = new Relacional($$[$0-2], $$[$0], '<', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 49:

            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> > <EXP_QUERY>`);
            accion.push(`EXP_QUERY.Val = new Relacional()`);
            this.$ = new Relacional($$[$0-2], $$[$0], '>', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 50:

            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> <= <EXP_QUERY>`);
            accion.push(`EXP_QUERY.Val = new Relacional()`);
            this.$ = new Relacional($$[$0-2], $$[$0], '<=', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 51:

            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> >= <EXP_QUERY>`);
            accion.push(`EXP_QUERY.Val = new Relacional()`);
            this.$ = new Relacional($$[$0-2], $$[$0], '>=', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 52:

            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> = <EXP_QUERY>`);
            accion.push(`EXP_QUERY.Val = new Relacional()`);
            this.$ = new Relacional($$[$0-2], $$[$0], '==', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 53:

            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> != <EXP_QUERY>`);
            accion.push(`EXP_QUERY.Val = new Relacional()`);
            this.$ = new Relacional($$[$0-2], $$[$0], '!=', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 54:

            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> or <EXP_QUERY>`);
            accion.push(`EXP_QUERY.Val = new Logico()`);
            this.$ = new Logico($$[$0-2], $$[$0], '||', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 55:

            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> and <EXP_QUERY>`);
            accion.push(`EXP_QUERY.Val = new Logico()`);
            this.$ = new Logico($$[$0-2], $$[$0], '&&', _$[$0-2].first_line, _$[$0-2].first_column);
        
break;
case 56:

            produccion.push(`<EXP_QUERY> ::= entero`);
            accion.push(`EXP_QUERY.Val = new Primitivo()`);
            this.$ = new Primitivo(new Tipo(tipos.ENTERO), Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
        
break;
case 57:

            produccion.push(`<EXP_QUERY> ::= decimal`);
            accion.push(`EXP_QUERY.Val = new Primitivo()`);
            this.$ = new Primitivo(new Tipo(tipos.DECIMAL), Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
        
break;
case 58:

            produccion.push(`<EXP_QUERY> ::= string`);
            accion.push(`EXP_QUERY.Val = new Primitivo()`);
            this.$ = new Primitivo(new Tipo(tipos.STRING), $$[$0], _$[$0].first_line, _$[$0].first_column);
        
break;
case 59:

            produccion.push(`<EXP_QUERY> ::= identificador`);
            accion.push(`EXP_QUERY.Val = new Identificador()`);
            this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);
        
break;
case 60:

            produccion.push(`<EXP_QUERY> ::= ( <EXP_QUERY> )`);
            accion.push(`EXP_QUERY.Val = EXP_QUERY.Val`);
            this.$ = $$[$0-1]
        
break;
case 61:

            produccion.push(`<EXP_QUERY> ::= local : identificador ( <Parametros_funcion> )`);
            accion.push(`EXP_QUERY.Val = new LlamdaMetodo()`);
            this.$ = new LlamadaMetodo($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 62:

            this.$ = $$[$0]
        
break;
case 63:

            produccion.push('<XPATH> ::= <INICIO>');
            accion.push('XPATH.Val = INICIO.val');
            let analizador = new AnalizadorASCXML();
            let buscador = new xpathBusqueda();
            let ejecu = new EjecucionXpath($$[$0], "");

            let ret = analizador.ejecutarCodigo(localStorage.getItem("xml"));
            let tabla = ret.objetos;
            let query = ejecu.ejecutarArbol();

            if(query.includes("|")) {
                buscador.getNodesByFilters("3", query, tabla);
            }else if(query[0] !== "/" && query[0] !== "//"){
                buscador.getNodesByFilters("1", query, tabla)
            }else{
                buscador.getNodesByFilters("2", query, tabla)
            }

            let retorno = buscador.returnListObjects()
            
            let dir = new xml3D();
            let salida3D = dir.getNodesByFilters(tabla, 0, buscador.returnListValues());
            salida3D = "// 3D de consulta: " + query + salida3D
            codigo3Dxpath.push(salida3D)

            let valor = retorno[0].texto;
            let tipoR;

            if (valor.match(/^[0-9]+$/)){
                tipoR = new Tipo(esEntero(valor))
                valor = parseInt(valor)
            }else if (valor.match(/^[0-9]+[.][0-9]+$/)){
                tipoR = new Tipo(esEntero(valor))
                valor = parseInt(valor)
            }else{
                tipoR = new Tipo(tipos.STRING)
            }

            this.$ = new Primitivo(tipoR, valor, _$[$0].first_line, _$[$0].first_column);
        
break;
case 64:

            produccion.push('<INICIO> ::= <INICIO> | <INICIALES>');
            accion.push('INICIO.Val = INICIO.push(INICIALES)');
            this.$.push($$[$0])
        
break;
case 65:

            produccion.push('<INICIO> ::= <INICIALES>');
            accion.push('INICIO.Val = INICIALES.Val');
            this.$ = [$$[$0]]
        
break;
case 66:

            produccion.push(`<INICIALES> ::= punto <DIAGONALES> <DERIVADOSLIMITADO> <DERIVAIONDIAGONAL>`);
            accion.push('INICIALES.Val = new NodoX();'); 
            this.$ = new NodoX("", ".", [new NodoX($$[$0-2], $$[$0-1].val, [...$$[$0]])]);
        
break;
case 67:

            produccion.push(`<INICIALES> ::= identificador <DERIVAIONDIAGONAL>`);
            accion.push('INICIALES.Val = new NodoX();'); 
            this.$ = new NodoX("", $$[$0-1], [...$$[$0]]);
        
break;
case 68:

            produccion.push(`<INICIALES> ::= diagonal <DERIVADOS> <DERIVAIONDIAGONAL>`);
            accion.push('INICIALES.Val = new NodoX();'); 
            this.$ = new NodoX($$[$0-2], $$[$0-1].val, [...$$[$0]]);
        
break;
case 69:

            produccion.push(`<INICIALES> ::= diagonal diagonal <DERIVADOSLIMITADO> <DERIVAIONDIAGONAL>`);
            accion.push('INICIALES.Val = new NodoX();'); 
            this.$ = new NodoX("//", $$[$0-1].val, [...$$[$0]]);
        
break;
case 70:

            produccion.push(`<INICIALES> ::= asterisco <DERIVAIONDIAGONAL>`);
            accion.push('INICIALES.Val = new NodoX();'); 
            this.$ = new NodoX("", $$[$0-1], [...$$[$0]]);
        
break;
case 71:

            produccion.push(`<INICIALES> ::= node() <DERIVAIONDIAGONAL>`);
            accion.push('INICIALES.Val = new NodoX();'); 
            this.$ = new NodoX("", "node()", [...$$[$0]]);
        
break;
case 72:

            produccion.push(`<DIAGONALES> ::= diagoanl`);
            accion.push('DIAGONALES.Val = /;'); 
            this.$ = $$[$0]
        
break;
case 73:

            produccion.push(`<DIAGONALES> ::= diagonal diagonal`);
            accion.push('DIAGONALES.Val = //'); 
            this.$ = "//"
        
break;
case 74:

            produccion.push(`<DERIVACIONDIAGONAL> ::= <DIAGONALES> <DERIVADOS> <DERIVACIONDIAGONAL>`);
            accion.push('DERIVACIONDIAGONAL.Val = []; DERIVACIONDIAGONAL.Val.push(new Nodo(tipo, id, predicado, fila, columna)); DERIVACIONDIAGONAL.push(DERIVACIONDIAGONAL)'); 
            this.$ = new Array();
            this.$.push(new NodoX($$[$0-2], $$[$0-1].val, [...$$[$0]])); 
        
break;
case 75:

            produccion.push(`<DERIVACIONDIAGONAL> ::= epsilon`);
            accion.push('DERIVACIONDIAGONAL.Val = [/*Vacio*/]');
            this.$ = [];
        
break;
case 76:

            produccion.push(`<DERIVADOSLIMIADO> ::= identificador <PREDICATE>`);
            accion.push('DERIVADOSLIMITADO.Val = identificador + PREDICATE.Val'); 
            this.$ = {val: $$[$0], pre: null};
        
break;
case 77:

            produccion.push(`<DERIVADOSLIMIADO> ::= asterisco <PREDICATE>`);
            accion.push('DERIVADOSLIMITADO.Val = \"*\" + PREDICATE.Val'); 
            this.$ = {val: $$[$0], pre: null};
        
break;
case 78:

            produccion.push(`<DERIVADOSLIMIADO> ::= node() <PREDICATE>`);
            accion.push('DERIVADOSLIMITADO.Val = \"@\" + ATRIBUTO.Val'); 
            this.$ = {val: "node()", pre: null}
        
break;
case 79:

            produccion.push(`<DERIVADOSLIMIADO> ::= arroba <ATRIBUTO>`);
            accion.push('DERIVADOSLIMITADO.Val = \"@\" + ATRIBUTO.Val'); 
            this.$ = {val: $$[$0-1] + "" + $$[$0], pre: null};
        
break;
case 80:

            produccion.push(`<DERIVADOS> ::= punto`);
            accion.push("DERIVADOS.Val = \".\" ");
            this.$ = {val: $$[$0], pre: null}; 
        
break;
case 81:

            produccion.push(`<DERIVADOS> ::= doblePunto`);
            accion.push('DERIVADOS.Val = \"..\"');
            this.$ = {val: "..", pre: null}; 
        
break;
case 82:

            produccion.push(`<DERIVADOS> ::= <DERIVADOSLIMITADO>`);
            accion.push('DERIVADOS.Val = DERIVADOSLIMITADO.Val'); 
            this.$ = $$[$0]; 
        
break;
case 83:

            produccion.push(`<ATRIBUTO> ::= asterisco`);
            accion.push('ATRIBUTO.Val = \"*\"'); 
            this.$ = $$[$0];
        
break;
case 84:

            produccion.push(`<ATRIBUTO> ::= identificador`);
            accion.push('ATRIBUTO.Val = identificador');  
            this.$ = $$[$0];
        
break;
case 85:

            produccion.push(`<ATRIBUTO> ::= node`);
            accion.push('ATRIBUTO.Val = \"node()\"'); 
            this.$ = "node()"
        
break;
}
},
table: [{3:1,4:2,6:5,7:$V0,26:$V1,28:$V2,32:3,33:4,34:6,35:7,36:8,37:$V3,39:$V4,43:13,46:$V5,49:$V6,50:$V7,51:$V8,53:$V9},{1:[3]},{5:[1,20],6:5,7:$V0,26:$V1,28:$V2,32:21,33:4,34:6,35:7,36:8,37:$V3,39:$V4,43:13,46:$V5,49:$V6,50:$V7,51:$V8,53:$V9},o($Va,[2,15]),o($Va,[2,16]),o($Va,[2,17]),o($Va,[2,18]),o($Va,[2,19]),o($Va,[2,20]),{25:$Vb,54:22,55:23},{8:[1,25]},{12:[1,26]},{10:[1,27]},o($Va,[2,26]),{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:28,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{47:[1,36]},{47:[1,37]},{12:[1,38]},{12:[1,39]},{12:[1,40]},{1:[2,1]},o($Va,[2,14]),o($Va,[2,39],{23:[1,41]}),o($Vi,[2,41]),{56:[1,42]},{9:43,26:[1,44]},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:45,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{11:[1,46]},o($Va,[2,21],{47:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($Vw,[2,56]),o($Vw,[2,57]),o($Vw,[2,58]),o($Vw,[2,59]),{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:60,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{10:[1,61]},o($Vw,[2,62]),{48:[1,62]},{48:[1,63]},{11:$Vx,12:$Vc,25:$Vd,26:$Ve,28:$V2,38:66,43:35,44:64,45:65,46:$V5,49:$V6,50:$V7,51:$V8,60:$Vy,69:$Vf,70:$Vg,71:$Vh,72:67,74:68,75:$Vz,79:$VA,81:$VB},{11:$Vx,12:$Vc,25:$Vd,26:$Ve,28:$V2,38:66,43:35,44:74,45:65,46:$V5,49:$V6,50:$V7,51:$V8,60:$Vy,69:$Vf,70:$Vg,71:$Vh,72:67,74:68,75:$Vz,79:$VA,81:$VB},{11:$Vx,12:$Vc,25:$Vd,26:$Ve,28:$V2,38:66,43:35,44:75,45:65,46:$V5,49:$V6,50:$V7,51:$V8,60:$Vy,69:$Vf,70:$Vg,71:$Vh,72:67,74:68,75:$Vz,79:$VA,81:$VB},{25:$Vb,55:76},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:77,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{10:[1,78]},{10:[2,8]},{14:[1,79],47:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv},{12:[1,80]},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:81,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:82,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:83,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:84,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:85,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:86,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:87,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:88,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:89,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:90,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:91,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:92,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:93,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{14:[1,94],47:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv},{11:[1,95]},{12:[1,96]},{12:[1,97]},{14:[1,98]},o($VC,[2,27]),o($VC,[2,28],{47:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($VC,[2,63],{73:[1,99]}),o($VD,[2,65]),{76:100,79:$VE},o($VD,$VF,{78:102,76:103,79:$VE}),{11:$VG,60:$VH,75:$VI,77:107,79:[1,105],80:104,81:$VJ,82:$VK},o($VD,$VF,{76:103,78:112,79:$VE}),{12:[1,113]},{14:[1,114]},{23:[1,115]},o($Vi,[2,40]),o($Vi,[2,42],{47:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),{11:[1,116]},{40:[1,117]},{11:$Vx,42:118,45:119,60:$Vy,72:67,74:68,75:$Vz,79:$VA,81:$VB},o($Vw,[2,43]),o($Vw,[2,44]),o($VL,[2,45],{47:$Vj,57:$Vk}),o([5,7,14,20,23,26,28,37,39,41,46,49,50,51,53,59],[2,46],{47:$Vj,57:$Vk,58:$Vl,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($VL,[2,47],{47:$Vj,57:$Vk}),o($VM,[2,48],{47:$Vj,57:$Vk,58:$Vl,60:$Vn}),o($VM,[2,49],{47:$Vj,57:$Vk,58:$Vl,60:$Vn}),o($VM,[2,50],{47:$Vj,57:$Vk,58:$Vl,60:$Vn}),o($VM,[2,51],{47:$Vj,57:$Vk,58:$Vl,60:$Vn}),o($VN,[2,52],{47:$Vj,57:$Vk,58:$Vl,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr}),o($VN,[2,53],{47:$Vj,57:$Vk,58:$Vl,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr}),o([5,7,14,20,23,26,28,37,39,41,46,49,50,51,53,59,67],[2,54],{47:$Vj,57:$Vk,58:$Vl,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,68:$Vv}),o([5,7,14,20,23,26,28,37,39,41,46,49,50,51,53,59,67,68],[2,55],{47:$Vj,57:$Vk,58:$Vl,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt}),o($Vw,[2,60]),{12:[1,120]},{11:$Vx,12:$Vc,25:$Vd,26:$Ve,28:$V2,38:66,43:35,44:121,45:65,46:$V5,49:$V6,50:$V7,51:$V8,60:$Vy,69:$Vf,70:$Vg,71:$Vh,72:67,74:68,75:$Vz,79:$VA,81:$VB},{11:$Vx,12:$Vc,25:$Vd,26:$Ve,28:$V2,38:66,43:35,44:122,45:65,46:$V5,49:$V6,50:$V7,51:$V8,60:$Vy,69:$Vf,70:$Vg,71:$Vh,72:67,74:68,75:$Vz,79:$VA,81:$VB},o($Vw,[2,31]),{11:$Vx,60:$Vy,74:123,75:$Vz,79:$VA,81:$VB},{11:$VG,60:$VH,77:124,81:$VJ,82:$VK},o($VO,[2,72],{79:[1,125]}),o($VD,[2,67]),{11:$VG,60:$VH,75:$VI,77:107,80:126,81:$VJ,82:$VK},o($VD,$VF,{76:103,78:127,79:$VE}),{11:$VG,60:$VH,75:$VI,77:107,80:128,81:$VJ,82:$VK},o($VP,[2,80],{75:[1,129]}),o($VP,[2,82]),o($VP,[2,76]),o($VP,[2,77]),{12:[1,130]},{11:[1,133],60:[1,132],81:[1,134],83:131},o($VD,[2,70]),{14:[1,135]},o($Vw,[2,32]),{11:$Vx,12:$Vc,25:$Vd,26:$Ve,28:$V2,38:66,43:35,44:136,45:65,46:$V5,49:$V6,50:$V7,51:$V8,60:$Vy,69:$Vf,70:$Vg,71:$Vh,72:67,74:68,75:$Vz,79:$VA,81:$VB},{12:[1,137]},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:138,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{14:[1,139],23:[1,140]},o($VC,[2,36]),{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:142,43:35,46:$V5,49:$V6,50:$V7,51:$V8,52:141,69:$Vf,70:$Vg,71:$Vh},{14:[1,143]},{14:[1,144]},o($VD,[2,64]),o($VD,$VF,{76:103,78:145,79:$VE}),o($VO,[2,73]),o($VD,$VF,{76:103,78:146,79:$VE}),o($VD,[2,68]),o($VD,$VF,{76:103,78:147,79:$VE}),o($VP,[2,81]),{14:[1,148]},o($VP,[2,79]),o($VP,[2,83]),o($VP,[2,84]),{12:[1,149]},o($VD,$VF,{76:103,78:150,79:$VE}),{14:[1,151],23:[1,152]},{13:153,24:154,25:$VQ},o($Va,[2,22],{41:[1,156],47:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($Va,[2,25]),{11:$Vx,45:157,60:$Vy,72:67,74:68,75:$Vz,79:$VA,81:$VB},{14:[1,158],23:[1,159]},o($VC,[2,38],{47:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($Vw,[2,29]),o($Vw,[2,30]),o($VD,[2,66]),o($VD,[2,74]),o($VD,[2,69]),o($VP,[2,78]),{84:[1,160]},o($VD,[2,71]),o($Vw,[2,33]),{11:$Vx,12:$Vc,25:$Vd,26:$Ve,28:$V2,38:66,43:35,44:161,45:65,46:$V5,49:$V6,50:$V7,51:$V8,60:$Vy,69:$Vf,70:$Vg,71:$Vh,72:67,74:68,75:$Vz,79:$VA,81:$VB},{14:[1,162],23:[1,163]},o($VC,[2,6]),{15:[1,164]},{12:$Vc,25:$Vd,26:$Ve,28:$V2,34:166,38:165,39:$V4,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},o($VC,[2,35]),o($Vw,[2,61]),{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:167,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},o($VP,[2,85]),{14:[1,168]},{15:[1,169]},{24:170,25:$VQ},{16:[1,171]},o($Va,[2,23],{47:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($Va,[2,24]),o($VC,[2,37],{47:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($Vw,[2,34]),{16:[1,172]},o($VC,[2,5]),{10:[1,173]},{10:[1,174]},{17:175,27:$VR,28:$VS,29:$VT,30:$VU,31:$VV},{17:181,27:$VR,28:$VS,29:$VT,30:$VU,31:$VV},o($VC,$VW,{18:182,22:$VX}),o($VY,[2,9]),o($VY,[2,10]),o($VY,[2,11]),o($VY,[2,12]),o($VY,[2,13]),{18:184,19:$VW,22:$VX},o($VC,[2,7]),o([14,19,23],[2,3]),{19:[1,185]},{4:186,6:5,7:$V0,26:$V1,28:$V2,32:3,33:4,34:6,35:7,36:8,37:$V3,39:$V4,43:13,46:$V5,49:$V6,50:$V7,51:$V8,53:$V9},{6:5,7:$V0,20:[1,187],26:$V1,28:$V2,32:21,33:4,34:6,35:7,36:8,37:$V3,39:$V4,43:13,46:$V5,49:$V6,50:$V7,51:$V8,53:$V9},{21:[1,188]},o($Va,[2,2])],
defaultActions: {20:[2,1],44:[2,8]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Tree } = require('./Simbolos/Tree');
    const { Tipo, tipos, esEntero } = require('./Varios/Tipo');
    const { Primitivo }  = require('./Expresiones/Primitivo');
    const { Error } = require('./Varios/Error');
    const { Identificador } = require('./Expresiones/identificador');
    //const {Vector} = require('../Expresiones/Vector');
    //const {Lista} = require('../Expresiones/Lista');
    //Instrucciones
    const {Print} = require('./Instrucciones/Print');
    const {Declaracion} = require('./Instrucciones/Declaracion');
  // // const {DeclaracionArray} = require('../Instrucciones/DeclaracionArray');
    //const {DeclaracionLista} = require('../Instrucciones/DeclaracionLista');
    //const {Asignacion} = require('../Instrucciones/Asignacion');
    //const {AsignacionVector} = require('../Instrucciones/AsignacionVector');
   // const {AsignacionLista} = require('../Instrucciones/AsignacionLista');
    /*const {AddLista} = require('../Instrucciones/AddLista');
    
    const {Switch} = require('../Instrucciones/Switch');
    const {Case} = require('../Instrucciones/Case');
    const {While} = require('../Instrucciones/While');
    const {DoWhile} = require('../Instrucciones/DoWhile');
    const {For} = require('../Instrucciones/For');
    const {DeclaracionMetodo} = require('../Instrucciones/DeclaracionMetodo');
    const {LlamadaMetodo} = require('../Instrucciones/LlamadaMetodo');
    const {Continue} = require('../Expresiones/Continue');
    const {Break} = require('../Expresiones/Break');
    const {Retorno} = require('../Instrucciones/Retorno');
    *///Expresion
    const { DeclaracionMetodo } = require('./Instrucciones/DeclaracionMetodo');
    const { LlamadaMetodo } = require('./Instrucciones/LlamadaMetodo');
    const { If } = require('./Instrucciones/If');
    const { Retorno } = require('./Instrucciones/Retorno');
    const { Aritmetica } = require('./Expresiones/Aritmetica');
    const { Relacional } = require('./Expresiones/Relacional');
    const { Logico } = require('./Expresiones/Logico');
    const { NodoX } = require('./Expresiones/NodoX');
    const { EjecucionXpath } = require('./Arbol/Ejecucion');

    const {ToUpper} = require('./Expresiones/uppercase');
    const {ToLower} = require('./Expresiones/ToLower');
    const {ToString} = require('./Expresiones/ToString');
    const {Substrings} = require('./Expresiones/Substring');
    const{ToNumber} = require('./Expresiones/ToNumber');

    /*const {Logico} = require('../Expresiones/Logico');
    const {Ternario} = require('../Expresiones/Ternario');
    const {Casteo} = require('../Expresiones/Casteo');
    const {InDecrement} = require('../Expresiones/InDecrement');
    const {Length} = require('../Expresiones/Length');
    const {ToLower} = require('../Expresiones/ToLower');
    const {ToUpper} = require('../Expresiones/ToUpper');
    const {Truncate} = require('../Expresiones/Truncate');
    const {Round} = require('../Expresiones/Round');
    const {TypeOf} = require('../Expresiones/TypeOf');
    const {ToString} = require('../Expresiones/ToString');
    const {ToCharArray} = require('../Expresiones/ToCharArray');*/
    const { AnalizadorASCXML } = require('../analizadorXML/index');
    const { xpathBusqueda } = require('../analizadorXML/Instrucciones/Busqueda/xpathBusqueda');
    const { xml3D } = require('../analizadorXML/Codigo3D/xml3D')
    var produccion = [];
    var accion = [];
    var codigo3Dxpath = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:/* skip whitespace */
break;
case 5:return "tk_decimal";
break;
case 6:return "tk_entero";
break;
case 7:return "tk_node";
break;
case 8:return "tk_child";
break;
case 9:return "tk_let";
break;
case 10:return "tk_descendant";
break;
case 11:return "tk_descendatOr"
break;
case 12:return "tk_ancestor";
break;
case 13:return "tk_ancestorOr";
break;
case 14:return "tk_attribute";
break;
case 15:return "tk_following";
break;
case 16:return "tk_followingSi"
break;
case 17:return "tk_parent"
break;
case 18:return "tk_preceding"
break;
case 19:return "tk_precedingSi"
break;
case 20:return "tk_self"
break;
case 21:return "tk_text"
break;
case 22:return "tk_position"
break;
case 23:return "tk_last"
break;
case 24:return "tk_div"
break;
case 25:return "tk_and"
break;
case 26:return "tk_or"
break;
case 27:return "tk_mod"
break;
case 28:return "tk_for";
break;
case 29: return "tk_in";
break;
case 30: return "tk_where";
break;
case 31: return "tk_order";
break;
case 32: return "tk_by";
break;
case 33: return "tk_return";
break;
case 34:return "tk_if";
break;
case 35:return "tk_else";
break;
case 36:return "tk_then";
break;
case 37:return "tk_int";
break;
case 38:return "tk_integer";
break;
case 39:return "tk_string";
break;
case 40:return "tk_DECIMAL";
break;
case 41:return "tk_double";
break;
case 42:return "tk_declare";
break;
case 43:return "tk_function";
break;
case 44:return "tk_AS"
break;
case 45:return "tk_as"
break;
case 46:return "tk_xs"
break;
case 47:return "tk_to"
break;
case 48:return "tk_at"
break;
case 49:return "tk_local";
break;
case 50:return "tk_mayor"
break;
case 51:return "tk_menor"
break;
case 52:return "tk_igual"
break;
case 53:return "tk_distinto"
break;
case 54:return "tk_menorIgual"
break;
case 55:return "tk_mayorIgual"
break;
case 56:return "tk_upper"
break;
case 57:return "tk_case"
break;
case 58:return "tk_lower"
break;
case 59:return "tk_subString"
break;
case 60:return "tk_barra"
break;
case 61:return "tk_punto"
break;
case 62:return "tk_punto_coma"
break;
case 63:return "tk_coma"
break;
case 64:return "tk_diagonal"
break;
case 65:return "tk_asterisco"
break;
case 66:return "tk_Interroga"
break;
case 67:return "tk_mas"
break;
case 68:return "tk_menos"
break;
case 69:return "tk_menorIgual"
break;
case 70:return "tk_mayorIgual"
break;
case 71:return "tk_menor"
break;
case 72:return "tk_mayor"
break;
case 73:return "tk_distinto"
break;
case 74:return "tk_igualXQUERY"
break;
case 75:return "tk_dosPuntos"
break;
case 76:return "tk_igual"
break;
case 77:return "tk_llaveA"
break;
case 78:return "tk_llaveC"
break;
case 79:return "tk_arroba"
break;
case 80:return "llaveA"
break;
case 81:return "llaveC"
break;
case 82:return "tk_parA"
break;
case 83:return "tk_parC"
break;
case 84:return "tk_stringTexto";
break;
case 85:return "tk_stringTexto";
break;
case 86:return "tk_stringTexto";
break;
case 87:return "tk_stringTexto";
break;
case 88:return "tk_identificador";
break;
case 89:return "tk_identificadorXQUERY";
console.log("indentificador papa")

break;
case 90:return "EOF";
break;
case 91:
break;
case 92:         
        console.log('Léxico',yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column );
    
break;
}
},
rules: [/^(?:\/\/.*)/,/^(?:\(:)/,/^(?::\))/,/^(?:.)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:node\b)/,/^(?:child\b)/,/^(?:let\b)/,/^(?:descendant\b)/,/^(?:descendant-or-self\b)/,/^(?:ancestor\b)/,/^(?:ancestor-or-self\b)/,/^(?:attribute\b)/,/^(?:following\b)/,/^(?:following-sibling\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:preceding-sibling\b)/,/^(?:self\b)/,/^(?:text\b)/,/^(?:position\b)/,/^(?:last\b)/,/^(?:div\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:mod\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:return\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:then\b)/,/^(?:int\b)/,/^(?:integer\b)/,/^(?:string\b)/,/^(?:decimal\b)/,/^(?:double\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:AS\b)/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:local\b)/,/^(?:gt\b)/,/^(?:lt\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:le\b)/,/^(?:ge\b)/,/^(?:upper\b)/,/^(?:case\b)/,/^(?:lower\b)/,/^(?:substring\b)/,/^(?:\|)/,/^(?:\.)/,/^(?:;)/,/^(?:,)/,/^(?:\/)/,/^(?:\*)/,/^(?:\?)/,/^(?:\+)/,/^(?:-)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?::=)/,/^(?::)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:@)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:"[^\"]*")/,/^(?:“[^\“]*“)/,/^(?:'[^\']*')/,/^(?:‘[^\‘]*‘)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:[$]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:[ \t\r\n\f])/,/^(?:.)/],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaXquery;
exports.Parser = GramaticaXquery.Parser;
exports.parse = function () { return GramaticaXquery.parse.apply(GramaticaXquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}