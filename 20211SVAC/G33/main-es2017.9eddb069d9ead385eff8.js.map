{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.html","./src/app/paginas/bnf/bnf.component.html","./src/app/paginas/grafico/grafico.component.html","./src/app/paginas/principal/home.component.html","./src/app/paginas/tabla-errores/tabla-errores.component.html","./src/app/paginas/tabla-xml/tabla-xml.component.html","./src/app/paginas/tabla-xquery/tabla-xquery.component.html","./src/analizadorXML/AST/CST.ts","./src/analizadorXML/AST/Entorno.ts","./src/analizadorXML/AST/GramaticaBNF.ts","./src/analizadorXML/AST/SalidaGramatica.ts","./src/analizadorXML/AST/TablaSimbolos.ts","./src/analizadorXML/Codigo3D/xml3D.ts","./src/analizadorXML/Errores/ListaErrores.ts","./src/analizadorXML/Expresiones/Atributo.ts","./src/analizadorXML/Expresiones/Objeto.ts","./src/analizadorXML/Expresiones/tError.ts","./src/analizadorXML/Gramatica/gramatica.js","./src/analizadorXML/Gramatica/gramaticaDesc.js","./src/analizadorXML/Instrucciones/Busqueda/xpathBusqueda.ts","./src/analizadorXML/index.ts","./src/analizadorXML/indexDesc.ts","./src/analizadorXQUERY/Arbol/Ejecucion.ts","./src/analizadorXQUERY/Arbol/GramaticaBNF.ts","./src/analizadorXQUERY/Arbol/Nodo.ts","./src/analizadorXQUERY/Arbol/NodoAST.ts","./src/analizadorXQUERY/Arbol/NodoCST.ts","./src/analizadorXQUERY/Expresiones/Aritmetica.ts","./src/analizadorXQUERY/Expresiones/Logico.ts","./src/analizadorXQUERY/Expresiones/NodoX.ts","./src/analizadorXQUERY/Expresiones/Primitivo.ts","./src/analizadorXQUERY/Expresiones/Relacional.ts","./src/analizadorXQUERY/Expresiones/Substring.ts","./src/analizadorXQUERY/Expresiones/ToLower.ts","./src/analizadorXQUERY/Expresiones/ToNumber.ts","./src/analizadorXQUERY/Expresiones/ToString.ts","./src/analizadorXQUERY/Expresiones/identificador.ts","./src/analizadorXQUERY/Expresiones/uppercase.ts","./src/analizadorXQUERY/GramaticaXquery.js","./src/analizadorXQUERY/Instrucciones/Declaracion.ts","./src/analizadorXQUERY/Instrucciones/DeclaracionMetodo.ts","./src/analizadorXQUERY/Instrucciones/If.ts","./src/analizadorXQUERY/Instrucciones/LlamadaMetodo.ts","./src/analizadorXQUERY/Instrucciones/Print.ts","./src/analizadorXQUERY/Instrucciones/Retorno.ts","./src/analizadorXQUERY/Simbolos/Simbolo.ts","./src/analizadorXQUERY/Simbolos/Table.ts","./src/analizadorXQUERY/Simbolos/Tree.ts","./src/analizadorXQUERY/Varios/Error.ts","./src/analizadorXQUERY/Varios/Exepciones.ts","./src/analizadorXQUERY/Varios/Graficar.ts","./src/analizadorXQUERY/Varios/Tipo.ts","./src/analizadorXQUERY/index.ts","./src/analizadores/AST/Arbol.ts","./src/analizadores/AST/GramaticaBNF.ts","./src/analizadores/AST/SalidaGramatica.ts","./src/analizadores/Errores/ListaErrores.ts","./src/analizadores/Expresiones/Nodo.ts","./src/analizadores/Expresiones/Predicate.ts","./src/analizadores/Expresiones/Primitivo.ts","./src/analizadores/Expresiones/tError.ts","./src/analizadores/Operaciones/Aritmeticas.ts","./src/analizadores/Operaciones/Logica.ts","./src/analizadores/Operaciones/Relacional.ts","./src/analizadores/index.ts","./src/analizadores/indexDesc.ts","./src/analizadores/xpathAsc.js","./src/analizadores/xpathDesc.js","./src/app/app-routing.module.ts","./src/app/app.component.css","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/paginas/bnf/bnf.component.css","./src/app/paginas/bnf/bnf.component.ts","./src/app/paginas/grafico/grafico.component.css","./src/app/paginas/grafico/grafico.component.ts","./src/app/paginas/principal/home.component.css","./src/app/paginas/principal/home.component.ts","./src/app/paginas/tabla-errores/tabla-errores.component.css","./src/app/paginas/tabla-errores/tabla-errores.component.ts","./src/app/paginas/tabla-xml/tabla-xml.component.css","./src/app/paginas/tabla-xml/tabla-xml.component.ts","./src/app/paginas/tabla-xquery/tabla-xquery.component.css","./src/app/paginas/tabla-xquery/tabla-xquery.component.ts","./src/app/reporte.service.ts","./src/environments/environment.ts","./src/main.ts","webpack:///fs (ignored)?18df","webpack:///path (ignored)?420a","fs (ignored)","path (ignored)","webpack:///fs (ignored)?251e","webpack:///path (ignored)?1972"],"names":[],"mappings":"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CA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+DAA+D;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,qCAAqC;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gEAAgE;AAChE,4BAA4B;AAC5B;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,WAAW,OAAO,GAAG,mBAAO,CAAC,wEAAuB;AACpD,WAAW,SAAS,GAAG,mBAAO,CAAC,4EAAyB;AACxD,WAAW,gBAAgB,GAAG,mBAAO,CAAC,0EAAwB;AAC9D,WAAW,OAAO,GAAG,mBAAO,CAAC,wEAAuB;AACpD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iCAAiC;AACjC,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL,qDAAqD;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL,UAAU,wBAAwB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,WAAW;AAChF;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD,+EAA+E,aAAa,cAAc,eAAe,eAAe,uRAAuR,sDAAsD,WAAW;AAChe,aAAa,WAAW,iKAAiK,YAAY;AACrM,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,CAAC;;;AAGD,IAAI,IAAgE;AACpE;AACA;AACA,6BAA6B,oDAAoD;AACjF;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,WAAI,eAAe,mBAAO,CAAC,aAAM;AAC1D;AACA;AACA,IAAI,KAA6B,IAAI,4CAAY;AACjD;AACA;AACA,C;;;;;;;;;;;;ACt8BA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA,eAAe,kCAAkC;AACjD,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mJAAmJ;AACnJ,SAAS;;AAET;AACA;AACA,qBAAqB,+BAA+B;AACpD;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,WAAW,YAAY,IAAI,WAAW,SAAS;AACvE,cAAc,0BAA0B,EAAE;AAC1C,MAAM;AACN,WAAW,ipBAAipB;AAC5pB,aAAa,4cAA4c;AACzd;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4D;AACA,8B;;AAEA;AACA;;AAEA,2EAA2E,OAAO;;AAElF;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;;AAEA;AACA;;AAEA;AACA,8CAA8C,oDAAoD;AAClG,sBAAsB;;AAEtB;AACA;;AAEA;AACA,0CAA0C,wDAAwD;AAClG,sBAAsB;;AAEtB;AACA;;AAEA;AACA;AACA;AACA;AACA,0DAA0D,uEAAuE;AACjI,kCAAkC;AAClC,qBAAqB;AACrB,yFAAyF,kBAAkB,oEAAoE;AAC/K;AACA,kCAAkC;AAClC;AACA,iBAAiB,4B;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4B;;AAEA;AACA;;AAEA;AACA;AACA,4B;;AAEA;AACA;;AAEA;AACA;AACA,4B;;AAEA;AACA;;AAEA;AACA;AACA,4B;;AAEA;AACA;;AAEA;AACA;AACA,4B;;AAEA;AACA;;AAEA;AACA;AACA,4B;;AAEA;AACA;;AAEA;AACA;AACA,4B;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD,SAAS,wBAAwB,EAAE,MAAM,EAAE,qBAAqB,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,sBAAsB,EAAE,aAAa,EAAE,SAAS,eAAe,QAAQ,EAAE,QAAQ,yBAAyB,mBAAmB,GAAG,UAAU,EAAE,mCAAmC,YAAY,mBAAmB,GAAG,UAAU,EAAE,UAAU,eAAe,gPAAgP,EAAE,UAAU,EAAE,UAAU,gBAAgB,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,gPAAgP,ofAAof,UAAU,EAAE,gCAAgC,EAAE,SAAS,EAAE,UAAU,eAAe,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,gCAAgC,gBAAgB,SAAS,8BAA8B,UAAU;AACrmD,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+DAA+D;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,qCAAqC;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gEAAgE;AAChE,4BAA4B;AAC5B;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,WAAW,OAAO,GAAG,mBAAO,CAAC,wEAAuB;AACpD,WAAW,SAAS,GAAG,mBAAO,CAAC,4EAAyB;AACxD,WAAW,gBAAgB,GAAG,mBAAO,CAAC,0EAAwB;AAC9D,WAAW,OAAO,GAAG,mBAAO,CAAC,wEAAuB;;AAEpD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iCAAiC;AACjC,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL,qDAAqD;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL,UAAU,wBAAwB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,WAAW;AAChF;;AAEA;AACA;AACA;AACA;AACA,CAAC;AACD,+EAA+E,aAAa,cAAc,eAAe,eAAe,uRAAuR,sDAAsD,WAAW;AAChe,aAAa,WAAW,iKAAiK,YAAY;AACrM,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,CAAC;;;AAGD,IAAI,IAAgE;AACpE;AACA;AACA,6BAA6B,4DAA4D;AACzF;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,WAAI,eAAe,mBAAO,CAAC,aAAM;AAC1D;AACA;AACA,IAAI,KAA6B,IAAI,4CAAY;AACjD;AACA;AACA,C;;;;;;;;;;;;;ACnoCA;AAAA;AAAO,MAAM,aAAa;IAKtB;QAHO,kBAAa,GAAQ,EAAE,CAAC;QACxB,gBAAW,GAAQ,EAAE,CAAC;IAG7B,CAAC;IAED,iBAAiB,CAAC,MAAW,EAAE,KAAU,EAAE,OAAY;QACnD,IAAI,MAAW,CAAC;QAChB,oCAAoC;QACpC,IAAI,MAAM,KAAK,GAAG,EAAE;YAChB,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;SAChD;QACD,SAAS;QACT,IAAI,MAAM,KAAK,GAAG,EAAE;YAChB,MAAM,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;SACj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ACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,mgC;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,gaAAa;AACb;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,qDAAqD,G;AACrD;;AAEA;AACA;;AAEA;AACA,qDAAqD,G;AACrD;;AAEA;AACA;;AAEA;AACA,qDAAqD,G;AACrD;;AAEA;AACA;;AAEA;AACA,qDAAqD,G;AACrD;;AAEA;AACA;;AAEA;AACA,qDAAqD,G;AACrD;;AAEA;AACA;;AAEA;AACA,qDAAqD,G;AACrD;;AAEA;AACA;;AAEA;AACA,4CAA4C,G;AAC5C;;AAEA;AACA;;AAEA;AACA,+C;AACA;;AAEA;AACA;;AAEA;AACA,qDAAqD,2EAA2E,+C;AAChI;AACA,wE;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iF;AACA,sBAAsB;;AAEtB;AACA;;AAEA;AACA,yE;AACA,sBAAsB;;AAEtB;AACA;;AAEA;AACA,wE;AACA,sBAAsB;;AAEtB;AACA;;AAEA;AACA,wE;AACA,sBAAsB;;AAEtB;AACA;;AAEA;AACA;AACA,sBAAsB,wB;;AAEtB;AACA;;AAEA;AACA;AACA,sBAAsB,sB;;AAEtB;AACA;;AAEA;AACA,iE;AACA,4B;;AAEA;AACA;;AAEA;AACA,gD;AACA;;AAEA;AACA;;AAEA;AACA,wD;AACA;;AAEA;AACA;;AAEA;AACA,qD;AACA;;AAEA;AACA;AACA,CAAC;AACD,SAAS,gHAAgH,EAAE,MAAM,EAAE,kHAAkH,sFAAsF,mBAAmB,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,gBAAgB,yFAAyF,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,6BAA6B,UAAU,iBAAiB,UAAU,EAAE,eAAe,EAAE,yFAAyF,EAAE,UAAU,eAAe,2FAA2F,2DAA2D,yFAAyF,EAAE,UAAU,gBAAgB,UAAU,EAAE,UAAU,EAAE,oJAAoJ,EAAE,oJAAoJ,EAAE,oJAAoJ,EAAE,aAAa,EAAE,yFAAyF,EAAE,UAAU,EAAE,SAAS,EAAE,qGAAqG,EAAE,UAAU,EAAE,yFAAyF,EAAE,yFAAyF,EAAE,yFAAyF,EAAE,yFAAyF,EAAE,yFAAyF,EAAE,yFAAyF,EAAE,yFAAyF,EAAE,yFAAyF,EAAE,yFAAyF,EAAE,yFAAyF,EAAE,yFAAyF,EAAE,yFAAyF,EAAE,yFAAyF,EAAE,qGAAqG,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,6BAA6B,2FAA2F,gBAAgB,UAAU,iBAAiB,cAAc,YAAY,qBAAqB,GAAG,4DAA4D,YAAY,qBAAqB,GAAG,WAAW,EAAE,WAAW,EAAE,WAAW,6BAA6B,2FAA2F,GAAG,WAAW,EAAE,WAAW,EAAE,6DAA6D,2CAA2C,cAAc,4DAA4D,oFAAoF,gBAAgB,cAAc,gBAAgB,4BAA4B,gBAAgB,4BAA4B,gBAAgB,4BAA4B,gBAAgB,4BAA4B,gBAAgB,wDAAwD,gBAAgB,wDAAwD,+DAA+D,6EAA6E,kEAAkE,sEAAsE,iBAAiB,WAAW,EAAE,qJAAqJ,EAAE,qJAAqJ,gBAAgB,0CAA0C,EAAE,mCAAmC,eAAe,WAAW,iBAAiB,iDAAiD,YAAY,qBAAqB,GAAG,iDAAiD,eAAe,WAAW,6CAA6C,WAAW,EAAE,wCAAwC,gBAAgB,WAAW,gBAAgB,qJAAqJ,EAAE,WAAW,EAAE,0FAA0F,EAAE,sBAAsB,gBAAgB,iGAAiG,EAAE,WAAW,EAAE,WAAW,0BAA0B,qBAAqB,2BAA2B,qBAAqB,2BAA2B,qBAAqB,iBAAiB,WAAW,4CAA4C,WAAW,YAAY,qBAAqB,GAAG,sBAAsB,EAAE,qBAAqB,eAAe,sGAAsG,iBAAiB,sDAAsD,EAAE,sBAAsB,eAAe,2FAA2F,uFAAuF,WAAW,8BAA8B,qJAAqJ,EAAE,sBAAsB,eAAe,WAAW,EAAE,wGAAwG,8BAA8B,0FAA0F,gBAAgB,WAAW,EAAE,WAAW,EAAE,cAAc,EAAE,WAAW,eAAe,2FAA2F,8BAA8B,2FAA2F,iBAAiB,WAAW,eAAe,WAAW,EAAE,WAAW,EAAE,0CAA0C,EAAE,0CAA0C,YAAY,cAAc,wEAAwE,qBAAqB,mCAAmC,WAAW,EAAE,8GAA8G,EAAE,oHAAoH,EAAE,WAAW;AACpgP,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,OAAO,GAAG,mBAAO,CAAC,gEAAiB;AAC9C,WAAW,wBAAwB,GAAG,mBAAO,CAAC,4DAAe;AAC7D,WAAW,YAAY,IAAI,mBAAO,CAAC,gFAAyB;AAC5D,WAAW,QAAQ,GAAG,mBAAO,CAAC,8DAAgB;AAC9C,WAAW,gBAAgB,GAAG,mBAAO,CAAC,wFAA6B;AACnE,aAAa,OAAO;AACpB,aAAa,MAAM;AACnB;AACA,WAAW,MAAM,GAAG,mBAAO,CAAC,4EAAuB;AACnD,WAAW,YAAY,GAAG,mBAAO,CAAC,wFAA6B;AAC/D,eAAe,iBAAiB;AAChC,aAAa,iBAAiB;AAC9B,aAAa,WAAW;AACxB,aAAa,iBAAiB;AAC9B,aAAa,gBAAgB;AAC7B,aAAa,SAAS;;AAEtB,WAAW,OAAO;AAClB,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB,WAAW,IAAI;AACf,WAAW,kBAAkB;AAC7B,WAAW,cAAc;AACzB,WAAW,SAAS;AACpB,WAAW,MAAM;AACjB,WAAW,QAAQ;AACnB;AACA,WAAW,oBAAoB,GAAG,mBAAO,CAAC,oGAAmC;AAC7E,WAAW,gBAAgB,GAAG,mBAAO,CAAC,4FAA+B;AACrE,WAAW,KAAK,GAAG,mBAAO,CAAC,sEAAoB;AAC/C,WAAW,UAAU,GAAG,mBAAO,CAAC,gFAAyB;AACzD,WAAW,aAAa,GAAG,mBAAO,CAAC,kFAA0B;AAC7D,WAAW,aAAa,GAAG,mBAAO,CAAC,kFAA0B;AAC7D,WAAW,SAAS,GAAG,mBAAO,CAAC,0EAAsB;AACrD,WAAW,QAAQ,GAAG,mBAAO,CAAC,wEAAqB;AACnD,WAAW,iBAAiB,GAAG,mBAAO,CAAC,oEAAmB;;AAE1D,WAAW,QAAQ,GAAG,mBAAO,CAAC,gFAAyB;AACvD,WAAW,QAAQ,GAAG,mBAAO,CAAC,4EAAuB;AACrD,WAAW,SAAS,GAAG,mBAAO,CAAC,8EAAwB;AACvD,WAAW,WAAW,GAAG,mBAAO,CAAC,gFAAyB;AAC1D,UAAU,SAAS,GAAG,mBAAO,CAAC,8EAAwB;;AAEtD,aAAa,OAAO;AACpB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,YAAY,yCAAyC;AAChE,WAAW,mBAAmB,GAAG,mBAAO,CAAC,4DAAwB;AACjE,WAAW,gBAAgB,GAAG,mBAAO,CAAC,0HAAuD;AAC7F,WAAW,QAAQ,GAAG,mBAAO,CAAC,8EAAiC;AAC/D;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iCAAiC;AACjC,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL,qDAAqD;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD,u7BAAu7B,6KAA6K,UAAU;AAC9mC,aAAa,WAAW,wSAAwS,YAAY;AAC5U,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,CAAC;;;AAGD,IAAI,IAAgE;AACpE;AACA;AACA,6BAA6B,gEAAgE;AAC7F;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,WAAI,eAAe,mBAAO,CAAC,aAAM;AAC1D;AACA;AACA,IAAI,KAA6B,IAAI,4CAAY;AACjD;AACA;AACA,C;;;;;;;;;;;;;AC/7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoC;AAGI;AACe;AACT;AACO;AACV;AACA;AAEpC,SAAS,KAAK,CAAC,IAAU,EAAE,IAAY,EAAE,MAAc;IAC1D,IAAI,IAAI,CAAC,IAAI,IAAI,kDAAK,CAAC,MAAM,EAAE;QAC3B,OAAO,IAAI,gEAAS,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;KAC/C;SAAM,IAAI,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CA;AACA;;AAEA;AACA;;AAEA;AACA,4CAA4C,kEAAkE,sC;AAC9G;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4CAA4C,kEAAkE,sC;AAC9G;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4CAA4C,kEAAkE,sC;AAC9G;AACA;AACA;;AAEA;AACA;;AAEA;AACA,4CAA4C,kEAAkE,sC;AAC9G;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kD;AACA;;AAEA;AACA;;AAEA;AACA,mD;AACA;;AAEA;AACA;;AAEA,2EAA2E,OAAO;;AAElF;AACA;;AAEA;AACA,qDAAqD,2EAA2E,+C;AAChI;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,iF;AACA,sBAAsB;;AAEtB;AACA;;AAEA;AACA,yE;AACA,sBAAsB;;AAEtB;AACA;;AAEA;AACA,wE;AACA,sBAAsB;;AAEtB;AACA;;AAEA;AACA,wE;AACA,sBAAsB,wC;;AAEtB;AACA;;AAEA;AACA,4D;AACA,sBAAsB;;AAEtB;AACA;;AAEA;AACA;AACA,sBAAsB,wB;;AAEtB;AACA;;AAEA;AACA;AACA,sBAAsB,sB;;AAEtB;AACA;;AAEA;AACA,iE;AACA,4B;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,0B;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,oDAAoD,OAAO;;AAE3D;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gD;AACA,4B;;AAEA;AACA;;AAEA;AACA,wD;AACA;AACA;AACA;;AAEA;AACA,qD;AACA;;AAEA;AACA;AACA,CAAC;AACD,SAAS,8CAA8C,EAAE,MAAM,EAAE,iBAAiB,eAAe,kBAAkB,YAAY,aAAa,GAAG,kJAAkJ,YAAY,aAAa,GAAG,UAAU,EAAE,QAAQ,EAAE,uCAAuC,EAAE,4HAA4H,eAAe,UAAU,GAAG,UAAU,YAAY,wBAAwB,GAAG,8DAA8D,YAAY,wBAAwB,GAAG,wIAAwI,eAAe,SAAS,2BAA2B,aAAa,aAAa,aAAa,GAAG,UAAU,EAAE,2BAA2B,gBAAgB,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,YAAY,wBAAwB,GAAG,UAAU,yBAAyB,wBAAwB,4CAA4C,wIAAwI,EAAE,qGAAqG,8BAA8B,2BAA2B,gBAAgB,UAAU,EAAE,UAAU,gBAAgB,8DAA8D,yBAAyB,wBAAwB,6CAA6C,UAAU,4CAA4C,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,yBAAyB,cAAc,0BAA0B,yBAAyB,iBAAiB,+DAA+D,EAAE,+DAA+D,EAAE,+DAA+D,EAAE,+DAA+D,EAAE,+DAA+D,EAAE,+DAA+D,EAAE,+DAA+D,EAAE,+DAA+D,EAAE,+DAA+D,EAAE,+DAA+D,EAAE,+DAA+D,EAAE,+DAA+D,EAAE,+DAA+D,gBAAgB,WAAW,EAAE,WAAW,EAAE,sGAAsG,yBAAyB,cAAc,GAAG,WAAW,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,EAAE,mCAAmC,YAAY,yBAAyB,0DAA0D,cAAc,gBAAgB,cAAc,uBAAuB,oFAAoF,gBAAgB,4BAA4B,gBAAgB,4BAA4B,gBAAgB,4BAA4B,gBAAgB,4BAA4B,gBAAgB,wDAAwD,gBAAgB,wDAAwD,0BAA0B,6EAA6E,6BAA6B,sEAAsE,iGAAiG,cAAc,GAAG,WAAW,YAAY,cAAc,GAAG,WAAW,uLAAuL,WAAW,gBAAgB,WAAW,YAAY,cAAc;AAC5oJ,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+DAA+D;AAC/D;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA,qCAAqC;AACrC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,gEAAgE;AAChE,4BAA4B;AAC5B;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4DAA4D;AAC5D;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,WAAW,kBAAkB,GAAG,mBAAO,CAAC,wEAAuB;AAC/D,WAAW,OAAO,GAAG,mBAAO,CAAC,kEAAoB;AACjD,sBAAsB,mBAAO,CAAC,4EAAyB;AACvD,uBAAuB,mBAAO,CAAC,gFAA2B;AAC1D,uBAAuB,mBAAO,CAAC,8EAA0B;AACzD,mBAAmB,mBAAO,CAAC,sEAAsB,E;AACjD,WAAW,YAAY,GAAG,mBAAO,CAAC,4EAAyB;AAC3D,aAAa,WAAW;AACxB,WAAW,SAAS,GAAG,mBAAO,CAAC,sEAAsB;;AAErD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iCAAiC;AACjC,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL,qDAAqD;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,WAAW;;AAE5E;AACA;AACA,CAAC;AACD;AACA,aAAa,WAAW;AACxB,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,CAAC;;;AAGD,IAAI,IAAgE;AACpE;AACA;AACA,6BAA6B,kDAAkD;AAC/E;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,WAAI,eAAe,mBAAO,CAAC,aAAM;AAC1D;AACA;AACA,IAAI,KAA6B,IAAI,4CAAY;AACjD;AACA;AACA,C;;;;;;;;;;;;ACjoCA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;AACV;AACA,eAAe,kCAAkC;AACjD,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA,qBAAqB,IAAI;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mJAAmJ;AACnJ,SAAS;;AAET;AACA;AACA,qBAAqB,+BAA+B;AACpD;AACA;;;AAGA;AACA;AACA;AACA;AACA;A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A,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAW,kBAAkB,GAAG,mBAAO,CAAC,wEAAuB;AAC/D,WAAW,OAAO,GAAG,mBAAO,CAAC,kEAAoB;AACjD,sBAAsB,mBAAO,CAAC,4EAAyB;AACvD,uBAAuB,mBAAO,CAAC,gFAA2B;AAC1D,uBAAuB,mBAAO,CAAC,8EAA0B;AACzD,mBAAmB,mBAAO,CAAC,sEAAsB,E;AACjD,WAAW,YAAY,GAAG,mBAAO,CAAC,4EAAyB;AAC3D,aAAa,WAAW;AACxB,WAAW,SAAS,GAAG,mBAAO,CAAC,sEAAsB;;AAErD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,iCAAiC;AACjC,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL,qDAAqD;AACrD;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;AACL,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,WAAW;;AAE5E;AACA;AACA,CAAC;AACD;AACA,aAAa,WAAW;AACxB,CAAC;AACD;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA,CAAC;;;AAGD,IAAI,IAAgE;AACpE;AACA;AACA,6BAA6B,oDAAoD;AACjF;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAO,CAAC,WAAI,eAAe,mBAAO,CAAC,aAAM;AAC1D;AACA;AACA,IAAI,KAA6B,IAAI,4CAAY;AACjD;AACA;AACA,C;;;;;;;;;;;;;;;;;;;;;;;ACliCyC;AACc;AAEqB;AAET;AACI;AACZ;AAE3D,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE;IACrD,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,+EAAa,EAAE;IAC1C,EAAE,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAE,wFAAiB,EAAE;IAC1D,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,mFAAgB,EAAC;IAC/C,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,uEAAY,EAAC;CACxC,CAAC;AAMF,IAAa,gBAAgB,GAA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","file":"main-es2017.9eddb069d9ead385eff8.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export default \"<router-outlet></router-outlet>\";","export default \"<table mat-table [dataSource]=\\\"simbolos\\\" class=\\\"mat-elevation-z8\\\">\\n\\n    <!--- Note that these columns can be defined in any order.\\n    The actual rendered columns are set as a property on the row definition\\\" -->\\n    <!-- Position Column -->\\n    <ng-container matColumnDef=\\\"no\\\">\\n      <th mat-header-cell *matHeaderCellDef> No. </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.no}} </td>\\n    </ng-container>\\n\\n    <!-- Name Column -->\\n    <ng-container matColumnDef=\\\"produccion\\\">\\n      <th mat-header-cell *matHeaderCellDef> Produccion </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.produccion}} </td>\\n    </ng-container>\\n\\n    <!-- Weight Column -->\\n    <ng-container matColumnDef=\\\"accion\\\">\\n      <th mat-header-cell *matHeaderCellDef> Accion </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.accion}} </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\";","export default \"<div id = \\\"vis\\\"></div>\";","export default \"<div id = \\\"barra\\\">\\n  <mat-toolbar color = \\\"warn\\\">\\n    <span>Tytus X</span>\\n\\n    <div class = \\\"spacer\\\"></div>\\n\\n    <button mat-raised-button color = \\\"accent\\\" [matMenuTriggerFor] = \\\"archivo\\\">Archivo</button>\\n    <mat-menu #archivo = \\\"matMenu\\\">\\n        <button mat-menu-item>\\n            <mat-icon>attach_file</mat-icon>\\n            <label for = \\\"file\\\">Abrir XML</label>\\n            <input type = \\\"file\\\"\\n            id = \\\"file\\\"\\n            class = \\\"hidend\\\"\\n            (change) = \\\"abrirXML($event.target.files)\\\">\\n        </button>\\n        <button mat-menu-item>\\n            <mat-icon>attach_file</mat-icon>\\n            <span>Abrir XPath</span>\\n        </button>\\n        <button mat-menu-item>\\n            <mat-icon>delete</mat-icon>\\n            <span>Limpiar</span>\\n        </button>\\n    </mat-menu>\\n\\n    <button mat-raised-button color = \\\"accent\\\" [matMenuTriggerFor] = \\\"ejecutar\\\">Ejecutar</button>\\n    <mat-menu #ejecutar = \\\"matMenu\\\">\\n        <button mat-menu-item (click) = \\\"ejecutarAscendente()\\\">\\n            <mat-icon>keyboard_arrow_up</mat-icon>\\n            <span>Ascendete XPATH</span>\\n        </button>\\n        <button mat-menu-item (click) = \\\"ejecutarDescendente()\\\"> \\n            <mat-icon>keyboard_arrow_down</mat-icon>\\n            <span>Descendente XPATH</span>\\n        </button>\\n        <button mat-menu-item (click) = \\\"ejecutarXquery()\\\"> \\n          <mat-icon>keyboard_arrow_up</mat-icon>\\n          <span>Ascendete XQUERY</span>\\n        </button>\\n    </mat-menu>\\n\\n    <button mat-raised-button color = \\\"accent\\\" [matMenuTriggerFor] = \\\"reporte\\\">Reportes</button>\\n    <mat-menu #reporte = \\\"matMenu\\\">\\n        <button mat-menu-item (click) = \\\"reporteTablaSimbolosXML()\\\">\\n            <span>Tabla de simbolos XML</span>\\n        </button>\\n        <button mat-menu-item (click) = \\\"reporteCSTXML()\\\">\\n          <span>CST XML</span>\\n        </button>\\n        <button mat-menu-item (click) = \\\"reporteASTXPATH()\\\">\\n          <span>AST XPATH</span>\\n        </button>\\n        <button mat-menu-item (click) = \\\"reporteCSTXPATH()\\\">\\n          <span>CST XPATH</span>\\n        </button>\\n        <button mat-menu-item (click) = \\\"reporteBNFXML()\\\">\\n          <span>BNF XML</span>\\n        </button>  \\n        <button mat-menu-item (click) = \\\"reporteBNFXPATH()\\\">\\n          <span>BNF XPATH</span>\\n        </button>\\n        <button mat-menu-item (click) = \\\"reporteErroresXPATH()\\\">\\n          <span>Errores XPATH</span>\\n        </button>\\n        <button mat-menu-item (click) = \\\"reporteErroresXML()\\\">\\n          <span>Errores XML</span>\\n        </button>\\n        <button mat-menu-item (click) = \\\"reporteCSTXQUERY()\\\">\\n          <span>CST XQUERY</span>\\n        </button>\\n        <button mat-menu-item (click) = \\\"reporteASTXQUERY()\\\">\\n          <span>AST XQUERY</span>\\n        </button>\\n        <button mat-menu-item (click) = \\\"reporteBNFXQUERY()\\\">\\n          <span>BNF XQUERY</span>\\n        </button>\\n        <button mat-menu-item (click) = \\\"reporteTablaXQUERY()\\\">\\n          <span>Tabla XQUERY</span>\\n        </button>\\n      </mat-menu>\\n</mat-toolbar>\\n</div>\\n\\n<div id = \\\"superior\\\">\\n  <ngx-codemirror\\n    [options] = \\\"editorQueryOptions\\\"\\n    [(ngModel)] = \\\"querys\\\">\\n  </ngx-codemirror>\\n</div>\\n\\n<div id = \\\"separador1\\\"></div>\\n\\n<div id = \\\"inferior\\\">\\n  <div id = \\\"izquierda\\\">\\n    <ngx-codemirror\\n      [options] = \\\"editorXMLEntradaOptions\\\"\\n      [(ngModel)] = \\\"xmlEntrada\\\">\\n    </ngx-codemirror>\\n  </div>\\n  <div id = \\\"separador2\\\"></div>\\n  <div id = \\\"derecha\\\">\\n    <div id = \\\"superior2\\\">\\n      <ngx-codemirror\\n      [options] = \\\"editorXMLSalidaOptions\\\"\\n      [(ngModel)] = \\\"xmlSalida\\\">\\n    </ngx-codemirror>\\n    </div>\\n    <div id = \\\"separador3\\\"></div>\\n    <div id = \\\"inferior2\\\">\\n      <ngx-codemirror\\n      [options] = \\\"editor3DSalidaOptions\\\"\\n      [(ngModel)] = \\\"salida3D\\\">\\n    </ngx-codemirror>\\n    </div>  \\n  </div> \\n</div>\\n\\n<div id = \\\"grafo\\\" *ngIf=\\\"grafo == true\\\">\\n  <app-grafico></app-grafico>\\n</div>\\n\\n<div id = \\\"tablaS\\\" *ngIf = \\\"tabla == true\\\">\\n  <app-tabla-xml></app-tabla-xml>\\n</div>\\n\\n<div id = \\\"bnf\\\" *ngIf = \\\"bnf == true\\\">\\n  <app-bnf></app-bnf>\\n</div>\\n\\n<div id = \\\"bnf\\\" *ngIf = \\\"error == true\\\">\\n  <app-tabla-errores></app-tabla-errores>\\n</div>\\n\\n<div id = \\\"tablaS2\\\" *ngIf = \\\"tabla2 == true\\\">\\n  <app-tabla-xquery></app-tabla-xquery>\\n</div>\";","export default \"<table mat-table [dataSource]=\\\"simbolos\\\" class=\\\"mat-elevation-z8\\\">\\n\\n    <!--- Note that these columns can be defined in any order.\\n    The actual rendered columns are set as a property on the row definition\\\" -->\\n    <!-- Position Column -->\\n    <ng-container matColumnDef=\\\"no\\\">\\n      <th mat-header-cell *matHeaderCellDef> No. </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.no}} </td>\\n    </ng-container>\\n\\n    <!-- Weight Column -->\\n    <ng-container matColumnDef=\\\"tipo\\\">\\n      <th mat-header-cell *matHeaderCellDef> Tipo </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.tipo}} </td>\\n    </ng-container>\\n\\n    <!-- Symbol Column -->\\n    <ng-container matColumnDef=\\\"valor\\\">\\n      <th mat-header-cell *matHeaderCellDef> Valor </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.valor}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"fila\\\">\\n        <th mat-header-cell *matHeaderCellDef> Fila </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.linea}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"columna\\\">\\n        <th mat-header-cell *matHeaderCellDef> Columna </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.columna}} </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\";","export default \"<table mat-table [dataSource]=\\\"simbolos\\\" class=\\\"mat-elevation-z8\\\">\\n\\n    <!--- Note that these columns can be defined in any order.\\n    The actual rendered columns are set as a property on the row definition\\\" -->\\n    <!-- Position Column -->\\n    <ng-container matColumnDef=\\\"no\\\">\\n      <th mat-header-cell *matHeaderCellDef> No. </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.no}} </td>\\n    </ng-container>\\n\\n    <!-- Name Column -->\\n    <ng-container matColumnDef=\\\"nombre\\\">\\n      <th mat-header-cell *matHeaderCellDef> Nombre </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.nombre}} </td>\\n    </ng-container>\\n\\n    <!-- Weight Column -->\\n    <ng-container matColumnDef=\\\"tipo\\\">\\n      <th mat-header-cell *matHeaderCellDef> Tipo </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.tipo}} </td>\\n    </ng-container>\\n\\n    <!-- Symbol Column -->\\n    <ng-container matColumnDef=\\\"valor\\\">\\n      <th mat-header-cell *matHeaderCellDef> Valor </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.valor}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"ambito\\\">\\n        <th mat-header-cell *matHeaderCellDef> Ambito </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.ambito}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"tipoEtiqueta\\\">\\n      <th mat-header-cell *matHeaderCellDef> Tipo de etiqueta </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.tipoEtiqueta}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"fila\\\">\\n        <th mat-header-cell *matHeaderCellDef> Fila </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.linea}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"columna\\\">\\n        <th mat-header-cell *matHeaderCellDef> Columna </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.columna}} </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\";","export default \"<table mat-table [dataSource]=\\\"simbolos\\\" class=\\\"mat-elevation-z8\\\">\\n\\n    <!--- Note that these columns can be defined in any order.\\n    The actual rendered columns are set as a property on the row definition\\\" -->\\n    <!-- Position Column -->\\n\\n    <!-- Name Column -->\\n    <ng-container matColumnDef=\\\"nombre\\\">\\n      <th mat-header-cell *matHeaderCellDef> Nombre </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.id}} </td>\\n    </ng-container>\\n\\n    <!-- Weight Column -->\\n    <ng-container matColumnDef=\\\"tipo\\\">\\n      <th mat-header-cell *matHeaderCellDef> Tipo </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.tipo.tipo}} </td>\\n    </ng-container>\\n\\n    <!-- Symbol Column -->\\n    <ng-container matColumnDef=\\\"valor\\\">\\n      <th mat-header-cell *matHeaderCellDef> Tipo </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.tipo2.tipo}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"fila\\\">\\n        <th mat-header-cell *matHeaderCellDef> Fila </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.line}} </td>\\n    </ng-container>\\n\\n    <ng-container matColumnDef=\\\"columna\\\">\\n        <th mat-header-cell *matHeaderCellDef> Columna </th>\\n        <td mat-cell *matCellDef=\\\"let element\\\"> {{element.column}} </td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n</table>\";","import { Atributo } from './../Expresiones/Atributo';\nimport { Objeto } from './../Expresiones/Objeto';\n\nexport class CST {\n\n    cuerpoDot: string = '';\n    public objetos: any;\n\n    constructor(objetos: any) {\n        this.objetos = objetos;\n    }\n\n    generarArbolCST(objetos: any): string {\n        var num;\n        this.cuerpoDot = 'digraph D { \\n ';\n        objetos.forEach((object: any) => {\n            num = `${object.linea.toString()}_${object.columna.toString()}`;\n            this.cuerpoDot += this.generarNodoObjeto(object, num, null);\n            num = num + 1000;\n        });\n        this.cuerpoDot += '} \\n ';\n        return this.cuerpoDot;\n    }\n\n    generarNodoObjeto(objeto: any, pos: any, padre: any): string {\n        let id:string =  objeto.identificador;\n        id = id.replace(/\\'/gi, \"\")\n        id = id.replace(/\\\"/gi, \"\")\n        var nodo = `nodo${pos} [label = \n        \\\"ETIQUETA\n${id}\\\" ]\\n`;\n        if (padre !== null) {\n            nodo += `nodo${padre} -> nodo${pos}\\n`;\n        }\n        if (objeto.texto !== '') {\n            let texto =  objeto.texto;\n            texto = texto.replace(/\\'/gi, \"\")\n            texto = texto.replace(/\\\"/gi, \"\")\n            nodo += `nodo${pos}_t [label =\\\"${texto}\\\" ]\\n`;\n            nodo += `nodo${pos} -> nodo${pos}_t [label=\\\"txt\\\"]\\n`;\n        }\n\n        objeto.listaAtributos.forEach((atribute: any) => {\n            var num = `${atribute.linea.toString()}_${atribute.columna.toString()}`;\n            nodo += this.generarNodoAtributo(atribute, num, pos);\n        });\n        objeto.listaObjetos.forEach((obj: any) => {\n            var num = `${obj.linea.toString()}_${obj.columna.toString()}`;\n            nodo += this.generarNodoObjeto(obj, num, pos);\n        });\n\n        return nodo;\n    }\n\n    generarNodoAtributo(objeto: any, pos: any, padre: any): string {\n        let id =  objeto.identificador;\n        id = id.replace(/\\'/gi, \"\")\n        id = id.replace(/\\\"/gi, \"\")\n        let valor =  objeto.valor;\n        valor = valor.replace(/\\'/gi, \"\")\n        valor = valor.replace(/\\\"/gi, \"\")\n        var nodo = `nodo${pos} [label =\n        \\\"ATRIBUTO\n${id}\\\"]\\n`\n        nodo += `nodo${padre} -> nodo${pos}\\n`;\n        nodo += `nodo${pos}_a [label=${valor}]\\n`;\n        nodo += `nodo${pos} -> nodo${pos}_a [label=\\\"valor\\\"]\\n`;\n        return nodo;\n    }\n}\n","import { Simbolo } from \"./Simbolo\";\n\n\nexport class Entorno{\n    private anterior:Entorno;\n    private tabla:{[id:string] : Simbolo};\n\n    constructor(anterior:any){\n        this.tabla = {};\n        this.anterior = anterior;\n    }\n\n    agregar(id:string, simbolo:Simbolo){\n        id = id.toLowerCase();\n        simbolo.indentificador = simbolo.indentificador.toLowerCase();\n        this.tabla[id] = simbolo;\n    }\n\n    eliminar(id:string):boolean{\n        id = id.toLowerCase();\n        for (let e:Entorno = this; e != null; e = e.anterior)\n        {   \n            const value = e.tabla[id]\n            if (value!==undefined)\n            {\n                delete e.tabla[id];\n                return true;\n            }\n        }\n        return false;\n    }\n\n    existe(id:string):boolean{\n        id = id.toLowerCase();\n        for (let e:Entorno = this; e != null; e = e.anterior)\n        {\n            const value = e.tabla[id]\n            if (value!==undefined)\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    existeEnActual(id:string):boolean{\n        id = id.toLowerCase();\n        if (this.tabla[id]!==undefined)\n        {\n            return true;\n        }\n        return false;\n    }\n\n    getSimbolo(id:string):any{\n        id = id.toLowerCase();\n        for (let e:Entorno = this; e != null; e = e.anterior)\n        {\n            if (e.tabla[id]!==undefined)\n            {\n                return e.tabla[id];\n            }\n        }\n        return null;\n    }\n\n    reemplazar(id:string, nuevoValor:Simbolo){\n        id = id.toLowerCase();\n        for (let e:Entorno = this; e != null; e = e.anterior)\n        {\n            const value = e.tabla[id]\n            if (value!==undefined)\n            {\n                e.tabla[id] = nuevoValor;\n            }\n        }\n    }\n\n}","interface retornoBNF {\n    no: number,\n    produccion: string\n    accion: string\n}\n\nexport class GramaticaBNF {\n\n    public reporte: any;\n    public reporte2: any;\n\n    constructor(repo: any, repo2: any) {\n        this.reporte = repo;\n        this.reporte2 = repo2;\n    }\n\n    getBNFReport(): retornoBNF[] {\n        let ret: retornoBNF[] = [];\n\n        for (let i = 0; i < this.reporte.length; i++) {\n            ret.push(this.generarBodyReporte(this.reporte[i], this.reporte2[i], i));\n        }\n\n        return ret\n    }\n\n    generarBodyReporte(object: any, object2: any, iterator: number): retornoBNF {\n        var fila: retornoBNF = {\n            no: iterator,\n            produccion: object,\n            accion: object2\n        }\n        return fila;\n    }\n\n}\n\n","\nexport class SalidaGramatica {\n\n    public objetos: any;\n    public reporteBNF: any;\n    public reporteBNF2: any;\n    public encoding: any;\n    public lErrores: any;\n\n    constructor(objetos: any, reporte: any, reporte2: any, encoding: any, lError: any) {\n        this.objetos = objetos;\n        this.reporteBNF = reporte;\n        this.reporteBNF2 = reporte2;\n        this.encoding = encoding;\n        this.lErrores = lError;\n    }\n}\n\n","import { ArrayType, ThisReceiver } from \"@angular/compiler\";\nimport { ObjectUnsubscribedError } from \"rxjs\";\nimport { Objeto } from \"../Expresiones/Objeto\";\n\ninterface elementoTabla {\n    no: number,\n    nombre: string,\n    tipo: string,\n    valor: string,\n    tipoEtiqueta: any,\n    linea: number,\n    columna: number,\n    ambito: string\n}\n\nexport class TablaSimbolos {\n    contador: number = 1;\n\n    constructor() { this.contador = 1;}\n\n    generarReporteTablaObjetos(objetos: any): elementoTabla[] {\n        var arrayCuerpo: elementoTabla[] = [];\n        objetos.forEach((object: any) => {\n            this.generarFilaObjeto(object, null, 'Etiqueta', arrayCuerpo);\n        });\n        return arrayCuerpo;\n    }\n\n    generarFilaObjeto(objeto: any, ambito: any, tipo: any, array: Array<elementoTabla>) {\n        let valor: any;\n        objeto.texto === '' ? valor = \"Etiqueta raiz\" : valor = objeto.texto;\n    \n        let ambitoElemento: any;\n        ambito === null ? ambitoElemento = \"Global\" : ambitoElemento = ambito\n\n        let tipoEti: any;\n        objeto.completa === 1 ? tipoEti = \"Doble\" : tipoEti = \"Simple\" \n\n        let fila: elementoTabla = {no: this.contador,\n            nombre: objeto.identificador,\n            tipo: tipo,\n            valor: valor,\n            tipoEtiqueta: tipoEti,\n            linea: objeto.linea,\n            columna: objeto.columna,\n            ambito: ambitoElemento\n        }\n        array.push(fila)\n\n        this.contador++;\n\n        objeto.listaAtributos.forEach((atribute: any) => {\n            this.generarFilaAtributo(atribute, objeto.identificador, 'Atributo', array);\n        });\n        objeto.listaObjetos.forEach((atribute: any) => {\n            this.generarFilaObjeto(atribute, objeto.identificador, 'Etiqueta', array);\n        });\n\n\n    }\n\n    generarFilaAtributo(objeto: any, ambito: any, tipo: any, array: Array<elementoTabla>) {\n        let fila: elementoTabla = {\n            no: this.contador,\n            nombre: objeto.identificador,\n            tipo: tipo,\n            valor: objeto.valor,\n            tipoEtiqueta: \"No aplica\",\n            linea: objeto.linea,\n            columna: objeto.columna,\n            ambito: ambito\n        }\n        array.push(fila)\n        this.contador++;\n    }\n}","//const fs = require('fs');\n\nexport class xml3D {\n\n    public salida3D = '';\n    public tmpArray: any = [];\n    public contadorSalidas = 0;\n    public contadorEtiqueta = 0;\n    public contadort4 = 0;\n    public contadort5 = 0;\n    public contadorStack = 0;\n    constructor() {\n    }\n\n    //Construccion del codigo 3D en C\n    /*\n    EJEMPLO LLAMADA:\n    const dir = new xml3D();\n    dir.getNodesByFilters(salidaG.objetos,lError.validateEtiquetas(salidaG.objetos).length,busqueda.returnListValues());\n    */\n    getNodesByFilters(objects: any, validationEt = 0, xpath: any, definiciones = null) {\n        this.salida3D += `\n#include <stdio.h>\n#include <locale.h>\n#include <stdlib.h>\\n\\n\n\nint STACK[30101999];\nint HEAP[30101999];\nint H = 0;\nint S = 0;\nint sp = 0;\nint t0 = 0;\nint t1 = 0;\nint t2 = 0;\nint t3 = 0;\nint t4 = 0;\nint t5 = 0;\nint t6 = 0;\nint t7 = 0;\n\nvoid imprimir(){\n\n    etiqueta_a:\n        if(HEAP[t2] == 160){\n            printf(\"á\");\n            goto etiqueta_exit;\n        }\n    etiqueta_e:\n        if(HEAP[t2] == 130){\n            printf(\"é\");\n            goto etiqueta_exit;\n        }\n    etiqueta_i:\n        if(HEAP[t2] == 161){\n            printf(\"í\");\n            goto etiqueta_exit;\n        }\n    etiqueta_o:\n        if(HEAP[t2] == 162){\n            printf(\"ó\");\n            goto etiqueta_exit;\n        }\n    etiqueta_u:\n        if(HEAP[t2] == 163){\n            printf(\"ú\");\n            goto etiqueta_exit;\n        }\n    etiqueta_n:\n        if(HEAP[t2] == 164 ){\n            printf(\"ñ\");\n            goto etiqueta_exit;\n        }\n    imprimir_todo:\n        printf(\"%c\",  HEAP[t2]);\n        goto etiqueta_exit;\n\n    etiqueta_exit:\n        return;\n}\n\nvoid imprimir2(){\n    etiqueta_a:\n        if(HEAP[t4] == 160){\n            printf(\"á\");\n            goto etiqueta_exit;\n        }\n    etiqueta_e:\n        if(HEAP[t4] == 130){\n            printf(\"é\");\n            goto etiqueta_exit;\n        }\n    etiqueta_i:\n        if(HEAP[t4] == 161){\n            printf(\"í\");\n            goto etiqueta_exit;\n        }\n    etiqueta_o:\n        if(HEAP[t4] == 162){\n            printf(\"ó\");\n            goto etiqueta_exit;\n        }\n    etiqueta_u:\n        if(HEAP[t4] == 163){\n            printf(\"ú\");\n            goto etiqueta_exit;\n        }\n    etiqueta_n:\n        if(HEAP[t4] == 164 ){\n            printf(\"ñ\");\n            goto etiqueta_exit;\n        }\n    etiqueta_neg:\n        if(HEAP[t4] == -1 ){\n            printf(\" \");\n            goto etiqueta_exit;\n        }\n    imprimir_todo:\n        printf(\"%c\",  HEAP[t4]);\n        goto etiqueta_exit;\n\n    etiqueta_exit:\n        return;\n}\n\nvoid imprimir3(){\n\n    etiqueta_a:\n        if(HEAP[t6] == 160){\n            printf(\"á\");\n            goto etiqueta_exit;\n        }\n    etiqueta_e:\n        if(HEAP[t6] == 130){\n            printf(\"é\");\n            goto etiqueta_exit;\n        }\n    etiqueta_i:\n        if(HEAP[t6] == 161){\n            printf(\"í\");\n            goto etiqueta_exit;\n        }\n    etiqueta_o:\n        if(HEAP[t6] == 162){\n            printf(\"ó\");\n            goto etiqueta_exit;\n        }\n    etiqueta_u:\n        if(HEAP[t6] == 163){\n            printf(\"ú\");\n            goto etiqueta_exit;\n        }\n    etiqueta_n:\n        if(HEAP[t6] == 164 ){\n            printf(\"ñ\");\n            goto etiqueta_exit;\n        }\n    imprimir_todo:\n        printf(\"%c\",  HEAP[t6]);\n        goto etiqueta_exit;\n\n    etiqueta_exit:\n        return;\n}\n\n\nvoid xml(){\n    ${this.salida3D += this.create3dC(this.initSearchMethod(objects))}\n    \\n\n    // ---------------------------------------- INICIO CODIGO PARA IMPRIMIR LOS VALORES XML\n    sp = t1 - 1;\n    int t4 = 0;\n    \n    printf(\"VALORES XML:%c\",10);\n\n    etiqueta_for:\n        //printf(\"%d\",HEAP[t4]);\n        if( HEAP[t4] == -1 ){\n            printf(\"%c\", 10);            \n            goto etiqueta_for2;\n        }\n        goto etiqueta_imp;\n    etiqueta_for2:\n        t4 = t4 + 1;\n        if (t4 >= sp ) {\n            goto etiqueta_salida;\n        }\n        goto etiqueta_for;\n\n    etiqueta_imp:\n        if( HEAP[t4] == 152 ){\n            goto etiqueta_for2;\n        }\n    etiqueta_imp1:\n        if( HEAP[t4] == 153 ){\n            goto etiqueta_for2;\n        }\n    etiqueta_imp2:\n        if( HEAP[t4] == 154 ){\n            goto etiqueta_for2;\n        }\n    etiqueta_imp3:\n        t2 = t4;\n        imprimir();\n        goto etiqueta_for2;\n    // ---------------------------------------- FIN CODIGO PARA IMPRIMIR LOS VALORES\n\n    etiqueta_salida:\n        printf(\"Final Valores XML%c\",10);\n\n    return;\n}\n\n${this.getXpath3D(xpath)}\n\n${this.crear3DDecla(definiciones)}\n\n\\n\\n`\n\n\n        this.salida3D += `int main() {\n    setlocale(LC_ALL,\"\");\n    int ID_0 = 0;\n    ID_0 = ${validationEt};\n\n    if(ID_0 == 0){\n        xml();\n        goto impresion_xpath;\n    }\n    printf(\"Existe un error en las etiquetas\");\n    goto etiqueta_final;\n\n    impresion_xpath:\n        xpath();\n\n    manejo_declaraciones:\n        declaraciones();\n\n    etiqueta_final:    \n        return 0;`;\n        this.salida3D += `\\n}`;\n\n        //Crear archivo 3d .c\n       // fs.appendFile('codigo3D.c', this.salida3D, (error: any) => {\n         //   if (error) {\n           //     throw error;\n            //}\n        //});\n        return this.salida3D;\n    }\n\n    //Recorrer objetos obtenidos del analisis, para crear lista de 1d\n    initSearchMethod(objects: any): string {\n        var qryValue = '';\n        var index = 0;\n        for (let i = 0; i < objects.length; i++) {\n            qryValue += `152\\n`;\n            //qryValue += `${objects[i].linea}_${objects[i].columna}\\n`;\n            qryValue += `${objects[i].identificador}\\n`;\n            qryValue += this.findByRootNode(objects[i], index);\n\n        }\n        //console.log('-Salida {0}\\n', qryValue);\n        return qryValue;\n    }\n\n    findByRootNode(nodeObject: any, index = 0, parent = null): string {\n        var valueQry = '';\n        var tamObj = 0;\n        var tamAtr = 0;\n\n        var arr = nodeObject.listaObjetos;\n        var arr2 = nodeObject.listaAtributos;\n        tamObj = arr.length;\n        tamAtr = arr2.length;\n\n        for (let i = 0; i < arr.length; i++) {\n            valueQry += `153\\n `; //OBJETO\n            //valueQry += `${arr[i].linea}_${arr[i].columna}\\n`;\n            valueQry += `${arr[i].identificador}\\n`;\n            valueQry += `${arr[i].texto}\\n`;\n            valueQry += this.findByRootNode(arr[i]);\n        }\n        for (let i = 0; i < arr2.length; i++) {\n            valueQry += `154\\n`; //ATRIBUTO\n            //valueQry += `${arr2[i].linea}_${arr2[i].columna}\\n`;\n            valueQry += `${arr2[i].identificador}\\n`;\n            valueQry += `${arr2[i].valor}\\n`;\n        }\n        return valueQry;\n    }\n\n    //Colocar los valores de la lista1d en arreglo de caracteres en C\n    create3dC(list: any): string {\n        var lista = '';\n        var valores = list.split('\\n');\n\n        //var contadorStack = 0;\n        for (let i = 0; i < valores.length; i++) {\n            if (valores[i] === '') {\n                lista += `\\tHEAP[t1] = 32;   //TEXTO VACIO \\n`;\n                lista += `\\tt1 = t1 + 1;\\n`;\n\n                this.tmpArray.push('32');\n            }\n            else if (valores[i].includes(\"152\")) {\n                //lista += `\\tSTACK[(int)${this.contadorStack}] =  t1;   // --- AGREGAR OBJETO\\n`;\n                //this.contadorStack++;\n                lista += `\\tt0 = t1;\\n`;\n                lista += `\\tHEAP[t1] = ${valores[i]};   //RAIZ\\n`;\n                lista += `\\tt1 = t1 + 1;\\n`;\n                lista += `\\tSTACK[(int)${this.contadorStack}] =  t0;   // --- AGREGAR OBJETO\\n`;\n\n                this.tmpArray.push(153);\n            }\n            else if (valores[i].includes(\"153\")) {\n                this.contadorStack++;\n                lista += `\\tt0 = t1;\\n`;\n                lista += `\\tHEAP[t1] = ${valores[i]};   //OBJETO\\n`;\n                lista += `\\tt1 = t1 + 1;\\n`;\n                lista += `\\tSTACK[(int)${this.contadorStack}] =  t0;   // --- AGREGAR OBJETO\\n`;\n\n                this.tmpArray.push(valores[i]);\n            }\n            else if (valores[i].includes(\"154\")) {\n                lista += `\\tHEAP[t1] = ${valores[i]};   //ATRIBUTO\\n`;\n                lista += `\\tt1 = t1 + 1;\\n`;\n\n                this.tmpArray.push(valores[i]);\n            }\n            else if (valores[i].startsWith(\" \")) {\n                lista += this.splitString(valores[i].substring(1));\n                lista += `\\tHEAP[t1] = -1;   // --------- FIN DEL STRING\\n`;\n                lista += `\\tt1 = t1 + 1;\\n`;\n\n                this.tmpArray.push(-1);\n            } else {\n                lista += this.splitString(valores[i]);\n                lista += `\\tHEAP[t1] = -1;   // --------- FIN DEL STRING\\n`;\n                lista += `\\tt1 = t1 + 1;\\n`;\n\n                this.tmpArray.push(-1);\n            }\n        }\n        return lista;\n    }\n    //Pasar string a cadena de caracteres\n    splitString(word: any): string {\n        var tmpWord = '';\n        var tmp = word.split('');\n        for (let i = 0; i < tmp.length; i++) {\n            var letter = '';\n            if (tmp[i] === 'á' || tmp[i] === 'Á') {\n                letter = '160';\n            } else if (tmp[i] === 'é' || tmp[i] === 'É') {\n                letter = '130';\n            } else if (tmp[i] === 'í' || tmp[i] === 'Í') {\n                letter = '161';\n            } else if (tmp[i] === 'ó' || tmp[i] === 'Ó') {\n                letter = '162';\n            } else if (tmp[i] === 'ú' || tmp[i] === 'Ú') {\n                letter = '163';\n            } else if (tmp[i] === 'ñ' || tmp[i] === 'Ñ') {\n                letter = '164';\n            } else {\n                letter = tmp[i].charCodeAt(0);\n            }\n            tmpWord += `\\tHEAP[t1] = ${letter};     //${tmp[i]}\\n`;\n            tmpWord += `\\tt1 = t1 + 1;\\n`;\n\n            this.tmpArray.push(letter);\n        }\n        return tmpWord;\n    }\n\n    getXpath3D(xpath: any): string {\n        var tmpCodigo = `void xpath(){\n    printf(\"%c\", 10);            \n    printf(\"INICIO VALORES XPATH%c\",10);\n\n    `;\n        for (let contAtr = 0; contAtr < xpath.length; contAtr++) {\n            // console.log('--- ', xpath[contAtr]); //XPATH VALS\n            tmpCodigo += this.findPosition(this.getSplitString(xpath[contAtr]));\n        }\n\n        tmpCodigo += `\n    etiqueta_salida:\n        printf(\"FIN VALORES XPATH%c\",10);\n        return;\n}`;\n        return tmpCodigo;\n    }\n    // Pasar el resultado del xpath a un arreglo de caracteres\n    getSplitString(valList: any) {\n        var tmp: any = [];\n        if (valList.tipo === 'A') {\n            tmp.push(154);\n        } else if (valList.tipo === 'O') {\n            tmp.push(153);\n        }\n        tmp = tmp.concat(this.getCharAtCodeSplit(valList.id));\n        tmp = tmp.concat(-1);\n        tmp = tmp.concat(this.getCharAtCodeSplit(valList.val));\n        return tmp;\n    }\n    // Obtener code del caracter \n    getCharAtCodeSplit(valL: any) {\n        var tmpAr: any = [];\n        valL = valL.toString()\n        valL = valL.split('');\n        for (let i = 0; i < valL.length; i++) {\n            var letter = '';\n            if (valL[i] === 'á' || valL[i] === 'Á') {\n                letter = '160';\n            } else if (valL[i] === 'é' || valL[i] === 'É') {\n                letter = '130';\n            } else if (valL[i] === 'í' || valL[i] === 'Í') {\n                letter = '161';\n            } else if (valL[i] === 'ó' || valL[i] === 'Ó') {\n                letter = '162';\n            } else if (valL[i] === 'ú' || valL[i] === 'Ú') {\n                letter = '163';\n            } else if (valL[i] === 'ñ' || valL[i] === 'Ñ') {\n                letter = '164';\n            } else if (valL[i] === 155) {\n                letter = '155';\n            } else if (valL[i] === '') {\n                letter = '32';\n            } else {\n                letter = valL[i].charCodeAt(0);\n            }\n            tmpAr.push(letter);\n        }\n        return tmpAr;\n    }\n    // buscar posicion\n    findPosition(xpathL: any): string {\n        var xpath3dCode = '';\n        var found = false;\n        for (let i = 0; i < this.tmpArray.length; i++) {\n            if (this.tmpArray[i] == xpathL[0]) {\n                found = this.validate(this.tmpArray, xpathL, i, 0);\n                if (found) {\n                    //console.log(' -- ', i, ' tam ', xpathL.length);\n                    xpath3dCode += this.traducir3DXpath(i, xpathL.length);\n                    break;\n                }\n            }\n        }\n        return xpath3dCode;\n    }\n\n    validate(arrTodo: any, arrPath: any, contTodo: any, contPath: any): any {\n        var hasFounded = false;\n        if (arrTodo[contTodo] == arrPath[contPath]) {\n            //console.log(contTodo, ' ', String.fromCharCode(arrPath[contPath]),' -- ', contPath);\n            contTodo++;\n            contPath++;\n            hasFounded = this.validate(arrTodo, arrPath, contTodo, contPath);\n        }\n        if (contPath == (arrPath.length - 1)) {\n            hasFounded = true;\n        }\n        return hasFounded;\n    }\n\n    traducir3DXpath(pos: any, tam: any): any {\n        var tmp = `\n    t4 = ${pos};\n    t5 = ${tam};\n    etiqueta_part${this.contadorEtiqueta}:\n        imprimir2();\n        t4 = t4 + 1;\n        t5 = t5 - 1; \n        if(t5 == 0) goto inicio${this.contadorSalidas};\n        goto etiqueta_part${this.contadorEtiqueta};\n        \n    inicio${this.contadorSalidas}:\n    printf(\"%c\", 10);            \n    \\n`;\n        this.contadorEtiqueta++;\n        this.contadorSalidas++;\n        return tmp;\n    }\n\n    //Construcción deficiones\n    crear3DDecla(lista: any): string {\n        var decla3D = `void declaraciones(){\n    t6 = sp + 1;\n    t7 = t6;\n\n    ${this.generate3DDecla(lista)}\n\n    // ---------------------------------------- INICIO CODIGO PARA IMPRIMIR LOS VALORES DECLARACIONES\n    printf(\"VALORES DECLARACIONES:%c\",10);\n    etiqueta_for:\n        //printf(\"%d\",HEAP[t4]);\n        if( HEAP[t6] == -1 ){\n            printf(\"%c\", 10);            \n            goto etiqueta_for2;\n        }\n        goto etiqueta_imp;\n    etiqueta_for2:\n        t6 = t6 + 1;\n        if (t6 >= t1 ) {\n            goto etiqueta_salida;\n        }\n        goto etiqueta_for;\n\n    etiqueta_imp:\n        if( HEAP[t6] == 155 ){\n            goto etiqueta_for2;\n        }\n    etiqueta_imp1:\n        if( HEAP[t6] == -2 ){\n            printf(\" = \"); \n            goto etiqueta_for2;\n        }\n    etiqueta_imp3:\n        imprimir3();\n        goto etiqueta_for2;\n    // ---------------------------------------- FIN CODIGO PARA IMPRIMIR LAS DECLARACIONES\n\n    etiqueta_salida:\n        return;\n}`;\n        return decla3D;\n    }\n    generate3DDecla(list: any): string {\n        var tmp = '';\n\n        if (list !== null) {\n            for (let i = 0; i < list.length; i++) {\n                if (list[i].id.startsWith(\"$\")) {\n                    tmp += this.generate3Decla('int', list[i].id, list[i].valor);\n                }\n            }\n        }\n        return tmp;\n    }\n    ///155 156 157\n    generate3Decla(tipo: any, nombre: any, valor: any): string {\n        var caracteres = [];\n        var tmpWord = '';\n        caracteres.push(155); //tipo int\n        caracteres = caracteres.concat(this.getCharAtCodeSplit(nombre));\n        caracteres = caracteres.concat(-2);\n        caracteres = caracteres.concat(this.getCharAtCodeSplit(valor));\n        this.contadorStack++;\n        tmpWord += `\\tt0 = t1;\\n`;\n        for (let i = 0; i < caracteres.length; i++) {\n            tmpWord += `\\tHEAP[t1] = ${caracteres[i]};     //${caracteres[i]}\\n`;\n            tmpWord += `\\tt1 = t1 + 1;\\n`;\n        }\n        tmpWord += `\\tHEAP[t1] = -1;     //FIN DE LA DECLARACIÓN\\n`;\n        tmpWord += `\\tt1 = t1 + 1;\\n`;\n        tmpWord += `\\tSTACK[(int)${this.contadorStack}] =  t0;   // --- AGREGAR VARIABLE\\n`;\n        return tmpWord\n    }\n\n}\n/*\n    if(valores[i] === \"OBJETO\"){\n    lista += `\n    \\n\\n\n    // ------------------------------ INICIA A GUARDAR UN OBJETO\n    t1 = H;\n    H = H + 5\n    HEAP[(int)t1] = ${valores[i+2]};\n    t1 = t1 + 1;\n    HEAP[(int)t1] = ${valores[i+3]};\n    t1 = t1 + 1;\n    HEAP[(int)t1] = LISTA_OBJETOS};\n    t1 = t1 + 1;\n    HEAP[(int)t1] = -1};\n    // ------------------------------ TERMINA GUARDAR UN OBJETO\n    \\n`;\n\n    } else if(valores[i] === \"ATRIBUTO\"){\n\n    }\n*/\n","import { ErrorHandler } from \"@angular/core\";\nimport { tError } from \"../Expresiones/tError\";\n\ninterface errorIndividual {\n    no: number,\n    tipo: string,\n    valor: string,\n    linea: number,\n    columna: number,\n}\n\nexport class ListaErrores {\n    contador: number = 1;\n    public cuerpoHtml: any;\n\n    constructor() { this.contador = 1 }\n\n    //LLAMARLO AL INICIO PARA VALIDAR LAS ETIQUETAS\n    validateEtiquetas(listaO: any): Array<tError> {\n        var tmpArray: Array<tError> = [];\n        for (let i = 0; i < listaO.length; i++) {\n            if (listaO[i].identificador !== listaO[i].cierre) {\n                tmpArray.push(\n                    new tError('Semantico',\n                        `Etiquetas incorrectas ${listaO[i].identificador} !=== ${listaO[i].cierre}`,\n                        listaO[i].linea,\n                        listaO[i].columna\n                    ));\n                //console.log(`Etiquetas incorrectas ${listaO[i].identificador} !=== ${listaO[i].cierre}`);\n            } else {\n                var tmp = this.validateEtiquetas(listaO[i].listaObjetos);\n                if (tmp.length !== 0) {\n                    tmpArray = tmp;\n                }\n            }\n        }\n        return tmpArray;\n    }\n\n\n    /*\n        var arrTmp = lError.validateEtiquetas(salidaG.objetos);\n        console.log(lError.generateHtmlBody(salidaG.lErrores, arrTmp));\n    */\n    //ARCHIVO .HTML\n    generateHtmlBody(erroresLS: any, erroresEtiquetas: any):errorIndividual[] {\n        var arrayCuerpo: errorIndividual[] = [];\n\n        if (erroresLS.length > 0) {\n            erroresLS.forEach((object: any) => {\n                arrayCuerpo.push(this.getHtmlBody(object));\n            });\n        }\n\n        if (erroresEtiquetas.length > 0) {\n            erroresEtiquetas.forEach((object: any) => {\n                arrayCuerpo.push(this.getHtmlBody(object));\n            });\n        }\n        return arrayCuerpo;\n    }\n\n    getHtmlBody(error: any):errorIndividual {\n        var fila:errorIndividual = {\n            no: this.contador,\n            tipo: error.tipo,\n            valor: error.texto,\n            linea: error.linea,\n            columna: error.columna\n        }; \n        return fila;\n    }\n\n}\n","export class Atributo{\n    identificador:string;\n    valor:string;\n    linea: number;\n    columna: number;\n\n    constructor(id:string, valor:string, linea:number, columna:number){\n        this.identificador = id;\n        this.valor = valor;\n        this.linea = linea;\n        this.columna = columna;\n    }\n}","import { Entorno } from \"../AST/Entorno\";\nimport { Atributo } from \"./Atributo\";\n\nexport class Objeto{\n    identificador:string;\n    texto:string;\n    listaAtributos:Array<Atributo>;\n    listaObjetos: Array<Objeto>;\n    linea: number;\n    columna: number;\n    entorno: Entorno;\n    completa: number;\n    cierre: string;\n\n    constructor(id:string, texto:string, linea:number, columna:number, listaAtributos:Array<Atributo>, listaO:Array<Objeto>,\n                completa:number, cierre:string){\n        this.identificador = id;\n        this.texto = texto;\n        this.linea = linea;\n        this.columna = columna;\n        this.listaAtributos = listaAtributos;\n        this.listaObjetos = listaO;\n        this.entorno = new Entorno(null);\n        this.completa = completa;\n        this.cierre =  cierre;\n    }\n}","export class tError {\n\n    public tipo: any;\n    public texto: string;\n    public linea: number;\n    public columna: number;\n\n    /**\n     * @constructor creamos un nuevo primitivo\n     * @param tipo hace referencia al tipo de error\n     * @param texto hace referencia al contenido del mensaje del error\n     * @param linea idica la linea donde se encuentra\n     * @param columna indica la columna donde se encuentra\n     */\n    constructor(tipo: any, texto: string, linea: number, columna: number) {\n        this.columna = columna;\n        this.linea = linea;\n        this.texto = texto;\n        this.tipo = tipo;\n    }\n}","/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar gramatica = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,8],$V2=[2,6,7],$V3=[1,14],$V4=[1,15],$V5=[2,7],$V6=[14,20],$V7=[1,21],$V8=[1,20],$V9=[2,14,17,20],$Va=[1,40],$Vb=[1,47],$Vc=[1,38],$Vd=[1,37],$Ve=[1,45],$Vf=[1,35],$Vg=[1,36],$Vh=[1,39],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,46],$Vm=[1,48],$Vn=[1,49],$Vo=[1,50],$Vp=[1,51],$Vq=[1,52],$Vr=[1,53],$Vs=[1,54],$Vt=[1,55],$Vu=[1,56],$Vv=[1,57],$Vw=[1,58],$Vx=[1,59],$Vy=[1,60],$Vz=[1,61],$VA=[1,62],$VB=[1,63],$VC=[1,64],$VD=[1,65],$VE=[1,66],$VF=[2,7,9,11,12,17,20,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],$VG=[2,29];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"START\":3,\"ENCODING\":4,\"RAICES\":5,\"EOF\":6,\"lt\":7,\"interC\":8,\"xml\":9,\"version\":10,\"asig\":11,\"StringLiteral\":12,\"encoding\":13,\"gt\":14,\"RAIZ\":15,\"OBJETO\":16,\"identifier\":17,\"LATRIBUTOS\":18,\"OBJETOS\":19,\"div\":20,\"LISTA_ID_OBJETO\":21,\"ATRIBUTOS\":22,\"ATRIBUTO\":23,\"LISTA_VALORES\":24,\"IntegerLiteral\":25,\"DoubleLiteral\":26,\"CharLiteral\":27,\"CARACTERES\":28,\"plus\":29,\"minus\":30,\"times\":31,\"mod\":32,\"equal\":33,\"nequal\":34,\"and\":35,\"or\":36,\"not\":37,\"semicolon\":38,\"lparen\":39,\"rparen\":40,\"lcurly\":41,\"rcurly\":42,\"lbracket\":43,\"rbracket\":44,\"period\":45,\"coma\":46,\"lesst\":47,\"greatert\":48,\"ampersand\":49,\"apostro\":50,\"quotation\":51,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",6:\"EOF\",7:\"lt\",8:\"interC\",9:\"xml\",10:\"version\",11:\"asig\",12:\"StringLiteral\",13:\"encoding\",14:\"gt\",17:\"identifier\",20:\"div\",25:\"IntegerLiteral\",26:\"DoubleLiteral\",27:\"CharLiteral\",29:\"plus\",30:\"minus\",31:\"times\",32:\"mod\",33:\"equal\",34:\"nequal\",35:\"and\",36:\"or\",37:\"not\",38:\"semicolon\",39:\"lparen\",40:\"rparen\",41:\"lcurly\",42:\"rcurly\",43:\"lbracket\",44:\"rbracket\",45:\"period\",46:\"coma\",47:\"lesst\",48:\"greatert\",49:\"ampersand\",50:\"apostro\",51:\"quotation\"},\nproductions_: [0,[3,3],[4,11],[4,2],[5,2],[5,1],[15,1],[16,9],[16,9],[16,5],[16,2],[18,1],[18,0],[22,2],[22,1],[23,3],[23,2],[23,2],[19,2],[19,1],[21,2],[21,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n   \n                                        reportBNF.push(`<START> ::= <RAICES> EOF`);\n                                        reportBNF2.push('Start.val = Raiz.val. // Fin del documento');\n                                        this.$ = $$[$0-1];\n                                        return new SalidaGramatica(this.$, reportBNF, reportBNF2, $$[$0-2], listaErrores);\n                                    \nbreak;\ncase 2:\n   this.$ = $$[$0-2]; \nbreak;\ncase 3:\n\n            listaErrores.push(new tError('Sintactico',`Token inesperado: ${yytext}`,_$[$0-1].first_line,_$[$0-1].first_column));\n        \nbreak;\ncase 4:\n   \n                                reportBNF.push('<RAICES> ::= <RAICES> <RAIZ>');\n                                reportBNF2.push('Raices.val = Raices.push(Raiz)');\n                                $$[$0-1].push($$[$0]);\n                                this.$ = $$[$0-1];\n                            \nbreak;\ncase 5:\n \n                                reportBNF.push('<RAICES> ::= <RAIZ>');\n                                reportBNF2.push('Raices.val = Raiz.val');\n                                this.$ = [$$[$0]];\n                            \nbreak;\ncase 6:\n \n                                reportBNF.push('<RAIZ> ::= <OBJETO>');\n                                reportBNF2.push('Raiz.val = Objeto.val');\n                                this.$ = $$[$0];\n                            \nbreak;\ncase 7:\n \n                                                                                    reportBNF.push('<OBJETO> ::= lt identifier <LATRIBUTOS> gt <OBJETOS> lt div identifier gt');\n                                                                                    reportBNF2.push('Objeto = new Objeto(id,\\'\\',linea, columna, atributos, objetos)');\n                                                                                    this.$ = new Objeto($$[$0-7],'',_$[$0-8].first_line, _$[$0-8].first_column,$$[$0-6],$$[$0-4],1,$$[$0-1]);\n                                                                                \nbreak;\ncase 8:\n \n                                                                                    reportBNF.push('<OBJETO> ::= lt identifier <LATRIBUTOS> gt <LISTA_ID_OBJETO> lt div identifier gt');\n                                                                                    reportBNF2.push('Objeto = new Objeto(id,texto,linea, columna,atributos,[])');\n                                                                                    this.$ = new Objeto($$[$0-7],$$[$0-4],_$[$0-8].first_line, _$[$0-8].first_column,$$[$0-6],[],1,$$[$0-1]);\n                                                                                \nbreak;\ncase 9:\n \n                                                                                    reportBNF.push('<OBJETO> ::= lt identifier <LATRIBUTOS> div gt');\n                                                                                    reportBNF2.push('Objeto = new Objeto(id,\\'\\',linea, columna,atributos,[])');\n                                                                                    this.$ = new Objeto($$[$0-3],'',_$[$0-4].first_line, _$[$0-4].first_column,$$[$0-2],[],0,'');\n                                                                                \nbreak;\ncase 10:\n   listaErrores.push(\n                                                                                        new tError('Sintactico',`Token inesperado: ${yytext}`,_$[$0-1].first_line,_$[$0-1].first_column )\n                                                                                    );\n                                                                                \nbreak;\ncase 11:\n \n                                                    reportBNF.push('<LATRIBUTOS> ::= <ATRIBUTOS>');\n                                                    reportBNF2.push('Lista_Atributos.val = Atributos.val');\n                                                    this.$ = $$[$0];\n                                                \nbreak;\ncase 12:\n \n                                                    reportBNF.push('<LATRIBUTOS> ::= /*vacio*/');\n                                                    reportBNF2.push('Lista_Atributos.val = [] ');\n                                                    this.$ = [];\n                                                \nbreak;\ncase 13:\n   \n                                                    reportBNF.push('<ATRIBUTOS> ::= <ATRIBUTOS> <ATRIBUTO>');\n                                                    reportBNF2.push('Atributos.val = Atributos.push(Atributo)');\n                                                    $$[$0-1].push($$[$0]);\n                                                    this.$ = $$[$0-1];/*revisar*/\n                                                \nbreak;\ncase 14:\n \n                                                    reportBNF.push('<ATRIBUTOS> ::= <ATRIBUTO>');\n                                                    reportBNF2.push('Atributos.val = Atributo.val');\n                                                    this.$ = [$$[$0]];\n                                                \nbreak;\ncase 15:\n   \n                                                    reportBNF.push('<ATRIBUTO> ::= identifier asig StringLiteral');\n                                                    reportBNF2.push('Atributo = new Atributo(id, valor, fila, columna)');\n                                                    this.$ = new Atributo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n                                                \nbreak;\ncase 16: case 17:\n   listaErrores.push(\n                                                        new tError('Sintactico',`Token inesperado: ${yytext}`,_$[$0-1].first_line,_$[$0-1].first_column )\n                                                    );\n                                                \nbreak;\ncase 18:\n   reportBNF.push('<OBJETOS> ::= <OBJETOS> <OBJETO>');\n                                reportBNF2.push('Objetos.val = Objetos.push(Objeto)');\n                                $$[$0-1].push($$[$0]);\n                                this.$ = $$[$0-1];\n                            \nbreak;\ncase 19:\n \n                                reportBNF.push('<OBJETOS> ::= <OBJETO>');\n                                reportBNF2.push('Objetos.val = Objeto.val');\n                                this.$ = [$$[$0]];\n                            \nbreak;\ncase 20:\n \n                                                        reportBNF.push('<LISTA_ID_OBJETO> ::= <LISTA_ID_OBJETO> <LISTA_VALORES>');\n                                                        reportBNF2.push('Lista_Id_Objeto.val = Lista_Id_Objeto.val + \\' \\' + Lista_Id_Objeto.val');\n                                                        this.$ = $$[$0-1] + ' ' + $$[$0];\n                                                    \nbreak;\ncase 21:\n   \n                                                        reportBNF.push('<LISTA_ID_OBJETO> ::= <LISTA_VALORES>');\n                                                        reportBNF2.push('Lista_Id_Objeto.val = Lista_valores.val');\n                                                        this.$ = $$[$0];\n                                                    \nbreak;\ncase 22: case 23: case 24: case 25: case 26: case 27: case 28:\n\n                                    this.$ = $$[$0];\n                                \nbreak;\ncase 29:\n   listaErrores.push(\n                                        new tError('Sintactico',`Token inesperado: ${yytext}`,_$[$0].first_line,_$[$0].first_column )\n                                    );\n                                \nbreak;\ncase 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42: case 43: case 44: case 45: case 46: case 47: case 48: case 49:\n this.$ = $$[$0];\nbreak;\ncase 50:\n this.$ = '<';\nbreak;\ncase 51:\n this.$ = '>';\nbreak;\ncase 52:\n this.$ = '&';\nbreak;\ncase 53:\n this.$ = '\\'';\nbreak;\ncase 54:\n this.$ = '\"';\nbreak;\n}\n},\ntable: [{2:[1,4],3:1,4:2,7:[1,3]},{1:[3]},{2:$V0,5:5,7:$V1,15:6,16:7},{8:[1,10]},{14:[1,11]},{2:$V0,6:[1,12],7:$V1,15:13,16:7},o($V2,[2,5]),o($V2,[2,6]),{17:$V3},{14:$V4},{9:[1,16]},o($V5,[2,3]),{1:[2,1]},o($V2,[2,4]),o($V6,[2,12],{18:17,22:18,23:19,2:$V7,17:$V8}),o($V2,[2,10]),{10:[1,22]},{14:[1,23],20:[1,24]},o($V6,[2,11],{23:25,2:$V7,17:$V8}),o($V9,[2,14]),{11:[1,26]},{7:[1,28],14:[1,27]},{11:[1,29]},{2:[1,34],7:$V1,9:$Va,11:$Vb,12:$Vc,16:32,17:$Vd,19:30,20:$Ve,21:31,24:33,25:$Vf,26:$Vg,27:$Vh,28:41,29:$Vi,30:$Vj,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE},{14:[1,67]},o($V9,[2,13]),{12:[1,68]},o($V9,[2,16]),o($V9,[2,17]),{12:[1,69]},{2:$V0,7:[1,70],16:71},{2:[1,74],7:[1,72],9:$Va,11:$Vb,12:$Vc,17:$Vd,20:$Ve,24:73,25:$Vf,26:$Vg,27:$Vh,28:41,29:$Vi,30:$Vj,31:$Vk,32:$Vl,33:$Vm,34:$Vn,35:$Vo,36:$Vp,37:$Vq,38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE},o($V5,[2,19]),o($VF,[2,21]),o($VF,$VG,{14:$V4}),o($VF,[2,22]),o($VF,[2,23]),o($VF,[2,24]),o($VF,[2,25]),o($VF,[2,26]),o($VF,[2,27]),o($VF,[2,28]),o($VF,[2,30]),o($VF,[2,31]),o($VF,[2,32]),o($VF,[2,33]),o($VF,[2,34]),o($VF,[2,35]),o($VF,[2,36]),o($VF,[2,37]),o($VF,[2,38]),o($VF,[2,39]),o($VF,[2,40]),o($VF,[2,41]),o($VF,[2,42]),o($VF,[2,43]),o($VF,[2,44]),o($VF,[2,45]),o($VF,[2,46]),o($VF,[2,47]),o($VF,[2,48]),o($VF,[2,49]),o($VF,[2,50]),o($VF,[2,51]),o($VF,[2,52]),o($VF,[2,53]),o($VF,[2,54]),o($V2,[2,9]),o($V9,[2,15]),{13:[1,75]},{17:$V3,20:[1,76]},o($V5,[2,18]),{20:[1,77]},o($VF,[2,20]),o($VF,$VG),{11:[1,78]},{17:[1,79]},{17:[1,80]},{12:[1,81]},{14:[1,82]},{14:[1,83]},{8:[1,84]},o($V2,$V5),o($V2,[2,8]),{14:[1,85]},o($V5,[2,2])],\ndefaultActions: {12:[2,1]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse (input) {\n    var self = this,\n        stack = [0],\n        tstack = [], // token stack\n        vstack = [null], // semantic value stack\n        lstack = [], // location stack\n        table = this.table,\n        yytext = '',\n        yylineno = 0,\n        yyleng = 0,\n        recovering = 0,\n        TERROR = 2,\n        EOF = 1;\n\n    var args = lstack.slice.call(arguments, 1);\n\n    //this.reductionCount = this.shiftCount = 0;\n\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    // copy state\n    for (var k in this.yy) {\n      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n        sharedState.yy[k] = this.yy[k];\n      }\n    }\n\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n\n    var ranges = lexer.options && lexer.options.ranges;\n\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n\n    function popStack (n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n\n_token_stack:\n    var lex = function () {\n        var token;\n        token = lexer.lex() || EOF;\n        // if token isn't its numeric value, convert\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        // retreive state number from top of stack\n        state = stack[stack.length - 1];\n\n        // use default actions if available\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            // read action for current state and first input\n            action = table[state] && table[state][symbol];\n        }\n\n_handle_error:\n        // handle parse error\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n            var error_rule_depth;\n            var errStr = '';\n\n            // Return the rule stack depth where the nearest error rule can be found.\n            // Return FALSE when no error recovery rule was found.\n            function locateNearestErrorRecoveryRule(state) {\n                var stack_probe = stack.length - 1;\n                var depth = 0;\n\n                // try to recover from error\n                for(;;) {\n                    // check for error recovery rule in this state\n                    if ((TERROR.toString()) in table[state]) {\n                        return depth;\n                    }\n                    if (state === 0 || stack_probe < 2) {\n                        return false; // No suitable error recovery rule available.\n                    }\n                    stack_probe -= 2; // popStack(1): [symbol, action]\n                    state = stack[stack_probe];\n                    ++depth;\n                }\n            }\n\n            if (!recovering) {\n                // first see if there's any chance at hitting an error recovery rule:\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n\n                // Report error\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push(\"'\"+this.terminals_[p]+\"'\");\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line '+(yylineno+1)+\":\\n\"+lexer.showPosition()+\"\\nExpecting \"+expected.join(', ') + \", got '\" + (this.terminals_[symbol] || symbol)+ \"'\";\n                } else {\n                    errStr = 'Parse error on line '+(yylineno+1)+\": Unexpected \" +\n                                  (symbol == EOF ? \"end of input\" :\n                                              (\"'\"+(this.terminals_[symbol] || symbol)+\"'\"));\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected,\n                    recoverable: (error_rule_depth !== false)\n                });\n            } else if (preErrorSymbol !== EOF) {\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n            }\n\n            // just recovered from another error\n            if (recovering == 3) {\n                if (symbol === EOF || preErrorSymbol === EOF) {\n                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');\n                }\n\n                // discard current lookahead and grab another\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                symbol = lex();\n            }\n\n            // try to recover from error\n            if (error_rule_depth === false) {\n                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');\n            }\n            popStack(error_rule_depth);\n\n            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token\n            symbol = TERROR;         // insert generic error symbol as new lookahead\n            state = stack[stack.length-1];\n            action = table[state] && table[state][TERROR];\n            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error\n        }\n\n        // this shouldn't happen, unless resolve defaults are off\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);\n        }\n\n        switch (action[0]) {\n            case 1: // shift\n                //this.shiftCount++;\n\n                stack.push(symbol);\n                vstack.push(lexer.yytext);\n                lstack.push(lexer.yylloc);\n                stack.push(action[1]); // push state\n                symbol = null;\n                if (!preErrorSymbol) { // normal execution/no error\n                    yyleng = lexer.yyleng;\n                    yytext = lexer.yytext;\n                    yylineno = lexer.yylineno;\n                    yyloc = lexer.yylloc;\n                    if (recovering > 0) {\n                        recovering--;\n                    }\n                } else {\n                    // error just occurred, resume old lookahead f/ before error\n                    symbol = preErrorSymbol;\n                    preErrorSymbol = null;\n                }\n                break;\n\n            case 2:\n                // reduce\n                //this.reductionCount++;\n\n                len = this.productions_[action[1]][1];\n\n                // perform semantic action\n                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1\n                // default location, uses first token for firsts, last for lasts\n                yyval._$ = {\n                    first_line: lstack[lstack.length-(len||1)].first_line,\n                    last_line: lstack[lstack.length-1].last_line,\n                    first_column: lstack[lstack.length-(len||1)].first_column,\n                    last_column: lstack[lstack.length-1].last_column\n                };\n                if (ranges) {\n                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];\n                }\n                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n                if (typeof r !== 'undefined') {\n                    return r;\n                }\n\n                // pop off stack\n                if (len) {\n                    stack = stack.slice(0,-1*len*2);\n                    vstack = vstack.slice(0, -1*len);\n                    lstack = lstack.slice(0, -1*len);\n                }\n\n                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)\n                vstack.push(yyval.$);\n                lstack.push(yyval._$);\n                // goto new state = table[STATE][NONTERMINAL]\n                newState = table[stack[stack.length-2]][stack[stack.length-1]];\n                stack.push(newState);\n                break;\n\n            case 3:\n                // accept\n                return true;\n        }\n\n    }\n\n    return true;\n}};\n\n    const {Objeto} = require(\"../Expresiones/Objeto\");\n    const {Atributo} = require(\"../Expresiones/Atributo\");\n    const {SalidaGramatica} = require(\"../AST/SalidaGramatica\");\n    const {tError} = require(\"../Expresiones/tError\");\n    var listaErrores = [];\n    var reportBNF = [];\n    var reportBNF2 = [];\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {\"case-insensitive\":true},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip comments */\nbreak;\ncase 1:this.begin('comment');\nbreak;\ncase 2:this.popState();\nbreak;\ncase 3:/* skip comment content*/\nbreak;\ncase 4:/* skip whitespace */\nbreak;\ncase 5:return 47\nbreak;\ncase 6:return 48\nbreak;\ncase 7:return 49\nbreak;\ncase 8:return 50\nbreak;\ncase 9:return 51\nbreak;\ncase 10:return 'null';\nbreak;\ncase 11:return 'true';\nbreak;\ncase 12:return 'false';\nbreak;\ncase 13:return 9;\nbreak;\ncase 14:return 10;\nbreak;\ncase 15:return 13;\nbreak;\ncase 16:return 29;\nbreak;\ncase 17:return 30;\nbreak;\ncase 18:return 31;\nbreak;\ncase 19:return 20;\nbreak;\ncase 20:return 32;\nbreak;\ncase 21:return 'lte';\nbreak;\ncase 22:return 'gte';\nbreak;\ncase 23:return 7;\nbreak;\ncase 24:return 14;\nbreak;\ncase 25:return 11;\nbreak;\ncase 26:return 33;\nbreak;\ncase 27:return 34;\nbreak;\ncase 28:return 35;\nbreak;\ncase 29:return 36;\nbreak;\ncase 30:return 37;\nbreak;\ncase 31:return 8;\nbreak;\ncase 32:return 38;\nbreak;\ncase 33:return 46;\nbreak;\ncase 34:return 45;\nbreak;\ncase 35:return 39;\nbreak;\ncase 36:return 40;\nbreak;\ncase 37:return 41;\nbreak;\ncase 38:return 42;\nbreak;\ncase 39:return 43;\nbreak;\ncase 40:return 44;\nbreak;\ncase 41:return 26;\nbreak;\ncase 42:return 25;\nbreak;\ncase 43:return 17;\nbreak;\ncase 44:return 12;\nbreak;\ncase 45:return 27;\nbreak;\ncase 46:\n        listaErrores.push(new tError('Léxico',`Simbolo inesperado: ${yy_.yytext}`,yy_.yylloc.first_line,yy_.yylloc.first_column ));\n        //console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);\n    \nbreak;\ncase 47:return 6\nbreak;\n}\n},\nrules: [/^(?:\\/\\/.*)/i,/^(?:<!--)/i,/^(?:-->)/i,/^(?:.)/i,/^(?:\\s+)/i,/^(?:&lt;)/i,/^(?:&gt;)/i,/^(?:&amp;)/i,/^(?:&apos;)/i,/^(?:&quot;)/i,/^(?:null\\b)/i,/^(?:true\\b)/i,/^(?:false\\b)/i,/^(?:xml\\b)/i,/^(?:version\\b)/i,/^(?:encoding\\b)/i,/^(?:\\+)/i,/^(?:-)/i,/^(?:\\*)/i,/^(?:\\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\\|\\|)/i,/^(?:!)/i,/^(?:\\?)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\\.)/i,/^(?:\\()/i,/^(?:\\))/i,/^(?:\\{)/i,/^(?:\\})/i,/^(?:\\[)/i,/^(?:\\])/i,/^(?:(([0-9]+\\.[0-9]*)|(\\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z_ñÑáÁéÉíÍóÓ][a-zA-Z0-9_ñÑáÁéÉíÍóÓ]*)/i,/^(?:(\"((\\\\([\\'\\\"\\\\bfnrtv]))|([^\\\"\\\\]+))*\"))/i,/^(?:('((\\\\([\\'\\\"\\\\bfnrtv]))|([^\\'\\\\]))'))/i,/^(?:.)/i,/^(?:$)/i],\nconditions: {\"comment\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],\"inclusive\":true},\"INITIAL\":{\"rules\":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = gramatica;\nexports.Parser = gramatica.Parser;\nexports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}","/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar gramaticaDesc = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,5],$V1=[1,7],$V2=[1,13],$V3=[6,7],$V4=[2,14,22],$V5=[2,15],$V6=[1,17],$V7=[2,18],$V8=[1,33],$V9=[1,40],$Va=[1,31],$Vb=[1,30],$Vc=[1,38],$Vd=[1,28],$Ve=[1,29],$Vf=[1,32],$Vg=[1,35],$Vh=[1,36],$Vi=[1,37],$Vj=[1,39],$Vk=[1,41],$Vl=[1,42],$Vm=[1,43],$Vn=[1,44],$Vo=[1,45],$Vp=[1,46],$Vq=[1,47],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,51],$Vv=[1,52],$Vw=[1,53],$Vx=[1,54],$Vy=[1,55],$Vz=[1,56],$VA=[1,57],$VB=[1,58],$VC=[1,59],$VD=[7,9,11,12,17,22,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],$VE=[1,70],$VF=[1,68];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"START\":3,\"ENCODING\":4,\"RAIZ\":5,\"EOF\":6,\"lt\":7,\"interC\":8,\"xml\":9,\"version\":10,\"asig\":11,\"StringLiteral\":12,\"encoding\":13,\"gt\":14,\"OBJETO\":15,\"OBJETOPRIN\":16,\"identifier\":17,\"LATRIBUTOS\":18,\"OBJETOSEC\":19,\"LISTA_ID_OBJETO\":20,\"OBJETOTER\":21,\"div\":22,\"ATRIBUTO\":23,\"LISTA_VALORES\":24,\"IntegerLiteral\":25,\"DoubleLiteral\":26,\"CharLiteral\":27,\"CARACTERES\":28,\"plus\":29,\"minus\":30,\"times\":31,\"mod\":32,\"equal\":33,\"nequal\":34,\"and\":35,\"or\":36,\"not\":37,\"semicolon\":38,\"lparen\":39,\"rparen\":40,\"lcurly\":41,\"rcurly\":42,\"lbracket\":43,\"rbracket\":44,\"period\":45,\"coma\":46,\"lesst\":47,\"greatert\":48,\"ampersand\":49,\"apostro\":50,\"quotation\":51,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",6:\"EOF\",7:\"lt\",8:\"interC\",9:\"xml\",10:\"version\",11:\"asig\",12:\"StringLiteral\",13:\"encoding\",14:\"gt\",17:\"identifier\",22:\"div\",25:\"IntegerLiteral\",26:\"DoubleLiteral\",27:\"CharLiteral\",29:\"plus\",30:\"minus\",31:\"times\",32:\"mod\",33:\"equal\",34:\"nequal\",35:\"and\",36:\"or\",37:\"not\",38:\"semicolon\",39:\"lparen\",40:\"rparen\",41:\"lcurly\",42:\"rcurly\",43:\"lbracket\",44:\"rbracket\",45:\"period\",46:\"coma\",47:\"lesst\",48:\"greatert\",49:\"ampersand\",50:\"apostro\",51:\"quotation\"},\nproductions_: [0,[3,3],[4,11],[4,2],[5,2],[5,0],[15,2],[16,3],[19,4],[19,2],[19,2],[21,3],[21,3],[21,2],[18,2],[18,0],[23,3],[20,2],[20,0],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1],[28,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n   \n            reportBNF.push(`<START> ::= <ENCODING> <RAIZ> EOF`);\n            reportBNF2.push('Start.val = Raiz.val. // Fin del documento');\n            this.$ = $$[$0-1];\n            return new SalidaGramatica(this.$, reportBNF, reportBNF2, $$[$0-2], listaErrores);\n        \nbreak;\ncase 2:\n\n            reportBNF.push(`<ENCODING> ::= lt interC xml version asig StringLiteral encoding asig StringLiteral interC gt`);\n            reportBNF2.push('Encoding.val = StringLiteral'); \n            this.$ = $$[$0-2]; \n        \nbreak;\ncase 3: case 10: case 13:\n\n            listaErrores.push(new tError('Sintactico',`Token inesperado: ${yytext}`,_$[$0-1].first_line,_$[$0-1].first_column));\n        \nbreak;\ncase 4:\n \n            reportBNF.push('<RAIZ> ::= <OBJETO> <RAIZ>');\n            reportBNF2.push('Raiz.val = Objeto.val.Concatenar(Raiz.Val])');\n            this.$ = $$[$0-1].concat($$[$0]);\n        \nbreak;\ncase 5:\n this.$ = [] \nbreak;\ncase 6:\n \n            reportBNF.push('<OBJETO> ::= lt <OBJETOPRIN>');\n            reportBNF2.push('OBJETO.val = [Objetoprin.val]');\n            this.$ = [$$[$0]] \n        \nbreak;\ncase 7:\n\n            let nuevo = null;\n            if ($$[$0].tipo === 0){\n                nuevo = new Objeto($$[$0-2], '', _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], [], 0, $$[$0].id)\n            }else if ($$[$0].id !== \"\"){\n                if ($$[$0].lista !== null){\n                    nuevo = new Objeto($$[$0-2], '', _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], $$[$0].lista, 1, $$[$0].id)\n                }else if ($$[$0].texto !== \"\"){\n                    nuevo = new Objeto($$[$0-2], $$[$0].texto, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], [], 1, $$[$0].id)\n                }else{\n                    nuevo = new Objeto($$[$0-2], '', _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], [], 1, $$[$0].id)\n                }\n                \n            }\n            reportBNF.push('<OBJETOPRIN> ::= identifier <LATRIBUTOS> <OBJETOSEC>')\n            reportBNF2.push('Objetoprin.val = new Objeto(id, texto, linea, columna, atributos, objetos, completo, cierre)')\n            this.$ = nuevo\n        \nbreak;\ncase 8:\n\n            reportBNF.push('<OBJETOSEC> ::= gt <LISTA_ID_OBJETO> lt <OBJETOTER>')\n            reportBNF2.push('Objetosec.val = Objetoter.val')\n            if ($$[$0].id !== \"\"){\n                if($$[$0-2] !== \"\") { $$[$0].texto = $$[$0-2] }\n                this.$ = $$[$0]\n            }\n        \nbreak;\ncase 9:\n\n            reportBNF.push('<OBJETOSEC> ::= div gt')\n            reportBNF2.push('Objetosec.val = {texto: vacio, lista: vacia: id: vacio, tipo: simple}')\n            this.$ = {texto: '', lista: null, id: '', tipo: 0}\n        \nbreak;\ncase 11:\n\n            reportBNF.push('<OBJETOTER> ::= div identifier gt')\n            reportBNF2.push('Objetoter = {texto: vacio, lista: vacia, id: identifier, tipo: doble}')\n            this.$ = {texto: '', lista: null, id: $$[$0-1], tipo: 1}\n        \nbreak;\ncase 12:\n\n            reportBNF.push('<OBJETOTER> ::= <OBJETOPRIN> lt <OBJETOTER>')\n            if($$[$0].id !== \"\"){\n                if ($$[$0-2] instanceof Objeto){\n                    if ($$[$0].lista === null){\n                        reportBNF2.push('Objetoter.val = {texto: vacio, lista: [Objetoprin.val], id: Objetoter.val, tipo: doble}}')\n                        this.$ = {texto: '', lista: [$$[$0-2]], id: $$[$0].id, tipo: 1}\n                    }else{\n                        reportBNF2.push('Objetoter.lista.agregarAlInicio(Objetoprin.val); Objetoter.val = {texto: vacio, lista: Objetoter.val, id: Objetoter.val, tipo: doble}}')\n                        $$[$0].lista.unshift($$[$0-2])\n                        this.$ = {texto: '', lista: $$[$0].lista, id: $$[$0].id, tipo: 1}\n                    }\n                }else if($$[$0-2] === null) { \n                    reportBNF2.push('Objetoter.val = Objetoter.val')\n                    this.$ === $$[$0] \n                }\n            }\n        \nbreak;\ncase 14:\n \n            reportBNF.push('<LATRIBUTOS> ::= <ATRIBUTOS> <LATRIBUTOS>');\n            reportBNF2.push('Latributos.val.agregar(Atributo.val)');\n            this.$ = $$[$0-1].concat($$[$0])\n        \nbreak;\ncase 15:\n \n            reportBNF.push('<LATRIBUTOS> ::= epsilon');\n            reportBNF2.push('Latributos.val = [] ');\n            this.$ = [];\n        \nbreak;\ncase 16:\n   \n            reportBNF.push('<ATRIBUTO> ::= identifier asig StringLiteral');\n            reportBNF2.push('Atributo.val = [new Atributo(id, valor, fila, columna)]');\n            this.$ = [new Atributo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)]\n        \nbreak;\ncase 17:\n\n            reportBNF.push('<LISTA_ID_OBJETO> ::= <LISTA_VALORES> <LISTA_ID_OBJETO>');\n            reportBNF2.push('Lista_id_objeto.val = Lista_valores.val + \\\" \\\" + Lista_id_objeto.val');\n            this.$ = $$[$0-1] + \" \" +  $$[$0];\n        \nbreak;\ncase 18:\n   \n            reportBNF.push('<LISTA_ID_OBJETO> ::= epsilon');\n            reportBNF2.push('Lista_id_objeto.val = \\\"\\\"');\n            this.$ = \"\";\n        \nbreak;\ncase 19:\n\n            reportBNF.push('<LISTA_VALORES> ::= IntegerLiteral');\n            reportBNF2.push('Lista_valores.val = IntegerLiteral');\n            this.$ = $$[$0]; \n        \nbreak;\ncase 20:\n \n            reportBNF.push('<LISTA_VALORES> ::= DoubleLiteral');\n            reportBNF2.push('Lista_valores.val = DoubleLiteral');\n            this.$ = $$[$0]; \n        \nbreak;\ncase 21:\n \n            reportBNF.push('<LISTA_VALORES> ::= identifier');\n            reportBNF2.push('Lista_valores.val = identifier');\n            this.$ = $$[$0]; \n        \nbreak;\ncase 22:\n \n            reportBNF.push('<LISTA_VALORES> ::= StringLiteral');\n            reportBNF2.push('Lista_valores.val = StringLiteral');\n            this.$ = $$[$0]; \n        \nbreak;\ncase 23:\n \n            reportBNF.push('<LISTA_VALORES> ::= CharLiteral');\n            reportBNF2.push('Lista_valores.val = CharLiteral');\n            this.$ = $$[$0]; \n        \nbreak;\ncase 24:\n \n            reportBNF.push('<LISTA_VALORES> ::= xml');\n            reportBNF2.push('Lista_valores.val = xml');\n            this.$ = $$[$0]; \n        \nbreak;\ncase 25:\n \n            reportBNF.push('<LISTA_VALORES> ::= <CARACTERES>');\n            reportBNF2.push('Lista_valores.val = Caracteres.val');\n            this.$ = $$[$0]; \n        \nbreak;\ncase 26: case 27:\n \n            reportBNF.push('<CARACTERES> ::= plus');\n            reportBNF2.push('Caracteres.val = plus');\n            this.$ = $$[$0];\n        \nbreak;\ncase 28:\n \n            reportBNF.push('<CARACTERES> ::= times');\n            reportBNF2.push('Caracteres.val = times');\n            this.$ = $$[$0];\n        \nbreak;\ncase 29:\n \n            reportBNF.push('<CARACTERES> ::= div');\n            reportBNF2.push('Caracteres.val = div');\n            this.$ = $$[$0];\n        \nbreak;\ncase 30:\n \n            reportBNF.push('<CARACTERES> ::= mod');\n            reportBNF2.push('Caracteres.val = mod');\n            this.$ = $$[$0];\n        \nbreak;\ncase 31:\n \n            reportBNF.push('<CARACTERES> ::= asign');\n            reportBNF2.push('Caracteres.val = asign');\n            this.$ = $$[$0];\n        \nbreak;\ncase 32:\n \n            reportBNF.push('<CARACTERES> ::= equal');\n            reportBNF2.push('Caracteres.val = equal');\n            this.$ = $$[$0];\n        \nbreak;\ncase 33:\n \n            reportBNF.push('<CARACTERES> ::= nequal');\n            reportBNF2.push('Caracteres.val = nequal');\n            this.$ = $$[$0];\n        \nbreak;\ncase 34:\n \n            reportBNF.push('<CARACTERES> ::= and');\n            reportBNF2.push('Caracteres.val = and');\n            this.$ = $$[$0];\n        \nbreak;\ncase 35:\n \n            reportBNF.push('<CARACTERES> ::= or');\n            reportBNF2.push('Caracteres.val = or');\n            this.$ = $$[$0];\n        \nbreak;\ncase 36:\n \n            reportBNF.push('<CARACTERES> ::= not');\n            reportBNF2.push('Caracteres.val = not');\n            this.$ = $$[$0];\n        \nbreak;\ncase 37:\n \n            reportBNF.push('<CARACTERES> ::= semicolon');\n            reportBNF2.push('Caracteres.val = semicolon');\n            this.$ = $$[$0];\n        \nbreak;\ncase 38:\n \n            reportBNF.push('<CARACTERES> ::= lparen');\n            reportBNF2.push('Caracteres.val = lparen');\n            this.$ = $$[$0];\n        \nbreak;\ncase 39:\n \n            reportBNF.push('<CARACTERES> ::= rparen');\n            reportBNF2.push('Caracteres.val = rparen');\n            this.$ = $$[$0];\n        \nbreak;\ncase 40:\n \n            reportBNF.push('<CARACTERES> ::= lcurly');\n            reportBNF2.push('Caracteres.val = lcurly');\n            this.$ = $$[$0];\n        \nbreak;\ncase 41:\n \n            reportBNF.push('<CARACTERES> ::= rcurly');\n            reportBNF2.push('Caracteres.val = rcurly');\n            this.$ = $$[$0];\n        \nbreak;\ncase 42:\n \n            reportBNF.push('<CARACTERES> ::= lbracket');\n            reportBNF2.push('Caracteres.val = lbracket');\n            this.$ = $$[$0];\n        \nbreak;\ncase 43:\n \n            reportBNF.push('<CARACTERES> ::= rbracket');\n            reportBNF2.push('Caracteres.val = rbracket');\n            this.$ = $$[$0];\n        \nbreak;\ncase 44:\n \n            reportBNF.push('<CARACTERES> ::= period');\n            reportBNF2.push('Caracteres.val = period');\n            this.$ = $$[$0];\n        \nbreak;\ncase 45:\n \n            reportBNF.push('<CARACTERES> ::= coma');\n            reportBNF2.push('Caracteres.val = coma');\n            this.$ = $$[$0];\n        \nbreak;\ncase 46:\n \n            reportBNF.push('<CARACTERES> ::= lesst');\n            reportBNF2.push('Caracteres.val = >');\n            this.$ = '<';\n        \nbreak;\ncase 47:\n \n            reportBNF.push('<CARACTERES> ::= greatert');\n            reportBNF2.push('Caracteres.val = >');\n            this.$ = '>';\n        \nbreak;\ncase 48:\n \n            reportBNF.push('<CARACTERES> ::= ampersand');\n            reportBNF2.push('Caracteres.val = &');\n            this.$ = '&';\n        \nbreak;\ncase 49:\n \n            reportBNF.push('<CARACTERES> ::= apostro');\n            reportBNF2.push('Caracteres.val = \\'');\n            this.$ = '\\'';\n        \nbreak;\ncase 50:\n \n            reportBNF.push('<CARACTERES> ::= quotation');\n            reportBNF2.push('Caracteres.val = \\\"');\n            this.$ = '\"';\n        \nbreak;\n}\n},\ntable: [{2:[1,4],3:1,4:2,7:[1,3]},{1:[3]},{5:5,6:$V0,7:$V1,15:6},{8:[1,8]},{14:[1,9]},{6:[1,10]},{5:11,6:$V0,7:$V1,15:6},{16:12,17:$V2},{9:[1,14]},o($V3,[2,3]),{1:[2,1]},{6:[2,4]},o($V3,[2,6]),o($V4,$V5,{18:15,23:16,17:$V6}),{10:[1,18]},{2:[1,22],14:[1,20],19:19,22:[1,21]},o($V4,$V5,{23:16,18:23,17:$V6}),{11:[1,24]},{11:[1,25]},o($V3,[2,7]),{7:$V7,9:$V8,11:$V9,12:$Va,17:$Vb,20:26,22:$Vc,24:27,25:$Vd,26:$Ve,27:$Vf,28:34,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC},{14:[1,60]},{14:[1,61]},o($V4,[2,14]),{12:[1,62]},{12:[1,63]},{7:[1,64]},{7:$V7,9:$V8,11:$V9,12:$Va,17:$Vb,20:65,22:$Vc,24:27,25:$Vd,26:$Ve,27:$Vf,28:34,29:$Vg,30:$Vh,31:$Vi,32:$Vj,33:$Vk,34:$Vl,35:$Vm,36:$Vn,37:$Vo,38:$Vp,39:$Vq,40:$Vr,41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC},o($VD,[2,19]),o($VD,[2,20]),o($VD,[2,21]),o($VD,[2,22]),o($VD,[2,23]),o($VD,[2,24]),o($VD,[2,25]),o($VD,[2,26]),o($VD,[2,27]),o($VD,[2,28]),o($VD,[2,29]),o($VD,[2,30]),o($VD,[2,31]),o($VD,[2,32]),o($VD,[2,33]),o($VD,[2,34]),o($VD,[2,35]),o($VD,[2,36]),o($VD,[2,37]),o($VD,[2,38]),o($VD,[2,39]),o($VD,[2,40]),o($VD,[2,41]),o($VD,[2,42]),o($VD,[2,43]),o($VD,[2,44]),o($VD,[2,45]),o($VD,[2,46]),o($VD,[2,47]),o($VD,[2,48]),o($VD,[2,49]),o($VD,[2,50]),o($V3,[2,9]),o($V3,[2,10]),o([2,14,17,22],[2,16]),{13:[1,66]},{2:$VE,16:69,17:$V2,21:67,22:$VF},{7:[2,17]},{11:[1,71]},o($V3,[2,8]),{17:[1,72]},{7:[1,73]},{14:[1,74]},{12:[1,75]},{14:[1,76]},{2:$VE,16:69,17:$V2,21:77,22:$VF},o($V3,[2,13]),{8:[1,78]},o($V3,[2,11]),o($V3,[2,12]),{14:[1,79]},o($V3,[2,2])],\ndefaultActions: {10:[2,1],11:[2,4],65:[2,17]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse (input) {\n    var self = this,\n        stack = [0],\n        tstack = [], // token stack\n        vstack = [null], // semantic value stack\n        lstack = [], // location stack\n        table = this.table,\n        yytext = '',\n        yylineno = 0,\n        yyleng = 0,\n        recovering = 0,\n        TERROR = 2,\n        EOF = 1;\n\n    var args = lstack.slice.call(arguments, 1);\n\n    //this.reductionCount = this.shiftCount = 0;\n\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    // copy state\n    for (var k in this.yy) {\n      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n        sharedState.yy[k] = this.yy[k];\n      }\n    }\n\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n\n    var ranges = lexer.options && lexer.options.ranges;\n\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n\n    function popStack (n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n\n_token_stack:\n    var lex = function () {\n        var token;\n        token = lexer.lex() || EOF;\n        // if token isn't its numeric value, convert\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        // retreive state number from top of stack\n        state = stack[stack.length - 1];\n\n        // use default actions if available\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            // read action for current state and first input\n            action = table[state] && table[state][symbol];\n        }\n\n_handle_error:\n        // handle parse error\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n            var error_rule_depth;\n            var errStr = '';\n\n            // Return the rule stack depth where the nearest error rule can be found.\n            // Return FALSE when no error recovery rule was found.\n            function locateNearestErrorRecoveryRule(state) {\n                var stack_probe = stack.length - 1;\n                var depth = 0;\n\n                // try to recover from error\n                for(;;) {\n                    // check for error recovery rule in this state\n                    if ((TERROR.toString()) in table[state]) {\n                        return depth;\n                    }\n                    if (state === 0 || stack_probe < 2) {\n                        return false; // No suitable error recovery rule available.\n                    }\n                    stack_probe -= 2; // popStack(1): [symbol, action]\n                    state = stack[stack_probe];\n                    ++depth;\n                }\n            }\n\n            if (!recovering) {\n                // first see if there's any chance at hitting an error recovery rule:\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n\n                // Report error\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push(\"'\"+this.terminals_[p]+\"'\");\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line '+(yylineno+1)+\":\\n\"+lexer.showPosition()+\"\\nExpecting \"+expected.join(', ') + \", got '\" + (this.terminals_[symbol] || symbol)+ \"'\";\n                } else {\n                    errStr = 'Parse error on line '+(yylineno+1)+\": Unexpected \" +\n                                  (symbol == EOF ? \"end of input\" :\n                                              (\"'\"+(this.terminals_[symbol] || symbol)+\"'\"));\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected,\n                    recoverable: (error_rule_depth !== false)\n                });\n            } else if (preErrorSymbol !== EOF) {\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n            }\n\n            // just recovered from another error\n            if (recovering == 3) {\n                if (symbol === EOF || preErrorSymbol === EOF) {\n                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');\n                }\n\n                // discard current lookahead and grab another\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                symbol = lex();\n            }\n\n            // try to recover from error\n            if (error_rule_depth === false) {\n                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');\n            }\n            popStack(error_rule_depth);\n\n            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token\n            symbol = TERROR;         // insert generic error symbol as new lookahead\n            state = stack[stack.length-1];\n            action = table[state] && table[state][TERROR];\n            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error\n        }\n\n        // this shouldn't happen, unless resolve defaults are off\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);\n        }\n\n        switch (action[0]) {\n            case 1: // shift\n                //this.shiftCount++;\n\n                stack.push(symbol);\n                vstack.push(lexer.yytext);\n                lstack.push(lexer.yylloc);\n                stack.push(action[1]); // push state\n                symbol = null;\n                if (!preErrorSymbol) { // normal execution/no error\n                    yyleng = lexer.yyleng;\n                    yytext = lexer.yytext;\n                    yylineno = lexer.yylineno;\n                    yyloc = lexer.yylloc;\n                    if (recovering > 0) {\n                        recovering--;\n                    }\n                } else {\n                    // error just occurred, resume old lookahead f/ before error\n                    symbol = preErrorSymbol;\n                    preErrorSymbol = null;\n                }\n                break;\n\n            case 2:\n                // reduce\n                //this.reductionCount++;\n\n                len = this.productions_[action[1]][1];\n\n                // perform semantic action\n                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1\n                // default location, uses first token for firsts, last for lasts\n                yyval._$ = {\n                    first_line: lstack[lstack.length-(len||1)].first_line,\n                    last_line: lstack[lstack.length-1].last_line,\n                    first_column: lstack[lstack.length-(len||1)].first_column,\n                    last_column: lstack[lstack.length-1].last_column\n                };\n                if (ranges) {\n                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];\n                }\n                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n                if (typeof r !== 'undefined') {\n                    return r;\n                }\n\n                // pop off stack\n                if (len) {\n                    stack = stack.slice(0,-1*len*2);\n                    vstack = vstack.slice(0, -1*len);\n                    lstack = lstack.slice(0, -1*len);\n                }\n\n                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)\n                vstack.push(yyval.$);\n                lstack.push(yyval._$);\n                // goto new state = table[STATE][NONTERMINAL]\n                newState = table[stack[stack.length-2]][stack[stack.length-1]];\n                stack.push(newState);\n                break;\n\n            case 3:\n                // accept\n                return true;\n        }\n\n    }\n\n    return true;\n}};\n\n    const {Objeto} = require(\"../Expresiones/Objeto\");\n    const {Atributo} = require(\"../Expresiones/Atributo\");\n    const {SalidaGramatica} = require(\"../AST/SalidaGramatica\");\n    const {tError} = require(\"../Expresiones/tError\");\n\n    var listaErrores = [];\n    var reportBNF = [];\n    var reportBNF2 = [];\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {\"case-insensitive\":true},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip comments */\nbreak;\ncase 1:this.begin('comment');\nbreak;\ncase 2:this.popState();\nbreak;\ncase 3:/* skip comment content*/\nbreak;\ncase 4:/* skip whitespace */\nbreak;\ncase 5:return 47\nbreak;\ncase 6:return 48\nbreak;\ncase 7:return 49\nbreak;\ncase 8:return 50\nbreak;\ncase 9:return 51\nbreak;\ncase 10:return 'null';\nbreak;\ncase 11:return 'true';\nbreak;\ncase 12:return 'false';\nbreak;\ncase 13:return 9;\nbreak;\ncase 14:return 10;\nbreak;\ncase 15:return 13;\nbreak;\ncase 16:return 29;\nbreak;\ncase 17:return 30;\nbreak;\ncase 18:return 31;\nbreak;\ncase 19:return 22;\nbreak;\ncase 20:return 32;\nbreak;\ncase 21:return 'lte';\nbreak;\ncase 22:return 'gte';\nbreak;\ncase 23:return 7;\nbreak;\ncase 24:return 14;\nbreak;\ncase 25:return 11;\nbreak;\ncase 26:return 33;\nbreak;\ncase 27:return 34;\nbreak;\ncase 28:return 35;\nbreak;\ncase 29:return 36;\nbreak;\ncase 30:return 37;\nbreak;\ncase 31:return 8;\nbreak;\ncase 32:return 38;\nbreak;\ncase 33:return 46;\nbreak;\ncase 34:return 45;\nbreak;\ncase 35:return 39;\nbreak;\ncase 36:return 40;\nbreak;\ncase 37:return 41;\nbreak;\ncase 38:return 42;\nbreak;\ncase 39:return 43;\nbreak;\ncase 40:return 44;\nbreak;\ncase 41:return 26;\nbreak;\ncase 42:return 25;\nbreak;\ncase 43:return 17;\nbreak;\ncase 44:return 12;\nbreak;\ncase 45:return 27;\nbreak;\ncase 46:\n        listaErrores.push(new tError('Léxico',`Simbolo inesperado: ${yy_.yytext}`,yy_.yylloc.first_line,yy_.yylloc.first_column ));\n        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);\n    \nbreak;\ncase 47:return 6\nbreak;\n}\n},\nrules: [/^(?:\\/\\/.*)/i,/^(?:<!--)/i,/^(?:-->)/i,/^(?:.)/i,/^(?:\\s+)/i,/^(?:&lt;)/i,/^(?:&gt;)/i,/^(?:&amp;)/i,/^(?:&apos;)/i,/^(?:&quot;)/i,/^(?:null\\b)/i,/^(?:true\\b)/i,/^(?:false\\b)/i,/^(?:xml\\b)/i,/^(?:version\\b)/i,/^(?:encoding\\b)/i,/^(?:\\+)/i,/^(?:-)/i,/^(?:\\*)/i,/^(?:\\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\\|\\|)/i,/^(?:!)/i,/^(?:\\?)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\\.)/i,/^(?:\\()/i,/^(?:\\))/i,/^(?:\\{)/i,/^(?:\\})/i,/^(?:\\[)/i,/^(?:\\])/i,/^(?:(([0-9]+\\.[0-9]*)|(\\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z_áÁéÉíÍóÓ][a-zA-Z0-9_ñÑ]*)/i,/^(?:(\"((\\\\([\\'\\\"\\\\bfnrtv]))|([^\\\"\\\\]+))*\"))/i,/^(?:('((\\\\([\\'\\\"\\\\bfnrtv]))|([^\\'\\\\]))'))/i,/^(?:.)/i,/^(?:$)/i],\nconditions: {\"comment\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],\"inclusive\":true},\"INITIAL\":{\"rules\":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = gramaticaDesc;\nexports.Parser = gramaticaDesc.Parser;\nexports.parse = function () { return gramaticaDesc.parse.apply(gramaticaDesc, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}","\nexport class xpathBusqueda {\n\n    public listNodosName: any = [];\n    public listObjects: any = [];\n\n    constructor() {\n    }\n\n    getNodesByFilters(filter: any, param: any, objects: any) {\n        var salida: any;\n        // solo el nombre del root ej: mundo\n        if (filter === '1') {\n            salida = this.findByRootName(param, objects);\n        }\n        // rutas \n        if (filter === '2') {\n            salida = this.startTypeSearch(param, objects);\n        }\n        //multiples rutas ej. /mundo/continente/pais1/nombre|/mundo/continente/pais/nombre\n        if (filter === '3') {\n            salida = [];\n            if (param.includes('|')) {\n                var parameters = param.split('|');\n                //console.log('val nodo m ', parameters);\n                for (let i = 0; i < parameters.length; i++) {\n                    salida.push(this.startTypeSearch(parameters[i], objects));\n                }\n            }\n        }\n\n        return salida;\n    }\n\n    startTypeSearch(param: any, objects: any) {\n        // console.log('param ', param);\n        param = param.replace('//', '/-');\n        // console.log('param replace ', param);\n        //ruta relativa, inicia con /        \n        if (param.startsWith('/')) {\n            /*console.log('val nodo\\n\\t', */return this.initSearchMethod(param.substring(1), objects)//);\n        } else {\n            /*console.log('val nodo\\n\\t',*/ return this.initSearchMethod(param, objects)//);\n        }\n    }\n\n\n    // 1. Obtener cuando solo se escribe el nombre\n    findByRootName(param: any, objects: any): string {\n        var valorNodo = '';\n        objects.forEach((obj: any) => {\n            if (obj.identificador === param) {\n                valorNodo += '\\n - ';\n                if (obj.listaObjetos.length !== 0) {\n                    valorNodo += this.findValuesNodes(obj);\n                } else {\n                    valorNodo += obj.text;\n                }\n            }\n        });\n        return valorNodo;\n    }\n\n    // 2. Obtener cuando la ruta empiza por el root '/'\n    initSearchMethod(param: any, objects: any) {\n        var qryValue = '';\n        var parameters = param.split('/');\n        for (let i = 0; i < objects.length; i++) {\n            qryValue = this.findByRootNode(parameters, objects[i]);\n        }\n        return qryValue;\n    }\n\n    findByRootNode(param: any, nodeObject: any, index = 0, parent = null): string {\n        // console.log('\\nNODE: ', nodeObject.identificador);\n        // console.log('PARAM: ', index);\n        // console.log('TMP ROOT: ', param[index]);\n        var valueQry = '';\n        const tmp = index + 1;\n        var root = param[index];\n        var hasDoubleSlash = false;\n        if (root.startsWith('-')) {\n            hasDoubleSlash = true;\n        }\n        if (nodeObject.identificador === root && tmp === param.length) {\n            //console.log('FINAL NODE ', nodeObject.identificador);\n            valueQry += this.findValuesNodes(nodeObject);\n        } else if (nodeObject.identificador === root && param.length > tmp) {\n            var arr = nodeObject.listaObjetos;\n            var secondR = param[tmp];\n            // console.log('SECOND ROOT', secondR);\n            var hasPassedDot = false;\n            var hasAtribute = false;\n            for (let i = 0; i < arr.length; i++) {\n                var tmpParam = param;\n                if (arr[i].identificador === secondR) {\n                    valueQry += `${this.findByRootNode(tmpParam, arr[i], tmp, nodeObject)}\\n`;\n                } else if (secondR.startsWith('-')) {\n                    valueQry += `${this.findByRootNode(tmpParam, arr[i], tmp, nodeObject)}\\n`;\n                } else if (secondR === '.' && !hasPassedDot) {\n                    hasPassedDot = true;\n                    valueQry += this.findValuesNodes(nodeObject);\n                } else if (secondR === '..' && !hasPassedDot) {\n                    hasPassedDot = true;\n                    valueQry += this.findValuesNodes(parent);\n                } else if (secondR.startsWith('@*') && !hasAtribute) {\n                    hasAtribute = true;\n                    valueQry += this.findAllAtribute(nodeObject);\n                } else if (secondR.startsWith('@') && !hasAtribute) {\n                    hasAtribute = true;\n                    valueQry += this.findAtribute(nodeObject, secondR);\n                }\n\n            }\n            if (arr.length === 0 && secondR === '.') {\n                valueQry += this.findValuesNodes(nodeObject);\n            } else if (arr.length === 0 && secondR === '..') {\n                valueQry += this.findValuesNodes(parent);\n            } else if (arr.length === 0 && secondR.startsWith('@*')) {\n                valueQry += this.findAllAtribute(nodeObject);\n            } else if (arr.length === 0 && secondR.startsWith('@')) {\n                valueQry += this.findAtribute(nodeObject, secondR);\n            }\n\n        } else if (hasDoubleSlash) {\n            //  console.log('TIENE SLASH');\n            const tmpName = param[index].substring(1);\n            if (tmpName === nodeObject.identificador && tmp === param.length) {\n                valueQry += this.findValuesNodes(nodeObject);\n            } else if (tmpName === nodeObject.identificador) {\n                var arr = nodeObject.listaObjetos;\n                var secondR = param[tmp];\n                // console.log('SECOND ROOT+', secondR);\n                var hasPassedDot = false;\n                var hasAtribute = false;\n                for (let i = 0; i < arr.length; i++) {\n                    var tmpParam = param;\n                    if (arr[i].identificador === secondR) {\n                        valueQry += `${this.findByRootNode(tmpParam, arr[i], tmp, nodeObject)}\\n`;\n                    } else if (secondR.startsWith('-')) {\n                        valueQry += `${this.findByRootNode(tmpParam, arr[i], tmp, nodeObject)}\\n`;\n                    } else if (secondR === '.' && !hasPassedDot) {\n                        hasPassedDot = true;\n                        valueQry += this.findValuesNodes(nodeObject);\n                    } else if (secondR === '..' && !hasPassedDot) {\n                        hasPassedDot = true;\n                        valueQry += this.findValuesNodes(parent);\n                    } else if (secondR.startsWith('@*') && !hasAtribute) {\n                        hasAtribute = true;\n                        valueQry += this.findAllAtribute(nodeObject);\n                    } else if (secondR.startsWith('@') && !hasAtribute) {\n                        hasAtribute = true;\n                        valueQry += this.findAtribute(nodeObject, secondR);\n                    }\n\n                }\n                if (arr.length === 0 && secondR === '.') {\n                    valueQry += this.findValuesNodes(nodeObject);\n                } else if (arr.length === 0 && secondR === '..') {\n                    valueQry += this.findValuesNodes(parent);\n                } else if (arr.length === 0 && secondR.startsWith('@*')) {\n                    valueQry += this.findAllAtribute(nodeObject);\n                } else if (arr.length === 0 && secondR.startsWith('@')) {\n                    valueQry += this.findAtribute(nodeObject, secondR);\n                }\n\n            } else {\n                if (param[index].startsWith('-@*')) {\n                    valueQry += this.findAllAtribute(nodeObject);\n                } else if (param[index].startsWith('-@')) {\n                    valueQry += this.findAtribute(nodeObject, param[index].substring(1));\n                } else if (param[index].startsWith('-*')) {\n                    valueQry += `NODOS: \\n\\t ${this.findValuesNodes(nodeObject)}`;\n                    // valueQry += `ATRIBUTOS: \\n\\t ${this.findAllAtribute(nodeObject)}`;\n                }\n                var arr1 = nodeObject.listaObjetos;\n                for (let i = 0; i < arr1.length; i++) {\n                    var tmpParam = param;\n                    valueQry += `${this.findByRootNode(tmpParam, arr1[i], index)}`;\n                }\n            }\n        }\n        else {\n            console.log('ELSEEEEEEEEEEE', nodeObject.identificador, '-', param);\n        }\n        return valueQry;\n    }\n\n\n    // Obtener el valor de los nodos\n    findValuesNodes(nodeList: any): string {\n        var texto = ' ';\n        if (nodeList.listaObjetos.length !== 0) {\n            nodeList.listaObjetos.forEach((obj: any) => {\n                texto += this.findValuesNodes(obj);\n            });\n        } else {\n            texto += `<${nodeList.identificador}>${nodeList.texto}</${nodeList.cierre}>\\n`;\n            this.listNodosName.push({ id: nodeList.identificador, val: nodeList.texto, tipo: 'O' });\n            this.listObjects.push(nodeList); //para el for\n        }\n        // console.log('TEXTO ', texto);\n        return texto;\n    }\n\n    findAtribute(nodeList: any, param: any): string {\n        var texto = ' ';\n        if (nodeList.listaAtributos.length !== 0) {\n            nodeList.listaAtributos.forEach((obj: any) => {\n                if (obj.identificador === param.substring(1)) {\n                    texto += `- ${obj.valor}\\n`;\n                    this.listNodosName.push({ id: obj.identificador, val: obj.valor, tipo: 'A' });\n                    this.listObjects.push(nodeList); //para el for\n                }\n            });\n        }\n        return texto;\n    }\n\n    findAllAtribute(nodeList: any): string {\n        var texto = ' ';\n        if (nodeList.listaAtributos.length !== 0) {\n            nodeList.listaAtributos.forEach((obj: any) => {\n                texto += `- ${obj.valor}\\n`;\n                this.listNodosName.push({ id: obj.identificador, val: obj.valor, tipo: 'A' });\n                this.listObjects.push(nodeList); //para el for\n            });\n        }\n        return texto;\n    }\n\n    returnListValues(): any {\n        //SALIDA 3D\n        /*for(let i = 0; i < this.listNodosName.length; i ++){\n            console.log(this.listNodosName[i]);\n        }*/\n        return this.listNodosName;\n    }\n\n    returnListObjects(): any {\n        /*for (let i = 0; i < this.listObjects.length; i++) {\n            console.log(this.listObjects[i]);\n        }*/\n        return this.listObjects;\n    }\n\n    clearList() {\n        this.listNodosName = [];\n        this.listObjects = [];\n    }\n    \n}","import { AST } from './AST/AST';\nimport { CST } from './AST/CST';\nimport { Entorno } from './AST/Entorno';\nimport { GramaticaBNF } from './AST/GramaticaBNF';\nimport { TablaSimbolos } from './AST/TablaSimbolos';\nimport { SalidaGramatica } from './AST/SalidaGramatica';\nimport { tError } from './Expresiones/tError';\nimport { ListaErrores } from './Errores/ListaErrores';\n\nimport * as gramatica from './Gramatica/gramatica';\n\ninterface retorno {\n    tablaRep: any,\n    bnfRep: any,\n    cstRep: any,\n    encoding: any,\n    objetos: any,\n    errores: any\n}\n\nexport class AnalizadorASCXML  {\n\n    public ejecutarCodigo(entrada: string): retorno {\n        const tabla: TablaSimbolos = new TablaSimbolos();\n        const salidaG = gramatica.parse(entrada);\n        const arbolCST = new CST(salidaG.objetos);\n        const Listaerrores = new ListaErrores();\n\n        // TABLA SIMBOLOS\n        let reporteTabla = tabla.generarReporteTablaObjetos(salidaG.objetos); \n        // BNF\n        let gramBnf = new GramaticaBNF(salidaG.reporteBNF, salidaG.reporteBNF2);\n        let reporteBNF = gramBnf.getBNFReport();\n        // DOT CST\n        let reporteCST = arbolCST.generarArbolCST(salidaG.objetos); \n        //Errores\n        let errores = Listaerrores.generateHtmlBody(salidaG.lErrores, Listaerrores.validateEtiquetas(salidaG.objetos));\n\n\n        let ret: retorno = {\n            tablaRep: reporteTabla,\n            bnfRep: reporteBNF,\n            cstRep: reporteCST,\n            encoding: salidaG.encoding,\n            objetos: salidaG.objetos,\n            errores: errores\n        };\n\n        return ret;\n    }\n}","import { AST } from './AST/AST';\nimport { CST } from './AST/CST';\nimport { Entorno } from './AST/Entorno';\nimport { GramaticaBNF } from './AST/GramaticaBNF';\nimport { TablaSimbolos } from './AST/TablaSimbolos';\nimport { SalidaGramatica } from './AST/SalidaGramatica';\nimport { ListaErrores } from './Errores/ListaErrores';\n\nimport * as gramatica from './Gramatica/gramaticaDesc';\n\ninterface retorno {\n    tablaRep: any,\n    bnfRep: any,\n    cstRep: any,\n    encoding: any,\n    objetos: any,\n    errores: any\n}\n\nexport class AnalizadorASCXML  {\n\n    public ejecutarCodigo(entrada: string): retorno {\n        const tabla: TablaSimbolos = new TablaSimbolos();\n        const salidaG = gramatica.parse(entrada);\n        const arbolCST = new CST(salidaG.objetos);\n        const Listaerrores = new ListaErrores();\n\n        // TABLA SIMBOLOS\n        let reporteTabla = tabla.generarReporteTablaObjetos(salidaG.objetos); \n        // BNF\n        let gramBnf = new GramaticaBNF(salidaG.reporteBNF, salidaG.reporteBNF2);\n        let reporteBNF = gramBnf.getBNFReport();\n        // DOT CST\n        let reporteCST = arbolCST.generarArbolCST(salidaG.objetos); \n        //Errores\n        let errores = Listaerrores.generateHtmlBody(salidaG.lErrores, Listaerrores.validateEtiquetas(salidaG.objetos));\n\n        let ret: retorno = {\n            tablaRep: reporteTabla,\n            bnfRep: reporteBNF,\n            cstRep: reporteCST,\n            encoding: salidaG.encoding,\n            objetos: salidaG.objetos,\n            errores: errores\n        };\n\n        return ret;\n    }\n}","export class EjecucionXpath {\n\n    objetos: any;\n    dot: any;\n\n    constructor (objetos: any, dot: any) {\n        this.objetos = objetos;\n        this.dot = dot;\n    }\n\n    //constructor(){}\n\n    ejecutarArbol():string {\n        this.dot = \"\";\n        \n        if(this.objetos.length > 1){\n            for (let i = 0; i < this.objetos.length; i++){\n                this.dot += this.ejecutarNodoArbol(this.objetos[i]);\n                if (i != this.objetos.length - 1) { this.dot += \"|\"; }\n            }\n        }else{\n            this.dot += this.ejecutarNodoArbol(this.objetos[0])\n        }\n        \n        return this.dot\n    }\n\n    ejecutarNodoArbol(objeto: any):string {\n        var aux:string = objeto.estado + objeto.identificador;\n        \n        if (objeto.nodos.length > 0){\n            aux += this.ejecutarNodoArbol(objeto.nodos[0]);\n        }\n\n        return aux\n    }\n\n}\n\n","interface retornoBNF {\n    no: number,\n    produccion: string\n    accion: string\n}\n\nexport class GramaticaBNF {\n\n    public reporte: any;\n    public reporte2: any;\n\n    constructor(repo: any, repo2: any) {\n        this.reporte = repo;\n        this.reporte2 = repo2;\n    }\n\n    getBNFReport(): retornoBNF[] {\n        let ret: retornoBNF[] = [];\n\n        for (let i = 0; i < this.reporte.length; i++) {\n            ret.push(this.generarBodyReporte(this.reporte[i], this.reporte2[i], i));\n        }\n\n        return ret\n    }\n\n    generarBodyReporte(object: any, object2: any, iterator: number): retornoBNF {\n        var fila: retornoBNF = {\n            no: iterator,\n            produccion: object,\n            accion: object2\n        }\n        return fila;\n    }\n\n}\n\n","import { Table } from \"../Simbolos/Table\";\nimport { Tree } from \"../Simbolos/Tree\";\nimport { Tipo } from '../Varios/Tipo';\nimport { NodoAST } from \"./NodoAST\";\nimport { NodoCST } from \"./NodoCST\";\n\nexport abstract class Nodo{\n    line: Number;\n    column: Number;\n    tipo: Tipo;\n\n    abstract getNodo():NodoAST;\n    abstract getNodoCST(): NodoCST;\n\n    abstract execute(table: Table, tree: Tree): any;\n\n    constructor(tipo: Tipo, line: Number, column: Number) {\n        this.tipo = tipo;\n        this.line = line;\n        this.column = column;\n    }\n}","//import LinkedList from 'ts-linked-list';\n\nexport class NodoAST {\n    hijos: Array<NodoAST>;\n    valor: String;\n\n    constructor(valor: String) {\n        this.hijos = new Array();\n        this.valor = valor;\n    }\n\n\n    public setHijos(hijos: Array<NodoAST>): void {\n        this.hijos = hijos;\n    }\n\n    public agregarHijo(hijo: any): void {\n        if (hijo instanceof NodoAST) {\n            this.hijos.push(hijo);\n        } else {\n            this.hijos.push(new NodoAST(<String>hijo));\n        }\n    }\n\n    public agregarHijos(hijos: Array<NodoAST>): void {\n        hijos.forEach(hijo => this.hijos.push(hijo));\n    }\n\n    public agregarPrimerHijo(hijo: any): void {\n        if (hijo instanceof String) {\n            this.hijos.push(new NodoAST(hijo));\n        } else if (hijo instanceof NodoAST) {\n            this.hijos.push(hijo);\n        }\n    }\n\n    public getValor(): String {\n        return this.valor;\n    }\n\n    public setValor(cad: String): void {\n        this.valor = cad;\n    }\n\n    public getHijos(): Array<NodoAST> {\n        return this.hijos;\n    }\n}","export class NodoCST {\n    hijos: Array<NodoCST>;\n    valor: String;\n\n    constructor(valor: String) {\n        this.hijos = new Array();\n        this.valor = valor;\n    }\n\n    public setHijos(hijos: Array<NodoCST>): void {\n        this.hijos = hijos;\n    }\n\n    public agregarHijo(hijo: any): void {\n        if (hijo instanceof NodoCST) {\n            this.hijos.push(hijo);\n        } else {\n            this.hijos.push(new NodoCST(<String>hijo));\n        }\n    }\n\n    public agregarHijos(hijos: Array<NodoCST>): void {\n        hijos.forEach(hijo => this.hijos.push(hijo));\n    }\n\n    public agregarPrimerHijo(hijo: any): void {\n        if (hijo instanceof String) {\n            this.hijos.push(new NodoCST(hijo));\n        } else if (hijo instanceof NodoCST) {\n            this.hijos.push(hijo);\n        }\n    }\n\n    public getValor(): String {\n        return this.valor;\n    }\n\n    public setValor(cad: String): void {\n        this.valor = cad;\n    }\n\n    public getHijos(): Array<NodoCST> {\n        return this.hijos;\n    }\n}","import { Nodo } from \"../Arbol/Nodo\";\nimport { NodoAST } from \"../Arbol/NodoAST\";\nimport { NodoCST } from \"../Arbol/NodoCST\";\nimport { Table } from \"../Simbolos/Table\";\nimport { Tree } from \"../Simbolos/Tree\";\nimport { Error } from \"../Varios/Error\";\nimport { tipos, Tipo } from \"../Varios/Tipo\";\n\n\nfunction esEntero(numero: number) {\n    if (numero % 1 == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nexport class Aritmetica extends Nodo {\n    operadorIzq: Nodo;\n    operadorDer: Nodo;\n    operador: String;\n\n    constructor(operadorIzq: Nodo, operadorDer: Nodo, operador: String, line: Number, column: Number) {\n        super(null, line, column);\n        this.operadorIzq = operadorIzq;\n        this.operadorDer = operadorDer;\n        this.operador = operador;\n    }\n\n    execute(table: Table, tree: Tree) {\n        if (this.operadorIzq !== null) {\n            const resultadoIzq = this.operadorIzq.execute(table, tree);\n            if (resultadoIzq instanceof Error) {\n                return resultadoIzq;\n            }\n            const resultadoDerecho = this.operadorDer.execute(table, tree);\n            if (resultadoDerecho instanceof Error) {\n                return resultadoDerecho;\n            }\n\n            if (this.operador === '+') {\n                //ENTERO + \n                if (this.operadorIzq.tipo.tipo === tipos.ENTERO) {\n                    //ENTERO + ENTERO = ENTERO\n                    if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                        this.tipo = new Tipo(tipos.ENTERO);\n                        return resultadoIzq + resultadoDerecho;\n                    //ENTERO + DECIMAL = DECIMAL\n                    } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                        this.tipo = new Tipo(tipos.DECIMAL);\n                        return resultadoIzq + resultadoDerecho;\n                    //ENTERO + STRING = STRING\n                    } else if (this.operadorDer.tipo.tipo === tipos.STRING) {\n                        this.tipo = new Tipo(tipos.STRING);\n                        return resultadoIzq + resultadoDerecho;\n                    }\n                //DOUBLE + \n                } else if (this.operadorIzq.tipo.tipo === tipos.DECIMAL) {\n                    //DOUBLE + ENTERO = DOUBLE\n                    if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                        this.tipo = new Tipo(tipos.DECIMAL);\n                        return resultadoIzq + resultadoDerecho;\n                    //DOUBLE + DOUBLE = DOUBLE\n                    } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                        this.tipo = new Tipo(tipos.DECIMAL);\n                        return resultadoIzq + resultadoDerecho;\n                    //DOUBLE + STRING = STRING\n                    } else if (this.operadorDer.tipo.tipo === tipos.STRING) {\n                        this.tipo = new Tipo(tipos.STRING);\n                        return resultadoIzq + resultadoDerecho;\n                    }\n                //STRING +\n                } else if (this.operadorIzq.tipo.tipo === tipos.STRING) {\n                    //STRING + ENTERO = STRING\n                    if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                        this.tipo = new Tipo(tipos.STRING);\n                        return resultadoIzq + resultadoDerecho;\n                    //STRING + DOUBLE = STRING\n                    } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                        this.tipo = new Tipo(tipos.STRING);\n                        return resultadoIzq + resultadoDerecho;\n                    //STRING + STRING = STRING\n                    } else if (this.operadorDer.tipo.tipo === tipos.STRING) {\n                        this.tipo = new Tipo(tipos.STRING);\n                        return resultadoIzq + resultadoDerecho;\n                    } else {\n                        const error = new Error('Semantico',\n                            `No se pueden Sumar los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                            this.line, this.column);\n                        tree.errores.push(error);\n                        // tree.consola.push(error.toString());\n                        return error;\n                    }\n                } else {\n                    const error = new Error('Semantico',\n                        `No se pueden Sumar los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operador === '-') {\n                //ENTERO - \n                if (this.operadorIzq.tipo.tipo === tipos.ENTERO) {\n                    //ENTERO - ENTERO = ENTERO\n                    if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                        this.tipo = new Tipo(tipos.ENTERO);\n                        return resultadoIzq - resultadoDerecho;\n                    //ENTERO - DECIMAL = DECIMAL\n                    } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                        this.tipo = new Tipo(tipos.DECIMAL);\n                        return resultadoIzq - resultadoDerecho;\n                    } else {\n                        const error = new Error('Semantico',\n                            `No se pueden Restar los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                            this.line, this.column);\n                        tree.errores.push(error);\n                        // tree.consola.push(error.toString());\n                        return error;\n                    }\n                //DOUBLE -\n                } else if (this.operadorIzq.tipo.tipo === tipos.DECIMAL) {\n                    //DOUBLE - ENTERO = DOUBLE\n                    if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                        this.tipo = new Tipo(tipos.DECIMAL);\n                        return resultadoIzq - resultadoDerecho;\n                    //DOUBLE - DOUBLE = DOUBLE\n                    } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                        this.tipo = new Tipo(tipos.DECIMAL);\n                        return resultadoIzq - resultadoDerecho;\n                    } else {\n                        const error = new Error('Semantico',\n                            `No se pueden Restar los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                            this.line, this.column);\n                        tree.errores.push(error);\n                        // tree.consola.push(error.toString());\n                        return error;\n                    }\n                } else {\n                    const error = new Error('Semantico',\n                        `No se pueden Restar los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operador === '*') {\n                //ENTERO * \n                if (this.operadorIzq.tipo.tipo === tipos.ENTERO) {\n                    //ENTERO * ENTERO = ENTERO\n                    if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                        this.tipo = new Tipo(tipos.ENTERO);\n                        return resultadoIzq * resultadoDerecho;\n                    //ENTERO * DECIMAL = DECIMAL\n                    } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                        this.tipo = new Tipo(tipos.DECIMAL);\n                        return resultadoIzq * resultadoDerecho;\n                    } else {\n                        const error = new Error('Semantico',\n                            `No se pueden Multiplicar los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                            this.line, this.column);\n                        tree.errores.push(error);\n                        // tree.consola.push(error.toString());\n                        return error;\n                    }\n                //DOUBLE *\n                } else if (this.operadorIzq.tipo.tipo === tipos.DECIMAL) {\n                    //DOUBLE * ENTERO = DOUBLE\n                    if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                        this.tipo = new Tipo(tipos.DECIMAL);\n                        return resultadoIzq * resultadoDerecho;\n                    //DOUBLE * DOUBLE = DOUBLE\n                    } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                        this.tipo = new Tipo(tipos.DECIMAL);\n                        return resultadoIzq * resultadoDerecho;\n                    } else {\n                        const error = new Error('Semantico',\n                            `No se pueden Multiplicar los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                            this.line, this.column);\n                        tree.errores.push(error);\n                        // tree.consola.push(error.toString());\n                        return error;\n                    }\n                } else {\n                    const error = new Error('Semantico',\n                        `No se pueden Multiplicar los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operador === '/') {\n                //DIVISION SOBRE 0\n                if (resultadoDerecho === 0) {\n                    const error = new Error('Semantico',\n                        `Error aritmetico, La division con cero no esta permitida`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    return error;\n                }\n                //ENTERO / \n                if (this.operadorIzq.tipo.tipo === tipos.ENTERO) {\n                    //ENTERO / ENTERO = DOUBLE\n                    if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                        this.tipo = new Tipo(tipos.DECIMAL);\n                        return resultadoIzq / resultadoDerecho;\n                        //DECIMAL / DECIMAL = DECIMAL\n                    } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                        this.tipo = new Tipo(tipos.DECIMAL);\n                        return resultadoIzq / resultadoDerecho;\n                    } else {\n                        const error = new Error('Semantico',\n                            `No se pueden Dividir los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                            this.line, this.column);\n                        tree.errores.push(error);\n                        // tree.consola.push(error.toString());\n                        return error;\n                    }\n                    //DOUBLE /\n                } else if (this.operadorIzq.tipo.tipo === tipos.DECIMAL) {\n                    //DOUBLE / ENTERO = DOUBLE\n                    if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                        this.tipo = new Tipo(tipos.DECIMAL);\n                        return resultadoIzq / resultadoDerecho;\n                        //DOUBLE / DOUBLE = DOUBLE\n                    } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                        this.tipo = new Tipo(tipos.DECIMAL);\n                        return resultadoIzq / resultadoDerecho;\n                    } else {\n                        const error = new Error('Semantico',\n                            `No se pueden Dividir los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                            this.line, this.column);\n                        tree.errores.push(error);\n                        // tree.consola.push(error.toString());\n                        return error;\n                    }\n                } else {\n                    const error = new Error('Semantico',\n                        `No se pueden Dividir los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operador === '%') {\n                //ENTERO % \n                if (this.operadorIzq.tipo.tipo === tipos.ENTERO) {\n                    //ENTERO % ENTERO = DOUBLE\n                    if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                        this.tipo = new Tipo(tipos.DECIMAL);\n                        return resultadoIzq % resultadoDerecho;\n                    //ENTERO % DECIMAL = DECIMAL\n                    } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                        this.tipo = new Tipo(tipos.DECIMAL);\n                        return resultadoIzq % resultadoDerecho;\n                    } else {\n                        const error = new Error('Semantico',\n                            `No se puede aplicar modulo con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                            this.line, this.column);\n                        tree.errores.push(error);\n                        // tree.consola.push(error.toString());\n                        return error;\n                    }\n                //DOUBLE %\n                } else if (this.operadorIzq.tipo.tipo === tipos.DECIMAL) {\n                    //DOUBLE % ENTERO = DOUBLE\n                    if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                        this.tipo = new Tipo(tipos.DECIMAL);\n                        return resultadoIzq % resultadoDerecho;\n                    //DOUBLE % DOUBLE = DOUBLE\n                    } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                        this.tipo = new Tipo(tipos.DECIMAL);\n                        return resultadoIzq % resultadoDerecho;\n                    } else {\n                        const error = new Error('Semantico',\n                            `No se puede aplicar modulo los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                            this.line, this.column);\n                        tree.errores.push(error);\n                        // tree.consola.push(error.toString());\n                        return error;\n                    }\n                } else {\n                    const error = new Error('Semantico',\n                        `No se puede aplicar modulo los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else {\n                const error = new Error('Semantico',\n                    `Error, Operador desconocido`,\n                    this.line, this.column);\n                tree.errores.push(error);\n                tree.consola.push(error.toString());\n                return error;\n            }\n        }\n    }\n\n    getNodo(){\n        var nodo:NodoAST = new NodoAST(\"\");\n        if(this.operadorIzq != null){\n            nodo.agregarHijo(this.operadorIzq.getNodo());\n            nodo.agregarHijo(this.operador + \"\");\n            nodo.agregarHijo(this.operadorDer.getNodo());\n            \n        }else{\n            nodo.agregarHijo(this.operador + \"\");\n            nodo.agregarHijo(this.operadorDer.getNodo());\n        } \n        return nodo;\n    }\n\n    getNodoCST() {\n        var nodo:NodoCST = new NodoCST(\"ARITMETICA\");\n        if(this.operadorIzq != null){\n            nodo.agregarHijo(this.operadorIzq.getNodoCST());\n            nodo.agregarHijo(this.operador + \"\");\n            nodo.agregarHijo(this.operadorDer.getNodoCST());\n            \n        }else{\n            nodo.agregarHijo(this.operador + \"\");\n            nodo.agregarHijo(this.operadorDer.getNodoCST());\n        } \n        return nodo;\n    }\n}","import { Nodo } from \"../Arbol/Nodo\";\nimport { Table } from \"../Simbolos/Table\";\nimport { Tree } from \"../Simbolos/Tree\";\nimport { Error } from \"../Varios/Error\";\nimport { tipos, Tipo } from \"../Varios/Tipo\";\nimport { NodoAST } from \"../Arbol/NodoAST\";\nimport { NodoCST } from \"../Arbol/NodoCST\";\n\nexport class Logico extends Nodo {\n    operadorIzq: Nodo;\n    operadorDer: Nodo;\n    operador: String;\n\n    constructor(operadorIzq: Nodo, operadorDer: Nodo, operador: String, line: Number, column: Number) {\n        super(new Tipo(tipos.BOOLEANO), line, column);\n        this.operadorIzq = operadorIzq;\n        this.operadorDer = operadorDer;\n        this.operador = operador;\n    }\n\n    execute(table: Table, tree: Tree) {\n        if (this.operadorIzq !== null) {\n            const resultadoIzq = this.operadorIzq.execute(table, tree);\n            if (resultadoIzq instanceof Error) {\n                return resultadoIzq;\n            }\n            const resultadoDer = this.operadorDer.execute(table, tree);\n            if (resultadoDer instanceof Error) {\n                return resultadoDer;\n            }\n\n            if (this.operador === '||') {\n                if (this.operadorIzq.tipo.tipo === tipos.BOOLEANO && this.operadorDer.tipo.tipo === tipos.BOOLEANO) {\n                    return resultadoIzq || resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `No se puede operar OR con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operador === '&&') {\n                if (this.operadorIzq.tipo.tipo === tipos.BOOLEANO && this.operadorDer.tipo.tipo === tipos.BOOLEANO) {\n                    return resultadoIzq && resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `No se puede operar AND con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else {\n                const error = new Error('Semantico',\n                    `Error, Operador desconocido`,\n                    this.line, this.column);\n                tree.errores.push(error);\n                tree.consola.push(error.toString());\n                return error;\n            }\n        } else {\n            const resultadoDer = this.operadorDer.execute(table, tree);\n            if (resultadoDer instanceof Error) {\n                return resultadoDer;\n            }\n            if (this.operador === '!') {\n                if (this.operadorDer.tipo.tipo === tipos.BOOLEANO) {\n                    return !resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `No se puede operar Not con el tipo ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else {\n                const error = new Error('Semantico',\n                    `Error, Operador desconocido`,\n                    this.line, this.column);\n                tree.errores.push(error);\n                // tree.consola.push(error.toString());\n                return error;\n            }\n        }\n    }\n\n    getNodo() {\n        var nodo: NodoAST  = new NodoAST(\"\");\n        if(this.operadorIzq != null){\n            nodo.agregarHijo(this.operadorIzq.getNodo());\n            nodo.agregarHijo(this.operador + \"\");\n            nodo.agregarHijo(this.operadorDer.getNodo());\n            \n        }else{\n            nodo.agregarHijo(this.operador + \"\");\n            nodo.agregarHijo(this.operadorDer.getNodo());\n        } \n        return nodo;\n    }\n\n    getNodoCST() {\n        var nodo: NodoCST  = new NodoCST(\"LOGICO\");\n        if(this.operadorIzq != null){\n            nodo.agregarHijo(this.operadorIzq.getNodoCST());\n            nodo.agregarHijo(this.operador + \"\");\n            nodo.agregarHijo(this.operadorDer.getNodoCST());\n            \n        }else{\n            nodo.agregarHijo(this.operador + \"\");\n            nodo.agregarHijo(this.operadorDer.getNodoCST());\n        } \n        return nodo;\n    }\n}\n","export class NodoX{\n    public estado: string;\n    public identificador:any;\n    public nodos: Array<NodoX>;\n\n    public constructor(estado:string, identificador:any, nodos:Array<NodoX>) {\n        this.estado = estado;\n        this.identificador = identificador;\n        this.nodos = nodos;\n    }\n}","import { Nodo } from \"../Arbol/Nodo\";\nimport { Table } from \"../Simbolos/Table\";\nimport { Tree } from \"../Simbolos/Tree\";\nimport { Tipo } from '../Varios/Tipo';\nimport { NodoAST } from \"../Arbol/NodoAST\";\nimport { NodoCST } from \"../Arbol/NodoCST\";\n\n// Esta clase crea un nodo del tipo primitivo, ya sea int, double, string, char, boolean\n\nexport class Primitivo extends Nodo{\n    valor: Object;\n\n    constructor(tipo:Tipo, valor: Object, line: Number, column: Number){\n        super(tipo, line, column);\n        this.valor = valor;\n    }\n\n    execute(table: Table, tree: Tree) {\n        return this.valor;\n    }\n\n    getNodo(){\n        var nodo:NodoAST  = new NodoAST(\"\");\n        nodo.agregarHijo(this.valor+'');\n        return nodo;\n    }\n\n    getNodoCST() {\n        var nodo:NodoCST  = new NodoCST(\"PRIMITIVO\");\n        nodo.agregarHijo(this.valor+'');\n        return nodo;\n    }\n}","import { Nodo } from \"../Arbol/Nodo\";\nimport { Table } from \"../Simbolos/Table\";\nimport { Tree } from \"../Simbolos/Tree\";\nimport { Error } from \"../Varios/Error\";\nimport { tipos, Tipo } from \"../Varios/Tipo\";\nimport { NodoAST } from \"../Arbol/NodoAST\";\nimport { NodoCST } from \"../Arbol/NodoCST\";\n\nexport class Relacional extends Nodo {\n    operadorIzq: Nodo;\n    operadorDer: Nodo;\n    operador: String;\n\n    constructor(operadorIzq: Nodo, operadorDer: Nodo, operador: String, line: Number, column: Number) {\n        super(new Tipo(tipos.BOOLEANO), line, column);\n        this.operadorIzq = operadorIzq;\n        this.operadorDer = operadorDer;\n        this.operador = operador;\n    }\n\n    execute(table: Table, tree: Tree) {\n        const resultadoIzq = this.operadorIzq.execute(table, tree);\n        if (resultadoIzq instanceof Error) {\n            return resultadoIzq;\n        }\n        const resultadoDer = this.operadorDer.execute(table, tree);\n        if (resultadoDer instanceof Error) {\n            return resultadoDer;\n        }\n\n        if (this.operador === '<') {\n            if (this.operadorIzq.tipo.tipo === tipos.ENTERO) {\n                if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                    return resultadoIzq < resultadoDer;\n                } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                    return resultadoIzq < resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MENOR QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.DECIMAL) {\n                if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                    return resultadoIzq < resultadoDer;\n                } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                    return resultadoIzq < resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MENOR QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.BOOLEANO) {\n                if (this.operadorDer.tipo.tipo === tipos.BOOLEANO) {\n                    return resultadoIzq < resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MENOR QUE se esta tratando de operar con los tipos${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.STRING) {\n                if (this.operadorDer.tipo.tipo === tipos.STRING) {\n                    return resultadoIzq < resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MENOR QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else {\n                const error = new Error('Semantico',\n                    `El operador relacional MENOR QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                    this.line, this.column);\n                tree.errores.push(error);\n                // tree.consola.push(error.toString());\n                return error;\n            }\n        }\n        \n        \n        \n        \n        else if (this.operador === 'lt') {\n            if (this.operadorIzq.tipo.tipo === tipos.ENTERO) {\n                if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                    return resultadoIzq < resultadoDer;\n                } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                    return resultadoIzq < resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MENOR QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.DECIMAL) {\n                if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                    return resultadoIzq < resultadoDer;\n                } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                    return resultadoIzq < resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MENOR QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.BOOLEANO) {\n                if (this.operadorDer.tipo.tipo === tipos.BOOLEANO) {\n                    return resultadoIzq < resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MENOR QUE se esta tratando de operar con los tipos${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.STRING) {\n                if (this.operadorDer.tipo.tipo === tipos.STRING) {\n                    return resultadoIzq < resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MENOR QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else {\n                const error = new Error('Semantico',\n                    `El operador relacional MENOR QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                    this.line, this.column);\n                tree.errores.push(error);\n                // tree.consola.push(error.toString());\n                return error;\n            }\n        }\n        \n        \n        \n        \n        \n        \n        else if (this.operador === '<=') {\n            if (this.operadorIzq.tipo.tipo === tipos.ENTERO) {\n                if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                    return resultadoIzq <= resultadoDer;\n                } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                    return resultadoIzq <= resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MENOR IGUAL QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.DECIMAL) {\n                if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                    return resultadoIzq <= resultadoDer;\n                } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                    return resultadoIzq <= resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MENOR IGUAL QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.BOOLEANO) {\n                if (this.operadorDer.tipo.tipo === tipos.BOOLEANO) {\n                    return resultadoIzq <= resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MENOR IGUAL QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.STRING) {\n                if (this.operadorDer.tipo.tipo === tipos.STRING) {\n                    return resultadoIzq <= resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MENOR IGUAL QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else {\n                const error = new Error('Semantico',\n                    `El operador relacional MENOR IGUAL QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                    this.line, this.column);\n                tree.errores.push(error);\n                // tree.consola.push(error.toString());\n                return error;\n            }\n        }\n        \n        else if (this.operador === 'gt') {\n            if (this.operadorIzq.tipo.tipo === tipos.ENTERO) {\n                if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                    return resultadoIzq > resultadoDer;\n                } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                    return resultadoIzq > resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MAYOR QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.DECIMAL) {\n                if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                    return resultadoIzq > resultadoDer;\n                } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                    return resultadoIzq > resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MAYOR QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.BOOLEANO) {\n                if (this.operadorDer.tipo.tipo === tipos.BOOLEANO) {\n                    return resultadoIzq > resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MAYOR QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.STRING) {\n                if (this.operadorDer.tipo.tipo === tipos.STRING) {\n                    return resultadoIzq > resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MAYOR QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            }else {\n                const error = new Error('Semantico',\n                    `El operador relacional MAYOR QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                    this.line, this.column);\n                tree.errores.push(error);\n                // tree.consola.push(error.toString());\n                return error;\n            }\n        } \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        else if (this.operador === '>') {\n            if (this.operadorIzq.tipo.tipo === tipos.ENTERO) {\n                if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                    return resultadoIzq > resultadoDer;\n                } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                    return resultadoIzq > resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MAYOR QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.DECIMAL) {\n                if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                    return resultadoIzq > resultadoDer;\n                } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                    return resultadoIzq > resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MAYOR QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.BOOLEANO) {\n                if (this.operadorDer.tipo.tipo === tipos.BOOLEANO) {\n                    return resultadoIzq > resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MAYOR QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.STRING) {\n                if (this.operadorDer.tipo.tipo === tipos.STRING) {\n                    return resultadoIzq > resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MAYOR QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            }else {\n                const error = new Error('Semantico',\n                    `El operador relacional MAYOR QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                    this.line, this.column);\n                tree.errores.push(error);\n                // tree.consola.push(error.toString());\n                return error;\n            }\n        } else if (this.operador === '>=') {\n            if (this.operadorIzq.tipo.tipo === tipos.ENTERO) {\n                if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                    return resultadoIzq >= resultadoDer;\n                } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                    return resultadoIzq >= resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MAYOR IGUAL QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.DECIMAL) {\n                if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                    return resultadoIzq >= resultadoDer;\n                } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                    return resultadoIzq >= resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MAYOR IGUAL QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.BOOLEANO) {\n                if (this.operadorDer.tipo.tipo === tipos.BOOLEANO) {\n                    return resultadoIzq >= resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MAYOR IGUAL QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.STRING) {\n                if (this.operadorDer.tipo.tipo === tipos.STRING) {\n                    return resultadoIzq >= resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional MAYOR IGUAL QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else {\n                const error = new Error('Semantico',\n                    `El operador relacional MAYOR IGUAL QUE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                    this.line, this.column);\n                tree.errores.push(error);\n                // tree.consola.push(error.toString());\n                return error;\n            }\n        } else if (this.operador === '!=') {\n            if (this.operadorIzq.tipo.tipo === tipos.ENTERO) {\n                if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                    return resultadoIzq != resultadoDer;\n                } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                    return resultadoIzq != resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional DIFERENTE DE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.DECIMAL) {\n                if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                    return resultadoIzq != resultadoDer;\n                } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                    return resultadoIzq != resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional DIFERENTE DE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.BOOLEANO) {\n                if (this.operadorDer.tipo.tipo === tipos.BOOLEANO) {\n                    return resultadoIzq != resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional DIFERENTE DE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.STRING) {\n                if (this.operadorDer.tipo.tipo === tipos.STRING) {\n                    return resultadoIzq != resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional DIFERENTE DE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            }else {\n                const error = new Error('Semantico',\n                    `El operador relacional DIFERENTE DE se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                    this.line, this.column);\n                tree.errores.push(error);\n                // tree.consola.push(error.toString());\n                return error;\n            }\n        } else if (this.operador === '==') {\n            if (this.operadorIzq.tipo.tipo === tipos.ENTERO) {\n                if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                    return resultadoIzq == resultadoDer;\n                } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                    return resultadoIzq == resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional IGUAL A se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.DECIMAL) {\n                if (this.operadorDer.tipo.tipo === tipos.ENTERO) {\n                    return resultadoIzq == resultadoDer;\n                } else if (this.operadorDer.tipo.tipo === tipos.DECIMAL) {\n                    return resultadoIzq == resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional IGUAL A se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.BOOLEANO) {\n                if (this.operadorDer.tipo.tipo === tipos.BOOLEANO) {\n                    return resultadoIzq == resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional IGUAL A se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else if (this.operadorIzq.tipo.tipo === tipos.STRING) {\n                if (this.operadorDer.tipo.tipo === tipos.STRING) {\n                    return resultadoIzq == resultadoDer;\n                } else {\n                    const error = new Error('Semantico',\n                        `El operador relacional IGUAL A se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                        this.line, this.column);\n                    tree.errores.push(error);\n                    // tree.consola.push(error.toString());\n                    return error;\n                }\n            } else {\n                const error = new Error('Semantico',\n                    `El operador relacional IGUAL A se esta tratando de operar con los tipos ${this.operadorIzq.tipo} y ${this.operadorDer.tipo}`,\n                    this.line, this.column);\n                tree.errores.push(error);\n                // tree.consola.push(error.toString());\n                return error;\n            }\n        } else {\n            const error = new Error('Semantico',\n                `Operador desconocido`,\n                this.line, this.column);\n            tree.errores.push(error);\n            // tree.consola.push(error.toString());\n            return error;\n        }\n    }\n\n    getNodo() {\n        var nodo:NodoAST  = new NodoAST(\"\");\n        nodo.agregarHijo(this.operadorIzq.getNodo());\n        nodo.agregarHijo(this.operador + \"\");\n        nodo.agregarHijo(this.operadorDer.getNodo());\n        return nodo;\n    }\n\n    getNodoCST() {\n        var nodo:NodoCST  = new NodoCST(\"RELACIONAL\");\n        nodo.agregarHijo(this.operadorIzq.getNodoCST());\n        nodo.agregarHijo(this.operador + \"\");\n        nodo.agregarHijo(this.operadorDer.getNodoCST());\n        return nodo;\n    }\n}","import { Nodo } from \"../Arbol/Nodo\";\nimport { Table } from \"../Simbolos/Table\";\nimport { Tree } from \"../Simbolos/Tree\";\nimport { Excepcion } from \"../Varios/Exepciones\";\nimport { tipos, Tipo } from \"../Varios/Tipo\";\nimport { NodoAST } from \"../Arbol/NodoAST\";\nimport { NodoCST } from \"../Arbol/NodoCST\";\n\nexport class Substrings extends Nodo {\n    expresion: Nodo;\n    inicio: Nodo;\n    fin: Nodo;\n    constructor(expresion: Nodo, inicio: Nodo, fin: Nodo, line: Number, column: Number) {\n        super(new Tipo(tipos.STRING), line, column);\n        this.expresion = expresion;\n        this.inicio = inicio\n        this.fin = fin\n    }\n\n    execute(table: Table, tree: Tree) {\n        try {\n            const resultado = this.expresion.execute(table, tree);\n            const ini = this.inicio.execute(table, tree);\n            const fini = this.fin.execute(table, tree);\n            if (resultado instanceof Excepcion) {\n                return resultado;\n            } else {\n                if (fini == -1){\n                    return resultado.substring(ini)\n                }else{\n                    return resultado.substring(ini, fini);\n                }\n            }\n        } catch (err) {\n            const error = new Excepcion('Semantico',\n                `Ha ocurrido un error al devolver el tipo`,\n                this.line, this.column);\n            tree.errores.push(error);\n            tree.consola.push(error.toString());\n            return error;\n        }\n    }\n\n    getNodo() {\n        try {\n            var nodo: NodoAST = new NodoAST(\"\");\n            nodo.agregarHijo(\"ToString\");\n            nodo.agregarHijo(\"(\");\n            nodo.agregarHijo(this.expresion.getNodo());\n            nodo.agregarHijo(\")\");\n            return nodo;\n        } catch (err) {\n            var nodo: NodoAST = new NodoAST(\"\");\n            return nodo;\n        }\n    }\n\n    getNodoCST() {\n        try {\n            var nodo: NodoCST = new NodoCST(\"SUBSTRING\");\n            nodo.agregarHijo(\"SUBSTRING\");\n            nodo.agregarHijo(\"(\");\n            nodo.agregarHijo(this.expresion.getNodoCST());\n            nodo.agregarHijo(\",\")\n            nodo.agregarHijo(this.inicio.getNodoCST())\n            nodo.agregarHijo(\",\")\n            nodo.agregarHijo(this.fin.getNodoCST())\n            nodo.agregarHijo(\")\");\n            return nodo;\n        } catch (err) {\n            var nodo: NodoCST = new NodoCST(\"SUBSTRING\");\n            return nodo;\n        }\n    }\n\n}","import { Nodo } from \"../Arbol/Nodo\";\nimport { Table } from \"../Simbolos/Table\";\nimport { Tree } from \"../Simbolos/Tree\";\nimport { Excepcion } from \"../Varios/Exepciones\";\nimport { tipos, Tipo } from \"../Varios/Tipo\";\nimport { NodoAST } from \"../Arbol/NodoAST\";\nimport { NodoCST } from \"../Arbol/NodoCST\";\n\nexport class ToLower extends Nodo {\n    expresion: Nodo;\n    constructor(expresion: Nodo, line: Number, column: Number) {\n        super(new Tipo(tipos.STRING), line, column);\n        this.expresion = expresion;\n    }\n\n    execute(table: Table, tree: Tree) {\n        try {\n            const resultado = this.expresion.execute(table, tree);\n            if (resultado instanceof Excepcion) {\n                return resultado;\n            } else {\n                return resultado.toLowerCase();\n            }\n        } catch (err) {\n            const error = new Excepcion('Semantico',\n                `Ha ocurrido un error al convertir en minusculas`,\n                this.line, this.column);\n            tree.errores.push(error);\n            tree.consola.push(error.toString());\n            return error;\n        }\n    }\n\n    getNodo() {\n        try {\n            var nodo: NodoAST = new NodoAST(\"\");\n            nodo.agregarHijo(\"ToLower\");\n            nodo.agregarHijo(\"(\");\n            nodo.agregarHijo(this.expresion.getNodo());\n            nodo.agregarHijo(\")\");\n            return nodo;\n        } catch (err) {\n            var nodo: NodoAST = new NodoAST(\"\");\n            return nodo;\n        }\n    }\n\n    getNodoCST() {\n        try {\n            var nodo: NodoCST = new NodoCST(\"TOLOWER\");\n            nodo.agregarHijo(\"ToLower\");\n            nodo.agregarHijo(\"(\");\n            nodo.agregarHijo(this.expresion.getNodoCST());\n            nodo.agregarHijo(\")\");\n            return nodo;\n        } catch (err) {\n            var nodo: NodoCST = new NodoCST(\"ToLower\");\n            return nodo;\n        }\n    }\n\n}","import { Nodo } from \"../Arbol/Nodo\";\nimport { Table } from \"../Simbolos/Table\";\nimport { Tree } from \"../Simbolos/Tree\";\nimport { Excepcion } from \"../Varios/Exepciones\";\nimport { tipos, Tipo } from \"../Varios/Tipo\";\nimport { NodoAST } from \"../Arbol/NodoAST\";\nimport { NodoCST } from \"../Arbol/NodoCST\";\n\nexport class ToNumber extends Nodo {\n    expresion: Nodo;\n    constructor(expresion: Nodo, line: Number, column: Number) {\n        super(new Tipo(tipos.STRING), line, column);\n        this.expresion = expresion;\n    }\n\n    execute(table: Table, tree: Tree) {\n        try {\n            const resultado = this.expresion.execute(table, tree);\n            if (resultado instanceof Excepcion) {\n                return resultado;\n            } else {\n                const r = parseInt(resultado)\n                    return r;\n            }\n        } catch (err) {\n            const error = new Excepcion('Semantico',\n                `Ha ocurrido un error al devolver el tipo`,\n                this.line, this.column);\n            tree.errores.push(error);\n            tree.consola.push(error.toString());\n            return error;\n        }\n    }\n\n    getNodo() {\n        try {\n            var nodo: NodoAST = new NodoAST(\"\");\n            nodo.agregarHijo(\"ToString\");\n            nodo.agregarHijo(\"(\");\n            nodo.agregarHijo(this.expresion.getNodo());\n            nodo.agregarHijo(\")\");\n            return nodo;\n        } catch (err) {\n            var nodo: NodoAST = new NodoAST(\"\");\n            return nodo;\n        }\n    }\n\n    getNodoCST() {\n        try {\n            var nodo: NodoCST = new NodoCST(\"TONUMBER\");\n            nodo.agregarHijo(\"ToNumber\");\n            nodo.agregarHijo(\"(\");\n            nodo.agregarHijo(this.expresion.getNodoCST());\n            nodo.agregarHijo(\")\");\n            return nodo;\n        } catch (err) {\n            var nodo: NodoCST = new NodoCST(\"ToNumber\");\n            return nodo;\n        }\n    }\n}","import { Nodo } from \"../Arbol/Nodo\";\nimport { Table } from \"../Simbolos/Table\";\nimport { Tree } from \"../Simbolos/Tree\";\nimport { Excepcion } from \"../Varios/Exepciones\";\nimport { tipos, Tipo } from \"../Varios/Tipo\";\nimport { NodoAST } from \"../Arbol/NodoAST\";\nimport { NodoCST } from \"../Arbol/NodoCST\";\n\nexport class ToString extends Nodo {\n    expresion: Nodo;\n    constructor(expresion: Nodo, line: Number, column: Number) {\n        super(new Tipo(tipos.STRING), line, column);\n        this.expresion = expresion;\n    }\n\n    execute(table: Table, tree: Tree) {\n        try {\n            const resultado = this.expresion.execute(table, tree);\n            if (resultado instanceof Excepcion) {\n                return resultado;\n            } else {\n                    return resultado.toString();\n               \n            }\n        } catch (err) {\n            const error = new Excepcion('Semantico',\n                `Ha ocurrido un error al devolver el tipo`,\n                this.line, this.column);\n            tree.errores.push(error);\n            tree.consola.push(error.toString());\n            return error;\n        }\n    }\n\n    getNodo() {\n        try {\n            var nodo: NodoAST = new NodoAST(\"\");\n            nodo.agregarHijo(\"ToString\");\n            nodo.agregarHijo(\"(\");\n            nodo.agregarHijo(this.expresion.getNodo());\n            nodo.agregarHijo(\")\");\n            return nodo;\n        } catch (err) {\n            var nodo: NodoAST = new NodoAST(\"\");\n            return nodo;\n        }\n    }\n\n    getNodoCST() {\n        try {\n            var nodo: NodoCST = new NodoCST(\"TOSTRING\");\n            nodo.agregarHijo(\"ToString\");\n            nodo.agregarHijo(\"(\");\n            nodo.agregarHijo(this.expresion.getNodoCST());\n            nodo.agregarHijo(\")\");\n            return nodo;\n        } catch (err) {\n            var nodo: NodoCST = new NodoCST(\"ToString\");\n            return nodo;\n        }\n    }\n\n}","import { Nodo } from \"../Arbol/Nodo\";\nimport { Table } from \"../Simbolos/Table\";\nimport { Tree } from \"../Simbolos/Tree\";\nimport { Simbolo } from \"../Simbolos/Simbolo\";\nimport { Error } from \"../Varios/Error\";\nimport { NodoAST } from \"../Arbol/NodoAST\";\nimport { NodoCST } from \"../Arbol/NodoCST\";\n\nexport class Identificador extends Nodo {\n    id: String;\n    valor: any;\n\n    constructor(id: String, line: Number, column: Number) {\n        super(null, line, column);\n        this.id = id;\n    }\n\n    execute(table: Table, tree: Tree) {\n        let variable: Simbolo;\n        variable = table.getVariable(this.id);\n        if (variable == null) {\n            const error = new Error('Semantico',\n                `La variable {${this.id}} no ha sido encontrada`,\n                this.line, this.column);\n            tree.errores.push(error);\n            return error;\n        }\n        this.tipo = variable.tipo;\n        this.valor = variable.valor;\n        return variable.valor;\n    }\n\n    getNodo() {\n        var nodo:NodoAST  = new NodoAST(\"\");\n        var nodo2:NodoAST  = new NodoAST(this.id + \"\");\n        nodo2.agregarHijo(this.valor + \"\");\n        nodo.agregarHijo(nodo2);\n        return nodo;\n    }\n\n    getNodoCST() {\n        var nodo:NodoCST  = new NodoCST(\"IDENTIFICADOR\");\n        var nodo2:NodoCST  = new NodoCST(this.id + \"\");\n        nodo2.agregarHijo(this.valor + \"\");\n        nodo.agregarHijo(nodo2);\n        return nodo;\n    }\n}","import { Nodo } from \"../Arbol/Nodo\";\nimport { Table } from \"../Simbolos/Table\";\nimport { Tree } from \"../Simbolos/Tree\";\nimport { Excepcion } from \"../Varios/Exepciones\";\nimport { tipos, Tipo } from \"../Varios/Tipo\";\nimport { NodoAST } from \"../Arbol/NodoAST\";\nimport { NodoCST } from \"../Arbol/NodoCST\";\n\nexport class ToUpper extends Nodo {\n    expresion: Nodo;\n    constructor(expresion: Nodo, line: Number, column: Number) {\n        super(new Tipo(tipos.STRING), line, column);\n        this.expresion = expresion;\n    }\n\n    execute(table: Table, tree: Tree) {\n        try {\n            const resultado = this.expresion.execute(table, tree);\n            if (resultado instanceof Excepcion) {\n                return resultado;\n            } else {\n                return resultado.toUpperCase();\n            }\n        } catch (err) {\n            const error = new Excepcion('Semantico',\n                `Ha ocurrido un error al convertir en mayusculas`,\n                this.line, this.column);\n            tree.errores.push(error);\n            tree.consola.push(error.toString());\n            return error;\n        }\n    }\n\n    getNodo() {\n        try {\n            var nodo: NodoAST = new NodoAST(\"\");\n            nodo.agregarHijo(\"ToUpper\");\n            nodo.agregarHijo(\"(\");\n            nodo.agregarHijo(this.expresion.getNodo());\n            nodo.agregarHijo(\")\");\n            return nodo;\n        } catch (err) {\n            var nodo: NodoAST = new NodoAST(\"\");\n            return nodo;\n        }\n    }\n\n    getNodoCST() {\n        try {\n            var nodo: NodoCST = new NodoCST(\"TOUPPER\");\n            nodo.agregarHijo(\"ToUpper\");\n            nodo.agregarHijo(\"(\");\n            nodo.agregarHijo(this.expresion.getNodoCST());\n            nodo.agregarHijo(\")\");\n            return nodo;\n        } catch (err) {\n            var nodo: NodoCST = new NodoCST(\"ToUpper\");\n            return nodo;\n        }\n    }\n}","/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar GramaticaXquery = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,12],$V2=[1,17],$V3=[1,14],$V4=[1,11],$V5=[1,15],$V6=[1,16],$V7=[1,18],$V8=[1,19],$V9=[1,9],$Va=[5,7,20,26,28,37,39,46,49,50,51,53],$Vb=[1,24],$Vc=[1,33],$Vd=[1,32],$Ve=[1,34],$Vf=[1,29],$Vg=[1,30],$Vh=[1,31],$Vi=[5,7,20,23,26,28,37,39,46,49,50,51,53],$Vj=[1,47],$Vk=[1,48],$Vl=[1,49],$Vm=[1,50],$Vn=[1,51],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[5,7,14,20,23,26,28,37,39,41,46,47,49,50,51,53,57,58,59,60,61,62,63,64,65,66,67,68],$Vx=[1,70],$Vy=[1,72],$Vz=[1,69],$VA=[1,71],$VB=[1,73],$VC=[14,23],$VD=[14,23,73],$VE=[1,101],$VF=[2,75],$VG=[1,108],$VH=[1,109],$VI=[1,106],$VJ=[1,110],$VK=[1,111],$VL=[5,7,14,20,23,26,28,37,39,41,46,49,50,51,53,58,59,60,61,62,63,64,65,66,67,68],$VM=[5,7,14,20,23,26,28,37,39,41,46,49,50,51,53,59,61,62,63,64,65,66,67,68],$VN=[5,7,14,20,23,26,28,37,39,41,46,49,50,51,53,59,65,66,67,68],$VO=[11,60,75,81,82],$VP=[14,23,73,79],$VQ=[1,155],$VR=[1,176],$VS=[1,177],$VT=[1,178],$VU=[1,179],$VV=[1,180],$VW=[2,4],$VX=[1,183],$VY=[14,19,22,23];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"INICIO_XQUERY\":3,\"INSTRUCCIONES\":4,\"EOF\":5,\"FUNCION\":6,\"tk_declare\":7,\"tk_function\":8,\"MENU_LOCAL\":9,\"tk_dosPuntos\":10,\"tk_identificador\":11,\"tk_parA\":12,\"LISTA_DECLARACION_FUNCION\":13,\"tk_parC\":14,\"tk_as\":15,\"tk_xs\":16,\"TIPO_DATO\":17,\"MENU_INTERROGA\":18,\"llaveA\":19,\"llaveC\":20,\"tk_punto_coma\":21,\"tk_Interroga\":22,\"tk_coma\":23,\"DECLARACION_FUNCION\":24,\"tk_identificadorXQUERY\":25,\"tk_local\":26,\"tk_int\":27,\"tk_string\":28,\"tk_double\":29,\"tk_DECIMAL\":30,\"tk_integer\":31,\"INSTRUCCION\":32,\"DECLARACION_GLOBAL\":33,\"IF\":34,\"LLAMADA_FUNCION\":35,\"RETURN_CICLO\":36,\"tk_return\":37,\"EXP_XQUERY\":38,\"tk_if\":39,\"tk_then\":40,\"tk_else\":41,\"Parametros_llamada\":42,\"NATIVAS\":43,\"DUALIDAD\":44,\"XPATH\":45,\"tk_upper\":46,\"tk_menos\":47,\"tk_case\":48,\"tk_lower\":49,\"tk_tonumber\":50,\"tk_subString\":51,\"Parametros_funcion\":52,\"tk_let\":53,\"LISTA_ID\":54,\"DECLARACION_INDIVIDUAL\":55,\"tk_igualXQUERY\":56,\"tk_mas\":57,\"tk_div\":58,\"tk_mod\":59,\"tk_asterisco\":60,\"tk_menor\":61,\"tk_mayor\":62,\"tk_menorIgual\":63,\"tk_mayorIgual\":64,\"tk_igual\":65,\"tk_distinto\":66,\"tk_or\":67,\"tk_and\":68,\"tk_entero\":69,\"tk_decimal\":70,\"tk_stringTexto\":71,\"INICIO\":72,\"tk_barra\":73,\"INICIALES\":74,\"tk_punto\":75,\"DIAGONALES\":76,\"DERIVADOSLIMITADO\":77,\"DERIVACIONDIAGONAL\":78,\"tk_diagonal\":79,\"DERIVADOS\":80,\"tk_node\":81,\"tk_arroba\":82,\"ATRIBUTO\":83,\"tk_ParC\":84,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",7:\"tk_declare\",8:\"tk_function\",10:\"tk_dosPuntos\",11:\"tk_identificador\",12:\"tk_parA\",14:\"tk_parC\",15:\"tk_as\",16:\"tk_xs\",19:\"llaveA\",20:\"llaveC\",21:\"tk_punto_coma\",22:\"tk_Interroga\",23:\"tk_coma\",25:\"tk_identificadorXQUERY\",26:\"tk_local\",27:\"tk_int\",28:\"tk_string\",29:\"tk_double\",30:\"tk_DECIMAL\",31:\"tk_integer\",37:\"tk_return\",39:\"tk_if\",40:\"tk_then\",41:\"tk_else\",46:\"tk_upper\",47:\"tk_menos\",48:\"tk_case\",49:\"tk_lower\",50:\"tk_tonumber\",51:\"tk_subString\",53:\"tk_let\",56:\"tk_igualXQUERY\",57:\"tk_mas\",58:\"tk_div\",59:\"tk_mod\",60:\"tk_asterisco\",61:\"tk_menor\",62:\"tk_mayor\",63:\"tk_menorIgual\",64:\"tk_mayorIgual\",65:\"tk_igual\",66:\"tk_distinto\",67:\"tk_or\",68:\"tk_and\",69:\"tk_entero\",70:\"tk_decimal\",71:\"tk_stringTexto\",73:\"tk_barra\",75:\"tk_punto\",79:\"tk_diagonal\",81:\"tk_node\",82:\"tk_arroba\",84:\"tk_ParC\"},\nproductions_: [0,[3,2],[6,17],[18,1],[18,0],[13,3],[13,1],[24,6],[9,1],[17,1],[17,1],[17,1],[17,1],[17,1],[4,2],[4,1],[32,1],[32,1],[32,1],[32,1],[32,1],[36,2],[34,6],[34,8],[34,8],[35,6],[35,1],[44,1],[44,1],[43,6],[43,6],[43,4],[43,4],[43,6],[43,8],[42,3],[42,1],[52,3],[52,1],[33,2],[54,3],[54,1],[55,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,3],[38,1],[38,1],[38,1],[38,1],[38,3],[38,6],[38,1],[45,1],[72,3],[72,1],[74,4],[74,2],[74,3],[74,4],[74,2],[74,4],[76,1],[76,2],[78,3],[78,0],[77,1],[77,1],[77,3],[77,2],[80,1],[80,2],[80,1],[83,1],[83,1],[83,3]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n\n        produccion.push(`<INICIO_XQUERY> ::= <INSTRUCCIONES> EOF`);\n        accion.push(`INICIO_XQUERY.Val ::= new Tree()`);\n        let arbol = new Tree($$[$0-1]);\n        arbol.accion = accion;\n        arbol.produccion = produccion;\n        arbol.salida3d = codigo3Dxpath\n        return arbol;\n    \nbreak;\ncase 2:\n\n            produccion.push(`<FUNCION> ::= declare function <MENU_LOCAL> : identificador ( <LISTA_DECLARACION_FUNCION> ) as xs : <TIPO_DATO> <MENU_INTERROGA> { <INSTRUCCIONES>  } ;`);\n            accion.push(`FUNCION.Val ::= new Declaracion()`);\n            this.$ = new DeclaracionMetodo($$[$0-5], $$[$0-12], $$[$0-10], $$[$0-2], _$[$0-16].first_line, _$[$0-16].first_column);\n        \nbreak;\ncase 3:\n\n            produccion.push(`<MENU_INTERROGA> ::= ?`);\n            accion.push(`MENU_INTERROGA.Val ::= ?`);\n            this.$ = $$[$0]\n        \nbreak;\ncase 4:\n\n            produccion.push(`<MENU_INTERROGA> ::= epsilon`);\n            accion.push(`MENU_INTERROGA.Val ::= vacio`);\n            this.$ = ''\n        \nbreak;\ncase 5:\n\n            produccion.push(`<LISTA_DECLARACION_FUNCION> ::= <LISTA_DECLARACION_FUNCION> , <DECLARACION_FUNCION>`);\n            accion.push(`LISTA_DECLARACION_FUNCION.Val.push(DECLARACION_FUNCION.Val)`);\n            this.$.push($$[$0]);\n        \nbreak;\ncase 6:\n\n            produccion.push(`<LISTA_DECLARACION_FUNCION> ::= <DECLARACION_FUNCION>`);\n            accion.push(`LISTA_DECLARACION_FUNCION.Val = [DECLARACION_FUNCION.Val]`);\n            this.$ = [$$[$0]]\n        \nbreak;\ncase 7:\n\n            produccion.push(`<DECLARACION_FUNCION> ::= identificador as xs : <TIPO_DATO> <MENU_INTERROGA>`);\n            accion.push(`DECLARACION_FUNCION.Val = new Declaracion()`);\n            this.$ = new Declaracion($$[$0-1], $$[$0-5], null, _$[$0-5].first_line, _$[$0-5].first_column);\n        \nbreak;\ncase 8:\n\n        produccion.push(`<LMENU_LOCAL> ::= local`);\n        accion.push(`MENU_LOCAL.Val = local`);\n        this.$ = $$[$0];\n    \nbreak;\ncase 9:\n\n            produccion.push(`<TIPO_DATO> ::= int`);\n            accion.push(`TIPO_DATO.Val = new Tipo()`);\n            this.$ = new Tipo(tipos.ENTERO);\n        \nbreak;\ncase 10:\n\n            produccion.push(`<TIPO_DATO> ::= string`);\n            accion.push(`TIPO_DATO.Val = new Tipo()`);\n            this.$ = new Tipo(tipos.STRING);\n        \nbreak;\ncase 11:\n\n            produccion.push(`<TIPO_DATO> ::= double`);\n            accion.push(`TIPO_DATO.Val = new Tipo()`);\n            this.$ = new Tipo(tipos.DECIMAL);\n        \nbreak;\ncase 12:\n\n            produccion.push(`<TIPO_DATO> ::= decimal`);\n            accion.push(`TIPO_DATO.Val = new Tipo()`);\n            this.$ = new Tipo(tipos.DECIMAL);\n        \nbreak;\ncase 13:\n\n            produccion.push(`<TIPO_DATO> ::= integer`);\n            accion.push(`TIPO_DATO.Val = new Tipo()`);\n            this.$ = new Tipo(tipos.ENTERO);\n        \nbreak;\ncase 14:\n \n            produccion.push(`<INSTRUCCIONES> ::= <INSTRUCCIONES> <INSTRUCCION>`);\n            accion.push(`INSTRUCCIONES.Val.push(INSTRUCCION.Val)`);\n            this.$.push(...$$[$0]); \n        \nbreak;\ncase 15:\n \n            produccion.push(`<INSTRUCCIONES> ::= <INSTRUCCION>`);\n            accion.push(`INSTRUCCIONES.Val = [INSRUCCION.Val]`);\n            this.$ = [...$$[$0]] \n        \nbreak;\ncase 16:\n\n            produccion.push(`<INSTRUCCION> ::= <DECLARACION_GLOBAL>`);\n            accion.push(`INSTRUCCION.Val = DECLARACION_GLOBAL.Val`);\n            this.$ = $$[$0]\n        \nbreak;\ncase 17:\n\n            produccion.push(`<INSTRUCCION> ::= <FUNCION>`);\n            accion.push(`INSTRUCCION.Val = Funcion.Val`);\n            this.$ = [$$[$0]]\n        \nbreak;\ncase 18:\n\n            produccion.push(`<INSTRUCCION> ::= <IF>`);\n            accion.push(`INSTRUCCION.Val = IF.Val`);\n            this.$ = [$$[$0]]\n        \nbreak;\ncase 19:\n\n            produccion.push(`<INSTRUCCION> ::= <LLAMDA_FUNCION>`);\n            accion.push(`INSTRUCCION.Val = LLAMDA_FUNCION.Val`);\n            this.$ = [$$[$0]]\n        \nbreak;\ncase 20:\n\n            produccion.push(`<INSTRUCCION> ::= <RETURN_CICLO>`);\n            accion.push(`INSTRUCCION.Val = RETURN_CICLO.Val`);\n            this.$ = [$$[$0]]\n        \nbreak;\ncase 21:\n\n            produccion.push(`<RETURN_CICLO> ::= return <EXP_QUERY>`);\n            accion.push(`RETURN_CICLO.Val = new Retorno()`);\n            this.$ = new Retorno($$[$0], _$[$0-1].first_line, _$[$0-1].first_column)\n        \nbreak;\ncase 22:\n\n            produccion.push(`<IF> ::= if ( <EXP_QUERY> ) then <EXP_QUERY>`);\n            accion.push(`IF.Val = new If()`);\n            this.$ = new If($$[$0-3], \n                    [new Retorno($$[$0], _$[$0-5].first_line, _$[$0-5].first_column)], \n                    [], _$[$0-5].first_line, _$[$0-5].first_column);\n        \nbreak;\ncase 23:\n\n            produccion.push(`<IF> ::= if ( <EXP_QUERY> ) then <EXP_QUERY> else <EXP_QUERY>`);\n            accion.push(`IF.Val = new If()`);\n            this.$ = new If($$[$0-5], \n                    [new Retorno($$[$0-2], _$[$0-7].first_line, _$[$0-7].first_column)], \n                    [new Retorno($$[$0], _$[$0-7].first_line, _$[$0-7].first_column)], \n                    _$[$0-7].first_line, _$[$0-7].first_column);\n        \nbreak;\ncase 24:\n\n            produccion.push(`<IF> ::= if ( <EXP_QUERY> ) then <EXP_QUERY> else <If>`);\n            accion.push(`IF.Val = new If()`);\n            this.$ = new If($$[$0-5], \n                [new Retorno($$[$0-2], _$[$0-7].first_line, _$[$0-7].first_column)], \n                [$$[$0]], \n                _$[$0-7].first_line, _$[$0-7].first_column);\n        \nbreak;\ncase 25:\n\n            produccion.push(`<LLAMADA_FUNCION> ::= local : identificador ( <PARAMETROS_LLAMADA> )`);\n            accion.push(`LLAMADA_FUNCION.Val = new LlamadaMetodo()`);\n            this.$ = new Print(new LlamadaMetodo($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column), _$[$0-5].first_line, _$[$0-5].first_column)\n        \nbreak;\ncase 26:\n\n            this.$ = new Print($$[$0]);\n        \nbreak;\ncase 27:\n\n        this.$  = $$[$0]\n    \nbreak;\ncase 28:\n\n        this.$ = $$[$0]\n    \nbreak;\ncase 29:\n\n            this.$ = new ToUpper($$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)\n        \nbreak;\ncase 30:\n\n            this.$ = new ToLower($$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)\n        \nbreak;\ncase 31:\n     \n            this.$ = new ToString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)\n        \nbreak;\ncase 32:\n\n            this.$ = new ToNumber($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column)\n        \nbreak;\ncase 33:\n\n            this.$ = new Substrings($$[$0-3], $$[$0-1], new Primitivo(new Tipo(esEntero(Number(-1))), Number(-1), _$[$0-5].first_line, _$[$0-5].first_column), _$[$0-5].first_line, _$[$0-5].first_column)\n        \nbreak;\ncase 34:\n\n            this.$ = new Substrings($$[$0-5], $$[$0-3], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column)\n        \nbreak;\ncase 35:\n\n            produccion.push(`<PARAMETROS_LLAMADA> ::= <PARAMETROS_LLAMADA> , <XPATH>`);\n            accion.push(`PARAMETROS_LLAMDA.Val.push(XPATH.Val)`);\n            this.$.push($$[$0]); \n        \nbreak;\ncase 36:\n\n            produccion.push(`<PARAMETROS_LLAMADA> ::= <XPATH>`);\n            accion.push(`PARAMETROS_LLAMADA.Val = [XPATH.Val]`);\n            this.$ = [$$[$0]]\n        \nbreak;\ncase 37:\n\n            produccion.push(`<PARAMETROS_FUNCION> ::= <PARAMETROS_FUNCION> , <EXP_QUERY>`);\n            accion.push(`PARAMETROS_FUNCION.Val.push(EXP_QUERY.Val)`);\n            this.$.push($$[$0])\n        \nbreak;\ncase 38:\n\n            produccion.push(`<PARAMETROS_FUNCION> ::= <EXP_QUERY>`);\n            accion.push(`PARAMETROS_FUNCION.Val = [EXP_QUERY.Val]`);\n            this.$ = [$$[$0]]\n        \nbreak;\ncase 39:\n\n            produccion.push(`<DECLARACION_GLOBAL> ::= let <LISTA_ID>`);\n            accion.push(`DECLARACION_GLOBAL.Val = LISTA_ID.Val`);\n            this.$ = $$[$0]\n        \nbreak;\ncase 40:\n\n            produccion.push(`<LISTA_ID> ::= <LISTA_ID> , <DECLARACION_INDIVIDUAL>`);\n            accion.push(`LISTA_ID.Val.push(DECLARACION_INDIVIDUAL.Val)`);\n            this.$.push($$[$0]); \n        \nbreak;\ncase 41:\n\n            produccion.push(`<LISTA_ID> ::= <DECLARACION_INDIVIDUAL>`);\n            accion.push(`LISTA_ID.Val = [DECLARACION_INDIVIDUAL.Val]`);\n            this.$ = [$$[$0]]\n        \nbreak;\ncase 42:\n\n            produccion.push(`<DECLARACION_INDIVIDUAL> ::= identificador igual <EXP_QUERY>`);\n            accion.push(`DECLARACION_INDIVIDUAL.Val = new Declaracion()`);\n            this.$ = new Declaracion($$[$0].tipo, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 43:\n\n            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> - <EXP_QUERY>`);\n            accion.push(`EXP_QUERY.Val = new Aritmetica()`);\n            this.$ = new Aritmetica($$[$0-2], $$[$0], '-', _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 44:\n\n            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> + <EXP_QUERY>`);\n            accion.push(`EXP_QUERY.Val = new Aritmetica()`);\n            this.$ = new Aritmetica($$[$0-2], $$[$0], '+', _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 45:\n\n            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> div <EXP_QUERY>`);\n            accion.push(`EXP_QUERY.Val = new Aritmetica()`);\n            this.$ = new Aritmetica($$[$0-2], $$[$0], '/', _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 46:\n\n            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> mod <EXP_QUERY>`);\n            accion.push(`EXP_QUERY.Val = new Aritmetica()`);\n            this.$ = new Aritmetica($$[$0-2], $$[$0], '%', _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 47:\n\n            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> * <EXP_QUERY>`);\n            accion.push(`EXP_QUERY.Val = new Aritmetica()`);\n            this.$ = new Aritmetica($$[$0-2], $$[$0], '*', _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 48:\n\n            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> < <EXP_QUERY>`);\n            accion.push(`EXP_QUERY.Val = new Relacional()`);\n            this.$ = new Relacional($$[$0-2], $$[$0], '<', _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 49:\n\n            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> > <EXP_QUERY>`);\n            accion.push(`EXP_QUERY.Val = new Relacional()`);\n            this.$ = new Relacional($$[$0-2], $$[$0], '>', _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 50:\n\n            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> <= <EXP_QUERY>`);\n            accion.push(`EXP_QUERY.Val = new Relacional()`);\n            this.$ = new Relacional($$[$0-2], $$[$0], '<=', _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 51:\n\n            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> >= <EXP_QUERY>`);\n            accion.push(`EXP_QUERY.Val = new Relacional()`);\n            this.$ = new Relacional($$[$0-2], $$[$0], '>=', _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 52:\n\n            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> = <EXP_QUERY>`);\n            accion.push(`EXP_QUERY.Val = new Relacional()`);\n            this.$ = new Relacional($$[$0-2], $$[$0], '==', _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 53:\n\n            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> != <EXP_QUERY>`);\n            accion.push(`EXP_QUERY.Val = new Relacional()`);\n            this.$ = new Relacional($$[$0-2], $$[$0], '!=', _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 54:\n\n            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> or <EXP_QUERY>`);\n            accion.push(`EXP_QUERY.Val = new Logico()`);\n            this.$ = new Logico($$[$0-2], $$[$0], '||', _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 55:\n\n            produccion.push(`<EXP_QUERY> ::= <EXP_QUERY> and <EXP_QUERY>`);\n            accion.push(`EXP_QUERY.Val = new Logico()`);\n            this.$ = new Logico($$[$0-2], $$[$0], '&&', _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 56:\n\n            produccion.push(`<EXP_QUERY> ::= entero`);\n            accion.push(`EXP_QUERY.Val = new Primitivo()`);\n            this.$ = new Primitivo(new Tipo(tipos.ENTERO), Number($$[$0]), _$[$0].first_line, _$[$0].first_column);\n        \nbreak;\ncase 57:\n\n            produccion.push(`<EXP_QUERY> ::= decimal`);\n            accion.push(`EXP_QUERY.Val = new Primitivo()`);\n            this.$ = new Primitivo(new Tipo(tipos.DECIMAL), Number($$[$0]), _$[$0].first_line, _$[$0].first_column);\n        \nbreak;\ncase 58:\n\n            produccion.push(`<EXP_QUERY> ::= string`);\n            accion.push(`EXP_QUERY.Val = new Primitivo()`);\n            this.$ = new Primitivo(new Tipo(tipos.STRING), $$[$0], _$[$0].first_line, _$[$0].first_column);\n        \nbreak;\ncase 59:\n\n            produccion.push(`<EXP_QUERY> ::= identificador`);\n            accion.push(`EXP_QUERY.Val = new Identificador()`);\n            this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column);\n        \nbreak;\ncase 60:\n\n            produccion.push(`<EXP_QUERY> ::= ( <EXP_QUERY> )`);\n            accion.push(`EXP_QUERY.Val = EXP_QUERY.Val`);\n            this.$ = $$[$0-1]\n        \nbreak;\ncase 61:\n\n            produccion.push(`<EXP_QUERY> ::= local : identificador ( <Parametros_funcion> )`);\n            accion.push(`EXP_QUERY.Val = new LlamdaMetodo()`);\n            this.$ = new LlamadaMetodo($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);\n        \nbreak;\ncase 62:\n\n            this.$ = $$[$0]\n        \nbreak;\ncase 63:\n\n            produccion.push('<XPATH> ::= <INICIO>');\n            accion.push('XPATH.Val = INICIO.val');\n            let analizador = new AnalizadorASCXML();\n            let buscador = new xpathBusqueda();\n            let ejecu = new EjecucionXpath($$[$0], \"\");\n\n            let ret = analizador.ejecutarCodigo(localStorage.getItem(\"xml\"));\n            let tabla = ret.objetos;\n            let query = ejecu.ejecutarArbol();\n\n            if(query.includes(\"|\")) {\n                buscador.getNodesByFilters(\"3\", query, tabla);\n            }else if(query[0] !== \"/\" && query[0] !== \"//\"){\n                buscador.getNodesByFilters(\"1\", query, tabla)\n            }else{\n                buscador.getNodesByFilters(\"2\", query, tabla)\n            }\n\n            let retorno = buscador.returnListObjects()\n            \n            let dir = new xml3D();\n            let salida3D = dir.getNodesByFilters(tabla, 0, buscador.returnListValues());\n            salida3D = \"// 3D de consulta: \" + query + salida3D\n            codigo3Dxpath.push(salida3D)\n\n            let valor = retorno[0].texto;\n            let tipoR;\n\n            if (valor.match(/^[0-9]+$/)){\n                tipoR = new Tipo(esEntero(valor))\n                valor = parseInt(valor)\n            }else if (valor.match(/^[0-9]+[.][0-9]+$/)){\n                tipoR = new Tipo(esEntero(valor))\n                valor = parseInt(valor)\n            }else{\n                tipoR = new Tipo(tipos.STRING)\n            }\n\n            this.$ = new Primitivo(tipoR, valor, _$[$0].first_line, _$[$0].first_column);\n        \nbreak;\ncase 64:\n\n            produccion.push('<INICIO> ::= <INICIO> | <INICIALES>');\n            accion.push('INICIO.Val = INICIO.push(INICIALES)');\n            this.$.push($$[$0])\n        \nbreak;\ncase 65:\n\n            produccion.push('<INICIO> ::= <INICIALES>');\n            accion.push('INICIO.Val = INICIALES.Val');\n            this.$ = [$$[$0]]\n        \nbreak;\ncase 66:\n\n            produccion.push(`<INICIALES> ::= punto <DIAGONALES> <DERIVADOSLIMITADO> <DERIVAIONDIAGONAL>`);\n            accion.push('INICIALES.Val = new NodoX();'); \n            this.$ = new NodoX(\"\", \".\", [new NodoX($$[$0-2], $$[$0-1].val, [...$$[$0]])]);\n        \nbreak;\ncase 67:\n\n            produccion.push(`<INICIALES> ::= identificador <DERIVAIONDIAGONAL>`);\n            accion.push('INICIALES.Val = new NodoX();'); \n            this.$ = new NodoX(\"\", $$[$0-1], [...$$[$0]]);\n        \nbreak;\ncase 68:\n\n            produccion.push(`<INICIALES> ::= diagonal <DERIVADOS> <DERIVAIONDIAGONAL>`);\n            accion.push('INICIALES.Val = new NodoX();'); \n            this.$ = new NodoX($$[$0-2], $$[$0-1].val, [...$$[$0]]);\n        \nbreak;\ncase 69:\n\n            produccion.push(`<INICIALES> ::= diagonal diagonal <DERIVADOSLIMITADO> <DERIVAIONDIAGONAL>`);\n            accion.push('INICIALES.Val = new NodoX();'); \n            this.$ = new NodoX(\"//\", $$[$0-1].val, [...$$[$0]]);\n        \nbreak;\ncase 70:\n\n            produccion.push(`<INICIALES> ::= asterisco <DERIVAIONDIAGONAL>`);\n            accion.push('INICIALES.Val = new NodoX();'); \n            this.$ = new NodoX(\"\", $$[$0-1], [...$$[$0]]);\n        \nbreak;\ncase 71:\n\n            produccion.push(`<INICIALES> ::= node() <DERIVAIONDIAGONAL>`);\n            accion.push('INICIALES.Val = new NodoX();'); \n            this.$ = new NodoX(\"\", \"node()\", [...$$[$0]]);\n        \nbreak;\ncase 72:\n\n            produccion.push(`<DIAGONALES> ::= diagoanl`);\n            accion.push('DIAGONALES.Val = /;'); \n            this.$ = $$[$0]\n        \nbreak;\ncase 73:\n\n            produccion.push(`<DIAGONALES> ::= diagonal diagonal`);\n            accion.push('DIAGONALES.Val = //'); \n            this.$ = \"//\"\n        \nbreak;\ncase 74:\n\n            produccion.push(`<DERIVACIONDIAGONAL> ::= <DIAGONALES> <DERIVADOS> <DERIVACIONDIAGONAL>`);\n            accion.push('DERIVACIONDIAGONAL.Val = []; DERIVACIONDIAGONAL.Val.push(new Nodo(tipo, id, predicado, fila, columna)); DERIVACIONDIAGONAL.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Array();\n            this.$.push(new NodoX($$[$0-2], $$[$0-1].val, [...$$[$0]])); \n        \nbreak;\ncase 75:\n\n            produccion.push(`<DERIVACIONDIAGONAL> ::= epsilon`);\n            accion.push('DERIVACIONDIAGONAL.Val = [/*Vacio*/]');\n            this.$ = [];\n        \nbreak;\ncase 76:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= identificador <PREDICATE>`);\n            accion.push('DERIVADOSLIMITADO.Val = identificador + PREDICATE.Val'); \n            this.$ = {val: $$[$0], pre: null};\n        \nbreak;\ncase 77:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= asterisco <PREDICATE>`);\n            accion.push('DERIVADOSLIMITADO.Val = \\\"*\\\" + PREDICATE.Val'); \n            this.$ = {val: $$[$0], pre: null};\n        \nbreak;\ncase 78:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= node() <PREDICATE>`);\n            accion.push('DERIVADOSLIMITADO.Val = \\\"@\\\" + ATRIBUTO.Val'); \n            this.$ = {val: \"node()\", pre: null}\n        \nbreak;\ncase 79:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= arroba <ATRIBUTO>`);\n            accion.push('DERIVADOSLIMITADO.Val = \\\"@\\\" + ATRIBUTO.Val'); \n            this.$ = {val: $$[$0-1] + \"\" + $$[$0], pre: null};\n        \nbreak;\ncase 80:\n\n            produccion.push(`<DERIVADOS> ::= punto`);\n            accion.push(\"DERIVADOS.Val = \\\".\\\" \");\n            this.$ = {val: $$[$0], pre: null}; \n        \nbreak;\ncase 81:\n\n            produccion.push(`<DERIVADOS> ::= doblePunto`);\n            accion.push('DERIVADOS.Val = \\\"..\\\"');\n            this.$ = {val: \"..\", pre: null}; \n        \nbreak;\ncase 82:\n\n            produccion.push(`<DERIVADOS> ::= <DERIVADOSLIMITADO>`);\n            accion.push('DERIVADOS.Val = DERIVADOSLIMITADO.Val'); \n            this.$ = $$[$0]; \n        \nbreak;\ncase 83:\n\n            produccion.push(`<ATRIBUTO> ::= asterisco`);\n            accion.push('ATRIBUTO.Val = \\\"*\\\"'); \n            this.$ = $$[$0];\n        \nbreak;\ncase 84:\n\n            produccion.push(`<ATRIBUTO> ::= identificador`);\n            accion.push('ATRIBUTO.Val = identificador');  \n            this.$ = $$[$0];\n        \nbreak;\ncase 85:\n\n            produccion.push(`<ATRIBUTO> ::= node`);\n            accion.push('ATRIBUTO.Val = \\\"node()\\\"'); \n            this.$ = \"node()\"\n        \nbreak;\n}\n},\ntable: [{3:1,4:2,6:5,7:$V0,26:$V1,28:$V2,32:3,33:4,34:6,35:7,36:8,37:$V3,39:$V4,43:13,46:$V5,49:$V6,50:$V7,51:$V8,53:$V9},{1:[3]},{5:[1,20],6:5,7:$V0,26:$V1,28:$V2,32:21,33:4,34:6,35:7,36:8,37:$V3,39:$V4,43:13,46:$V5,49:$V6,50:$V7,51:$V8,53:$V9},o($Va,[2,15]),o($Va,[2,16]),o($Va,[2,17]),o($Va,[2,18]),o($Va,[2,19]),o($Va,[2,20]),{25:$Vb,54:22,55:23},{8:[1,25]},{12:[1,26]},{10:[1,27]},o($Va,[2,26]),{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:28,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{47:[1,36]},{47:[1,37]},{12:[1,38]},{12:[1,39]},{12:[1,40]},{1:[2,1]},o($Va,[2,14]),o($Va,[2,39],{23:[1,41]}),o($Vi,[2,41]),{56:[1,42]},{9:43,26:[1,44]},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:45,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{11:[1,46]},o($Va,[2,21],{47:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($Vw,[2,56]),o($Vw,[2,57]),o($Vw,[2,58]),o($Vw,[2,59]),{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:60,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{10:[1,61]},o($Vw,[2,62]),{48:[1,62]},{48:[1,63]},{11:$Vx,12:$Vc,25:$Vd,26:$Ve,28:$V2,38:66,43:35,44:64,45:65,46:$V5,49:$V6,50:$V7,51:$V8,60:$Vy,69:$Vf,70:$Vg,71:$Vh,72:67,74:68,75:$Vz,79:$VA,81:$VB},{11:$Vx,12:$Vc,25:$Vd,26:$Ve,28:$V2,38:66,43:35,44:74,45:65,46:$V5,49:$V6,50:$V7,51:$V8,60:$Vy,69:$Vf,70:$Vg,71:$Vh,72:67,74:68,75:$Vz,79:$VA,81:$VB},{11:$Vx,12:$Vc,25:$Vd,26:$Ve,28:$V2,38:66,43:35,44:75,45:65,46:$V5,49:$V6,50:$V7,51:$V8,60:$Vy,69:$Vf,70:$Vg,71:$Vh,72:67,74:68,75:$Vz,79:$VA,81:$VB},{25:$Vb,55:76},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:77,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{10:[1,78]},{10:[2,8]},{14:[1,79],47:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv},{12:[1,80]},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:81,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:82,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:83,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:84,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:85,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:86,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:87,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:88,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:89,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:90,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:91,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:92,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:93,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{14:[1,94],47:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv},{11:[1,95]},{12:[1,96]},{12:[1,97]},{14:[1,98]},o($VC,[2,27]),o($VC,[2,28],{47:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($VC,[2,63],{73:[1,99]}),o($VD,[2,65]),{76:100,79:$VE},o($VD,$VF,{78:102,76:103,79:$VE}),{11:$VG,60:$VH,75:$VI,77:107,79:[1,105],80:104,81:$VJ,82:$VK},o($VD,$VF,{76:103,78:112,79:$VE}),{12:[1,113]},{14:[1,114]},{23:[1,115]},o($Vi,[2,40]),o($Vi,[2,42],{47:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),{11:[1,116]},{40:[1,117]},{11:$Vx,42:118,45:119,60:$Vy,72:67,74:68,75:$Vz,79:$VA,81:$VB},o($Vw,[2,43]),o($Vw,[2,44]),o($VL,[2,45],{47:$Vj,57:$Vk}),o([5,7,14,20,23,26,28,37,39,41,46,49,50,51,53,59],[2,46],{47:$Vj,57:$Vk,58:$Vl,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($VL,[2,47],{47:$Vj,57:$Vk}),o($VM,[2,48],{47:$Vj,57:$Vk,58:$Vl,60:$Vn}),o($VM,[2,49],{47:$Vj,57:$Vk,58:$Vl,60:$Vn}),o($VM,[2,50],{47:$Vj,57:$Vk,58:$Vl,60:$Vn}),o($VM,[2,51],{47:$Vj,57:$Vk,58:$Vl,60:$Vn}),o($VN,[2,52],{47:$Vj,57:$Vk,58:$Vl,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr}),o($VN,[2,53],{47:$Vj,57:$Vk,58:$Vl,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr}),o([5,7,14,20,23,26,28,37,39,41,46,49,50,51,53,59,67],[2,54],{47:$Vj,57:$Vk,58:$Vl,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,68:$Vv}),o([5,7,14,20,23,26,28,37,39,41,46,49,50,51,53,59,67,68],[2,55],{47:$Vj,57:$Vk,58:$Vl,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt}),o($Vw,[2,60]),{12:[1,120]},{11:$Vx,12:$Vc,25:$Vd,26:$Ve,28:$V2,38:66,43:35,44:121,45:65,46:$V5,49:$V6,50:$V7,51:$V8,60:$Vy,69:$Vf,70:$Vg,71:$Vh,72:67,74:68,75:$Vz,79:$VA,81:$VB},{11:$Vx,12:$Vc,25:$Vd,26:$Ve,28:$V2,38:66,43:35,44:122,45:65,46:$V5,49:$V6,50:$V7,51:$V8,60:$Vy,69:$Vf,70:$Vg,71:$Vh,72:67,74:68,75:$Vz,79:$VA,81:$VB},o($Vw,[2,31]),{11:$Vx,60:$Vy,74:123,75:$Vz,79:$VA,81:$VB},{11:$VG,60:$VH,77:124,81:$VJ,82:$VK},o($VO,[2,72],{79:[1,125]}),o($VD,[2,67]),{11:$VG,60:$VH,75:$VI,77:107,80:126,81:$VJ,82:$VK},o($VD,$VF,{76:103,78:127,79:$VE}),{11:$VG,60:$VH,75:$VI,77:107,80:128,81:$VJ,82:$VK},o($VP,[2,80],{75:[1,129]}),o($VP,[2,82]),o($VP,[2,76]),o($VP,[2,77]),{12:[1,130]},{11:[1,133],60:[1,132],81:[1,134],83:131},o($VD,[2,70]),{14:[1,135]},o($Vw,[2,32]),{11:$Vx,12:$Vc,25:$Vd,26:$Ve,28:$V2,38:66,43:35,44:136,45:65,46:$V5,49:$V6,50:$V7,51:$V8,60:$Vy,69:$Vf,70:$Vg,71:$Vh,72:67,74:68,75:$Vz,79:$VA,81:$VB},{12:[1,137]},{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:138,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},{14:[1,139],23:[1,140]},o($VC,[2,36]),{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:142,43:35,46:$V5,49:$V6,50:$V7,51:$V8,52:141,69:$Vf,70:$Vg,71:$Vh},{14:[1,143]},{14:[1,144]},o($VD,[2,64]),o($VD,$VF,{76:103,78:145,79:$VE}),o($VO,[2,73]),o($VD,$VF,{76:103,78:146,79:$VE}),o($VD,[2,68]),o($VD,$VF,{76:103,78:147,79:$VE}),o($VP,[2,81]),{14:[1,148]},o($VP,[2,79]),o($VP,[2,83]),o($VP,[2,84]),{12:[1,149]},o($VD,$VF,{76:103,78:150,79:$VE}),{14:[1,151],23:[1,152]},{13:153,24:154,25:$VQ},o($Va,[2,22],{41:[1,156],47:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($Va,[2,25]),{11:$Vx,45:157,60:$Vy,72:67,74:68,75:$Vz,79:$VA,81:$VB},{14:[1,158],23:[1,159]},o($VC,[2,38],{47:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($Vw,[2,29]),o($Vw,[2,30]),o($VD,[2,66]),o($VD,[2,74]),o($VD,[2,69]),o($VP,[2,78]),{84:[1,160]},o($VD,[2,71]),o($Vw,[2,33]),{11:$Vx,12:$Vc,25:$Vd,26:$Ve,28:$V2,38:66,43:35,44:161,45:65,46:$V5,49:$V6,50:$V7,51:$V8,60:$Vy,69:$Vf,70:$Vg,71:$Vh,72:67,74:68,75:$Vz,79:$VA,81:$VB},{14:[1,162],23:[1,163]},o($VC,[2,6]),{15:[1,164]},{12:$Vc,25:$Vd,26:$Ve,28:$V2,34:166,38:165,39:$V4,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},o($VC,[2,35]),o($Vw,[2,61]),{12:$Vc,25:$Vd,26:$Ve,28:$V2,38:167,43:35,46:$V5,49:$V6,50:$V7,51:$V8,69:$Vf,70:$Vg,71:$Vh},o($VP,[2,85]),{14:[1,168]},{15:[1,169]},{24:170,25:$VQ},{16:[1,171]},o($Va,[2,23],{47:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($Va,[2,24]),o($VC,[2,37],{47:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($Vw,[2,34]),{16:[1,172]},o($VC,[2,5]),{10:[1,173]},{10:[1,174]},{17:175,27:$VR,28:$VS,29:$VT,30:$VU,31:$VV},{17:181,27:$VR,28:$VS,29:$VT,30:$VU,31:$VV},o($VC,$VW,{18:182,22:$VX}),o($VY,[2,9]),o($VY,[2,10]),o($VY,[2,11]),o($VY,[2,12]),o($VY,[2,13]),{18:184,19:$VW,22:$VX},o($VC,[2,7]),o([14,19,23],[2,3]),{19:[1,185]},{4:186,6:5,7:$V0,26:$V1,28:$V2,32:3,33:4,34:6,35:7,36:8,37:$V3,39:$V4,43:13,46:$V5,49:$V6,50:$V7,51:$V8,53:$V9},{6:5,7:$V0,20:[1,187],26:$V1,28:$V2,32:21,33:4,34:6,35:7,36:8,37:$V3,39:$V4,43:13,46:$V5,49:$V6,50:$V7,51:$V8,53:$V9},{21:[1,188]},o($Va,[2,2])],\ndefaultActions: {20:[2,1],44:[2,8]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n\n    const { Tree } = require('./Simbolos/Tree');\n    const { Tipo, tipos, esEntero } = require('./Varios/Tipo');\n    const { Primitivo }  = require('./Expresiones/Primitivo');\n    const { Error } = require('./Varios/Error');\n    const { Identificador } = require('./Expresiones/identificador');\n    //const {Vector} = require('../Expresiones/Vector');\n    //const {Lista} = require('../Expresiones/Lista');\n    //Instrucciones\n    const {Print} = require('./Instrucciones/Print');\n    const {Declaracion} = require('./Instrucciones/Declaracion');\n  // // const {DeclaracionArray} = require('../Instrucciones/DeclaracionArray');\n    //const {DeclaracionLista} = require('../Instrucciones/DeclaracionLista');\n    //const {Asignacion} = require('../Instrucciones/Asignacion');\n    //const {AsignacionVector} = require('../Instrucciones/AsignacionVector');\n   // const {AsignacionLista} = require('../Instrucciones/AsignacionLista');\n    /*const {AddLista} = require('../Instrucciones/AddLista');\n    \n    const {Switch} = require('../Instrucciones/Switch');\n    const {Case} = require('../Instrucciones/Case');\n    const {While} = require('../Instrucciones/While');\n    const {DoWhile} = require('../Instrucciones/DoWhile');\n    const {For} = require('../Instrucciones/For');\n    const {DeclaracionMetodo} = require('../Instrucciones/DeclaracionMetodo');\n    const {LlamadaMetodo} = require('../Instrucciones/LlamadaMetodo');\n    const {Continue} = require('../Expresiones/Continue');\n    const {Break} = require('../Expresiones/Break');\n    const {Retorno} = require('../Instrucciones/Retorno');\n    *///Expresion\n    const { DeclaracionMetodo } = require('./Instrucciones/DeclaracionMetodo');\n    const { LlamadaMetodo } = require('./Instrucciones/LlamadaMetodo');\n    const { If } = require('./Instrucciones/If');\n    const { Retorno } = require('./Instrucciones/Retorno');\n    const { Aritmetica } = require('./Expresiones/Aritmetica');\n    const { Relacional } = require('./Expresiones/Relacional');\n    const { Logico } = require('./Expresiones/Logico');\n    const { NodoX } = require('./Expresiones/NodoX');\n    const { EjecucionXpath } = require('./Arbol/Ejecucion');\n\n    const {ToUpper} = require('./Expresiones/uppercase');\n    const {ToLower} = require('./Expresiones/ToLower');\n    const {ToString} = require('./Expresiones/ToString');\n    const {Substrings} = require('./Expresiones/Substring');\n    const{ToNumber} = require('./Expresiones/ToNumber');\n\n    /*const {Logico} = require('../Expresiones/Logico');\n    const {Ternario} = require('../Expresiones/Ternario');\n    const {Casteo} = require('../Expresiones/Casteo');\n    const {InDecrement} = require('../Expresiones/InDecrement');\n    const {Length} = require('../Expresiones/Length');\n    const {ToLower} = require('../Expresiones/ToLower');\n    const {ToUpper} = require('../Expresiones/ToUpper');\n    const {Truncate} = require('../Expresiones/Truncate');\n    const {Round} = require('../Expresiones/Round');\n    const {TypeOf} = require('../Expresiones/TypeOf');\n    const {ToString} = require('../Expresiones/ToString');\n    const {ToCharArray} = require('../Expresiones/ToCharArray');*/\n    const { AnalizadorASCXML } = require('../analizadorXML/index');\n    const { xpathBusqueda } = require('../analizadorXML/Instrucciones/Busqueda/xpathBusqueda');\n    const { xml3D } = require('../analizadorXML/Codigo3D/xml3D')\n    var produccion = [];\n    var accion = [];\n    var codigo3Dxpath = [];\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip comments */\nbreak;\ncase 1:this.begin('comment');\nbreak;\ncase 2:this.popState();\nbreak;\ncase 3:/* skip comment content*/\nbreak;\ncase 4:/* skip whitespace */\nbreak;\ncase 5:return \"tk_decimal\";\nbreak;\ncase 6:return \"tk_entero\";\nbreak;\ncase 7:return \"tk_node\";\nbreak;\ncase 8:return \"tk_child\";\nbreak;\ncase 9:return \"tk_let\";\nbreak;\ncase 10:return \"tk_descendant\";\nbreak;\ncase 11:return \"tk_descendatOr\"\nbreak;\ncase 12:return \"tk_ancestor\";\nbreak;\ncase 13:return \"tk_ancestorOr\";\nbreak;\ncase 14:return \"tk_attribute\";\nbreak;\ncase 15:return \"tk_following\";\nbreak;\ncase 16:return \"tk_followingSi\"\nbreak;\ncase 17:return \"tk_parent\"\nbreak;\ncase 18:return \"tk_preceding\"\nbreak;\ncase 19:return \"tk_precedingSi\"\nbreak;\ncase 20:return \"tk_self\"\nbreak;\ncase 21:return \"tk_text\"\nbreak;\ncase 22:return \"tk_position\"\nbreak;\ncase 23:return \"tk_last\"\nbreak;\ncase 24:return \"tk_div\"\nbreak;\ncase 25:return \"tk_and\"\nbreak;\ncase 26:return \"tk_or\"\nbreak;\ncase 27:return \"tk_mod\"\nbreak;\ncase 28:return \"tk_for\";\nbreak;\ncase 29: return \"tk_in\";\nbreak;\ncase 30: return \"tk_where\";\nbreak;\ncase 31: return \"tk_order\";\nbreak;\ncase 32: return \"tk_by\";\nbreak;\ncase 33: return \"tk_return\";\nbreak;\ncase 34:return \"tk_if\";\nbreak;\ncase 35:return \"tk_else\";\nbreak;\ncase 36:return \"tk_then\";\nbreak;\ncase 37:return \"tk_int\";\nbreak;\ncase 38:return \"tk_integer\";\nbreak;\ncase 39:return \"tk_string\";\nbreak;\ncase 40:return \"tk_DECIMAL\";\nbreak;\ncase 41:return \"tk_double\";\nbreak;\ncase 42:return \"tk_declare\";\nbreak;\ncase 43:return \"tk_function\";\nbreak;\ncase 44:return \"tk_AS\"\nbreak;\ncase 45:return \"tk_as\"\nbreak;\ncase 46:return \"tk_xs\"\nbreak;\ncase 47:return \"tk_to\"\nbreak;\ncase 48:return \"tk_at\"\nbreak;\ncase 49:return \"tk_local\";\nbreak;\ncase 50:return \"tk_mayor\"\nbreak;\ncase 51:return \"tk_menor\"\nbreak;\ncase 52:return \"tk_igual\"\nbreak;\ncase 53:return \"tk_distinto\"\nbreak;\ncase 54:return \"tk_menorIgual\"\nbreak;\ncase 55:return \"tk_mayorIgual\"\nbreak;\ncase 56:return \"tk_upper\"\nbreak;\ncase 57:return \"tk_case\"\nbreak;\ncase 58:return \"tk_lower\"\nbreak;\ncase 59:return \"tk_subString\"\nbreak;\ncase 60:return \"tk_barra\"\nbreak;\ncase 61:return \"tk_punto\"\nbreak;\ncase 62:return \"tk_punto_coma\"\nbreak;\ncase 63:return \"tk_coma\"\nbreak;\ncase 64:return \"tk_diagonal\"\nbreak;\ncase 65:return \"tk_asterisco\"\nbreak;\ncase 66:return \"tk_Interroga\"\nbreak;\ncase 67:return \"tk_mas\"\nbreak;\ncase 68:return \"tk_menos\"\nbreak;\ncase 69:return \"tk_menorIgual\"\nbreak;\ncase 70:return \"tk_mayorIgual\"\nbreak;\ncase 71:return \"tk_menor\"\nbreak;\ncase 72:return \"tk_mayor\"\nbreak;\ncase 73:return \"tk_distinto\"\nbreak;\ncase 74:return \"tk_igualXQUERY\"\nbreak;\ncase 75:return \"tk_dosPuntos\"\nbreak;\ncase 76:return \"tk_igual\"\nbreak;\ncase 77:return \"tk_llaveA\"\nbreak;\ncase 78:return \"tk_llaveC\"\nbreak;\ncase 79:return \"tk_arroba\"\nbreak;\ncase 80:return \"llaveA\"\nbreak;\ncase 81:return \"llaveC\"\nbreak;\ncase 82:return \"tk_parA\"\nbreak;\ncase 83:return \"tk_parC\"\nbreak;\ncase 84:return \"tk_stringTexto\";\nbreak;\ncase 85:return \"tk_stringTexto\";\nbreak;\ncase 86:return \"tk_stringTexto\";\nbreak;\ncase 87:return \"tk_stringTexto\";\nbreak;\ncase 88:return \"tk_identificador\";\nbreak;\ncase 89:return \"tk_identificadorXQUERY\";\nconsole.log(\"indentificador papa\")\n\nbreak;\ncase 90:return \"EOF\";\nbreak;\ncase 91:\nbreak;\ncase 92:         \n        console.log('Léxico',yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column );\n    \nbreak;\n}\n},\nrules: [/^(?:\\/\\/.*)/,/^(?:\\(:)/,/^(?::\\))/,/^(?:.)/,/^(?:\\s+)/,/^(?:[0-9]+(\\.[0-9]+)\\b)/,/^(?:[0-9]+\\b)/,/^(?:node\\b)/,/^(?:child\\b)/,/^(?:let\\b)/,/^(?:descendant\\b)/,/^(?:descendant-or-self\\b)/,/^(?:ancestor\\b)/,/^(?:ancestor-or-self\\b)/,/^(?:attribute\\b)/,/^(?:following\\b)/,/^(?:following-sibling\\b)/,/^(?:parent\\b)/,/^(?:preceding\\b)/,/^(?:preceding-sibling\\b)/,/^(?:self\\b)/,/^(?:text\\b)/,/^(?:position\\b)/,/^(?:last\\b)/,/^(?:div\\b)/,/^(?:and\\b)/,/^(?:or\\b)/,/^(?:mod\\b)/,/^(?:for\\b)/,/^(?:in\\b)/,/^(?:where\\b)/,/^(?:order\\b)/,/^(?:by\\b)/,/^(?:return\\b)/,/^(?:if\\b)/,/^(?:else\\b)/,/^(?:then\\b)/,/^(?:int\\b)/,/^(?:integer\\b)/,/^(?:string\\b)/,/^(?:decimal\\b)/,/^(?:double\\b)/,/^(?:declare\\b)/,/^(?:function\\b)/,/^(?:AS\\b)/,/^(?:as\\b)/,/^(?:xs\\b)/,/^(?:to\\b)/,/^(?:at\\b)/,/^(?:local\\b)/,/^(?:gt\\b)/,/^(?:lt\\b)/,/^(?:eq\\b)/,/^(?:ne\\b)/,/^(?:le\\b)/,/^(?:ge\\b)/,/^(?:upper\\b)/,/^(?:case\\b)/,/^(?:lower\\b)/,/^(?:substring\\b)/,/^(?:\\|)/,/^(?:\\.)/,/^(?:;)/,/^(?:,)/,/^(?:\\/)/,/^(?:\\*)/,/^(?:\\?)/,/^(?:\\+)/,/^(?:-)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?::=)/,/^(?::)/,/^(?:=)/,/^(?:\\[)/,/^(?:\\])/,/^(?:@)/,/^(?:\\{)/,/^(?:\\})/,/^(?:\\()/,/^(?:\\))/,/^(?:\"[^\\\"]*\")/,/^(?:“[^\\“]*“)/,/^(?:'[^\\']*')/,/^(?:‘[^\\‘]*‘)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:[$]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:[ \\t\\r\\n\\f])/,/^(?:.)/],\nconditions: {\"comment\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],\"inclusive\":true},\"INITIAL\":{\"rules\":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = GramaticaXquery;\nexports.Parser = GramaticaXquery.Parser;\nexports.parse = function () { return GramaticaXquery.parse.apply(GramaticaXquery, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}","import { Nodo } from \"../Arbol/Nodo\"\nimport { Table } from \"../Simbolos/Table\";\nimport { Tree } from \"../Simbolos/Tree\";\nimport { Error } from \"../Varios/Error\";\nimport { esEntero, Tipo, tipos } from \"../Varios/Tipo\";\nimport { Simbolo } from \"../Simbolos/Simbolo\";\nimport { Primitivo } from \"../Expresiones/Primitivo\";\nimport { NodoAST } from \"../Arbol/NodoAST\";\nimport { NodoCST } from \"../Arbol/NodoCST\";\n\nexport function defal(tipo: Tipo, line: Number, column: Number) {\n    if (tipo.tipo == tipos.ENTERO) {\n        return new Primitivo(tipo, 0, line, column);\n    } else if (tipo.tipo == tipos.DECIMAL) {\n        return new Primitivo(tipo, 0.0, line, column);\n    } else if (tipo.tipo == tipos.BOOLEANO) {\n        return new Primitivo(tipo, true, line, column);\n    } else if (tipo.tipo == tipos.CARACTER) {\n        return new Primitivo(tipo, '', line, column);\n    } else if (tipo.tipo == tipos.STRING) {\n        return new Primitivo(tipo, \"\", line, column);\n    }\n        return \"\"\n}\n\nexport class Declaracion extends Nodo {\n    tipo: Tipo;\n    id: String;\n    valor: Nodo;\n\n    constructor(tipo: Tipo, id: String, valor: Nodo, line: Number, column: Number) {\n        super(tipo, line, column);\n        this.id = id;\n        this.valor = valor;\n    }\n\n    execute(table: Table, tree: Tree) {\n        const result = this.valor.execute(table, tree);\n        if (result instanceof Error) {\n            return result;\n        }\n\n        let simbolo: Simbolo;\n        let tipo: Tipo;\n\n        if (isNaN(result)){\n            tipo = new Tipo(tipos.STRING)\n        }else{\n            tipo = new Tipo(esEntero(result))\n        }\n\n        simbolo = new Simbolo(tipo, this.id, result, new Tipo(tipos.VARIABLE), this.line, this.column);\n        const res = table.setVariable(simbolo);\n        tree.Variables.push(simbolo);\n        // if (res != null) {\n        // const error = new Excepcion('Semantico',\n        // res,\n        // this.line, this.column);\n        // tree.excepciones.push(error);\n        // tree.consola.push(error.toString());\n        // }\n        return null;\n    \n    }\n\n    getNodo() {\n        var nodo: NodoAST = new NodoAST(\"\");\n        nodo.agregarHijo(this.tipo + \"\");\n        nodo.agregarHijo(this.id);\n\n        if (this.valor != null) {\n            nodo.agregarHijo(\"=\");\n            nodo.agregarHijo(this.valor.getNodo());\n        }\n\n        return nodo;\n    }\n\n    getNodoCST() {\n        var nodo: NodoCST = new NodoCST(\"DECLARACION\");\n        nodo.agregarHijo(this.tipo + \"\");\n        nodo.agregarHijo(this.id);\n\n        if (this.valor != null) {\n            nodo.agregarHijo(\"=\");\n            nodo.agregarHijo(this.valor.getNodoCST());\n        }\n\n        return nodo;\n    }\n}\n","import { Nodo } from \"../Arbol/Nodo\"\nimport { Table } from \"../Simbolos/Table\";\nimport { Tree } from \"../Simbolos/Tree\";\nimport { Excepcion } from \"../Varios/Exepciones\";\nimport { Tipo, tipos } from \"../Varios/Tipo\";\nimport { Simbolo } from \"../Simbolos/Simbolo\";\nimport { NodoAST } from \"../Arbol/NodoAST\";\nimport { Declaracion } from \"./Declaracion\";\nimport { NodoCST } from \"../Arbol/NodoCST\";\n\nexport class DeclaracionMetodo extends Nodo {\n    id: String;\n    listaParams: Array<Nodo>;\n    instrucciones: Array<Nodo>;\n\n    constructor(tipo: Tipo, id: String, listaParams: Array<Nodo>, instrucciones: Array<Nodo>, line: Number, column: Number) {\n        super(tipo, line, column);\n        this.id = id;\n        this.listaParams = listaParams;\n        this.instrucciones = instrucciones;\n    }\n\n    execute(table: Table, tree: Tree): any {\n\n      \n        var nombre = this.id + \"$\";\n        var index = 0;\n        for (let param of this.listaParams) {\n            // nombre += param.tipo;\n            index += 1;\n        }\n        nombre += index + \"\";\n\n        if (table.getVariable(nombre) == null) {\n            var tipo2 = new Tipo(tipos.FUNCION);\n       \n            var metodo = new Simbolo(this.tipo, nombre, [this.listaParams, this.instrucciones], tipo2, this.line, this.column);\n            table.setVariable(metodo)\n            tree.Variables.push(metodo);\n        } else {\n            const error = new Excepcion('Semantico',\n                `El metodo {${nombre.split(\"$\",1)[0]}} ya ha sido creado con anterioridad `,\n                this.line, this.column);\n            tree.errores.push(error);\n            tree.consola.push(error.toString());\n            return error;\n        }\n    }\n\n    getNodo() {\n        var nodo: NodoAST = new NodoAST(\"\");\n        if (this.tipo.tipo == tipos.VOID) {\n            nodo.agregarHijo(\"Void\");\n        } else {\n            nodo.agregarHijo(this.tipo + \"\");\n        }\n        nodo.agregarHijo(this.id);\n        nodo.agregarHijo(\"(\");\n        if (this.listaParams.length != 0) {\n            var nodo2: NodoAST = new NodoAST(\"\");\n            var index = 1;\n            for (let i = 0; i < this.listaParams.length; i++) {\n                var param = <Declaracion>this.listaParams[i]\n                var nodo3: NodoAST = new NodoAST(param.tipo + \"\");\n                nodo3.agregarHijo(param.id + \"\");\n                nodo2.agregarHijo(nodo3);\n            }\n            nodo.agregarHijo(nodo2);\n        }\n\n        nodo.agregarHijo(\")\");\n        nodo.agregarHijo(\"{\");\n\n        var nodo3: NodoAST = new NodoAST(\"\");\n        for (let i = 0; i < this.instrucciones.length; i++) {\n            nodo3.agregarHijo(this.instrucciones[i].getNodo());\n        }\n        nodo.agregarHijo(nodo3);\n        nodo.agregarHijo(\"}\");\n        return nodo;\n    }\n\n    getNodoCST() {\n        var nodo: NodoCST = new NodoCST(\"DECLARACION METODO\");\n        if (this.tipo.tipo == tipos.VOID) {\n            nodo.agregarHijo(\"Void\");\n        } else {\n            nodo.agregarHijo(this.tipo + \"\");\n        }\n        nodo.agregarHijo(this.id);\n        nodo.agregarHijo(\"(\");\n        if (this.listaParams.length != 0) {\n            var nodo2: NodoCST = new NodoCST(\"Parametros\");\n            var index = 1;\n            for (let i = 0; i < this.listaParams.length; i++) {\n                var param = <Declaracion>this.listaParams[i]\n                var nodo3: NodoCST = new NodoCST(param.tipo + \"\");\n                nodo3.agregarHijo(param.id + \"\");\n                nodo2.agregarHijo(nodo3);\n            }\n            nodo.agregarHijo(nodo2);\n        }\n\n        nodo.agregarHijo(\")\");\n        nodo.agregarHijo(\"{\");\n\n        var nodo3: NodoCST = new NodoCST(\"INSTRUCCIONES\");\n        for (let i = 0; i < this.instrucciones.length; i++) {\n            nodo3.agregarHijo(this.instrucciones[i].getNodoCST());\n        }\n        nodo.agregarHijo(nodo3);\n        nodo.agregarHijo(\"}\");\n        return nodo;\n    }\n}","import { Nodo } from \"../Arbol/Nodo\"\nimport { Table } from \"../Simbolos/Table\";\nimport { Tree } from \"../Simbolos/Tree\";\nimport { Excepcion } from \"../Varios/Exepciones\";\nimport { tipos } from \"../Varios/Tipo\";\nimport { NodoAST } from \"../Arbol/NodoAST\";\nimport { Retorno } from \"./Retorno\";\nimport { NodoCST } from \"../Arbol/NodoCST\";\n\nexport class If extends Nodo {\n    condicion: Nodo;\n    listaIf: Array<Nodo>;\n    listaElse: Array<Nodo>;\n\n    constructor(condicion: Nodo, listaIf: Array<Nodo>, listaElse: Array<Nodo>, line: Number, column: Number) {\n        super(null, line, column);\n        this.condicion = condicion;\n        this.listaIf = listaIf;\n        this.listaElse = listaElse;\n    }\n\n    execute(table: Table, tree: Tree) {\n        const newtable = new Table(table);\n        let result: Nodo;\n        result = this.condicion.execute(newtable, tree);\n        if (result instanceof Excepcion) {\n            return result;\n        }\n\n        if (result) {\n            for (let i = 0; i < this.listaIf.length; i++) {\n                const res = this.listaIf[i].execute(newtable, tree);\n                if ( res instanceof Retorno) {\n                    return res;\n                }\n            }\n        } else {\n            for (let i = 0; i < this.listaElse.length; i++) {\n                const res = this.listaElse[i].execute(newtable, tree);\n                if ( res instanceof Retorno) {\n                    return res;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    getNodo() {\n        var nodo: NodoAST = new NodoAST(\"IF\");\n        nodo.agregarHijo(\"if\");\n        nodo.agregarHijo(\"(\");\n        nodo.agregarHijo(this.condicion.getNodo());\n        nodo.agregarHijo(\")\");\n        nodo.agregarHijo(\"{\");\n        var nodo2: NodoAST = new NodoAST(\"INSTRUCCIONES IF\");\n        for (let i = 0; i < this.listaIf.length; i++) {\n            nodo2.agregarHijo(this.listaIf[i].getNodo());\n        }\n        nodo.agregarHijo(nodo2);\n        nodo.agregarHijo(\"}\");\n        if (this.listaElse != null) { // ELSE\n            nodo.agregarHijo(\"else\");\n            nodo.agregarHijo(\"{\");\n            var nodo3: NodoAST = new NodoAST(\"INSTRUCCIONES ELSE\");\n            for (let i = 0; i < this.listaElse.length; i++) {\n                nodo3.agregarHijo(this.listaElse[i].getNodo());\n            }\n            nodo.agregarHijo(nodo3);\n            nodo.agregarHijo(\"}\");\n        }\n        return nodo;\n    }\n\n    getNodoCST() {\n        var nodo: NodoCST = new NodoCST(\"IF\");\n        nodo.agregarHijo(\"if\");\n        nodo.agregarHijo(\"(\");\n        nodo.agregarHijo(this.condicion.getNodoCST());\n        nodo.agregarHijo(\")\");\n        nodo.agregarHijo(\"{\");\n        var nodo2: NodoCST = new NodoCST(\"INSTRUCCIONES IF\");\n        for (let i = 0; i < this.listaIf.length; i++) {\n            nodo2.agregarHijo(this.listaIf[i].getNodoCST());\n        }\n        nodo.agregarHijo(nodo2);\n        nodo.agregarHijo(\"}\");\n        if (this.listaElse != null) { // ELSE\n            nodo.agregarHijo(\"else\");\n            nodo.agregarHijo(\"{\");\n            var nodo3: NodoCST = new NodoCST(\"INSTRUCCIONES ELSE\");\n            for (let i = 0; i < this.listaElse.length; i++) {\n                nodo3.agregarHijo(this.listaElse[i].getNodoCST());\n            }\n            nodo.agregarHijo(nodo3);\n            nodo.agregarHijo(\"}\");\n        }\n        return nodo;\n    }\n}","import { Nodo } from \"../Arbol/Nodo\"\nimport { Table } from \"../Simbolos/Table\";\nimport { Tree } from \"../Simbolos/Tree\";\nimport { Excepcion } from \"../Varios/Exepciones\";\nimport { Tipo, tipos } from \"../Varios/Tipo\";\nimport { Simbolo } from \"../Simbolos/Simbolo\";\nimport { NodoAST } from \"../Arbol/NodoAST\";\nimport { Declaracion } from \"./Declaracion\";\nimport { Retorno } from \"./Retorno\";\nimport { Identificador } from \"../Expresiones/identificador\";\nimport { Primitivo } from \"../Expresiones/Primitivo\";\nimport { ToUpper } from \"../Expresiones/uppercase\";\nimport { NodoCST } from \"../Arbol/NodoCST\";\n\nexport class LlamadaMetodo extends Nodo {\n    id: String;\n    listaParams: Array<Nodo>;\n\n    constructor(id: String, listaParams: Array<Nodo>, line: Number, column: Number) {\n        super(null, line, column);\n        this.id = id;\n        this.listaParams = listaParams;\n    }\n\n    execute(table: Table, tree: Tree): any {\n        const newtable = new Table(table);\n\n        var nombre = this.id + \"$\";\n        // var nombre = this.id;\n        var index = 0;\n        for (let param of this.listaParams) {\n            var valor = param.execute(newtable, tree);\n            // nombre += <any>param.tipo;\n            index += 1;\n        }\n        nombre += index + \"\";\n\n\n        let simboloMetodo: Simbolo;\n        simboloMetodo = table.getVariable(nombre);\n        if (simboloMetodo == null) {\n            const error = new Excepcion('Semantico',\n                `El metodo {${this.id}} no ha sido encontrado con esa combinacion de parametros`,\n                this.line, this.column);\n            tree.errores.push(error);\n            tree.consola.push(error.toString());\n            return error;\n        }\n\n        var parametros: Array<Nodo> = (<any>simboloMetodo).valor[0];\n        for (let i = 0; i < parametros.length; i++) {\n            var para: Declaracion;\n            var crear: Declaracion;\n            para = <Declaracion>parametros[i];\n            crear = para;\n            crear.valor = this.listaParams[i];\n            crear.execute(newtable, tree);\n        }\n\n        var result: Array<Nodo> = (<any>simboloMetodo).valor[1];\n\n        if (result) {\n            for (let i = 0; i < result.length; i++) {\n                const res = result[i].execute(newtable, tree);\n\n                if (simboloMetodo.tipo.tipo == tipos.VOID) {\n                    if (res instanceof Retorno) {\n                        const error = new Excepcion('Semantico',\n                            `No se esperaba un retorno en este metodo`,\n                            res.line, res.column);\n                        tree.errores.push(error);\n                        tree.consola.push(error.toString());\n                        return error;\n                    }\n                } else {\n                    if (res instanceof Retorno) {\n                        if (res.expresion != null) {\n\n                            this.tipo = res.expresion.tipo;\n                            res.execute(newtable, tree)\n                            var retorno = res.exp;\n\n                            if (simboloMetodo.tipo.tipo == res.expresion.tipo.tipo) {\n                                return retorno;\n                            } else {\n                                if (simboloMetodo.tipo.tipo == tipos.DECIMAL && (res.expresion.tipo.tipo == tipos.ENTERO)) {\n                                    return retorno;\n                                }\n                                const error = new Excepcion('Semantico',\n                                    `No se puede retornar debido a que es de un tipo diferente al declarado`,\n                                    res.line, res.column);\n                                tree.errores.push(error);\n                                tree.consola.push(error.toString());\n                                return error;\n                            }\n                        } else {\n                            const error = new Excepcion('Semantico',\n                                `No se puede retornar debido a que es de un tipo diferente al declarado`,\n                                res.line, res.column);\n                            tree.errores.push(error);\n                            tree.consola.push(error.toString());\n                            return error;\n                        }\n                    }\n                }\n            }\n            /*if (simboloMetodo.tipo.tipo != tipos.VOID) {\n                const error = new Excepcion('Semantico',\n                    `Se esperaba un retorno en esta Funcion`,\n                    this.line, this.column);\n                tree.errores.push(error);\n                tree.consola.push(error.toString());\n                return error;\n            }*/\n        }\n        return null;\n    }\n\n    getNodo() {\n        var nodo: NodoAST = new NodoAST(\"\");\n        nodo.agregarHijo(this.id);\n        nodo.agregarHijo(\"(\");\n        if (this.listaParams.length != 0) {\n            var nodo2: NodoAST = new NodoAST(\"\");\n            var index = 1;\n            for (let i = 0; i < this.listaParams.length; i++) {\n                var param = <Declaracion>this.listaParams[i]\n                var nodo3: NodoAST = new NodoAST(param.tipo + \"\");\n                nodo3.agregarHijo(param.id + \"\");\n                nodo2.agregarHijo(nodo3);\n            }\n            nodo.agregarHijo(nodo2);\n        }\n\n        nodo.agregarHijo(\")\");\n        nodo.agregarHijo(\"{\");\n\n        var nodo3: NodoAST = new NodoAST(\"\");\n        nodo.agregarHijo(nodo3);\n        nodo.agregarHijo(\"}\");\n        return nodo;\n    }\n\n    getNodoCST() {\n        var nodo: NodoCST = new NodoCST(\"LLAMADA METODO\");\n        nodo.agregarHijo(this.id);\n        nodo.agregarHijo(\"(\");\n        if (this.listaParams.length != 0) {\n            var nodo2: NodoCST = new NodoCST(\"Parametros\");\n            var index = 1;\n            for (let i = 0; i < this.listaParams.length; i++) {\n                var param = <Declaracion>this.listaParams[i]\n                var nodo3: NodoCST = new NodoCST(param.tipo + \"\");\n                nodo3.agregarHijo(param.id + \"\");\n                nodo2.agregarHijo(nodo3);\n            }\n            nodo.agregarHijo(nodo2);\n        }\n\n        nodo.agregarHijo(\")\");\n        nodo.agregarHijo(\"{\");\n\n        var nodo3: NodoCST = new NodoCST(\"INSTRUCCIONES\");\n        nodo.agregarHijo(nodo3);\n        nodo.agregarHijo(\"}\");\n        return nodo;\n    }\n}","import {Nodo} from \"../Arbol/Nodo\";\nimport {Table} from \"../Simbolos/Table\";\nimport {Tree} from \"../Simbolos/Tree\";\nimport {Tipo} from \"../Varios/Tipo\";\nimport {tipos} from \"../Varios/Tipo\";\nimport { NodoAST } from \"../Arbol/NodoAST\";\nimport { NodoCST } from \"../Arbol/NodoCST\";\n\nexport class Print extends Nodo{\n    expresion : Nodo;\n\n    constructor(expresion: Nodo, line: Number, column: Number){\n        super(new Tipo(tipos.VOID), line, column);\n        this.expresion = expresion;\n    }\n\n    execute(table: Table, tree: Tree): any {\n        const valor = this.expresion.execute(table, tree);\n        tree.consola.push(valor);\n        return null;\n    }\n\n    getNodo() {\n        var nodo:NodoAST  = new NodoAST(\"\");\n        nodo.agregarHijo(\"print\");\n        nodo.agregarHijo(\"(\");\n        nodo.agregarHijo(this.expresion.getNodo());\n        nodo.agregarHijo(\")\");\n        return nodo;\n    }\n\n    getNodoCST() {\n        var nodo:NodoCST  = new NodoCST(\"PRINT\");\n        nodo.agregarHijo(\"print\");\n        nodo.agregarHijo(\"(\");\n        nodo.agregarHijo(this.expresion.getNodoCST());\n        nodo.agregarHijo(\")\");\n        return nodo;\n    }\n}","import { Nodo } from \"../Arbol/Nodo\";\nimport { NodoAST } from \"../Arbol/NodoAST\";\nimport { Table } from \"../Simbolos/Table\";\nimport { Tree } from \"../Simbolos/Tree\";\nimport { NodoCST } from \"../Arbol/NodoCST\";\n\nexport class Retorno extends Nodo {\n    expresion: Nodo;\n    exp: Nodo;\n    constructor(expresion: Nodo, line: Number, column: Number) {\n        super(null, line, column);\n        this.expresion = expresion\n    }\n\n    execute(table: Table, tree: Tree) {\n        if (this.expresion != null) {\n            this.exp = this.expresion.execute(table, tree);\n        }\n        return this;\n    }\n\n    getNodo() {\n        var nodo: NodoAST = new NodoAST(\"\");\n        if (this.expresion != null) {\n            nodo.agregarHijo(this.expresion.getNodo());\n        }\n\n        return nodo;\n    }\n\n    getNodoCST() {\n        var nodo: NodoCST = new NodoCST(\"RETURN\");\n        if (this.expresion != null) {\n            nodo.agregarHijo(this.expresion.getNodoCST());\n        }\n\n        return nodo;\n    }\n}","import { Tipo, tipos } from \"../Varios/Tipo\";\n\nexport class Simbolo {\n    tipo: Tipo;\n    id: String;\n    valor: Object;\n    line : Number;\n    column : Number;\n    tipo2 : Tipo;\n\n\n    constructor(tipo: Tipo, id: String, valor: Object, tipo2: Tipo,line:Number, column:Number) {\n        this.tipo = tipo;\n        this.id = id;\n        this.valor = valor;\n        this.line = line;\n        this.column = column;\n        this.tipo2 = tipo2;\n    }\n}","import { Simbolo } from \"./Simbolo\";\n\nexport class Table{\n    Anterior: Table;\n    Variables: Map<String, Simbolo>;\n\n    constructor(Anterior: Table){\n        this.Anterior = Anterior;\n        this.Variables = new Map<String, Simbolo>();\n    }\n\n    setVariable(simbol: Simbolo){\n        let ambito: Table;\n        for(ambito = this; ambito!= null; ambito = ambito.Anterior){\n            for(let key of Array.from(ambito.Variables.keys())) {\n                if(key.toLowerCase() === simbol.id.toLowerCase()){\n                    // return `La variable ${key} ya ha sido declarada.`;\n                    return this.Variables.set(simbol.id.toLowerCase(), simbol);\n                }\n            }\n        }\n        this.Variables.set(simbol.id.toLowerCase(), simbol);\n        return null;\n    }\n    \n    getVariable(id: String): any{\n        let ambito: Table;\n        for(ambito = this; ambito != null; ambito = ambito.Anterior){\n            for(let key of Array.from( ambito.Variables.keys()) ) {\n                if(key.toLowerCase() === id.toLowerCase()){\n                    return ambito.Variables.get(key.toLocaleLowerCase());\n                }\n            }\n        }\n        return null;\n    }\n}","import { Nodo } from \"../Arbol/Nodo\";\nimport { Error } from \"../Varios/Error\";\nimport { Simbolo } from \"./Simbolo\";\n\nexport class Tree {\n    instrucciones: Array<Nodo>\n    errores: Array<Error>\n    consola: Array<String>\n    Variables: Array<Simbolo>;\n    produccion: Array<String>;\n    accion: Array<String>;\n    salida3d: Array<String>;\n\n    constructor(instrucciones: Array<Nodo>) {\n        this.instrucciones = instrucciones;\n        this.errores = new Array<Error>();\n        this.consola = new Array<String>();\n        this.Variables = new Array<Simbolo>();\n        this.produccion = new Array<String>();\n        this.accion = new Array<String>();\n        this.salida3d = new Array<String>();\n    }\n}","export class Error{\n\n    tipo: String;\n    descripcion: String;\n    line: Number;\n    column: Number;\n\n    constructor(tipo: String, descripcion: String, line: Number, column: Number) {\n        this.tipo = tipo;\n        this.descripcion = descripcion;\n        this.line = line;\n        this.column = column;\n    }\n\n    toString(){\n        return `Error ${this.tipo} en la linea ${this.line} y columna ${this.column}, ${this.descripcion}`;\n    }\n}","export class Excepcion{\n    tipo: String;\n    descripcion: String;\n    line: Number;\n    column: Number;\n\n    constructor(tipo: String, descripcion: String, line: Number, column: Number) {\n        this.tipo = tipo;\n        this.descripcion = descripcion;\n        this.line = line;\n        this.column = column;\n    }\n\n    toString(){\n        return `Error ${this.tipo} en la linea ${this.line} y columna ${this.column}, ${this.descripcion}`;\n    }\n}","import { NodoAST } from \"../Arbol/NodoAST\";\nimport { NodoCST } from \"../Arbol/NodoCST\";\nimport { Simbolo } from \"../Simbolos/Simbolo\";\n\nexport function graphAST(raiz: NodoAST): String {\n    getDot(raiz)\n    return grafo\n}\n\nexport function graphCST(raiz: NodoCST): String {\n    getDotCST(raiz)\n    return grafo\n}\n\nvar c: number;\nvar grafo: String;\n\nfunction getDotCST(raiz: NodoCST): String {\n    grafo = \"digraph cst {\\n\";\n    let val = raiz.getValor()\n    val = val.replace(/\\'/gi, \"\")\n    val = val.replace(/\\\"/gi, \"\")\n    grafo += \"n0 [label = \\\"\" + val + \"\\\"]\\n\";\n    c = 1;\n    recorrerCST(\"n0\", raiz);\n    grafo += \"}\";\n    return grafo;\n}\n\nfunction recorrerCST(padre: String, nPadre: NodoCST): void {\n    nPadre.getHijos().forEach(hijo => {\n        var nombreHijo: String = \"n\" + c;\n        let val = hijo.getValor()\n        val = val.replace(/\\'/gi, \"\")\n        val = val.replace(/\\\"/gi, \"\")\n        grafo += nombreHijo + \" [label = \\\"\";\n        grafo = grafo + \"\" + val\n        grafo += \"\\\"]\\n\";\n        grafo += padre + \" -> \" + nombreHijo + \"\\n\";\n        c++;\n        recorrerCST(nombreHijo, hijo);\n    });\n}\n\nfunction getDot(raiz: NodoAST): String {\n    grafo = \"digraph ast {\\n\";\n    let val = raiz.getValor()\n    val = val.replace(/\\'/gi, \"\")\n    val = val.replace(/\\\"/gi, \"\")\n    grafo += \"n0 [label = \\\"\" + val + \"\\\"]\\n\";\n    c = 1;\n    recorrerAST(\"n0\", raiz);\n    grafo += \"}\";\n    return grafo;\n}\n\nfunction recorrerAST(padre: String, nPadre: NodoAST): void {\n    nPadre.getHijos().forEach(hijo => {\n        var nombreHijo: String = \"n\" + c;\n        let val = hijo.getValor()\n        val = val.replace(/\\'/gi, \"\")\n        val = val.replace(/\\\"/gi, \"\")\n        grafo += nombreHijo + \" [label = \\\"\" + val + \"\\\"]\\n\";\n        grafo += padre + \" -> \" + nombreHijo + \"\\n\";\n        c++;\n        recorrerAST(nombreHijo, hijo);\n    });\n}","export enum tipos {\n    ENTERO,\n    DECIMAL,\n    NUMERO,\n    CARACTER,\n    STRING,\n    BOOLEANO,\n    LISTA,\n    ARRAY,\n    VOID, \n    METODO,\n    FUNCION,\n    VARIABLE\n}\n\nexport function esEntero(numero: number) {\n    if (numero % 1 == 0) {\n        return tipos.ENTERO;\n    } else {\n        return tipos.DECIMAL;\n    }\n}\n\nexport class Tipo {\n    tipo: tipos;\n\n    constructor(tipo: tipos) {\n        this.tipo = tipo;\n    }\n\n    toString():any {\n        if (this.tipo === tipos.BOOLEANO) {\n            return 'boolean';\n        } else if (this.tipo === tipos.ENTERO) {\n            return 'entero';\n        } else if (this.tipo === tipos.DECIMAL) {\n            return 'decimal';\n        } else if (this.tipo === tipos.STRING) {\n            return 'string';\n        } else if (this.tipo === tipos.CARACTER) {\n            return 'caracter';\n        }else if (this.tipo === tipos.VARIABLE) {\n            return 'Variable';\n        }else if (this.tipo === tipos.METODO) {\n            return 'Metodo';\n        }else if (this.tipo === tipos.FUNCION) {\n            return 'Funcion';\n        }else if (this.tipo === tipos.VOID) {\n            return 'Void';\n        }else if (this.tipo === tipos.ARRAY) {\n            return 'Vector';\n        }else if (this.tipo === tipos.LISTA) {\n            return 'Lista';\n        }\n    }\n}","import { NodoX } from './Expresiones/NodoX';\nimport { EjecucionXpath } from './Arbol/Ejecucion';\nimport { If } from './Instrucciones/If';\nimport { Retorno } from './Instrucciones/Retorno';\nimport { Aritmetica } from './Expresiones/Aritmetica';\nimport { Relacional } from './Expresiones/Relacional';\nimport { Tree } from './Simbolos/Tree';\nimport { Tipo, tipos, esEntero } from './Varios/Tipo';\nimport { Primitivo } from './Expresiones/Primitivo';\nimport { Error } from './Varios/Error';\nimport { Identificador } from './Expresiones/identificador';\nimport { Declaracion } from './Instrucciones/Declaracion';\nimport { DeclaracionMetodo } from './Instrucciones/DeclaracionMetodo';\nimport { LlamadaMetodo } from './Instrucciones/LlamadaMetodo';\nimport { Logico } from './Expresiones/Logico';\nimport { Table } from './Simbolos/Table';\nimport { NodoAST } from './Arbol/NodoAST';\nimport { Nodo } from './Arbol/Nodo';\nimport { Print } from './Instrucciones/Print';\nimport { Substrings } from './Expresiones/Substring';\nimport { ToLower } from './Expresiones/ToLower';\nimport { ToString } from './Expresiones/ToString';\nimport { ToUpper } from './Expresiones/uppercase';\nimport { ToNumber } from './Expresiones/ToNumber';\nimport { graphAST, graphCST } from './Varios/Graficar';\nimport { NodoCST } from './Arbol/NodoCST';\nimport { GramaticaBNF } from './Arbol/GramaticaBNF';\nimport { xml3D } from '../analizadorXML/Codigo3D/xml3D';\n\nimport * as gramatica from './GramaticaXquery';\n\ninterface retorno {\n    errores: any,\n    consola: any,\n    ast: any,\n    cst: any,\n    tabla: any,\n    bnf: any,\n    salida3d: any\n}\n\nexport class AnalizadorXquery {\n\n    public ejecutarCodigo(entrada: string) {\n        //entrada = `local:minPrice($/bookstore/book/price,$/bookstore/book/year)`\n        //let arbol: Tree = gramatica.parse(entrada)\n\n        let ret: retorno =  {\n            errores: [], \n            consola: [],\n            ast: \"\",\n            cst: \"\",\n            tabla: [],\n            bnf: [],\n            salida3d: []\n        };\n\n        try {\n            const tree = gramatica.parse(entrada);\n            const tabla = new Table(null);\n        \n            tree.instrucciones.map((m: any) => {\n                try {\n                    const res = m.execute(tabla, tree);\n                } catch (error) {\n                const error2 = new Error('Sintactico', `Irrecuperable`, 0, 0);\n                    tree.consola.push(error2.toString());\n                }\n            });\n        \n            var init: NodoAST = new NodoAST(\"RAIZ\");\n            var instr: NodoAST = new NodoAST(\"INSTRUCCIONES\");\n            tree.instrucciones.map((m: Nodo) => {\n                instr.agregarHijo(m.getNodo());\n            });\n            init.agregarHijo(instr);\n        \n            var init2: NodoCST = new NodoCST(\"RAIZ\");\n            var instr2: NodoCST = new NodoCST(\"INSTRUCCIONES\");\n            tree.instrucciones.map((m: Nodo) => {\n                instr2.agregarHijo(m.getNodoCST());\n            });\n            init2.agregarHijo(instr2);\n\n            ret.cst = graphCST(init2);\n            ret.ast = graphAST(init);\n\n            let bnfC = new GramaticaBNF(tree.produccion, tree.accion)\n            let reporteBNF = bnfC.getBNFReport();\n\n            let buscador = new xml3D();\n            \n\n            console.log(tree)\n            ret.consola = tree.consola;\n            ret.errores = tree.errores;\n            ret.tabla = tree.Variables;\n            ret.bnf = reporteBNF;\n            ret.salida3d = tree.salida3d;\n            ret.salida3d.push(buscador.generate3DDecla(tree.Variables))\n        } catch (error) {\n            let consola2 = new Array<String>();\n            consola2.push(error);\n            consola2.push(\"Ocurrio un Error sintactico Irrecuperable\\n\\n\");\n            consola2.push(\"                   FFFFFFFFFFFFFFF\\n\" +\n                \"                   FFFFFFFFFFFFFFF\\n\" +\n                \"                   FFFFFF\\n\" +\n                \"                   FFFFFF\\n\" +\n                \"                   FFFFFFFFFFFFFFF\\n\" +\n                \"                   FFFFFFFFFFFFFFF\\n\" +\n                \"                   FFFFFFF\\n\" +\n                \"                   FFFFFFF\\n\" +\n                \"                   FFFFFFF\\n\" +\n                \"                   FFFFFFF\");\n            \n            ret.consola = consola2;\n            ret.errores = [];\n        }\n        return ret\n    }\n}","import Primitivo from \"../Expresiones/Primitivo\";\nimport Aritmetica from \"../Operaciones/Aritmeticas\";\nimport Logica from \"../Operaciones/Logica\";\n\ninterface ayudaGrafico {\n    valor: string\n    padre: string\n}\n\ninterface predicadoAyuda {\n    ex1: any,\n    ex2: any\n}\n\nexport class Arbol {\n\n    dot: string = \"\";\n    objetos: any = [];\n\n    constructor(objetos: any) {\n        this.objetos = objetos\n        this.dot = \"\";\n    }\n\n    crearGrafoAST(): string {\n        this.dot = \"digraph AST{\\n\";\n        this.dot += \"\\\"raiz\\\" [label = \\\"Raiz\\\"]\\n\";\n        \n        if(this.objetos.length > 1){\n            let i = 0;\n            while ( i < this.objetos.length ){\n                this.dot += `\\\"${i}\\\" [label = \\\"|\\\"]\\n`\n                this.dot += `\\\"raiz\\\" -> \\\"${i}\\\"\\n`;\n                this.dot += this.generarNodoAST(this.objetos[i], `${i}`); \n                if (i + 1 < this.objetos.length ) {\n                this.dot += this.generarNodoAST(this.objetos[i+1], `${i}`);\n                }\n                i += 2\n            }\n        }else{\n            this.objetos.forEach((objeto: any) => {\n                this.dot += this.generarNodoAST(objeto, 'raiz');\n            });\n        }\n        \n        this.dot += \"}\";\n        console.log(this.dot)\n        return this.dot;\n    }\n\n    generarNodoAST(objeto: any, padre: any): string {\n        var aux:string = \"\";\n        var izqID = `${objeto.linea.toString()}_${objeto.columna.toString()}I`;\n        var derID = `${objeto.linea.toString()}_${objeto.columna.toString()}D`;\n        \n        aux = `\\\"${izqID}\\\" [label = \\\"${objeto.estado}\\\"]\\n`;\n        aux += `\\\"${derID}\\\" [label = \\\"${objeto.identificador}\\\"]\\n`;\n\n        aux += `\\\"${padre}\\\" -> \\\"${izqID}\\\"\\n`;\n        aux += `\\\"${padre}\\\" -> \\\"${derID}\\\"\\n`;\n        \n        if (objeto.nodos.length > 0){\n            aux += this.generarNodoAST(objeto.nodos[0], izqID);\n        }\n\n        return aux;\n    }\n\n    crearGrafoCST():string {\n        this.dot = \"digraph AST {\\n\";\n        this.dot += \"\\\"raiz\\\" [label = \\\"Raiz\\\"]\\n\";\n        \n        if(this.objetos.length > 1){\n            let i = 0;\n            while ( i < this.objetos.length ){\n                this.dot += `\\\"${i}S\\\" [label = \\\"Separador\\\"]\\n`\n                this.dot += `\\\"${i}\\\" [label = \\\"|\\\"]\\n`\n                this.dot += `\\\"raiz\\\" -> \\\"${i}S\\\"\\n`;\n                this.dot += `\\\"${i}S\\\" -> \\\"${i}\\\"\\n`;\n                this.dot += this.generarNodoCST(this.objetos[i], `${i}`); \n                if (i + 1 < this.objetos.length ) {\n                this.dot += this.generarNodoCST(this.objetos[i+1], `${i}`);\n                }\n                i += 2\n            }\n        }else{\n            this.objetos.forEach((objeto: any) => {\n                this.dot += this.generarNodoCST(objeto, 'raiz');\n            });\n        }\n        this.dot += \"}\";\n        return this.dot;\n    }\n\n    generarNodoCST(objeto: any, padre: string):string {\n        var aux:string = \"\";\n        var izqID = `${objeto.linea.toString()}_${objeto.columna.toString()}I`;\n        var derID = `${objeto.linea.toString()}_${objeto.columna.toString()}D`;\n        var centroID = `${objeto.linea.toString()}_${objeto.columna.toString()}C`;\n\n        aux = `\\\"${izqID}\\\" [label = \\\"${objeto.estado}\\\"]\\n`;\n        aux += `\\\"${derID}\\\" [label = \\\"${objeto.identificador}\\\"]\\n`;\n        aux += `\\\"${centroID}\\\" [label = \\\"Nodo\\\"]\\n`;\n\n        aux += `\\\"${centroID}\\\" -> \\\"${izqID}\\\"\\n`;\n        aux += `\\\"${centroID}\\\" -> \\\"${derID}\\\"\\n`;\n        aux += `\\\"${padre}\\\" -> \\\"${centroID}\\\"\\n`;\n\n        if (objeto.nodos.length > 0){\n            aux += this.generarNodoCST(objeto.nodos[0], izqID);\n        }\n\n        return aux;\n    }\n\n    ejecutarArbol():string {\n        this.dot = \"\";\n        \n        if(this.objetos.length > 1){\n            for (let i = 0; i < this.objetos.length; i++){\n                this.dot += this.ejecutarNodoArbol(this.objetos[i]);\n                if (i != this.objetos.length - 1) { this.dot += \"|\"; }\n            }\n        }else{\n            this.dot += this.ejecutarNodoArbol(this.objetos[0])\n        }\n        \n        console.log(this.dot)\n        return this.dot\n    }\n\n    ejecutarNodoArbol(objeto: any):string {\n        var aux:string = objeto.estado + objeto.identificador;\n        \n        if (objeto.nodos.length > 0){\n            aux += this.ejecutarNodoArbol(objeto.nodos[0]);\n        }\n        \n        /*if (objeto.predicado !== null){\n            let ret = this.ejecutarPredicado(objeto.predicado.expresion)\n            aux += \"[\" + ret.ex1 + ret.ex2 + \"]\";\n        }*/\n\n        return aux\n    }\n\n    /*ejecutarPredicado(objeto: any):predicadoAyuda {\n        var expre1: any, expre2: any;\n        if (objeto.exp1 instanceof Primitivo) {\n            expre1 = this.ejecutarIzquierdo(objeto.exp1);\n            console.log(expre1)\n        }\n        if (objeto.exp2 instanceof Primitivo) {\n            expre2 = this.ejecutarDerecho(objeto.exp2);\n            console.log(expre2)\n        }\n        if (objeto.exp1 instanceof Primitivo == false && objeto.exp2 instanceof Primitivo == false) {\n            expre1 = this.ejecutarPredicado(objeto.exp1).ex1\n            expre2 = this.ejecutarPredicado(objeto.exp2).ex2\n            expre1 = expre1.getValor();\n            expre2 = expre2.getValor();\n            console.log(expre1)\n            console.log(expre2)\n        }\n\n        return {ex1: expre1, ex2: expre2}\n    }   \n\n    ejecutarIzquierdo(objeto: any): any {\n        return objeto.getValor();\n    }\n\n    ejecutarDerecho(objeto: any): any {\n        return objeto.getValor();\n    }\n\n    ejecutarAritmetica(objeto: any):any {\n\n    }*/\n}","interface retornoBNF {\n    no: number,\n    produccion: string\n    accion: string\n}\n\nexport class GramaticaBNF {\n\n    public reporte: any;\n    public reporte2: any;\n\n    constructor(repo: any, repo2: any) {\n        this.reporte = repo;\n        this.reporte2 = repo2;\n    }\n\n    getBNFReport(): retornoBNF[] {\n        let ret: retornoBNF[] = [];\n\n        for (let i = 0; i < this.reporte.length; i++) {\n            ret.push(this.generarBodyReporte(this.reporte[i], this.reporte2[i], i));\n        }\n\n        return ret\n    }\n\n    generarBodyReporte(object: any, object2: any, iterator: number): retornoBNF {\n        var fila: retornoBNF = {\n            no: iterator,\n            produccion: object,\n            accion: object2\n        }\n        return fila;\n    }\n\n}\n\n","export class SalidaGramatica {\n\n    public objetos: any;\n    public reporteBNF: any;\n    public reporteBNF2: any;\n    public reportError: any;\n\n    constructor(objetos: any, reporte: any, reporte2: any, reporteE: null) {\n        this.objetos = objetos;\n        this.reporteBNF = reporte;\n        this.reporteBNF2 = reporte2;\n        this.reportError = reporteE;\n    }\n}","import { ErrorHandler } from \"@angular/core\";\nimport { tError } from \"../Expresiones/tError\";\n\ninterface errorIndividual {\n    no: number,\n    tipo: string,\n    valor: string,\n    linea: number,\n    columna: number,\n}\n\nexport class ListaErrores {\n    contador: number = 1;\n    public cuerpoHtml: any;\n\n    constructor() { this.contador = 1 }\n\n    //LLAMARLO AL INICIO PARA VALIDAR LAS ETIQUETAS\n    validateEtiquetas(listaO: any): Array<tError> {\n        var tmpArray: Array<tError> = [];\n        for (let i = 0; i < listaO.length; i++) {\n            if (listaO[i].identificador !== listaO[i].cierre) {\n                tmpArray.push(\n                    new tError('Semantico',\n                        `Etiquetas incorrectas ${listaO[i].identificador} !=== ${listaO[i].cierre}`,\n                        listaO[i].linea,\n                        listaO[i].columna\n                    ));\n                //console.log(`Etiquetas incorrectas ${listaO[i].identificador} !=== ${listaO[i].cierre}`);\n            } else {\n                var tmp = this.validateEtiquetas(listaO[i].listaObjetos);\n                if (tmp.length !== 0) {\n                    tmpArray = tmp;\n                }\n            }\n        }\n        return tmpArray;\n    }\n\n\n    /*\n        var arrTmp = lError.validateEtiquetas(salidaG.objetos);\n        console.log(lError.generateHtmlBody(salidaG.lErrores, arrTmp));\n    */\n    //ARCHIVO .HTML\n    generateHtmlBody(erroresLS: any, erroresEtiquetas: any):errorIndividual[] {\n        var arrayCuerpo: errorIndividual[] = [];\n\n        if (erroresLS.length > 0){\n        erroresLS.forEach((object: any) => {\n            arrayCuerpo.push(this.getHtmlBody(object));\n        });\n    }\n    \n    if (erroresEtiquetas.length >  0){\n    erroresEtiquetas.forEach((object: any) => {\n            arrayCuerpo.push(this.getHtmlBody(object));\n        });\n    }\n        return arrayCuerpo;\n    \n}\n\n    getHtmlBody(error: any):errorIndividual {\n        var fila:errorIndividual = {\n            no: this.contador,\n            tipo: error.tipo,\n            valor: error.texto,\n            linea: error.linea,\n            columna: error.columna\n        }; \n        return fila;\n    }\n\n}\n","import { Predicate } from \"./Predicate\";\n\nexport class Nodo{\n\n    estado: string;\n    identificador:any;\n    predicado: Predicate;\n    nodos: Array<Nodo>;\n    linea: number;\n    columna: number;\n\n    constructor(estado:string, identificador:any, predicado: Predicate, nodos:Array<Nodo>, linea:number, columna:number) {\n        this.estado = estado;\n        this.identificador = identificador;\n        this.predicado = predicado;\n        this.nodos = nodos;\n        this.linea = linea;\n        this.columna = columna;\n    }\n}","import { Expresion } from \"../Operaciones/InterfazExpresion\";\n\nexport class Predicate {\n\n    expresion: Expresion; \n    linea: number;\n    columna: number;\n\n    constructor(expresion: Expresion, linea:number, columna:number) {\n        this.expresion = expresion;\n        this.linea = linea;\n        this.columna = columna;\n    }\n}","import { Expresion } from '../Operaciones/InterfazExpresion';\n\nexport default class Primitivo implements Expresion{\n\n    public primitivo: any; \n    public linea: number;\n    public columna: number;\n\n    /**\n     * @constructor creamos un nuevo primitivo\n     * @param primitivo hace referencia a los valores enteros, dobles, cadenas, caracteres, booleanos\n     * @param linea idica la linea donde se encuentra\n     * @param columna indica la columna donde se encuentra\n     */\n    constructor(primitivo: any, linea: number, columna: number) {\n        this.columna = columna;\n        this.linea = linea;\n        this.primitivo = primitivo;\n    }\n\n    getTipo() :any {\n        let valor = this.getValor();\n\n        if(typeof valor === 'number'){   \n            return \"numero\";\n        }else if(typeof valor === 'string'){\n            return \"string\";\n        }\n    }\n\n    /**\n     * @returns retorna el valor exacto del primitivo \n     */\n    getValor(): any {\n        return this.primitivo;\n    }\n}","export class tError {\n\n    public tipo: any;\n    public texto: string;\n    public linea: number;\n    public columna: number;\n\n    /**\n     * @constructor creamos un nuevo primitivo\n     * @param tipo hace referencia al tipo de error\n     * @param texto hace referencia al contenido del mensaje del error\n     * @param linea idica la linea donde se encuentra\n     * @param columna indica la columna donde se encuentra\n     */\n    constructor(tipo: any, texto: string, linea: number, columna: number) {\n        this.columna = columna;\n        this.linea = linea;\n        this.texto = texto;\n        this.tipo = tipo;\n    }\n}","import { Expresion } from '../Operaciones/InterfazExpresion';\n\nexport default class Aritmetica implements Expresion {\n\n    public exp1: Expresion;\n    public operador: string;\n    public exp2: Expresion;\n    public linea: any;\n    public columna: any;\n\n    public constructor(exp1, operador, exp2, linea, columna) {\n        this.exp1 = exp1;\n        this.operador = operador;\n        this.exp2 = exp2;\n        this.linea = linea;\n        this.columna = columna;\n    }\n\n    getTipo() : any{\n        let valor = this.getValor();\n\n        if(typeof valor === 'number'){   \n            return \"numero\";\n        }else if(typeof valor === 'string'){\n            return \"string\";\n        }\n    }\n\n    getValor():any { \n        let valor_exp1 = this.exp1.getValor();\n        let valor_exp2 = this.exp2.getValor();\n\n\n        switch (this.operador) {\n            case \"+\":\n                if(typeof valor_exp1 === 'number'){\n                    if(typeof valor_exp2 === 'number'){\n                        return valor_exp1 + valor_exp2;\n                    }\n                }\n                break;\n            case \"-\":\n                if(typeof valor_exp1 == 'number'){\n                    if (typeof valor_exp2 == \"number\"){\n                        return valor_exp1 - valor_exp2;\n                    }\n                }\n                break;\n            case \"*\":\n                if(typeof valor_exp1 === 'number'){\n                    if(typeof valor_exp2 === 'number'){\n                        return valor_exp1 * valor_exp2;\n                    }\n                }\n                break;\n            case \"/\":\n                    if(typeof valor_exp1 === 'number'){\n                        if(typeof valor_exp2 === 'number'){\n                            if (valor_exp2 != 0){\n                                return valor_exp1 / valor_exp2;\n                            }\n                        }\n                    }\n                    break;  \n            case \"%\":\n                if(typeof valor_exp1 === 'number'){\n                    if(typeof valor_exp2 === 'number'){\n                        if (valor_exp2 != 0){\n                            return valor_exp1 % valor_exp2;\n                        }\n                    }\n                }\n                break;  \n            default:\n                return \"\";\n                break;\n        }\n    }\n}","import { Expresion } from \"../Operaciones/InterfazExpresion\";\n\nexport default class Logica /*extends Operacion*/ implements Expresion{\n    \n    public exp1: Expresion;\n    public operador: string;\n    public exp2: Expresion;\n    public linea: any;\n    public columna: any;\n\n    public constructor(exp1: Expresion, operador: string, exp2: Expresion, linea: number, columna:number) {\n        this.exp1 = exp1;\n        this.operador = operador;\n        this.exp2 = exp2;\n        this.linea = linea;\n        this.columna = columna;\n    }\n\n    getTipo(/*controlador: Controlador, ts: TablaSimbolos*/) : any{\n        return \"\"\n    }\n    \n    getValor(/*Controlador: Controlador, TablaSimbolos: TablaSimbolos*/): any {\n        return this.exp1.getValor() + \" \" + this.operador + \" \" + this.exp2.getValor();\n    }\n    \n\n    /*\n    recorrer(): Nodo {\n        throw new Error(\"Method not implemented.\");\n    }*/\n    \n}","import { Expresion } from \"../Operaciones/InterfazExpresion\";\n\nexport default class Relacional /*extends Operacion*/ implements Expresion{\n    \n    public exp1: Expresion;\n    public operador: string;\n    public exp2: Expresion;\n    public linea: any;\n    public columna: any;\n\n    public constructor(exp1: Expresion, operador: string, exp2: Expresion, linea: number, columna:number) {\n        this.exp1 = exp1;\n        this.operador = operador;\n        this.exp2 = exp2;\n        this.linea = linea;\n        this.columna = columna;\n    }\n\n    getTipo(/*controlador: Controlador, ts: TablaSimbolos*/) : any{\n        return \"\"\n    }\n    \n    getValor(/*Controlador: Controlador, TablaSimbolos: TablaSimbolos*/): any {\n        return this.exp1.getValor() + \" \" + this.operador + \" \" + this.exp2.getValor();\n    }\n    \n\n    /*\n    recorrer(): Nodo {\n        throw new Error(\"Method not implemented.\");\n    }*/\n    \n}","import { SalidaGramatica } from './AST/SalidaGramatica';\nimport { Nodo } from './Expresiones/Nodo';\nimport { GramaticaBNF } from './AST/GramaticaBNF';\nimport { Arbol } from './AST/Arbol';\nimport { ListaErrores } from './Errores/ListaErrores';\nimport Primitivo from './Expresiones/Primitivo';\nimport Aritmetica from './Operaciones/Aritmeticas';\nimport Relacional from './Operaciones/Relacional';\nimport Logica from './Operaciones/Logica';\n\nimport * as gramatica from './xpathAsc';\n\ninterface retorno {\n    objetos: Nodo[],\n    bnfRep: any,\n    astRep: any,\n    cstRep: any,\n    ejecutado: any,\n    errores: any\n}\n\nexport class AnalizadosAscXpath {\n    \n    public ejecutarCodigo(entrada: string): retorno {\n\n        const salidaG = gramatica.parse(entrada);\n        const gramBnf = new GramaticaBNF(salidaG.reporteBNF, salidaG.reporteBNF2);\n        const arbol = new Arbol(salidaG.objetos);\n        const Listaerrores = new ListaErrores();\n\n        console.log(salidaG.objetos)\n\n        let reporteBNF = gramBnf.getBNFReport();\n        let reporteAST = arbol.crearGrafoAST();\n        let reporteCST = arbol.crearGrafoCST();\n        let resultado = arbol.ejecutarArbol();\n        //Errores\n        let errores = Listaerrores.generateHtmlBody(salidaG.reportError, []);\n\n        return {\n            objetos: salidaG.objetos,\n            bnfRep: reporteBNF,\n            astRep: reporteAST,\n            cstRep: reporteCST,\n            ejecutado: resultado,\n            errores: errores\n        };\n    }\n}","import { SalidaGramatica } from './AST/SalidaGramatica';\nimport { Nodo } from './Expresiones/Nodo';\nimport { GramaticaBNF } from './AST/GramaticaBNF';\nimport { Arbol } from './AST/Arbol';\nimport { ListaErrores } from './Errores/ListaErrores';\nimport Primitivo from './Expresiones/Primitivo';\nimport Aritmetica from './Operaciones/Aritmeticas';\nimport Relacional from './Operaciones/Relacional';\nimport Logica from './Operaciones/Logica';\n\nimport * as gramatica from './xpathDesc';\n\ninterface retorno {\n    objetos: Nodo[],\n    bnfRep: any,\n    astRep: any,\n    cstRep: any,\n    ejecutado: any,\n    errores: any\n}\n\nexport class AnalizadosAscXpath {\n    public ejecutarCodigo(entrada: string): retorno {\n\n        const salidaG = gramatica.parse(entrada);\n        const gramBnf = new GramaticaBNF(salidaG.reporteBNF, salidaG.reporteBNF2);\n        const arbol = new Arbol(salidaG.objetos);\n        const Listaerrores = new ListaErrores();\n\n        let reporteBNF = gramBnf.getBNFReport();\n        let reporteAST = arbol.crearGrafoAST();\n        let reporteCST = arbol.crearGrafoCST();\n        let resultado = arbol.ejecutarArbol();\n        //Errores\n        let errores = Listaerrores.generateHtmlBody(salidaG.reportError, []);\n\n        return {\n            objetos: salidaG.objetos,\n            bnfRep: reporteBNF,\n            astRep: reporteAST,\n            cstRep: reporteCST,\n            ejecutado: resultado,\n            errores: errores\n        };\n    }\n}","/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar xpathAsc = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,6],$V3=[1,7],$V4=[1,8],$V5=[5,6],$V6=[1,13],$V7=[1,12],$V8=[2,5,6,14],$V9=[2,40],$Va=[1,15],$Vb=[1,18],$Vc=[1,20],$Vd=[1,21],$Ve=[1,22],$Vf=[1,23],$Vg=[1,25],$Vh=[1,26],$Vi=[1,27],$Vj=[1,28],$Vk=[1,29],$Vl=[1,30],$Vm=[1,31],$Vn=[1,32],$Vo=[1,33],$Vp=[1,34],$Vq=[1,35],$Vr=[1,36],$Vs=[8,12,16,17,20,23,26,27,28,29,30,31,32,33,34,35,36],$Vt=[2,14],$Vu=[1,49],$Vv=[1,53],$Vw=[1,48],$Vx=[1,46],$Vy=[1,47],$Vz=[1,50],$VA=[1,51],$VB=[1,52],$VC=[1,62],$VD=[1,61],$VE=[1,63],$VF=[1,83],$VG=[1,81],$VH=[1,82],$VI=[1,84],$VJ=[1,85],$VK=[1,86],$VL=[1,87],$VM=[1,88],$VN=[1,89],$VO=[1,90],$VP=[1,91],$VQ=[1,92],$VR=[1,93],$VS=[16,19,40,41,42,43,44,45,46,47,48,49,50,51,52],$VT=[2,5,6,14,16,19,40,41,42,43,44,45,46,47,48,49,50,51,52],$VU=[1,136],$VV=[1,134],$VW=[1,135],$VX=[1,137],$VY=[16,19,40,43,44,45,46,47,48,49,50,51,52],$VZ=[19,40,44,45,46,47,48,49,50,51,52],$V_=[19,40,44,49,50,51,52];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"INICIOPURO\":3,\"INICIO\":4,\"EOF\":5,\"tk_barra\":6,\"INICIALES\":7,\"tk_punto\":8,\"DIAGONALES\":9,\"DERIVADOSLIMITADO\":10,\"DERIVACIONDIAGONAL\":11,\"tk_identificador\":12,\"PREDICATE\":13,\"tk_diagonal\":14,\"DERIVADOS\":15,\"tk_asterisco\":16,\"tk_node\":17,\"tk_parA\":18,\"tk_parC\":19,\"tk_arroba\":20,\"ATRIBUTO\":21,\"AXES\":22,\"tk_child\":23,\"tk_dosPuntos\":24,\"NODETEST\":25,\"tk_descendant\":26,\"tk_descendatOr\":27,\"tk_ancestor\":28,\"tk_ancestorOr\":29,\"tk_attribute\":30,\"tk_following\":31,\"tk_followingSi\":32,\"tk_parent\":33,\"tk_preceding\":34,\"tk_precedingSi\":35,\"tk_self\":36,\"tk_text\":37,\"tk_llaveA\":38,\"EXPRESION\":39,\"tk_llaveC\":40,\"tk_mas\":41,\"tk_menos\":42,\"tk_div\":43,\"tk_mod\":44,\"tk_menor\":45,\"tk_mayor\":46,\"tk_menorIgual\":47,\"tk_mayorIgual\":48,\"tk_igual\":49,\"tk_distinto\":50,\"tk_or\":51,\"tk_and\":52,\"tk_entero\":53,\"tk_decimal\":54,\"tk_position\":55,\"tk_last\":56,\"tk_stringTexto\":57,\"tk_ParC\":58,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",6:\"tk_barra\",8:\"tk_punto\",12:\"tk_identificador\",14:\"tk_diagonal\",16:\"tk_asterisco\",17:\"tk_node\",18:\"tk_parA\",19:\"tk_parC\",20:\"tk_arroba\",23:\"tk_child\",24:\"tk_dosPuntos\",26:\"tk_descendant\",27:\"tk_descendatOr\",28:\"tk_ancestor\",29:\"tk_ancestorOr\",30:\"tk_attribute\",31:\"tk_following\",32:\"tk_followingSi\",33:\"tk_parent\",34:\"tk_preceding\",35:\"tk_precedingSi\",36:\"tk_self\",37:\"tk_text\",38:\"tk_llaveA\",40:\"tk_llaveC\",41:\"tk_mas\",42:\"tk_menos\",43:\"tk_div\",44:\"tk_mod\",45:\"tk_menor\",46:\"tk_mayor\",47:\"tk_menorIgual\",48:\"tk_mayorIgual\",49:\"tk_igual\",50:\"tk_distinto\",51:\"tk_or\",52:\"tk_and\",53:\"tk_entero\",54:\"tk_decimal\",55:\"tk_position\",56:\"tk_last\",57:\"tk_stringTexto\",58:\"tk_ParC\"},\nproductions_: [0,[3,2],[4,3],[4,1],[7,4],[7,3],[7,3],[7,4],[7,3],[7,5],[9,1],[9,2],[9,2],[11,3],[11,0],[10,2],[10,2],[10,4],[10,2],[10,1],[15,1],[15,2],[15,1],[22,4],[22,4],[22,4],[22,4],[22,4],[22,4],[22,4],[22,4],[22,4],[22,4],[22,4],[22,4],[25,2],[25,4],[25,2],[25,3],[13,3],[13,0],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,3],[39,1],[39,1],[39,2],[39,1],[39,3],[39,3],[39,1],[39,3],[21,1],[21,1],[21,3]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n\n            produccion.push('<INICIOPURO> ::= <INICIO> EOF');\n            accion.push('INICIOPURO.Val = INICIO.val //fin del documento');\n            return new SalidaGramatica($$[$0-1], produccion, accion,listaErrores);\n        \nbreak;\ncase 2:\n \n            produccion.push('<INICIO> ::= <INICIO> | <INICIALES>');\n            accion.push('INICIO.Val = INICIO.push(INICIALES)');\n            //this.$ = new Array();\n            this.$.push($$[$0]); \n        \nbreak;\ncase 3:\n\n            produccion.push('<INICIO> ::= <INICIALES>');\n            accion.push('INICIO.Val = INICIALES.Val');\n            this.$ = [$$[$0]]; \n        \nbreak;\ncase 4:\n\n            produccion.push(`<INICIALES> ::= punto <DIAGONALES> <DERIVADOSLIMITADO> <DERIVAIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Nodo(\"\", \".\", null, [new Nodo($$[$0-2], $$[$0-1].val, $$[$0-1].pre, [...$$[$0]], _$[$0-3].first_line, _$[$0-3].first_column)], _$[$0-3].first_line, _$[$0-3].first_column);\n        \nbreak;\ncase 5:\n\n            produccion.push(`<INICIALES> ::= identificador <PREDICATE> <DERIVACIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            //this.$ = new Array();\n            this.$ = new Nodo(\"\", $$[$0-2], $$[$0-1], [...$$[$0]], _$[$0-2].first_line, _$[$0-2].first_column)\n            //this.$.push(...$$[$0])\n        \nbreak;\ncase 6:\n\n            produccion.push(`<INICIALES> ::= / <DERIVADOS> <DERIVACIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            //this.$ = new Array();\n            this.$ = new Nodo($$[$0-2], $$[$0-1].val, $$[$0-1].pre, [...$$[$0]], _$[$0-2].first_line, _$[$0-2].first_column)\n            //this.$.push(...$$[$0])\n        \nbreak;\ncase 7:\n\n            produccion.push('<INICIALES> ::= // <DERIVADOS> <DERIVACIONDIAGONAL>');\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            //this.$ = new Array();\n            this.$ = new Nodo(\"//\", $$[$0-1].val, $$[$0-1].pre, [...$$[$0]], _$[$0-3].first_line, _$[$0-3].first_column)\n            //this.$.push(...$$[$0])\n        \nbreak;\ncase 8:\n\n            produccion.push(`<INICIALES> ::= asterisco <PREDICATE> <DERIVACIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            //this.$ = new Array();\n            this.$ = new Nodo(\"\", $$[$0-2], $$[$0-1], [...$$[$0]], _$[$0-2].first_line, _$[$0-2].first_column)\n            //this.$.push(...$$[$0])\n        \nbreak;\ncase 9:\n\n            produccion.push(`<INICIALES> ::= node() <PREDICATE> <DERIVACIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            //this.$ = new Array();\n            this.$ = new Nodo(\"\", \"node()\", $$[$0-1], [...$$[$0-2]], _$[$0-4].first_line, _$[$0-4].first_column)\n            //this.$.push(...$$[$0-2])\n        \nbreak;\ncase 10:\n\n            produccion.push('<DIAGONALES> ::= /');\n            accion.push('DIAGONALES.Val = \\\"/\\\"'); \n            this.$ = $$[$0] \n        \nbreak;\ncase 11:\n\n            produccion.push(`<DIAGONALES> ::= //`);\n            accion.push('DIAGONALES.Val = \\\"//\\\"'); \n            this.$ = \"//\" \n        \nbreak;\ncase 12:\n\n            listaErrores.push(new tError('Sintactico',`Token inesperado: ${yytext}`,_$[$0-1].first_line,_$[$0-1].first_column));\n        \nbreak;\ncase 13:\n\n            produccion.push(`<DERIVACIONDIAGONAL> ::= <DIAGONALES> <DERIVADOS> <DERIVACIONDIAGONAL>`);\n            accion.push('DERIVACIONDIAGONAL.Val = []; DERIVACIONDIAGONAL.Val.push(new Nodo(tipo, id, predicado, fila, columna)); DERIVACIONDIAGONAL.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Array();\n            this.$.push(new Nodo($$[$0-2], $$[$0-1].val, $$[$0-1].pre, [...$$[$0]], _$[$0-2].first_line, _$[$0-2].first_column)) \n            //this.$.push(...$$[$0])\n        \nbreak;\ncase 14:\n\n            produccion.push(`<DERIVACIONDIAGONAL> ::= epsilon`);\n            accion.push('DERIVACIONDIAGONAL.Val = [/*Vacio*/]');\n            this.$ = [];\n        \nbreak;\ncase 15:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= identificador <PREDICATE>`);\n            accion.push('DERIVADOSLIMITADO.Val = identificador + PREDICATE.Val'); \n            this.$ = {val: $$[$0-1], pre: $$[$0]};\n        \nbreak;\ncase 16:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= asterisco <PREDICATE>`);\n            accion.push('DERIVADOSLIMITADO.Val = \\\"*\\\" + PREDICATE.Val'); \n            this.$ = {val: $$[$0-1], pre: $$[$0]};\n        \nbreak;\ncase 17:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= node() <PREDICATE>`);\n            accion.push('DERIVADOSLIMITADO.Val = \\\"@\\\" + ATRIBUTO.Val'); \n            this.$ = {val: \"node()\", pre: $$[$0]}\n        \nbreak;\ncase 18:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= arroba <ATRIBUTO>`);\n            accion.push('DERIVADOSLIMITADO.Val = \\\"@\\\" + ATRIBUTO.Val'); \n            this.$ = {val: $$[$0-1] + \"\" + $$[$0], pre: null}; \n        \nbreak;\ncase 19:\n\n            produccion.push(`<DERIVADOSLIMITADO> ::= <AXES>`);\n            accion.push('DERIVADOSLIMITADO.Val = AXES.Val'); \n            this.$ = {val: $$[$0], pre: null}\n        \nbreak;\ncase 20:\n \n            produccion.push(`<DERIVADOS> ::= punto`);\n            accion.push(\"DERIVADOS.Val = \\\".\\\" \");\n            this.$ = {val: $$[$0], pre: null}; \n        \nbreak;\ncase 21:\n\n            produccion.push(`<DERIVADOS> ::= doblePunto`);\n            accion.push('DERIVADOS.Val = \\\"..\\\"');\n            this.$ = {val: \"..\", pre: null}; \n        \nbreak;\ncase 22:\n \n            produccion.push(`<DERIVADOS> ::= <DERIVADOSLIMITADO>`);\n            accion.push('DERIVADOS.Val = DERIVADOSLIMITADO.Val'); \n            this.$ = $$[$0]; \n        \nbreak;\ncase 39:\n\n            produccion.push(`<PREDICATE> ::= llaveA <EXPRESION> llaveC`);\n            accion.push('PREDICATE.Val = EXPRESION.Val');\n            this.$ = new Predicate($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 40:\n\n            produccion.push(`<PREDICATE> ::= epsilon`);\n            accion.push('PREDICATE.Val = /*vacio*/');\n            this.$ = null; \n        \nbreak;\ncase 41:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> mas <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val + EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '+', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 42:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> menos <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val - EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '-', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 43:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> asterisco <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val * EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '*', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 44:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> div <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val / EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '/', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 45:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> mod <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val % EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '%', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 46:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> menor <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val + \\\"<\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '<', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 47:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> mayor <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val + \\\">\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '>', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 48:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> menorIgual <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val + \\\"<=\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '<=', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 49:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> mayorIgual <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val + \\\">=\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '>=', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 50:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> igual <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val + \\\"=\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '=', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 51:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> distinto <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val + \"\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '!=', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 52:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> or <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val + \\\"or\\\" + EXPRESION.Val');\n            this.$ = new Logica.default($$[$0-2], 'or', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 53:\n\n            produccion.push(`<EXPRESION> ::= <EXPRESION> and <EXPRESION>`);\n            accion.push('EXPRESION.Val = EXPRESION.Val + \\\"and\\\" + EXPRESION.Val');\n            this.$ = new Logica.default($$[$0-2], 'and', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 54:\n\n            produccion.push(`<EXPRESION> ::= entero`);\n            accion.push('EXPRESION.Val = \\\"entero\\\"');\n            this.$ = new Primitivo.default(Number(yytext), _$[$0].first_line, _$[$0].first_column)\n        \nbreak;\ncase 55:\n\n            produccion.push(`<EXPRESION> ::= decimal`);\n            accion.push('EXPRESION.Val = \\\"decimal\\\"');\n            this.$ = new Primitivo.default(Number(yytext), _$[$0].first_line, _$[$0].first_column)\n        \nbreak;\ncase 56:\n\n            produccion.push(`<EXPRESION> ::= arroba <ATRIBUTO>`);\n            accion.push('EXPRESION.Val = \\\"@\\\" + ATRIBUTO.Val');\n            this.$ = new Primitivo.default(`this._${$$[$0]}`, _$[$0-1].first_line, _$[$0-1].first_column)\n        \nbreak;\ncase 57:\n\n            produccion.push(`<EXPRESION> ::= identificador`);\n            accion.push('EXPRESION.Val = \\\"identificador\\\"');\n            this.$ = new Primitivo.default($$[$0], _$[$0].first_line, _$[$0].first_column)\n        \nbreak;\ncase 58:\n\n            produccion.push(`<EXPRESION> ::= position()`);\n            accion.push('EXPRESION.Val = \\\"position()\\\"');\n            this.$ = new Primitivo.default(\"position()\", _$[$0-2].first_line, _$[$0-2].first_column)\n        \nbreak;\ncase 59:\n\n            produccion.push(`<EXPRESION> ::= last()`);\n            accion.push('EXPRESION.Val = \\\"last()\\\"');\n            this.$ = new Primitivo.default(\"last()\", _$[$0-2].first_line, _$[$0-2].first_column)\n        \nbreak;\ncase 60:\n\n            produccion.push(`<EXPRESION> ::= texto`);\n            accion.push('EXPRESION.Val = \\\"texto\\\"');\n            this.$ = new Primitivo.default($$[$0], _$[$0].first_line, _$[$0].first_column)\n        \nbreak;\ncase 61:\n\n            produccion.push(`<EXPRESION> ::= ( <EXPRESION> )`);\n            accion.push('EXPRESION.Val = EXPRESION1.Val');\n            this.$ = new Primitivo.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column)\n        \nbreak;\ncase 62:\n\n            produccion.push(`<ATRIBUTO> ::= asterisco`);\n            accion.push('ATRIBUTO.Val = \\\"*\\\"'); \n            this.$ = $$[$0]; \n        \nbreak;\ncase 63:\n\n            produccion.push(`<ATRIBUTO> ::= identificador`);\n            accion.push('ATRIBUTO.Val = identificador');  \n            this.$ = $$[$0] \nbreak;\ncase 64:\n\n            produccion.push(`<ATRIBUTO> ::= node`);\n            accion.push('ATRIBUTO.Val = \\\"node()\\\"'); \n            this.$ = \"node()\"\n        \nbreak;\n}\n},\ntable: [{3:1,4:2,7:3,8:$V0,12:$V1,14:$V2,16:$V3,17:$V4},{1:[3]},{5:[1,9],6:[1,10]},o($V5,[2,3]),{2:$V6,9:11,14:$V7},o($V8,$V9,{13:14,38:$Va}),{8:$Vb,10:19,12:$Vc,14:[1,17],15:16,16:$Vd,17:$Ve,20:$Vf,22:24,23:$Vg,26:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr},o($V8,$V9,{13:37,38:$Va}),{18:[1,38]},{1:[2,1]},{7:39,8:$V0,12:$V1,14:$V2,16:$V3,17:$V4},{10:40,12:$Vc,16:$Vd,17:$Ve,20:$Vf,22:24,23:$Vg,26:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr},o($Vs,[2,10],{14:[1,41]}),{14:[1,42]},o($V5,$Vt,{11:43,9:44,2:$V6,14:$V7}),{12:$Vu,18:$Vv,20:$Vw,39:45,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},o($V5,$Vt,{9:44,11:54,2:$V6,14:$V7}),{8:$Vb,10:19,12:$Vc,15:55,16:$Vd,17:$Ve,20:$Vf,22:24,23:$Vg,26:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr},o($V8,[2,20],{8:[1,56]}),o($V8,[2,22]),o($V8,$V9,{13:57,38:$Va}),o($V8,$V9,{13:58,38:$Va}),{18:[1,59]},{12:$VC,16:$VD,17:$VE,21:60},o($V8,[2,19]),{24:[1,64]},{24:[1,65]},{24:[1,66]},{24:[1,67]},{24:[1,68]},{24:[1,69]},{24:[1,70]},{24:[1,71]},{24:[1,72]},{24:[1,73]},{24:[1,74]},{24:[1,75]},o($V5,$Vt,{9:44,11:76,2:$V6,14:$V7}),{19:[1,77]},o($V5,[2,2]),o($V5,$Vt,{9:44,11:78,2:$V6,14:$V7}),o($Vs,[2,11]),o($Vs,[2,12]),o($V5,[2,5]),{8:$Vb,10:19,12:$Vc,15:79,16:$Vd,17:$Ve,20:$Vf,22:24,23:$Vg,26:$Vh,27:$Vi,28:$Vj,29:$Vk,30:$Vl,31:$Vm,32:$Vn,33:$Vo,34:$Vp,35:$Vq,36:$Vr},{16:$VF,40:[1,80],41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR},o($VS,[2,54]),o($VS,[2,55]),{12:$VC,16:$VD,17:$VE,21:94},o($VS,[2,57]),{18:[1,95]},{18:[1,96]},o($VS,[2,60]),{12:$Vu,18:$Vv,20:$Vw,39:97,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},o($V5,[2,6]),o($V5,$Vt,{9:44,11:98,2:$V6,14:$V7}),o($V8,[2,21]),o($V8,[2,15]),o($V8,[2,16]),{19:[1,99]},o($V8,[2,18]),o($VT,[2,62]),o($VT,[2,63]),{18:[1,100]},{24:[1,101]},{24:[1,102]},{24:[1,103]},{24:[1,104]},{24:[1,105]},{24:[1,106]},{24:[1,107]},{24:[1,108]},{24:[1,109]},{24:[1,110]},{24:[1,111]},{24:[1,112]},o($V5,[2,8]),o($V8,$V9,{13:113,38:$Va}),o($V5,[2,4]),o($V5,$Vt,{9:44,11:114,2:$V6,14:$V7}),o($V8,[2,39]),{12:$Vu,18:$Vv,20:$Vw,39:115,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{12:$Vu,18:$Vv,20:$Vw,39:116,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{12:$Vu,18:$Vv,20:$Vw,39:117,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{12:$Vu,18:$Vv,20:$Vw,39:118,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{12:$Vu,18:$Vv,20:$Vw,39:119,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{12:$Vu,18:$Vv,20:$Vw,39:120,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{12:$Vu,18:$Vv,20:$Vw,39:121,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{12:$Vu,18:$Vv,20:$Vw,39:122,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{12:$Vu,18:$Vv,20:$Vw,39:123,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{12:$Vu,18:$Vv,20:$Vw,39:124,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{12:$Vu,18:$Vv,20:$Vw,39:125,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{12:$Vu,18:$Vv,20:$Vw,39:126,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},{12:$Vu,18:$Vv,20:$Vw,39:127,53:$Vx,54:$Vy,55:$Vz,56:$VA,57:$VB},o($VS,[2,56]),{19:[1,128]},{19:[1,129]},{16:$VF,19:[1,130],41:$VG,42:$VH,43:$VI,44:$VJ,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR},o($V5,[2,7]),o($V8,$V9,{13:131,38:$Va}),{58:[1,132]},{12:$VU,16:$VV,17:$VW,25:133,37:$VX},{12:$VU,16:$VV,17:$VW,25:138,37:$VX},{12:$VU,16:$VV,17:$VW,25:139,37:$VX},{12:$VU,16:$VV,17:$VW,25:140,37:$VX},{12:$VU,16:$VV,17:$VW,25:141,37:$VX},{12:$VU,16:$VV,17:$VW,25:142,37:$VX},{12:$VU,16:$VV,17:$VW,25:143,37:$VX},{12:$VU,16:$VV,17:$VW,25:144,37:$VX},{12:$VU,16:$VV,17:$VW,25:145,37:$VX},{12:$VU,16:$VV,17:$VW,25:146,37:$VX},{12:$VU,16:$VV,17:$VW,25:147,37:$VX},{12:$VU,16:$VV,17:$VW,25:148,37:$VX},o($V5,$Vt,{9:44,11:149,2:$V6,14:$V7}),o($V5,[2,13]),o($VS,[2,41]),o($VS,[2,42]),o($VY,[2,43],{41:$VG,42:$VH}),o($VY,[2,44],{41:$VG,42:$VH}),o([19,40,44],[2,45],{16:$VF,41:$VG,42:$VH,43:$VI,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,51:$VQ,52:$VR}),o($VZ,[2,46],{16:$VF,41:$VG,42:$VH,43:$VI}),o($VZ,[2,47],{16:$VF,41:$VG,42:$VH,43:$VI}),o($VZ,[2,48],{16:$VF,41:$VG,42:$VH,43:$VI}),o($VZ,[2,49],{16:$VF,41:$VG,42:$VH,43:$VI}),o($V_,[2,50],{16:$VF,41:$VG,42:$VH,43:$VI,45:$VK,46:$VL,47:$VM,48:$VN}),o($V_,[2,51],{16:$VF,41:$VG,42:$VH,43:$VI,45:$VK,46:$VL,47:$VM,48:$VN}),o([19,40,44,51],[2,52],{16:$VF,41:$VG,42:$VH,43:$VI,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP,52:$VR}),o([19,40,44,51,52],[2,53],{16:$VF,41:$VG,42:$VH,43:$VI,45:$VK,46:$VL,47:$VM,48:$VN,49:$VO,50:$VP}),o($VS,[2,58]),o($VS,[2,59]),o($VS,[2,61]),o($V8,[2,17]),o($VT,[2,64]),o($V8,[2,23]),o($V8,$V9,{13:150,38:$Va}),{18:[1,151]},o($V8,$V9,{13:152,38:$Va}),{18:[1,153]},o($V8,[2,24]),o($V8,[2,25]),o($V8,[2,26]),o($V8,[2,27]),o($V8,[2,28]),o($V8,[2,29]),o($V8,[2,30]),o($V8,[2,31]),o($V8,[2,32]),o($V8,[2,33]),o($V8,[2,34]),o($V5,[2,9]),o($V8,[2,35]),{19:[1,154]},o($V8,[2,37]),{19:[1,155]},o($V8,$V9,{13:156,38:$Va}),o($V8,[2,38]),o($V8,[2,36])],\ndefaultActions: {9:[2,1]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse (input) {\n    var self = this,\n        stack = [0],\n        tstack = [], // token stack\n        vstack = [null], // semantic value stack\n        lstack = [], // location stack\n        table = this.table,\n        yytext = '',\n        yylineno = 0,\n        yyleng = 0,\n        recovering = 0,\n        TERROR = 2,\n        EOF = 1;\n\n    var args = lstack.slice.call(arguments, 1);\n\n    //this.reductionCount = this.shiftCount = 0;\n\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    // copy state\n    for (var k in this.yy) {\n      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n        sharedState.yy[k] = this.yy[k];\n      }\n    }\n\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n\n    var ranges = lexer.options && lexer.options.ranges;\n\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n\n    function popStack (n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n\n_token_stack:\n    var lex = function () {\n        var token;\n        token = lexer.lex() || EOF;\n        // if token isn't its numeric value, convert\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        // retreive state number from top of stack\n        state = stack[stack.length - 1];\n\n        // use default actions if available\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            // read action for current state and first input\n            action = table[state] && table[state][symbol];\n        }\n\n_handle_error:\n        // handle parse error\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n            var error_rule_depth;\n            var errStr = '';\n\n            // Return the rule stack depth where the nearest error rule can be found.\n            // Return FALSE when no error recovery rule was found.\n            function locateNearestErrorRecoveryRule(state) {\n                var stack_probe = stack.length - 1;\n                var depth = 0;\n\n                // try to recover from error\n                for(;;) {\n                    // check for error recovery rule in this state\n                    if ((TERROR.toString()) in table[state]) {\n                        return depth;\n                    }\n                    if (state === 0 || stack_probe < 2) {\n                        return false; // No suitable error recovery rule available.\n                    }\n                    stack_probe -= 2; // popStack(1): [symbol, action]\n                    state = stack[stack_probe];\n                    ++depth;\n                }\n            }\n\n            if (!recovering) {\n                // first see if there's any chance at hitting an error recovery rule:\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n\n                // Report error\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push(\"'\"+this.terminals_[p]+\"'\");\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line '+(yylineno+1)+\":\\n\"+lexer.showPosition()+\"\\nExpecting \"+expected.join(', ') + \", got '\" + (this.terminals_[symbol] || symbol)+ \"'\";\n                } else {\n                    errStr = 'Parse error on line '+(yylineno+1)+\": Unexpected \" +\n                                  (symbol == EOF ? \"end of input\" :\n                                              (\"'\"+(this.terminals_[symbol] || symbol)+\"'\"));\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected,\n                    recoverable: (error_rule_depth !== false)\n                });\n            } else if (preErrorSymbol !== EOF) {\n                error_rule_depth = locateNearestErrorRecoveryRule(state);\n            }\n\n            // just recovered from another error\n            if (recovering == 3) {\n                if (symbol === EOF || preErrorSymbol === EOF) {\n                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');\n                }\n\n                // discard current lookahead and grab another\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                symbol = lex();\n            }\n\n            // try to recover from error\n            if (error_rule_depth === false) {\n                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');\n            }\n            popStack(error_rule_depth);\n\n            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token\n            symbol = TERROR;         // insert generic error symbol as new lookahead\n            state = stack[stack.length-1];\n            action = table[state] && table[state][TERROR];\n            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error\n        }\n\n        // this shouldn't happen, unless resolve defaults are off\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);\n        }\n\n        switch (action[0]) {\n            case 1: // shift\n                //this.shiftCount++;\n\n                stack.push(symbol);\n                vstack.push(lexer.yytext);\n                lstack.push(lexer.yylloc);\n                stack.push(action[1]); // push state\n                symbol = null;\n                if (!preErrorSymbol) { // normal execution/no error\n                    yyleng = lexer.yyleng;\n                    yytext = lexer.yytext;\n                    yylineno = lexer.yylineno;\n                    yyloc = lexer.yylloc;\n                    if (recovering > 0) {\n                        recovering--;\n                    }\n                } else {\n                    // error just occurred, resume old lookahead f/ before error\n                    symbol = preErrorSymbol;\n                    preErrorSymbol = null;\n                }\n                break;\n\n            case 2:\n                // reduce\n                //this.reductionCount++;\n\n                len = this.productions_[action[1]][1];\n\n                // perform semantic action\n                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1\n                // default location, uses first token for firsts, last for lasts\n                yyval._$ = {\n                    first_line: lstack[lstack.length-(len||1)].first_line,\n                    last_line: lstack[lstack.length-1].last_line,\n                    first_column: lstack[lstack.length-(len||1)].first_column,\n                    last_column: lstack[lstack.length-1].last_column\n                };\n                if (ranges) {\n                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];\n                }\n                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n                if (typeof r !== 'undefined') {\n                    return r;\n                }\n\n                // pop off stack\n                if (len) {\n                    stack = stack.slice(0,-1*len*2);\n                    vstack = vstack.slice(0, -1*len);\n                    lstack = lstack.slice(0, -1*len);\n                }\n\n                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)\n                vstack.push(yyval.$);\n                lstack.push(yyval._$);\n                // goto new state = table[STATE][NONTERMINAL]\n                newState = table[stack[stack.length-2]][stack[stack.length-1]];\n                stack.push(newState);\n                break;\n\n            case 3:\n                // accept\n                return true;\n        }\n\n    }\n\n    return true;\n}};\n\n    const { SalidaGramatica } = require(\"./AST/SalidaGramatica\");\n    const { Nodo } = require('./Expresiones/Nodo');\n    const Primitivo = require('./Expresiones/Primitivo');\n    const Aritmetica = require('./Operaciones/Aritmeticas')\n    const Relacional = require('./Operaciones/Relacional');\n    const Logica = require('./Operaciones/Logica'); \n    const { Predicate } = require('./Expresiones/Predicate');\n    //const { Atributo } = require('./Expresiones/Atributo');\n    const { tError } = require('./Expresiones/tError');\n\n    var listaErrores = [];\n    var produccion = [];\n    var accion = [];\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:return \"tk_decimal\";\nbreak;\ncase 1:return \"tk_entero\";\nbreak;\ncase 2:return \"tk_node\";\nbreak;\ncase 3:return \"tk_child\";\nbreak;\ncase 4:return \"tk_descendant\";\nbreak;\ncase 5:return \"tk_descendatOr\"\nbreak;\ncase 6:return \"tk_ancestor\";\nbreak;\ncase 7:return \"tk_ancestorOr\";\nbreak;\ncase 8:return \"tk_attribute\";\nbreak;\ncase 9:return \"tk_following\";\nbreak;\ncase 10:return \"tk_followingSi\"\nbreak;\ncase 11:return \"tk_parent\"\nbreak;\ncase 12:return \"tk_preceding\"\nbreak;\ncase 13:return \"tk_precedingSi\"\nbreak;\ncase 14:return \"tk_self\"\nbreak;\ncase 15:return \"tk_text\"\nbreak;\ncase 16:return \"tk_position\"\nbreak;\ncase 17:return \"tk_last\"\nbreak;\ncase 18:return \"tk_div\"\nbreak;\ncase 19:return \"tk_and\"\nbreak;\ncase 20:return \"tk_or\"\nbreak;\ncase 21:return \"tk_mod\"\nbreak;\ncase 22:return \"tk_barra\"\nbreak;\ncase 23:return \"tk_punto\"\nbreak;\ncase 24:return \"tk_diagonal\"\nbreak;\ncase 25:return \"tk_asterisco\"\nbreak;\ncase 26:return \"tk_dosPuntos\"\nbreak;\ncase 27:return \"tk_mas\"\nbreak;\ncase 28:return \"tk_menos\"\nbreak;\ncase 29:return \"tk_menorIgual\"\nbreak;\ncase 30:return \"tk_mayorIgual\"\nbreak;\ncase 31:return \"tk_menor\"\nbreak;\ncase 32:return \"tk_mayor\"\nbreak;\ncase 33:return \"tk_distinto\"\nbreak;\ncase 34:return \"tk_igual\"\nbreak;\ncase 35:return \"tk_llaveA\"\nbreak;\ncase 36:return \"tk_llaveC\"\nbreak;\ncase 37:return \"tk_arroba\"\nbreak;\ncase 38:return \"tk_parA\"\nbreak;\ncase 39:return \"tk_parC\"\nbreak;\ncase 40:return \"tk_stringTexto\";\nbreak;\ncase 41:return \"tk_stringTexto\";\nbreak;\ncase 42:return \"tk_stringTexto\";\nbreak;\ncase 43:return \"tk_stringTexto\";\nbreak;\ncase 44:return \"tk_identificador\";\nbreak;\ncase 45:return \"EOF\";\nbreak;\ncase 46:\nbreak;\ncase 47:         \n    listaErrores.push(new tError('Léxico',`Simbolo inesperado: ${yy_.yytext}`,yy_.yylloc.first_line,yy_.yylloc.first_column ));\n\nbreak;\n}\n},\nrules: [/^(?:[0-9]+(\\.[0-9]+)\\b)/,/^(?:[0-9]+\\b)/,/^(?:node\\b)/,/^(?:child\\b)/,/^(?:descendant\\b)/,/^(?:descendant-or-self\\b)/,/^(?:ancestor\\b)/,/^(?:ancestor-or-self\\b)/,/^(?:attribute\\b)/,/^(?:following\\b)/,/^(?:following-sibling\\b)/,/^(?:parent\\b)/,/^(?:preceding\\b)/,/^(?:preceding-sibling\\b)/,/^(?:self\\b)/,/^(?:text\\b)/,/^(?:position\\b)/,/^(?:last\\b)/,/^(?:div\\b)/,/^(?:and\\b)/,/^(?:or\\b)/,/^(?:mod\\b)/,/^(?:\\|)/,/^(?:\\.)/,/^(?:\\/)/,/^(?:\\*)/,/^(?::)/,/^(?:\\+)/,/^(?:-)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:=)/,/^(?:\\[)/,/^(?:\\])/,/^(?:@)/,/^(?:\\()/,/^(?:\\))/,/^(?:\"[^\\\"]*\")/,/^(?:“[^\\“]*“)/,/^(?:'[^\\']*')/,/^(?:‘[^\\‘]*‘)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:[ \\t\\r\\n\\f])/,/^(?:.)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = xpathAsc;\nexports.Parser = xpathAsc.Parser;\nexports.parse = function () { return xpathAsc.parse.apply(xpathAsc, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}","/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar xpathDesc = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,6],$V3=[1,7],$V4=[1,8],$V5=[2,4],$V6=[1,11],$V7=[1,13],$V8=[5,8,15],$V9=[2,40],$Va=[1,15],$Vb=[1,18],$Vc=[1,20],$Vd=[1,21],$Ve=[1,22],$Vf=[1,23],$Vg=[1,25],$Vh=[1,26],$Vi=[1,27],$Vj=[1,28],$Vk=[1,29],$Vl=[1,30],$Vm=[1,31],$Vn=[1,32],$Vo=[1,33],$Vp=[1,34],$Vq=[1,35],$Vr=[1,36],$Vs=[9,13,17,18,21,24,27,28,29,30,31,32,33,34,35,36,37],$Vt=[5,8],$Vu=[2,14],$Vv=[2,51],$Vw=[1,50],$Vx=[1,54],$Vy=[1,49],$Vz=[1,47],$VA=[1,48],$VB=[1,51],$VC=[1,52],$VD=[1,53],$VE=[1,63],$VF=[1,62],$VG=[1,64],$VH=[1,85],$VI=[1,83],$VJ=[1,84],$VK=[1,86],$VL=[1,87],$VM=[1,88],$VN=[1,89],$VO=[1,90],$VP=[1,91],$VQ=[1,92],$VR=[1,93],$VS=[1,94],$VT=[1,95],$VU=[17,20,41,49,50,51,52,53,54,55,56,57,58,59,60],$VV=[5,8,15,17,20,41,49,50,51,52,53,54,55,56,57,58,59,60],$VW=[1,138],$VX=[1,136],$VY=[1,137],$VZ=[1,139],$V_=[17,20,41,51,52,53,54,55,56,57,58,59,60],$V$=[20,41,52,53,54,55,56,57,58,59,60],$V01=[20,41,52,57,58,59,60];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"INICIOPURO\":3,\"INICIO\":4,\"EOF\":5,\"INICIALES\":6,\"INICIOP\":7,\"tk_barra\":8,\"tk_punto\":9,\"DIAGONALES\":10,\"DERIVADOSLIMITADO\":11,\"DERIVACIONDIAGONAL\":12,\"tk_identificador\":13,\"PREDICATE\":14,\"tk_diagonal\":15,\"DERIVADOS\":16,\"tk_asterisco\":17,\"tk_node\":18,\"tk_parA\":19,\"tk_parC\":20,\"tk_arroba\":21,\"ATRIBUTO\":22,\"AXES\":23,\"tk_child\":24,\"tk_dosPuntos\":25,\"NODETEST\":26,\"tk_descendant\":27,\"tk_descendatOr\":28,\"tk_ancestor\":29,\"tk_ancestorOr\":30,\"tk_attribute\":31,\"tk_following\":32,\"tk_followingSi\":33,\"tk_parent\":34,\"tk_preceding\":35,\"tk_precedingSi\":36,\"tk_self\":37,\"tk_text\":38,\"tk_llaveA\":39,\"EXPRESION\":40,\"tk_llaveC\":41,\"OPERAR\":42,\"PRIMITIVO\":43,\"tk_entero\":44,\"tk_decimal\":45,\"tk_position\":46,\"tk_last\":47,\"tk_stringTexto\":48,\"tk_mas\":49,\"tk_menos\":50,\"tk_div\":51,\"tk_mod\":52,\"tk_menor\":53,\"tk_mayor\":54,\"tk_menorIgual\":55,\"tk_mayorIgual\":56,\"tk_igual\":57,\"tk_distinto\":58,\"tk_or\":59,\"tk_and\":60,\"tk_ParC\":61,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",8:\"tk_barra\",9:\"tk_punto\",13:\"tk_identificador\",15:\"tk_diagonal\",17:\"tk_asterisco\",18:\"tk_node\",19:\"tk_parA\",20:\"tk_parC\",21:\"tk_arroba\",24:\"tk_child\",25:\"tk_dosPuntos\",27:\"tk_descendant\",28:\"tk_descendatOr\",29:\"tk_ancestor\",30:\"tk_ancestorOr\",31:\"tk_attribute\",32:\"tk_following\",33:\"tk_followingSi\",34:\"tk_parent\",35:\"tk_preceding\",36:\"tk_precedingSi\",37:\"tk_self\",38:\"tk_text\",39:\"tk_llaveA\",41:\"tk_llaveC\",44:\"tk_entero\",45:\"tk_decimal\",46:\"tk_position\",47:\"tk_last\",48:\"tk_stringTexto\",49:\"tk_mas\",50:\"tk_menos\",51:\"tk_div\",52:\"tk_mod\",53:\"tk_menor\",54:\"tk_mayor\",55:\"tk_menorIgual\",56:\"tk_mayorIgual\",57:\"tk_igual\",58:\"tk_distinto\",59:\"tk_or\",60:\"tk_and\",61:\"tk_ParC\"},\nproductions_: [0,[3,2],[4,2],[7,3],[7,0],[6,4],[6,3],[6,3],[6,4],[6,3],[6,5],[10,1],[10,2],[12,3],[12,0],[11,2],[11,2],[11,4],[11,2],[11,1],[16,1],[16,2],[16,1],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[23,4],[26,2],[26,4],[26,2],[26,3],[14,3],[14,0],[40,1],[40,1],[43,1],[43,1],[43,2],[43,1],[43,3],[43,3],[43,1],[43,3],[43,0],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[22,1],[22,1],[22,3]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n\n            produccion.push('<INICIOPURO> ::= <INICIO> EOF');\n            accion.push('INICIOPURO.Val = INICIO.val //fin del documento');\n            return new SalidaGramatica($$[$0-1], produccion, accion,listaErrores);\n        \nbreak;\ncase 2:\n\n            produccion.push('<INICIO> ::= <INICIALES>');\n            accion.push('INICIO.Val = INICIALES.Val');\n            this.$ = [$$[$0-1]];\n            this.$.push(...$$[$0])\n        \nbreak;\ncase 3:\n\n            produccion.push('<INICIOP> ::= | <INICIALES> <INICIOP>');\n            accion.push('INICIOP.val.push(INICIALES)');\n            this.$ = [$$[$0-1]]\n            this.$.push(...$$[$0]); \n        \nbreak;\ncase 4:\n\n            produccion.push('<INICIOP> ::= epsilon');\n            accion.push('INICIOP.val = []');\n            this.$ = []; \n        \nbreak;\ncase 5:\n\n            produccion.push(`<INICIALES> ::= punto <DIAGONALES> <DERIVADOSLIMITADO> <DERIVAIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Nodo(\"\", \".\", null, [new Nodo($$[$0-2], $$[$0-1].val, $$[$0-1].pre, [...$$[$0]],_$[$0-3].first_line, _$[$0-3].first_column)], _$[$0-3].first_line, _$[$0-3].first_column)\n        \nbreak;\ncase 6:\n\n            produccion.push(`<INICIALES> ::= identificador <PREDICATE> <DERIVACIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Nodo(\"\", $$[$0-2], $$[$0-1], [...$$[$0]], _$[$0-2].first_line, _$[$0-2].first_column)\n        \nbreak;\ncase 7:\n\n            produccion.push(`<INICIALES> ::= / <DERIVADOS> <DERIVACIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Nodo($$[$0-2], $$[$0-1].val, $$[$0-1].pre, [...$$[$0]], _$[$0-2].first_line, _$[$0-2].first_column)\n        \nbreak;\ncase 8:\n\n            produccion.push('<INICIALES> ::= // <DERIVADOS> <DERIVACIONDIAGONAL>');\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Nodo(\"//\", $$[$0-1].val, $$[$0-1].pre, [...$$[$0]], _$[$0-3].first_line, _$[$0-3].first_column)\n        \nbreak;\ncase 9:\n\n            produccion.push(`<INICIALES> ::= asterisco <PREDICATE> <DERIVACIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Nodo(\"\", $$[$0-2], $$[$0-1], [...$$[$0]], _$[$0-2].first_line, _$[$0-2].first_column)\n        \nbreak;\ncase 10:\n\n            produccion.push(`<INICIALES> ::= node() <PREDICATE> <DERIVACIONDIAGONAL>`);\n            accion.push('INICIALES.Val = []; INICIALES.Val.push(new Nodo(tipo, id, predicado, fila, columna)); INICIALES.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Nodo(\"\", \"node()\", $$[$0-1], [...$$[$0-2]], _$[$0-4].first_line, _$[$0-4].first_column)\n        \nbreak;\ncase 11:\n\n            produccion.push('<DIAGONALES> ::= /');\n            accion.push('DIAGONALES.Val = \\\"/\\\"'); \n            this.$ = $$[$0] \n        \nbreak;\ncase 12:\n\n            produccion.push(`<DIAGONALES> ::= //`);\n            accion.push('DIAGONALES.Val = \\\"//\\\"'); \n            this.$ = \"//\" \n        \nbreak;\ncase 13:\n\n            produccion.push(`<DERIVACIONDIAGONAL> ::= <DIAGONALES> <DERIVADOS> <DERIVACIONDIAGONAL>`);\n            accion.push('DERIVACIONDIAGONAL.Val = []; DERIVACIONDIAGONAL.Val.push(new Nodo(tipo, id, predicado, fila, columna)); DERIVACIONDIAGONAL.push(DERIVACIONDIAGONAL)'); \n            this.$ = new Array();\n            this.$.push(new Nodo($$[$0-2], $$[$0-1].val, $$[$0-1].pre, [...$$[$0]], _$[$0-2].first_line, _$[$0-2].first_column)) \n        \nbreak;\ncase 14:\n\n            produccion.push(`<DERIVACIONDIAGONAL> ::= epsilon`);\n            accion.push('DERIVACIONDIAGONAL.Val = [/*Vacio*/]');\n            this.$ = [];\n        \nbreak;\ncase 15:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= identificador <PREDICATE>`);\n            accion.push('DERIVADOSLIMITADO.Val = identificador + PREDICATE.Val'); \n            this.$ = {val: $$[$0-1], pre: $$[$0]};\n        \nbreak;\ncase 16:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= asterisco <PREDICATE>`);\n            accion.push('DERIVADOSLIMITADO.Val = \\\"*\\\" + PREDICATE.Val'); \n            this.$ = {val: $$[$0-1], pre: $$[$0]};\n        \nbreak;\ncase 17:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= node() <PREDICATE>`);\n            accion.push('DERIVADOSLIMITADO.Val = \\\"@\\\" + ATRIBUTO.Val'); \n            this.$ = {val: \"node()\", pre: $$[$0]}\n        \nbreak;\ncase 18:\n\n            produccion.push(`<DERIVADOSLIMIADO> ::= arroba <ATRIBUTO>`);\n            accion.push('DERIVADOSLIMITADO.Val = \\\"@\\\" + ATRIBUTO.Val'); \n            this.$ = {val: $$[$0-1] + \"\" + $$[$0], pre: null}; \n        \nbreak;\ncase 19:\n\n            produccion.push(`<DERIVADOSLIMITADO> ::= <AXES>`);\n            accion.push('DERIVADOSLIMITADO.Val = AXES.Val'); \n            this.$ = {val: $$[$0], pre: null}\n        \nbreak;\ncase 20:\n \n            produccion.push(`<DERIVADOS> ::= punto`);\n            accion.push(\"DERIVADOS.Val = \\\".\\\" \");\n            this.$ = {val: $$[$0], pre: null}; \n        \nbreak;\ncase 21:\n\n            produccion.push(`<DERIVADOS> ::= doblePunto`);\n            accion.push('DERIVADOS.Val = \\\"..\\\"');\n            this.$ = {val: \"..\", pre: null}; \n        \nbreak;\ncase 22:\n \n            produccion.push(`<DERIVADOS> ::= <DERIVADOSLIMITADO>`);\n            accion.push('DERIVADOS.Val = DERIVADOSLIMITADO.Val'); \n            this.$ = $$[$0]; \n        \nbreak;\ncase 39:\n\n            produccion.push(`<PREDICATE> ::= llaveA <EXPRESION> llaveC`);\n            accion.push('PREDICATE.Val = EXPRESION.Val');\n            this.$ = new Predicate($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 40:\n\n            produccion.push(`<PREDICATE> ::= epsilon`);\n            accion.push('PREDICATE.Val = /*vacio*/');\n            this.$ = null; \n        \nbreak;\ncase 41:\n \n            produccion.push(\"<OPERAR> ::= <EXPRESION>\")\n            accion.push(\"OPERAR.Val = EXPRESION.Val\")\n            this.$ = $$[$0];\n        \nbreak;\ncase 42:\n \n            produccion.push(\"<OPERAR> ::= <PRIMITIVO>\")\n            accion.push(\"OPERAR.Val = PRIMITIVO.Val\")\n            this.$ = $$[$0]\n        \nbreak;\ncase 43:\n\n            produccion.push(`<PRIMITIVO> ::= entero`);\n            accion.push('PRIMITIVO.Val = \\\"entero\\\"');\n            this.$ = new Primitivo.default(Number(yytext), _$[$0].first_line, _$[$0].first_column)\n        \nbreak;\ncase 44:\n\n            produccion.push(`<PRIMITIVO> ::= decimal`);\n            accion.push('PRIMITIVO.Val = \\\"decimal\\\"');\n            this.$ = new Primitivo.default(Number(yytext), _$[$0].first_line, _$[$0].first_column)\n        \nbreak;\ncase 45:\n\n            produccion.push(`<PRIMITIVO> ::= arroba <ATRIBUTO>`);\n            accion.push('PRIMITIVO.Val = \\\"@\\\" + ATRIBUTO.Val');\n            this.$ = new Primitivo.default(`this._${$$[$0]}`, _$[$0-1].first_line, _$[$0-1].first_column)\n        \nbreak;\ncase 46:\n\n            produccion.push(`<PRIMITIVO> ::= identificador`);\n            accion.push('PPRIMITIVO.Val = \\\"identificador\\\"');\n            this.$ = new Primitivo.default($$[$0], _$[$0].first_line, _$[$0].first_column)\n        \nbreak;\ncase 47:\n\n            produccion.push(`<PRIMITIVO> ::= position()`);\n            accion.push('PRIMITIVO.Val = \\\"position()\\\"');\n            this.$ = new Primitivo.default(\"position()\", _$[$0-2].first_line, _$[$0-2].first_column)\n        \nbreak;\ncase 48:\n\n            produccion.push(`<EXPRESION> ::= last()`);\n            accion.push('EXPRESION.Val = \\\"last()\\\"');\n            this.$ = new Primitivo.default(\"last()\", _$[$0-2].first_line, _$[$0-2].first_column)\n        \nbreak;\ncase 49:\n\n            produccion.push(`<PRIMITIVO> ::= texto`);\n            accion.push('PRIMITIVO.Val = \\\"texto\\\"');\n            this.$ = new Primitivo.default($$[$0], _$[$0].first_line, _$[$0].first_column)\n        \nbreak;\ncase 50:\n\n            produccion.push(`<EXPRESION> ::= ( <EXPRESION> )`);\n            accion.push('EXPRESION.Val = EXPRESION1.Val');\n            this.$ = new Primitivo.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column)\n        \nbreak;\ncase 52:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> mas <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val + EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '+', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 53:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> menos <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val - EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '-', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 54:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> asterisco <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val * EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '*', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 55:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> div <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val / EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '/', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 56:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> mod <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val % EXPRESION.Val');\n            this.$ = new Aritmetica.default($$[$0-2], '%', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 57:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> menor <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val + \\\"<\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '<', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 58:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> mayor <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val + \\\">\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '>', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 59:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> menorIgual <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val + \\\"<=\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '<=', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 60:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> mayorIgual <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val + \\\">=\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '>=', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 61:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> igual <EXPRESION>`);\n            accion.push('OPERA.Val = EXPRESION.Val + \\\"=\\\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '=', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 62:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> distinto <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val + \"\" + EXPRESION.Val');\n            this.$ = new Relacional.default($$[$0-2], '!=', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 63:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> or <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val + \\\"or\\\" + EXPRESION.Val');\n            this.$ = new Logica.default($$[$0-2], 'or', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 64:\n\n            produccion.push(`<OPERAR> ::= <EXPRESION> and <EXPRESION>`);\n            accion.push('OPERAR.Val = EXPRESION.Val + \\\"and\\\" + EXPRESION.Val');\n            this.$ = new Logica.default($$[$0-2], 'and', $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);\n        \nbreak;\ncase 65:\n\n            produccion.push(`<ATRIBUTO> ::= asterisco`);\n            accion.push('ATRIBUTO.Val = \\\"*\\\"'); \n            this.$ = $$[$0]; \n        \nbreak;\ncase 66:\n\n            produccion.push(`<ATRIBUTO> ::= identificador`);\n            accion.push('ATRIBUTO.Val = identificador');  \n            this.$ = $$[$0] \nbreak;\ncase 67:\n\n            produccion.push(`<ATRIBUTO> ::= node`);\n            accion.push('ATRIBUTO.Val = \\\"node()\\\"'); \n            this.$ = \"node()\"\n        \nbreak;\n}\n},\ntable: [{3:1,4:2,6:3,9:$V0,13:$V1,15:$V2,17:$V3,18:$V4},{1:[3]},{5:[1,9]},{5:$V5,7:10,8:$V6},{10:12,15:$V7},o($V8,$V9,{14:14,39:$Va}),{9:$Vb,11:19,13:$Vc,15:[1,17],16:16,17:$Vd,18:$Ve,21:$Vf,23:24,24:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr},o($V8,$V9,{14:37,39:$Va}),{19:[1,38]},{1:[2,1]},{5:[2,2]},{6:39,9:$V0,13:$V1,15:$V2,17:$V3,18:$V4},{11:40,13:$Vc,17:$Vd,18:$Ve,21:$Vf,23:24,24:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr},o($Vs,[2,11],{15:[1,41]}),o($Vt,$Vu,{12:42,10:43,15:$V7}),o([17,41,49,50,51,52,53,54,55,56,57,58,59,60],$Vv,{40:44,42:45,43:46,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($Vt,$Vu,{10:43,12:55,15:$V7}),{9:$Vb,11:19,13:$Vc,16:56,17:$Vd,18:$Ve,21:$Vf,23:24,24:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr},o($V8,[2,20],{9:[1,57]}),o($V8,[2,22]),o($V8,$V9,{14:58,39:$Va}),o($V8,$V9,{14:59,39:$Va}),{19:[1,60]},{13:$VE,17:$VF,18:$VG,22:61},o($V8,[2,19]),{25:[1,65]},{25:[1,66]},{25:[1,67]},{25:[1,68]},{25:[1,69]},{25:[1,70]},{25:[1,71]},{25:[1,72]},{25:[1,73]},{25:[1,74]},{25:[1,75]},{25:[1,76]},o($Vt,$Vu,{10:43,12:77,15:$V7}),{20:[1,78]},{5:$V5,7:79,8:$V6},o($Vt,$Vu,{10:43,12:80,15:$V7}),o($Vs,[2,12]),o($Vt,[2,6]),{9:$Vb,11:19,13:$Vc,16:81,17:$Vd,18:$Ve,21:$Vf,23:24,24:$Vg,27:$Vh,28:$Vi,29:$Vj,30:$Vk,31:$Vl,32:$Vm,33:$Vn,34:$Vo,35:$Vp,36:$Vq,37:$Vr},{17:$VH,41:[1,82],49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT},o($VU,[2,41]),o($VU,[2,42]),o($VU,[2,43]),o($VU,[2,44]),{13:$VE,17:$VF,18:$VG,22:96},o($VU,[2,46]),{19:[1,97]},{19:[1,98]},o($VU,[2,49]),o([17,20,49,50,51,52,53,54,55,56,57,58,59,60],$Vv,{42:45,43:46,40:99,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($Vt,[2,7]),o($Vt,$Vu,{10:43,12:100,15:$V7}),o($V8,[2,21]),o($V8,[2,15]),o($V8,[2,16]),{20:[1,101]},o($V8,[2,18]),o($VV,[2,65]),o($VV,[2,66]),{19:[1,102]},{25:[1,103]},{25:[1,104]},{25:[1,105]},{25:[1,106]},{25:[1,107]},{25:[1,108]},{25:[1,109]},{25:[1,110]},{25:[1,111]},{25:[1,112]},{25:[1,113]},{25:[1,114]},o($Vt,[2,9]),o($V8,$V9,{14:115,39:$Va}),{5:[2,3]},o($Vt,[2,5]),o($Vt,$Vu,{10:43,12:116,15:$V7}),o($V8,[2,39]),o($VU,$Vv,{42:45,43:46,40:117,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:118,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:119,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:120,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:121,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:122,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:123,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:124,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:125,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:126,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:127,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:128,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,$Vv,{42:45,43:46,40:129,13:$Vw,19:$Vx,21:$Vy,44:$Vz,45:$VA,46:$VB,47:$VC,48:$VD}),o($VU,[2,45]),{20:[1,130]},{20:[1,131]},{17:$VH,20:[1,132],49:$VI,50:$VJ,51:$VK,52:$VL,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT},o($Vt,[2,8]),o($V8,$V9,{14:133,39:$Va}),{61:[1,134]},{13:$VW,17:$VX,18:$VY,26:135,38:$VZ},{13:$VW,17:$VX,18:$VY,26:140,38:$VZ},{13:$VW,17:$VX,18:$VY,26:141,38:$VZ},{13:$VW,17:$VX,18:$VY,26:142,38:$VZ},{13:$VW,17:$VX,18:$VY,26:143,38:$VZ},{13:$VW,17:$VX,18:$VY,26:144,38:$VZ},{13:$VW,17:$VX,18:$VY,26:145,38:$VZ},{13:$VW,17:$VX,18:$VY,26:146,38:$VZ},{13:$VW,17:$VX,18:$VY,26:147,38:$VZ},{13:$VW,17:$VX,18:$VY,26:148,38:$VZ},{13:$VW,17:$VX,18:$VY,26:149,38:$VZ},{13:$VW,17:$VX,18:$VY,26:150,38:$VZ},o($Vt,$Vu,{10:43,12:151,15:$V7}),o($Vt,[2,13]),o($VU,[2,52]),o($VU,[2,53]),o($V_,[2,54],{49:$VI,50:$VJ}),o($V_,[2,55],{49:$VI,50:$VJ}),o([20,41,52],[2,56],{17:$VH,49:$VI,50:$VJ,51:$VK,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,59:$VS,60:$VT}),o($V$,[2,57],{17:$VH,49:$VI,50:$VJ,51:$VK}),o($V$,[2,58],{17:$VH,49:$VI,50:$VJ,51:$VK}),o($V$,[2,59],{17:$VH,49:$VI,50:$VJ,51:$VK}),o($V$,[2,60],{17:$VH,49:$VI,50:$VJ,51:$VK}),o($V01,[2,61],{17:$VH,49:$VI,50:$VJ,51:$VK,53:$VM,54:$VN,55:$VO,56:$VP}),o($V01,[2,62],{17:$VH,49:$VI,50:$VJ,51:$VK,53:$VM,54:$VN,55:$VO,56:$VP}),o([20,41,52,59],[2,63],{17:$VH,49:$VI,50:$VJ,51:$VK,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR,60:$VT}),o([20,41,52,59,60],[2,64],{17:$VH,49:$VI,50:$VJ,51:$VK,53:$VM,54:$VN,55:$VO,56:$VP,57:$VQ,58:$VR}),o($VU,[2,47]),o($VU,[2,48]),o($VU,[2,50]),o($V8,[2,17]),o($VV,[2,67]),o($V8,[2,23]),o($V8,$V9,{14:152,39:$Va}),{19:[1,153]},o($V8,$V9,{14:154,39:$Va}),{19:[1,155]},o($V8,[2,24]),o($V8,[2,25]),o($V8,[2,26]),o($V8,[2,27]),o($V8,[2,28]),o($V8,[2,29]),o($V8,[2,30]),o($V8,[2,31]),o($V8,[2,32]),o($V8,[2,33]),o($V8,[2,34]),o($Vt,[2,10]),o($V8,[2,35]),{20:[1,156]},o($V8,[2,37]),{20:[1,157]},o($V8,$V9,{14:158,39:$Va}),o($V8,[2,38]),o($V8,[2,36])],\ndefaultActions: {9:[2,1],10:[2,2],79:[2,3]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n\n    const { SalidaGramatica } = require(\"./AST/SalidaGramatica\");\n    const { Nodo } = require('./Expresiones/Nodo');\n    const Primitivo = require('./Expresiones/Primitivo');\n    const Aritmetica = require('./Operaciones/Aritmeticas')\n    const Relacional = require('./Operaciones/Relacional');\n    const Logica = require('./Operaciones/Logica'); \n    const { Predicate } = require('./Expresiones/Predicate');\n    //const { Atributo } = require('./Expresiones/Atributo');\n    const { tError } = require('./Expresiones/tError');\n\n    var listaErrores = [];\n    var produccion = [];\n    var accion = [];\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:return \"tk_decimal\";\nbreak;\ncase 1:return \"tk_entero\";\nbreak;\ncase 2:return \"tk_node\";\nbreak;\ncase 3:return \"tk_child\";\nbreak;\ncase 4:return \"tk_descendant\";\nbreak;\ncase 5:return \"tk_descendatOr\"\nbreak;\ncase 6:return \"tk_ancestor\";\nbreak;\ncase 7:return \"tk_ancestorOr\";\nbreak;\ncase 8:return \"tk_attribute\";\nbreak;\ncase 9:return \"tk_following\";\nbreak;\ncase 10:return \"tk_followingSi\"\nbreak;\ncase 11:return \"tk_parent\"\nbreak;\ncase 12:return \"tk_preceding\"\nbreak;\ncase 13:return \"tk_precedingSi\"\nbreak;\ncase 14:return \"tk_self\"\nbreak;\ncase 15:return \"tk_text\"\nbreak;\ncase 16:return \"tk_position\"\nbreak;\ncase 17:return \"tk_last\"\nbreak;\ncase 18:return \"tk_div\"\nbreak;\ncase 19:return \"tk_and\"\nbreak;\ncase 20:return \"tk_or\"\nbreak;\ncase 21:return \"tk_mod\"\nbreak;\ncase 22:return \"tk_barra\"\nbreak;\ncase 23:return \"tk_punto\"\nbreak;\ncase 24:return \"tk_diagonal\"\nbreak;\ncase 25:return \"tk_asterisco\"\nbreak;\ncase 26:return \"tk_dosPuntos\"\nbreak;\ncase 27:return \"tk_mas\"\nbreak;\ncase 28:return \"tk_menos\"\nbreak;\ncase 29:return \"tk_menorIgual\"\nbreak;\ncase 30:return \"tk_mayorIgual\"\nbreak;\ncase 31:return \"tk_menor\"\nbreak;\ncase 32:return \"tk_mayor\"\nbreak;\ncase 33:return \"tk_distinto\"\nbreak;\ncase 34:return \"tk_igual\"\nbreak;\ncase 35:return \"tk_llaveA\"\nbreak;\ncase 36:return \"tk_llaveC\"\nbreak;\ncase 37:return \"tk_arroba\"\nbreak;\ncase 38:return \"tk_parA\"\nbreak;\ncase 39:return \"tk_parC\"\nbreak;\ncase 40:return \"tk_stringTexto\";\nbreak;\ncase 41:return \"tk_stringTexto\";\nbreak;\ncase 42:return \"tk_stringTexto\";\nbreak;\ncase 43:return \"tk_stringTexto\";\nbreak;\ncase 44:return \"tk_identificador\";\nbreak;\ncase 45:return \"EOF\";\nbreak;\ncase 46:\nbreak;\ncase 47:\n    listaErrores.push(new tError('Léxico',`Simbolo inesperado: ${yy_.yytext}`,yy_.yylloc.first_line,yy_.yylloc.first_column ));\n\nbreak;\n}\n},\nrules: [/^(?:[0-9]+(\\.[0-9]+)\\b)/,/^(?:[0-9]+\\b)/,/^(?:node\\b)/,/^(?:child\\b)/,/^(?:descendant\\b)/,/^(?:descendant-or-self\\b)/,/^(?:ancestor\\b)/,/^(?:ancestor-or-self\\b)/,/^(?:attribute\\b)/,/^(?:following\\b)/,/^(?:following-sibling\\b)/,/^(?:parent\\b)/,/^(?:preceding\\b)/,/^(?:preceding-sibling\\b)/,/^(?:self\\b)/,/^(?:text\\b)/,/^(?:position\\b)/,/^(?:last\\b)/,/^(?:div\\b)/,/^(?:and\\b)/,/^(?:or\\b)/,/^(?:mod\\b)/,/^(?:\\|)/,/^(?:\\.)/,/^(?:\\/)/,/^(?:\\*)/,/^(?::)/,/^(?:\\+)/,/^(?:-)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:!=)/,/^(?:=)/,/^(?:\\[)/,/^(?:\\])/,/^(?:@)/,/^(?:\\()/,/^(?:\\))/,/^(?:\"[^\\\"]*\")/,/^(?:“[^\\“]*“)/,/^(?:'[^\\']*')/,/^(?:‘[^\\‘]*‘)/,/^(?:[a-zA-Z]([a-zA-Z0-9_])*)/,/^(?:$)/,/^(?:[ \\t\\r\\n\\f])/,/^(?:.)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = xpathDesc;\nexports.Parser = xpathDesc.Parser;\nexports.parse = function () { return xpathDesc.parse.apply(xpathDesc, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { TablaXMLComponent } from './paginas/tabla-xml/tabla-xml.component';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './paginas/principal/home.component';\nimport { GraficoComponent } from './paginas/grafico/grafico.component';\nimport { BnfComponent } from './paginas/bnf/bnf.component';\n\nconst routes: Routes = [\n  { path: '', pathMatch: 'prefix', redirectTo: 'home' },\n  { path: 'home', component: HomeComponent },\n  { path: 'tablaSimbolosXML', component: TablaXMLComponent },\n  { path: 'grafico', component: GraficoComponent},\n  { path: 'bnf', component: BnfComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  constructor() { }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { ReporteService } from './reporte.service';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './paginas/principal/home.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { CodemirrorModule } from '@ctrl/ngx-codemirror';\nimport { FormsModule } from '@angular/forms';\nimport { MaterialFileInputModule } from 'ngx-material-file-input';\nimport { TablaXMLComponent } from './paginas/tabla-xml/tabla-xml.component';\nimport { MatTableModule } from '@angular/material/table';\nimport { GraficoComponent } from './paginas/grafico/grafico.component';\nimport { BnfComponent } from './paginas/bnf/bnf.component';\nimport { TablaErroresComponent } from './paginas/tabla-errores/tabla-errores.component';\nimport { TablaXqueryComponent } from './paginas/tabla-xquery/tabla-xquery.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TablaXMLComponent,\n    HomeComponent,\n    GraficoComponent,\n    BnfComponent,\n    TablaErroresComponent,\n    TablaXqueryComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatToolbarModule,\n    MatMenuModule,\n    MatButtonModule,\n    MatIconModule,\n    CodemirrorModule,\n    FormsModule,\n    MaterialFileInputModule,\n    MatTableModule\n  ],\n  providers: [\n    ReporteService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export default \"table {\\n    width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnaW5hcy9ibmYvYm5mLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXO0FBQ2YiLCJmaWxlIjoic3JjL2FwcC9wYWdpbmFzL2JuZi9ibmYuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbInRhYmxlIHtcbiAgICB3aWR0aDogMTAwJTtcbn0iXX0= */\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-bnf',\n  templateUrl: './bnf.component.html',\n  styleUrls: ['./bnf.component.css']\n})\nexport class BnfComponent implements OnInit {\n\n  displayedColumns: string[] = ['no', 'produccion', 'accion'];\n  simbolos: any;\n\nconstructor() {this.simbolos = localStorage.getItem('bnf'); }\n\n  ngOnInit(): void {\n    this.simbolos = JSON.parse(this.simbolos);\n    console.log(this.simbolos, \"vacia?\")\n  }\n\n}\n","export default \"#vis {\\n    width: 100%;\\n    height: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnaW5hcy9ncmFmaWNvL2dyYWZpY28uY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0FBQ2hCIiwiZmlsZSI6InNyYy9hcHAvcGFnaW5hcy9ncmFmaWNvL2dyYWZpY28uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIiN2aXMge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbn0iXX0= */\";","import { Component } from '@angular/core';\n\nimport * as vis from 'vis';\n\n@Component({\n  selector: 'app-grafico',\n  templateUrl: './grafico.component.html',\n  styleUrls: ['./grafico.component.css']\n})\nexport class GraficoComponent {\n\n  constructor() { }\n\n  ngOnInit() {\n    var container = document.getElementById(\"vis\");\n    console.log(localStorage.getItem(\"grafo\"));\n    var DOTstring = localStorage.getItem(\"grafo\");;\n    var parsedData = vis.network.convertDot(DOTstring);\n  \n    var data = {\n      nodes: parsedData.nodes,\n      edges: parsedData.edges\n    };\n\n    var options = parsedData.options;\n\n    // you can extend the options like a normal JSON variable:\n    options = {\n      layout: {\n        hierarchical: {\n          sortMethod: 'directed',  // hubsize, directed\n          direction: 'UD'   // UD, DU, LR, RL\n        }\n      },\n      nodes: {\n        color: 'skyblue',\n        shape: 'box'\n      }\n    }\n\n    // create a network\n    var network = new vis.Network(container, data, options);\n    network.stabilize();  \n  }\n}\n","export default \"#barra {\\n    height: 06vh;\\n}\\n\\n.spacer {\\n    flex: 1 1 auto;\\n}\\n\\n#superior { \\n    height: 15vh;\\n}\\n\\n#separador1 {\\n    height: 01vh;\\n    background-color: #f44336;\\n}\\n\\n#inferior {\\n    height: 78vh;\\n    width: 100vw;\\n    display: flex;\\n}\\n\\n#izquierda {\\n    width: 49.50vw;\\n}\\n\\n#separador2 {\\n    width: 01vw;\\n    background-color: #f44336;\\n}\\n\\n#derecha {\\n    width: 49.50vw;\\n}\\n\\n#inferior2 {\\n    height: 63.75%;\\n}\\n\\n#separador3 {\\n    height: 01vh;\\n    background-color: #f44336;\\n}\\n\\n#superior2 {\\n    height: 35%;\\n}\\n\\n#grafo {\\n    width: 100%;\\n    height: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnaW5hcy9wcmluY2lwYWwvaG9tZS5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksWUFBWTtBQUNoQjs7QUFFQTtJQUNJLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksWUFBWTtJQUNaLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLFlBQVk7SUFDWixZQUFZO0lBQ1osYUFBYTtBQUNqQjs7QUFFQTtJQUNJLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0ksY0FBYztBQUNsQjs7QUFFQTtJQUNJLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSxZQUFZO0lBQ1oseUJBQXlCO0FBQzdCOztBQUVBO0lBQ0ksV0FBVztBQUNmOztBQUVBO0lBQ0ksV0FBVztJQUNYLFlBQVk7QUFDaEIiLCJmaWxlIjoic3JjL2FwcC9wYWdpbmFzL3ByaW5jaXBhbC9ob21lLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIjYmFycmEge1xuICAgIGhlaWdodDogMDZ2aDtcbn1cblxuLnNwYWNlciB7XG4gICAgZmxleDogMSAxIGF1dG87XG59XG5cbiNzdXBlcmlvciB7IFxuICAgIGhlaWdodDogMTV2aDtcbn1cblxuI3NlcGFyYWRvcjEge1xuICAgIGhlaWdodDogMDF2aDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjQ0MzM2O1xufVxuXG4jaW5mZXJpb3Ige1xuICAgIGhlaWdodDogNzh2aDtcbiAgICB3aWR0aDogMTAwdnc7XG4gICAgZGlzcGxheTogZmxleDtcbn1cblxuI2l6cXVpZXJkYSB7XG4gICAgd2lkdGg6IDQ5LjUwdnc7XG59XG5cbiNzZXBhcmFkb3IyIHtcbiAgICB3aWR0aDogMDF2dztcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjQ0MzM2O1xufVxuXG4jZGVyZWNoYSB7XG4gICAgd2lkdGg6IDQ5LjUwdnc7XG59XG5cbiNpbmZlcmlvcjIge1xuICAgIGhlaWdodDogNjMuNzUlO1xufVxuXG4jc2VwYXJhZG9yMyB7XG4gICAgaGVpZ2h0OiAwMXZoO1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmNDQzMzY7XG59XG5cbiNzdXBlcmlvcjIge1xuICAgIGhlaWdodDogMzUlO1xufVxuXG4jZ3JhZm8ge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbn0iXX0= */\";","import { Component } from '@angular/core';\n\nimport * as XMLasc from '../../../analizadorXML/index';\nimport * as XMLdesc from '../../../analizadorXML/indexDesc';\nimport * as XPATHasc from '../../../analizadores/index';\nimport * as XPATHdesc from '../../../analizadores/indexDesc';\nimport * as XQUERYasc from '../../../analizadorXQUERY/index';\nimport { ReporteService } from '../../reporte.service';\n\nimport { Router } from '@angular/router';\nimport { xpathBusqueda } from '../../../analizadorXML/Instrucciones/Busqueda/xpathBusqueda';\nimport { xml3D } from '../../../analizadorXML/Codigo3D/xml3D';\n\ndeclare const Buffer\n\n@Component({\n  selector: 'home-root',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent {\n\n  \n  constructor(public _servicio: ReporteService, private _router: Router) { }\n\n  title = 'interfaz';\n\n  //editor query\n  querys: any = `declare function local:ackerman($m as xs:integer, $n as xs:integer ) as xs:integer {\n  if ($m = 0) then $n+1\n  else if ($m gt 0 and $n = 0) then local:ackerman($m - 1, 1)\n  else local:ackerman ($m - 1, local:ackerman($m, $n - 1))\n};\n  \nlocal:ackerman(/pruebas/m, /pruebas/n)`;\n  editorQueryOptions: any = {\n    theme: 'gruvbox-dark',\n    mode: \"application/xquery\",\n    lineNumbers: true,\n    lineWrapping: true,\n    foldGutter: true,\n    gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter', 'CodeMirror-lint-markers'],\n    autoCloseBrackets: true,\n    matchBrackets: true,\n    lint: true\n  }\n\n  //editor XML entrada\n  xmlEntrada: any = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<pruebas>\n  <m>2</m>\n  <n>1</n>\n</pruebas>`;\n  editorXMLEntradaOptions: any = {\n    theme: 'gruvbox-dark',\n    mode: \"application/xml\",\n    lineNumbers: true,\n    lineWrapping: true,\n    foldGutter: true,\n    gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter', 'CodeMirror-lint-markers'],\n    autoCloseBrackets: true,\n    matchBrackets: true,\n    lint: true\n  }\n\n  //editor XML Salida\n  xmlSalida: any = \"XML Salida\";\n  editorXMLSalidaOptions: any = {\n    theme: 'gruvbox-dark',\n    mode: \"application/xml\",\n    lineNumbers: true,\n    lineWrapping: true,\n    foldGutter: true,\n    gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter', 'CodeMirror-lint-markers'],\n    autoCloseBrackets: true,\n    matchBrackets: true,\n    lint: true\n  }\n\n  salida3D: string = \"Salida del codigo de tres direcciones\";\n  editor3DSalidaOptions: any = {\n    theme: 'gruvbox-dark',\n    mode: \"text/x-csrc\",\n    lineNumbers: true,\n    lineWrapping: true,\n    foldGutter: true,\n    gutters: ['CodeMirror-linenumbers', 'CodeMirror-foldgutter', 'CodeMirror-lint-markers'],\n    autoCloseBrackets: true,\n    matchBrackets: true,\n    lint: true\n  };\n\n  //reportes\n  tablaXML: any[] = [];\n  cstXML: string = \"\";\n  bnfXML: any[] = [];\n  encodingXML: any = \"\";\n  erroresXML: any[] = [];\n  erroresXPATH: any[] = [];\n\n  queryMod: string = \"\";\n\n  bnfXpath: any[] = [];\n  astXpath:string = \"\";\n  cstXpath: string = \"\";\n\n  astXquery: string = \"\";\n  cstXquery: string = ``;\n  tablaXquery: any[] = [];\n  bnfXquery: any[] = []\n\n  //reportesVisualizacion\n  grafo:boolean = false;\n  bnf: boolean = false;\n  tabla: boolean = false;\n  tabla2: boolean = false;\n  error: boolean = false;\n\n  //tabla de simbolos\n  simbolos:any;\n\n  ngOnInit(){\n    localStorage.clear();\n\n  }\n\n  abrirXML(files: FileList) {\n    this.xmlEntrada = files.item(0);\n    let fileReader = new FileReader();\n    fileReader.onload = (e) => {\n      this.xmlEntrada = fileReader.result;\n      console.log(fileReader.result);\n    }\n    fileReader.readAsText(this.xmlEntrada);\n  }\n\n  ejecutarXquery() {\n    localStorage.clear();\n    localStorage.setItem(\"xml\", this.xmlEntrada);\n    let ascXquery = new XQUERYasc.AnalizadorXquery();\n    let ret = ascXquery.ejecutarCodigo(this.querys);\n\n    this.astXquery = ret.ast\n    this.cstXquery = ret.cst\n    this.tablaXquery = ret.tabla\n    this.bnfXquery = ret.bnf;\n    this.salida3D = \"\"\n    for (let i = 0 ; i < ret.salida3d.length; i++) {\n      this.salida3D += ret.salida3d[i];\n      this.salida3D += \"\\n\\n\\n\" \n    }\n\n    this.xmlSalida = \"\";\n    for(let i = 0; i < ret.consola.length; i++){\n      this.xmlSalida += ret.consola[i] + \"\\n\";\n    }\n  }\n\n  ejecutarAscendente(){\n    this.botarReportes();\n    localStorage.clear();\n    \n    let ascXML = new XMLasc.AnalizadorASCXML();\n    let ascXpath = new XPATHasc.AnalizadosAscXpath();\n    let ret = ascXML.ejecutarCodigo(this.xmlEntrada);\n    let ret1 = ascXpath.ejecutarCodigo(this.querys);\n\n    this.simbolos = ret.objetos;\n    this.tablaXML = ret.tablaRep;\n    this.cstXML = ret.cstRep;\n    this.bnfXML = ret.bnfRep;\n    this.encodingXML = ret.encoding;\n    this.erroresXML = ret.errores;\n    this.queryMod = ret1.ejecutado;\n    this.bnfXpath = ret1.bnfRep;\n    this.astXpath = ret1.astRep;\n    this.cstXpath = ret1.cstRep;\n    this.erroresXPATH = ret1.errores;\n\n    this.obtenerConsulta(this.queryMod, this.simbolos);\n\n    alert(\"Analisis concluido\");\n  }\n\n  obtenerConsulta(query: string, tabla: any){\n    var buscador: xpathBusqueda = new xpathBusqueda();\n\n    var texto: string = \"\"\n    if(query.includes(\"|\")) {\n      var multiple = buscador.getNodesByFilters(\"3\", query, tabla);\n      this.xmlSalida = \"\"\n      for (let i = 0; i < multiple.length; i++){\n        texto += multiple[i]\n        texto += \"\\n\"\n      }\n    }else if(query[0] !== \"/\" && query[0] !== \"//\"){\n      texto = buscador.getNodesByFilters(\"1\", query, tabla)\n    }else{\n      texto = buscador.getNodesByFilters(\"2\", query, tabla)\n\n    }\n    const dir = new xml3D();\n    this.salida3D = dir.getNodesByFilters(tabla, 0, buscador.returnListValues());\n    //var buf = Buffer.from(texto);\n    this.xmlSalida = texto//buf.toString(this.encoding()); \n  }\n\n  ejecutarDescendente() {\n    this.botarReportes();\n    localStorage.clear();\n\n    let descXML = new XMLdesc.AnalizadorASCXML();\n    let descXPATH = new XPATHdesc.AnalizadosAscXpath();\n    let ret = descXML.ejecutarCodigo(this.xmlEntrada);\n    let ret1 = descXPATH.ejecutarCodigo(this.querys);\n\n    this.simbolos = ret.objetos;\n    this.tablaXML = ret.tablaRep;\n    this.cstXML = ret.cstRep;\n    this.bnfXML = ret.bnfRep;\n    this.erroresXML = ret.errores;\n    this.queryMod = ret1.ejecutado;\n    this.bnfXpath = ret1.bnfRep;\n    this.astXpath = ret1.astRep;\n    this.cstXpath = ret1.cstRep;\n    this.erroresXPATH = ret1.errores;\n    this.encodingXML = ret.encoding;\n\n    this.obtenerConsulta(this.queryMod, this.simbolos);\n\n    alert(\"Analisis concluido\");\n  }\n\n  botarReportes() {\n    this.grafo = this.bnf = this.tabla = this.error = this.tabla2 = false;\n  }\n\n  reporteASTXQUERY() {\n    this.botarReportes();\n    localStorage.clear();\n    console.log(this.astXquery)\n    localStorage.setItem('grafo', this.astXquery);\n    this.grafo = true;\n  }\n\n  reporteCSTXQUERY() {\n    this.botarReportes();\n    localStorage.clear();\n    localStorage.setItem('grafo', this.cstXquery);\n    this.grafo = true;\n  }\n\n  reporteTablaXQUERY() {\n    this.botarReportes();\n    localStorage.clear();\n    console.log(this.tablaXquery);\n    localStorage.setItem('tablaXquery', JSON.stringify(this.tablaXquery));\n    this.tabla2 = true;\n  }\n\n  reporteBNFXQUERY() {\n    this.botarReportes();\n    localStorage.clear();\n    console.log(this.bnfXquery)\n    localStorage.setItem('bnf', JSON.stringify(this.bnfXquery));\n    this.bnf = true;\n  }\n\n  reporteTablaSimbolosXML() {\n    this.botarReportes();\n    localStorage.clear();\n    localStorage.setItem('tablaXML', JSON.stringify(this.tablaXML));\n    this.tabla = true;\n    //window.open(\"tablaSimbolosXML\", \"_blank\")\n  }\n\n  reporteCSTXML() {\n    this.botarReportes();\n    localStorage.clear();\n    localStorage.setItem('grafo', this.cstXML);\n    this.grafo = true;\n    //window.open(\"grafico\", \"_blank\")\n  }\n\n  reporteBNFXML() {\n    this.botarReportes();\n    localStorage.clear();\n    localStorage.setItem('bnf', JSON.stringify(this.bnfXML));\n    this.bnf = true;\n    //window.open(\"bnf\", \"_blank\")\n  }\n\n  reporteBNFXPATH() {\n    this.botarReportes();\n    localStorage.clear();\n    localStorage.setItem('bnf', JSON.stringify(this.bnfXpath));\n    this.bnf = true;\n    //window.open(\"bnf\", \"_blank\")\n  }\n\n  reporteASTXPATH() {\n    this.botarReportes();\n    localStorage.clear()\n    localStorage.setItem('grafo', this.astXpath);\n    this.grafo = true\n    //window.open(\"grafico\", \"_blank\")\n  }\n\n  reporteCSTXPATH() {\n    this.botarReportes();\n    localStorage.clear()\n    localStorage.setItem('grafo', this.cstXpath);\n    this.grafo= true;\n    // window.open(\"grafico\", \"_blank\")\n  }\n\n  reporteErroresXML() {\n    this.botarReportes();\n    localStorage.clear()\n    localStorage.setItem('errores', JSON.stringify(this.erroresXML));\n    this.error = true;\n  }\n\n  reporteErroresXPATH() {\n    this.botarReportes();\n    localStorage.clear()\n    localStorage.setItem('errores', JSON.stringify(this.erroresXPATH));\n    this.error = true;\n  }\n\n  encoding(): string {\n    this.encodingXML = this.encodingXML.toLowerCase();\n    if (this.encodingXML.includes(\"utf8\")){\n      return \"utf8\"\n    }else if(this.encodingXML.includes(\"ascii\")){\n      return \"ascii\"\n    }else if(this.encodingXML.includes(\"utf16\")){\n      return \"utf16\"\n    }else if(this.encodingXML.includes(\"ucs\")){\n      return \"ucs2\"\n    }else if(this.encodingXML.includes(\"base\")){\n      return \"base64\"\n    }else if(this.encodingXML.includes(\"binary\")){\n      return \"binary\"\n    }else if(this.encodingXML.includes(\"hex\")){\n      return \"hex\"\n    }\n    return \"utf8\"\n  }\n\n}\n","export default \"table {\\n    width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnaW5hcy90YWJsYS1lcnJvcmVzL3RhYmxhLWVycm9yZXMuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFdBQVc7QUFDZiIsImZpbGUiOiJzcmMvYXBwL3BhZ2luYXMvdGFibGEtZXJyb3Jlcy90YWJsYS1lcnJvcmVzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0YWJsZSB7XG4gICAgd2lkdGg6IDEwMCU7XG59Il19 */\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-tabla-errores',\n  templateUrl: './tabla-errores.component.html',\n  styleUrls: ['./tabla-errores.component.css']\n})\nexport class TablaErroresComponent implements OnInit {\n  displayedColumns: string[] = ['no', 'tipo', 'valor', 'fila', 'columna'];\n  simbolos: any;\n\n  constructor() {this.simbolos = localStorage.getItem('errores'); }\n\n  ngOnInit(): void {\n    this.simbolos = JSON.parse(this.simbolos);\n    console.log(this.simbolos, \"vacia?\")\n  }\n\n}\n","export default \"table {\\n    width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnaW5hcy90YWJsYS14bWwvdGFibGEteG1sLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXO0FBQ2YiLCJmaWxlIjoic3JjL2FwcC9wYWdpbmFzL3RhYmxhLXhtbC90YWJsYS14bWwuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbInRhYmxlIHtcbiAgICB3aWR0aDogMTAwJTtcbn0iXX0= */\";","import { Component, OnInit } from '@angular/core';\n\nimport { ReporteService } from '../../reporte.service';\n\n@Component({\n  selector: 'app-tabla-xml',\n  templateUrl: './tabla-xml.component.html',\n  styleUrls: ['./tabla-xml.component.css']\n})\n\nexport class TablaXMLComponent implements OnInit {\n  displayedColumns: string[] = ['no', 'nombre', 'tipo', 'valor', 'ambito', 'tipoEtiqueta', 'fila', 'columna'];\n  simbolos: any;\n\nconstructor(_servicio: ReporteService) {this.simbolos = localStorage.getItem('tablaXML'); }\n\n  ngOnInit(): void {\n    this.simbolos = JSON.parse(this.simbolos);\n    console.log(this.simbolos, \"vacia?\")\n  }\n\n}\n","export default \"table {\\n    width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnaW5hcy90YWJsYS14cXVlcnkvdGFibGEteHF1ZXJ5LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXO0FBQ2YiLCJmaWxlIjoic3JjL2FwcC9wYWdpbmFzL3RhYmxhLXhxdWVyeS90YWJsYS14cXVlcnkuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbInRhYmxlIHtcbiAgICB3aWR0aDogMTAwJTtcbn0iXX0= */\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-tabla-xquery',\n  templateUrl: './tabla-xquery.component.html',\n  styleUrls: ['./tabla-xquery.component.css']\n})\nexport class TablaXqueryComponent implements OnInit {\n  displayedColumns: string[] = ['nombre', 'tipo', 'valor', 'fila', 'columna'];\n  simbolos: any;\n\nconstructor() {this.simbolos = localStorage.getItem('tablaXquery'); }\n\n  ngOnInit(): void {\n    this.simbolos = JSON.parse(this.simbolos);\n    for (let i = 0; i < this.simbolos.length; i ++){\n      if(this.simbolos[i].tipo.tipo == 0){\n        this.simbolos[i].tipo.tipo = \"Entero\"\n      }else if(this.simbolos[i].tipo.tipo == 1) {\n        this.simbolos[i].tipo.tipo = \"Decimal\"\n      }else if(this.simbolos[i].tipo.tipo == 2) {\n        this.simbolos[i].tipo.tipo = \"Numero\"\n      }else if(this.simbolos[i].tipo.tipo == 3) {\n        this.simbolos[i].tipo.tipo = \"Caracter\"\n      }else if(this.simbolos[i].tipo.tipo == 4){\n        this.simbolos[i].tipo.tipo = \"String\"\n      }else if(this.simbolos[i].tipo.tipo == 5){\n        this.simbolos[i].tipo.tipo = \"Booleano\"\n      }else if(this.simbolos[i].tipo.tipo == 8){\n        this.simbolos[i].tipo.tipo = \"Void\"\n      }else if(this.simbolos[i].tipo.tipo == 9){\n        this.simbolos[i].tipo.tipo = \"Metodo\"\n      }else if(this.simbolos[i].tipo.tipo == 10){\n        this.simbolos[i].tipo.tipo = \"Funcion\"\n      }else if(this.simbolos[i].tipo.tipo == 11){\n        this.simbolos[i].tipo.tipo = \"Variable\"\n      }\n      if(this.simbolos[i].tipo2.tipo == 0){\n        this.simbolos[i].tipo2.tipo = \"Entero\"\n      }else if(this.simbolos[i].tipo2.tipo == 1) {\n        this.simbolos[i].tipo2.tipo = \"Decimal\"\n      }else if(this.simbolos[i].tipo2.tipo == 2) {\n        this.simbolos[i].tipo2.tipo = \"Numero\"\n      }else if(this.simbolos[i].tipo2.tipo == 3) {\n        this.simbolos[i].tipo2.tipo = \"Caracter\"\n      }else if(this.simbolos[i].tipo2.tipo == 4){\n        this.simbolos[i].tipo2.tipo = \"String\"\n      }else if(this.simbolos[i].tipo2.tipo == 5){\n        this.simbolos[i].tipo2.tipo = \"Booleano\"\n      }else if(this.simbolos[i].tipo2.tipo == 8){\n        this.simbolos[i].tipo2.tipo = \"Void\"\n      }else if(this.simbolos[i].tipo2.tipo == 9){\n        this.simbolos[i].tipo2.tipo = \"Metodo\"\n      }else if(this.simbolos[i].tipo2.tipo == 10){\n        this.simbolos[i].tipo2.tipo = \"Funcion\"\n      }else if(this.simbolos[i].tipo2.tipo == 11){\n        this.simbolos[i].tipo2.tipo = \"Variable\"\n      }\n    }\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class ReporteService {\n\n  tablaSimbolosXML: any[] = [];\n\n  llenarTablaXML(array: any[]) {\n    this.tablaSimbolosXML = array;\n    console.log(this.tablaSimbolosXML)\n  }\n\n  obtenerTablaXML() {\n    return this.tablaSimbolosXML;\n  }\n}\n","export const environment = {\n  production: true\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/addon/fold/foldgutter';\nimport 'codemirror/addon/fold/brace-fold';\nimport 'codemirror/lib/codemirror';\nimport 'codemirror/addon/edit/closebrackets';\nimport 'codemirror/addon/edit/matchbrackets';\nimport 'codemirror/addon/lint/lint';\nimport 'codemirror/addon/lint/json-lint';\nimport 'codemirror/mode/xquery/xquery';\nimport 'codemirror/mode/xml/xml';\nimport 'codemirror/mode/clike/clike';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"sourceRoot":"webpack:///"}