/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Opt3DGramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,6],$V2=[1,7],$V3=[1,8],$V4=[1,9],$V5=[1,10],$V6=[5,7,18,26,27,28,29],$V7=[9,21],$V8=[16,25],$V9=[1,36],$Va=[1,37],$Vb=[1,38],$Vc=[1,39],$Vd=[1,40],$Ve=[9,24,35,36,38,39],$Vf=[1,58],$Vg=[1,57],$Vh=[1,60],$Vi=[1,59],$Vj=[1,66],$Vk=[1,77],$Vl=[1,78],$Vm=[1,68],$Vn=[1,69],$Vo=[1,70],$Vp=[1,71],$Vq=[1,72],$Vr=[1,73],$Vs=[1,74],$Vt=[1,75],$Vu=[1,76],$Vv=[2,41],$Vw=[8,11,16,21,41,42,43,44,45,46,47,48,49],$Vx=[8,11,15,16,21,41,42,43,44,45,46,47,48,49],$Vy=[8,11,16,21,41,42,46,47,48,49],$Vz=[8,11,16,21,46,47,48,49];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"LDECLARACION":4,"EOF":5,"DECLARACION":6,"include":7,"<":8,"identifier":9,"ext_h":10,">":11,"TIPO_DATO":12,"[":13,"IntegerLiteral":14,"]":15,"semicolon":16,"L_IDS":17,"void":18,"main":19,"(":20,")":21,"{":22,"L_INSTRUCCION":23,"}":24,",":25,"int":26,"double":27,"float":28,"char":29,"INSTRUCCION":30,"igual":31,"EXPRESION":32,"PRIMITIVA":33,":":34,"goto":35,"printf":36,"cadena":37,"if":38,"return":39,"OPERACION":40,"mas":41,"menos":42,"mod":43,"por":44,"div":45,"igualigual":46,"!=":47,"<=":48,">=":49,"DoubleLiteral":50,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"include",8:"<",9:"identifier",10:"ext_h",11:">",13:"[",14:"IntegerLiteral",15:"]",16:"semicolon",18:"void",19:"main",20:"(",21:")",22:"{",24:"}",25:",",26:"int",27:"double",28:"float",29:"char",31:"igual",34:":",35:"goto",36:"printf",37:"cadena",38:"if",39:"return",41:"mas",42:"menos",43:"mod",44:"por",45:"div",46:"igualigual",47:"!=",48:"<=",49:">=",50:"DoubleLiteral"},
productions_: [0,[3,2],[4,2],[4,1],[6,5],[6,6],[6,3],[6,7],[6,7],[17,3],[17,1],[12,1],[12,1],[12,1],[12,1],[23,2],[23,1],[30,4],[30,10],[30,10],[30,2],[30,3],[30,4],[30,10],[30,7],[30,2],[32,1],[32,1],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,2],[33,4],[33,1],[33,1],[33,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$;
break;
case 2: case 15:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 10: case 16:
 this.$ = [$$[$0]];
break;
case 4:
   
                this.$ = new Declaracion3D( _$[$0-4].first_line, _$[$0-4].first_column,'',null, $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0])
            
break;
case 5:

                this.$ = new Declaracion3D( _$[$0-5].first_line, _$[$0-5].first_column,'',null, $$[$0-5] + ' ' + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0])
            
break;
case 6:
 
                var codigo = $$[$0-2] + ' ';
                for(var i = 0; i<$$[$0-1].length;i++){
                    if(i == 0){
                        codigo += $$[$0-1][i];
                    }else{
                        codigo += ',' + $$[$0-1][i];
                    }
                }
                this.$ = new Declaracion3D( _$[$0-2].first_line, _$[$0-2].first_column,'',null, codigo + ';')              
            
break;
case 7:

                this.$ = new Declaracion3D( _$[$0-6].first_line, _$[$0-6].first_column,$$[$0-1],$$[$0-5], $$[$0-6] + ' ' + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2])   
            
break;
case 8:

                 this.$ = new Declaracion3D( _$[$0-6].first_line, _$[$0-6].first_column,$$[$0-1],$$[$0-5], $$[$0-6]+ ' ' + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2])   
            
break;
case 9:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 11: case 12: case 13: case 14: case 26: case 27:
 this.$ = $$[$0];
break;
case 17:
   
                this.$ = new Instruccion3D(TipoInstruccion.Asignacion, new Asignacion(_$[$0-3].first_line, _$[$0-3].first_column,$$[$0-3],$$[$0-1], $$[$0-3] + ' = ' + $$[$0-1].C3D + $$[$0]));
            
break;
case 18:
 
                this.$ = new Instruccion3D(TipoInstruccion.AsignacionArray, new AsignacionArray(_$[$0-9].first_line, _$[$0-9].first_column,$$[$0-9],$$[$0-2], $$[$0-9] + ' = ' + $$[$0-7]+ '[(' + $$[$0-4] + ')' + $$[$0-2].C3D + '];'));
            
break;
case 19:
 
                this.$ = new Instruccion3D(TipoInstruccion.ArrayAsignacion, 
                new Asignacion(_$[$0-9].first_line, _$[$0-9].first_column,$$[$0-9],$$[$0-1], $$[$0-9] + '[(' + $$[$0-6] + ')' + $$[$0-4].C3D + '] = ' + $$[$0-1].C3D + $$[$0]));
            
break;
case 20:
 
                this.$ = new Instruccion3D(TipoInstruccion.Etiqueta, new Etiqueta(_$[$0-1].first_line, _$[$0-1].first_column,$$[$0-1], $$[$0-1] + $$[$0]));
            
break;
case 21:
   
                this.$ = new Instruccion3D(TipoInstruccion.GoTo, new Etiqueta(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], 'goto ' + $$[$0-1] + $$[$0]));
            
break;
case 22:
 
                this.$ = new Instruccion3D(TipoInstruccion.Llamada, new Etiqueta(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-3],$$[$0-3] + '();'));
            
break;
case 23:
 
                this.$ = new Instruccion3D(TipoInstruccion.Print, new Etiqueta(_$[$0-9].first_line, _$[$0-9].first_column, '', $$[$0-9] + $$[$0-8] + $$[$0-7] + $$[$0-6] + ' ' + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2].C3D + $$[$0-1] + $$[$0]));
            
break;
case 24:
   
                this.$ = new Instruccion3D(TipoInstruccion.If, new Asignacion(_$[$0-6].first_line, _$[$0-6].first_column,$$[$0-1],$$[$0-4], 'if( ' + $$[$0-4].C3D + ') goto ' + $$[$0-1] + $$[$0]));
            
break;
case 25:
 
                this.$ = new Instruccion3D(TipoInstruccion.Return, new Etiqueta(_$[$0-1].first_line, _$[$0-1].first_column, '','return;'));
            
break;
case 28:
 this.$ = new OperacionC3D(_$[$0-2].first_line, _$[$0-2].first_column,TipoOperador.Mas, $$[$0-2], $$[$0],  $$[$0-2].C3D + ' + ' + $$[$0].C3D);
break;
case 29:
 this.$ = new OperacionC3D(_$[$0-2].first_line, _$[$0-2].first_column,TipoOperador.Menos, $$[$0-2], $$[$0],  $$[$0-2].C3D + ' - ' + $$[$0].C3D);
break;
case 30:
 this.$ = new OperacionC3D(_$[$0-2].first_line, _$[$0-2].first_column,TipoOperador.Mod, $$[$0-2], $$[$0],  $$[$0-2].C3D + ' % ' + $$[$0].C3D);
break;
case 31:
 this.$ = new OperacionC3D(_$[$0-2].first_line, _$[$0-2].first_column,TipoOperador.Por, $$[$0-2], $$[$0],  $$[$0-2].C3D + ' * ' + $$[$0].C3D);
break;
case 32:
 this.$ = new OperacionC3D(_$[$0-2].first_line, _$[$0-2].first_column,TipoOperador.Div, $$[$0-2], $$[$0],  $$[$0-2].C3D + ' / ' + $$[$0].C3D);
break;
case 33:
 this.$ = new OperacionC3D(_$[$0-2].first_line, _$[$0-2].first_column,TipoOperador.Igual, $$[$0-2], $$[$0],  $$[$0-2].C3D + ' == ' + $$[$0].C3D);
break;
case 34:
 this.$ = new OperacionC3D(_$[$0-2].first_line, _$[$0-2].first_column,TipoOperador.Diferente, $$[$0-2], $$[$0],  $$[$0-2].C3D + ' != ' + $$[$0].C3D);
break;
case 35:
 this.$ = new OperacionC3D(_$[$0-2].first_line, _$[$0-2].first_column,TipoOperador.MenorIgual, $$[$0-2], $$[$0],  $$[$0-2].C3D + ' <= ' + $$[$0].C3D);
break;
case 36:
 this.$ = new OperacionC3D(_$[$0-2].first_line, _$[$0-2].first_column,TipoOperador.MayorIgual, $$[$0-2], $$[$0],  $$[$0-2].C3D + ' >= ' + $$[$0].C3D);
break;
case 37:
 this.$ = new OperacionC3D(_$[$0-2].first_line, _$[$0-2].first_column,TipoOperador.Menor, $$[$0-2], $$[$0],  $$[$0-2].C3D + ' < ' + $$[$0].C3D);
break;
case 38:
 this.$ = new OperacionC3D(_$[$0-2].first_line, _$[$0-2].first_column,TipoOperador.Mayor, $$[$0-2], $$[$0],  $$[$0-2].C3D + ' > ' + $$[$0].C3D);
break;
case 39:
 this.$ = new OperacionC3D(_$[$0-1].first_line, _$[$0-1].first_column,TipoOperador.Diferente, $$[$0], null, '- ' + $$[$0].C3D);
break;
case 40:
 this.$ = new Simbolo(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0], $$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0], TipoDato.Primitivo, TipoParametro.Variable );
break;
case 41:
 this.$ = new Simbolo(_$[$0].first_line, _$[$0].first_column, $$[$0], $$[$0], TipoDato.Primitivo, TipoParametro.Variable );
break;
case 42:
 this.$ = new Simbolo(_$[$0].first_line, _$[$0].first_column, $$[$0], $$[$0], TipoDato.Primitivo, TipoParametro.Entero );
break;
case 43:
 this.$ = new Simbolo(_$[$0].first_line, _$[$0].first_column, $$[$0], $$[$0], TipoDato.Primitivo, TipoParametro.Decimal );
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,12:5,18:$V1,26:$V2,27:$V3,28:$V4,29:$V5},{1:[3]},{5:[1,11],6:12,7:$V0,12:5,18:$V1,26:$V2,27:$V3,28:$V4,29:$V5},o($V6,[2,3]),{8:[1,13]},{9:[1,14],17:15},{9:[1,17],19:[1,16]},o($V7,[2,11]),o($V7,[2,12]),o($V7,[2,13]),o($V7,[2,14]),{1:[2,1]},o($V6,[2,2]),{9:[1,18]},o($V8,[2,10],{13:[1,19]}),{16:[1,20],25:[1,21]},{20:[1,22]},{20:[1,23]},{10:[1,24]},{14:[1,25]},o($V6,[2,6]),{9:[1,26]},{21:[1,27]},{21:[1,28]},{11:[1,29]},{15:[1,30]},o($V8,[2,9]),{22:[1,31]},{22:[1,32]},o($V6,[2,4]),{16:[1,33]},{9:$V9,23:34,30:35,35:$Va,36:$Vb,38:$Vc,39:$Vd},{9:$V9,23:41,30:35,35:$Va,36:$Vb,38:$Vc,39:$Vd},o($V6,[2,5]),{9:$V9,24:[1,42],30:43,35:$Va,36:$Vb,38:$Vc,39:$Vd},o($Ve,[2,16]),{13:[1,45],20:[1,47],31:[1,44],34:[1,46]},{9:[1,48]},{20:[1,49]},{20:[1,50]},{16:[1,51]},{9:$V9,24:[1,52],30:43,35:$Va,36:$Vb,38:$Vc,39:$Vd},o($V6,[2,7]),o($Ve,[2,15]),{9:[1,54],14:$Vf,20:$Vg,32:53,33:55,40:56,42:$Vh,50:$Vi},{20:[1,61]},o($Ve,[2,20]),{21:[1,62]},{16:[1,63]},{37:[1,64]},{9:$Vj,14:$Vf,20:$Vg,32:65,33:55,40:56,42:$Vh,50:$Vi},o($Ve,[2,25]),o($V6,[2,8]),{8:$Vk,11:$Vl,16:[1,67],41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu},o([8,11,16,41,42,43,44,45,46,47,48,49],$Vv,{13:[1,79]}),o($Vw,[2,26]),o($Vw,[2,27]),{12:80,26:$V2,27:$V3,28:$V4,29:$V5},o($Vx,[2,42]),o($Vx,[2,43]),{9:$Vj,14:$Vf,20:$Vg,32:81,33:55,40:56,42:$Vh,50:$Vi},{12:82,26:$V2,27:$V3,28:$V4,29:$V5},{16:[1,83]},o($Ve,[2,21]),{25:[1,84]},{8:$Vk,11:$Vl,21:[1,85],41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu},o($Vx,$Vv),o($Ve,[2,17]),{9:$Vj,14:$Vf,20:$Vg,32:86,33:55,40:56,42:$Vh,50:$Vi},{9:$Vj,14:$Vf,20:$Vg,32:87,33:55,40:56,42:$Vh,50:$Vi},{9:$Vj,14:$Vf,20:$Vg,32:88,33:55,40:56,42:$Vh,50:$Vi},{9:$Vj,14:$Vf,20:$Vg,32:89,33:55,40:56,42:$Vh,50:$Vi},{9:$Vj,14:$Vf,20:$Vg,32:90,33:55,40:56,42:$Vh,50:$Vi},{9:$Vj,14:$Vf,20:$Vg,32:91,33:55,40:56,42:$Vh,50:$Vi},{9:$Vj,14:$Vf,20:$Vg,32:92,33:55,40:56,42:$Vh,50:$Vi},{9:$Vj,14:$Vf,20:$Vg,32:93,33:55,40:56,42:$Vh,50:$Vi},{9:$Vj,14:$Vf,20:$Vg,32:94,33:55,40:56,42:$Vh,50:$Vi},{9:$Vj,14:$Vf,20:$Vg,32:95,33:55,40:56,42:$Vh,50:$Vi},{9:$Vj,14:$Vf,20:$Vg,32:96,33:55,40:56,42:$Vh,50:$Vi},{20:[1,97]},{21:[1,98]},o($Vw,[2,39]),{21:[1,99]},o($Ve,[2,22]),{20:[1,100]},{35:[1,101]},o($Vy,[2,28],{43:$Vo,44:$Vp,45:$Vq}),o($Vy,[2,29],{43:$Vo,44:$Vp,45:$Vq}),o($Vw,[2,30]),o($Vw,[2,31]),o($Vw,[2,32]),o($Vz,[2,33],{41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($Vz,[2,34],{41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($Vz,[2,35],{41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($Vz,[2,36],{41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($Vz,[2,37],{41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),o($Vz,[2,38],{41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq}),{12:102,26:$V2,27:$V3,28:$V4,29:$V5},{9:[1,103]},{9:$Vj,14:$Vf,20:$Vg,33:104,50:$Vi},{12:105,26:$V2,27:$V3,28:$V4,29:$V5},{9:[1,106]},{21:[1,107]},o($Vx,[2,40]),{15:[1,108]},{21:[1,109]},{16:[1,110]},{9:$Vj,14:$Vf,20:$Vg,33:111,50:$Vi},{31:[1,112]},{9:$Vj,14:$Vf,20:$Vg,33:113,50:$Vi},o($Ve,[2,24]),{15:[1,114]},{9:$Vj,14:$Vf,20:$Vg,32:115,33:55,40:56,42:$Vh,50:$Vi},{21:[1,116]},{16:[1,117]},{8:$Vk,11:$Vl,16:[1,118],41:$Vm,42:$Vn,43:$Vo,44:$Vp,45:$Vq,46:$Vr,47:$Vs,48:$Vt,49:$Vu},{16:[1,119]},o($Ve,[2,18]),o($Ve,[2,19]),o($Ve,[2,23])],
defaultActions: {11:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { TipoInstruccion, TipoOperador, TipoParametro, TipoDato } = require("../Estructuras/tipificacion.js");
    const { Declaracion3D } = require("../Estructuras/C3D/Declaracion3D.js");
    const { OperacionC3D, Simbolo } = require("../Estructuras/C3D/Operacion3D.js");   
    const { Instruccion3D, Asignacion, AsignacionArray, Etiqueta } = require("../Estructuras/C3D/Instruccion3D.js");  
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:return 19;
break;
case 5:return 39;
break;
case 6:return 18;
break;
case 7:return 28;
break;
case 8:return 36;
break;
case 9:return 29;
break;
case 10:return 26;
break;
case 11:return 27;
break;
case 12:return 38;
break;
case 13:return 35;
break;
case 14:return 7;
break;
case 15:return 10;
break;
case 16:return 22;
break;
case 17:return 24;
break;
case 18:return 20;
break;
case 19:return 21;
break;
case 20:return 13;
break;
case 21:return 15;
break;
case 22:return 16;
break;
case 23:return 25;
break;
case 24:return 34;
break;
case 25:return 48;
break;
case 26:return 49;
break;
case 27:return 11;
break;
case 28:return 8;
break;
case 29:return 46;
break;
case 30:return 31;
break;
case 31:return "!=";
break;
case 32:return 43;
break;
case 33:return 44;
break;
case 34:return 45;
break;
case 35:return 41;
break;
case 36:return 42;
break;
case 37:return 50;
break;
case 38:return 14;
break;
case 39:return 9;
break;
case 40:return 37
break;
case 41:return 'cadena2'
break;
case 42: 
break;
case 43:return 5
break;
case 44:
                                        console.log("Error Lexico: "+yy_.yytext)
                                    
break;
}
},
rules: [/^(?:\/\/.*\s+)/i,/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:.)/i,/^(?:main\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:float\b)/i,/^(?:printf\b)/i,/^(?:char\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:if\b)/i,/^(?:goto\b)/i,/^(?:#include\b)/i,/^(?:\.h\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:%)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/i,/^(?:("((\\([\'\"\\]))|([^\"\\]+))*"))/i,/^(?:('((\\([\'\"\\]))|([^\'\\]))*'))/i,/^(?:[ \t\r\n\f])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Opt3DGramatica;
exports.Parser = Opt3DGramatica.Parser;
exports.parse = function () { return Opt3DGramatica.parse.apply(Opt3DGramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}