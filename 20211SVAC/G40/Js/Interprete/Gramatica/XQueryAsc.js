/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XQueryAsc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,14],$V2=[1,8],$V3=[1,9],$V4=[1,10],$V5=[1,11],$V6=[1,12],$V7=[1,13],$V8=[1,15],$V9=[5,10,18,24,26,29,30,31,32,34],$Va=[1,34],$Vb=[1,35],$Vc=[1,40],$Vd=[1,36],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,37],$Vt=[1,39],$Vu=[1,68],$Vv=[1,66],$Vw=[1,69],$Vx=[1,65],$Vy=[1,76],$Vz=[1,77],$VA=[1,78],$VB=[1,79],$VC=[1,70],$VD=[1,71],$VE=[1,72],$VF=[1,73],$VG=[1,74],$VH=[1,75],$VI=[16,59,60,100],$VJ=[1,82],$VK=[1,81],$VL=[1,83],$VM=[1,84],$VN=[1,85],$VO=[16,17,28,59,60,100,133,135],$VP=[16,18,20,59,60,71,72,73,74,75,100,114,118,119,120],$VQ=[1,108],$VR=[1,109],$VS=[1,111],$VT=[1,112],$VU=[1,118],$VV=[1,119],$VW=[16,17,19,23,28,73,84,86,88,89,90,92,93,94,95,96,97,102,103,104,105,106,107,108,109,110,111,112,133,135],$VX=[19,73,92,93,94,95,96,97,102,103,104,105,106,107,108,109,110,111,112],$VY=[16,17,18,19,20,23,28,59,60,71,72,73,74,75,84,86,88,89,90,92,93,94,95,96,97,100,102,103,104,105,106,107,108,109,110,111,112,114,118,119,120,133,135],$VZ=[2,98],$V_=[1,126],$V$=[2,88],$V01=[1,149],$V11=[16,28],$V21=[11,16,17,22,28,50,54,55,59,60],$V31=[17,133,135],$V41=[1,162],$V51=[1,164],$V61=[1,166],$V71=[1,163],$V81=[1,165],$V91=[1,167],$Va1=[16,18,20,59,60,71,72,100,114,118,119,120],$Vb1=[1,173],$Vc1=[1,178],$Vd1=[1,183],$Ve1=[1,184],$Vf1=[1,207],$Vg1=[1,204],$Vh1=[1,205],$Vi1=[1,208],$Vj1=[1,206],$Vk1=[1,203],$Vl1=[1,228],$Vm1=[17,59,60,133,135],$Vn1=[1,239],$Vo1=[1,238],$Vp1=[1,240],$Vq1=[1,241],$Vr1=[1,242],$Vs1=[16,17,18,20,59,60,71,72,73,74,75,114,118,119,120,133,135],$Vt1=[1,258],$Vu1=[1,253],$Vv1=[1,254],$Vw1=[1,255],$Vx1=[1,256],$Vy1=[1,257],$Vz1=[1,288],$VA1=[1,289],$VB1=[1,286],$VC1=[1,287],$VD1=[16,21,28],$VE1=[2,150],$VF1=[1,295],$VG1=[16,17,18,20,59,60,71,72,114,118,119,120,133,135],$VH1=[11,17,22,50,55],$VI1=[1,316],$VJ1=[1,309],$VK1=[1,313],$VL1=[1,315],$VM1=[1,317],$VN1=[1,314],$VO1=[1,312],$VP1=[1,326],$VQ1=[11,17,22,50,54,55],$VR1=[2,48],$VS1=[1,337],$VT1=[1,338],$VU1=[1,339],$VV1=[1,340],$VW1=[1,341],$VX1=[1,342],$VY1=[1,333],$VZ1=[1,332],$V_1=[1,334],$V$1=[1,335],$V02=[1,336],$V12=[11,16,17,22,50,54,55],$V22=[11,16,17,22,28,50,54,55,59,60,62,63,64,65,66,67,71,72,73,74,75],$V32=[11,16,17,22,28,50,54,55,59,60,62,63,64,65,66,67,71,72],$V42=[11,16,17,22,50,54,55,59,60];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"FLOWER":7,"FUNCION":8,"XFOR":9,"tk_for":10,"tk_idflower":11,"tk_in":12,"tk_parentesisa":13,"tk_entero":14,"tk_to":15,"tk_parentesisc":16,"tk_return":17,"tk_menor":18,"tk_identificador":19,"tk_mayor":20,"tk_llavea":21,"tk_llavec":22,"tk_slash":23,"tk_number":24,"EXPRESION_CADENA":25,"tk_substring":26,"CADENA":27,"tk_coma":28,"tk_uppercase":29,"tk_lowercase":30,"tk_string":31,"tk_declare":32,"tk_function":33,"tk_local":34,"PARAMETROS":35,"RETORNO":36,"SENTENCIAS_FUNCION":37,"tk_puntoycoma":38,"VALORESXPATH":39,"PARAMETRO":40,"tk_as":41,"tk_xs":42,"DATA_TYPE":43,"tk_integer":44,"tk_double":45,"tk_float":46,"tk_decimal":47,"tk_boolean":48,"SENFUNCION":49,"tk_if":50,"EXP_LOGICA":51,"tk_then":52,"RETURN_IF":53,"tk_else":54,"tk_let":55,"tk_dospuntosigual":56,"EXP_CADENA":57,"EXP_RELACIONAL":58,"tk_and":59,"tk_or":60,"EXP_NUMERICA":61,"tk_gt":62,"tk_lt":63,"tk_ge":64,"tk_le":65,"tk_eq":66,"tk_ne":67,"XCADENA":68,"tk_cadena1":69,"tk_cadena2":70,"tk_menos":71,"tk_mas":72,"tk_asterisco":73,"tk_mod":74,"tk_division":75,"VALORES":76,"VALOR":77,"VALORXPATH":78,"SETS":79,"SET":80,"SELECTORES":81,"EXPRESION":82,"AXES":83,"tk_dobleslash":84,"OTRO_SELECTOR":85,"tk_dpds":86,"AGREGAR_SELECTOR":87,"tk_pds":88,"tk_dps":89,"tk_ps":90,"PREDICADO":91,"tk_punto":92,"tk_arrobaasterisco":93,"tk_arroba":94,"tk_texto":95,"tk_doblepunto":96,"tk_node":97,"tk_corchetea":98,"EXPRESION_FILTRO":99,"tk_corchetec":100,"EXPRESION_LOGICA":101,"tk_ancestorself":102,"tk_ancestor":103,"tk_child":104,"tk_descendantself":105,"tk_descendant":106,"tk_followingsibling":107,"tk_following":108,"tk_self":109,"tk_parent":110,"tk_precedingsibling":111,"tk_preceding":112,"ATRIBUTO":113,"tk_igual":114,"tk_attribute":115,"EXPRESION_RELACIONAL":116,"EXPRESION_NUMERICA":117,"tk_mayorigual":118,"tk_menorigual":119,"tk_noigual":120,"tk_last":121,"tk_position":122,"SENTENCIAS":123,"RETURN_FLOWER":124,"IF_FLOWER":125,"CONDICION_IFFLOWER":126,"DATA_RETURN":127,"LISTA_ELSEIF":128,"ELSE_DATA":129,"ELSEIF_FLOWER":130,"tk_data":131,"SENTENCIA":132,"tk_where":133,"EXPRESION_LOGICAX":134,"tk_order":135,"tk_by":136,"EXPRESION_XQUERY":137,"EXPRESION_RELACIONALX":138,"EXPRESION_NUMERICAX":139,"EXPRESION_CADENAX":140,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"tk_for",11:"tk_idflower",12:"tk_in",13:"tk_parentesisa",14:"tk_entero",15:"tk_to",16:"tk_parentesisc",17:"tk_return",18:"tk_menor",19:"tk_identificador",20:"tk_mayor",21:"tk_llavea",22:"tk_llavec",23:"tk_slash",24:"tk_number",26:"tk_substring",28:"tk_coma",29:"tk_uppercase",30:"tk_lowercase",31:"tk_string",32:"tk_declare",33:"tk_function",34:"tk_local",38:"tk_puntoycoma",41:"tk_as",42:"tk_xs",44:"tk_integer",45:"tk_double",46:"tk_float",47:"tk_decimal",48:"tk_boolean",50:"tk_if",52:"tk_then",54:"tk_else",55:"tk_let",56:"tk_dospuntosigual",59:"tk_and",60:"tk_or",62:"tk_gt",63:"tk_lt",64:"tk_ge",65:"tk_le",66:"tk_eq",67:"tk_ne",69:"tk_cadena1",70:"tk_cadena2",71:"tk_menos",72:"tk_mas",73:"tk_asterisco",74:"tk_mod",75:"tk_division",84:"tk_dobleslash",86:"tk_dpds",88:"tk_pds",89:"tk_dps",90:"tk_ps",92:"tk_punto",93:"tk_arrobaasterisco",94:"tk_arroba",95:"tk_texto",96:"tk_doblepunto",97:"tk_node",98:"tk_corchetea",100:"tk_corchetec",102:"tk_ancestorself",103:"tk_ancestor",104:"tk_child",105:"tk_descendantself",106:"tk_descendant",107:"tk_followingsibling",108:"tk_following",109:"tk_self",110:"tk_parent",111:"tk_precedingsibling",112:"tk_preceding",114:"tk_igual",115:"tk_attribute",118:"tk_mayorigual",119:"tk_menorigual",120:"tk_noigual",121:"tk_last",122:"tk_position",131:"tk_data",133:"tk_where",135:"tk_order",136:"tk_by"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[9,19],[9,10],[8,4],[8,6],[8,8],[8,4],[8,4],[8,4],[8,12],[8,14],[8,5],[35,3],[35,1],[40,4],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[36,3],[37,2],[37,1],[49,8],[49,15],[49,4],[49,3],[49,2],[53,1],[53,1],[51,3],[51,3],[51,1],[58,3],[58,3],[58,3],[58,3],[58,3],[58,3],[57,1],[57,3],[57,1],[68,1],[68,1],[61,2],[61,3],[61,3],[61,3],[61,3],[61,3],[61,3],[61,1],[61,1],[61,1],[61,1],[61,5],[76,3],[76,1],[77,1],[39,3],[39,1],[78,1],[78,1],[78,1],[78,1],[79,2],[79,1],[80,2],[80,1],[80,1],[80,2],[81,2],[81,1],[81,1],[81,2],[81,1],[85,2],[85,2],[85,2],[85,2],[87,1],[87,0],[82,2],[82,2],[82,2],[82,2],[82,3],[82,2],[82,2],[82,2],[91,3],[91,0],[99,1],[83,2],[83,2],[83,2],[83,2],[83,2],[83,2],[83,2],[83,2],[83,2],[83,2],[83,2],[113,4],[113,4],[101,3],[101,3],[101,1],[116,3],[116,3],[116,3],[116,3],[116,3],[116,3],[116,1],[116,1],[116,1],[116,1],[116,1],[116,1],[25,1],[25,1],[117,2],[117,3],[117,3],[117,3],[117,3],[117,3],[117,3],[117,1],[117,1],[117,1],[117,1],[117,1],[117,1],[27,1],[27,1],[7,6],[7,5],[125,8],[125,7],[129,1],[129,0],[128,2],[128,1],[130,5],[126,5],[127,6],[123,2],[123,1],[132,4],[132,5],[132,6],[132,3],[124,2],[137,2],[134,3],[134,3],[134,1],[138,3],[138,3],[138,3],[138,3],[138,3],[138,3],[138,1],[140,1],[140,1],[139,2],[139,3],[139,3],[139,3],[139,3],[139,3],[139,3],[139,1],[139,1],[139,1],[139,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  console.log("TODO CORRECTO :D XQUERY ASC VERSION");
                                instrucciones = $$[$0-1][0];
                                nodo = $$[$0-1][1];
                                this.$ =[instrucciones,nodo];
                                return this.$; 
break;
case 2:
 $$[$0-1][0].push($$[$0][0]);
                                           $$[$0-1][1].agregarHijo($$[$0][1]);
                                           this.$ = [$$[$0-1][0],$$[$0-1][1]]; 
break;
case 3: case 19: case 29: case 64: case 67: case 73: case 152: case 157:
 this.$ = [[$$[$0][0]],$$[$0][1]]; 
break;
case 4: case 5: case 6: case 35: case 36: case 39: case 46: case 48: case 99: case 122: case 123: case 128: case 129: case 140: case 149: case 173: case 174: case 175:
 this.$ = $$[$0]; 
break;
case 7:
 xForAux = new XFor(_$[$0-18].first_line, _$[$0-18].first_column, Number($$[$0-14]), Number($$[$0-12]), $$[$0-8], $$[$0-1], $$[$0-17], $$[$0-5]);
          nodoaux = new NodoArbol("for","");   
          nodoaux.agregarHijo(new NodoArbol($$[$0-14] + " to " + $$[$0-12],""));
          this.$ = [xForAux,nodoaux]; 
        
break;
case 8:
 xForAux = new XForSimple(_$[$0-9].first_line, _$[$0-9].first_column, Number($$[$0-5]), Number($$[$0-3]), $$[$0-8], $$[$0]);
          nodoaux = new NodoArbol("for","");   
          nodoaux.agregarHijo(new NodoArbol($$[$0-5] + " to " + $$[$0-3],""));
          this.$ = [xForAux,nodoaux]; 
        
break;
case 9:

                xNumberAux = new XNumber(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1][0]);
                nodoaux = new NodoArbol("number()","");
                nodoaux.agregarHijo($$[$0-1][1]);
                this.$ = [xNumberAux,nodoaux]; 
break;
case 10:
 
                xSubAux = new XSubstring(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3][0], Number($$[$0-1]), 0, 0);
                nodoaux = new NodoArbol("substring()","");
                nodoaux.agregarHijo($$[$0-3][1]);
                nodoaux.agregarHijo(new NodoArbol($$[$0-1],""));
                this.$ = [xSubAux,nodoaux]; 
break;
case 11:
 
                xSubAux = new XSubstring(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5][0], Number($$[$0-3]), Number($$[$0-1]), 1);
                nodoaux = new NodoArbol("substring()","");
                nodoaux.agregarHijo($$[$0-5][1]);
                nodoaux.agregarHijo(new NodoArbol($$[$0-3],""));
                nodoaux.agregarHijo(new NodoArbol($$[$0-1],""));
                this.$ = [xSubAux,nodoaux]; 
break;
case 12:

                xUpperAux = new XUpperCase(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1][0]);
                nodoaux = new NodoArbol("upper-case()","");
                nodoaux.agregarHijo($$[$0-1][1]);
                this.$ = [xUpperAux,nodoaux]; 
break;
case 13:

                xUpperAux = new XLowerCase(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1][0]);
                nodoaux = new NodoArbol("lower-case()","");
                nodoaux.agregarHijo($$[$0-1][1]);
                this.$ = [xUpperAux,nodoaux]; 
break;
case 14:

                xStringAux = new XString(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1][0]);
                nodoaux = new NodoArbol("string()","");
                nodoaux.agregarHijo($$[$0-1][1]);
                this.$ = [xStringAux,nodoaux]; 
break;
case 15:

                               
                xFuncionAux = new XFuncion(_$[$0-11].first_line, _$[$0-11].first_column, $$[$0-8], $$[$0-6][0], $$[$0-2][0], $$[$0-4][0]);
                xDeclararFuncionAux = new  XDeclararFuncion(_$[$0-11].first_line, _$[$0-11].first_column, xFuncionAux);
                nodoaux = new NodoArbol($$[$0-8]+"()","");
                nodoaux.agregarHijo(new NodoArbol("as xs:"+$$[$0-4][1],""));
                nodoaux.agregarHijo($$[$0-6][1]);
                nodoaux.agregarHijo($$[$0-2][1]);
                this.$ = [xDeclararFuncionAux,nodoaux]; 
break;
case 16:

                xLlamadaAux = new XLlamada($$[$0-8], _$[$0-13].first_line, _$[$0-13].first_column, $$[$0-6][0], "");
                XLlamadaFuncionAux = new XLlamadaFuncion(_$[$0-13].first_line, _$[$0-13].first_column, xLlamadaAux, $$[$0-12], $$[$0-1]);
                nodoaux = new NodoArbol($$[$0-13]+""+$$[$0-12]+""+$$[$0-11]+""+$$[$0-10]+""+$$[$0-4]+""+$$[$0-3]+""+$$[$0-2]+""+$$[$0-1]+""+$$[$0],"");
                nodoLlamadaAux = new NodoArbol($$[$0-8]+"()","");
                nodoLlamadaAux.agregarHijo($$[$0-6][1]);  
                nodoaux.agregarHijo(nodoLlamadaAux);    
                this.$ = [XLlamadaFuncionAux,nodoaux];

        
break;
case 17:

                xLlamadaAux = new XLlamada($$[$0-3], _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1][0], "");
                XLlamadaFuncionSimpleAux = new XLlamadaFuncionSimple(_$[$0-4].first_line, _$[$0-4].first_column, xLlamadaAux);
                nodoaux = new NodoArbol($$[$0-3]+"()","");
                nodoaux.agregarHijo($$[$0-1][1]);    
                this.$ = [XLlamadaFuncionSimpleAux,nodoaux];

        
break;
case 18:
     $$[$0-2][1].agregarHijo($$[$0][1]);
                                                $$[$0-2][0].push($$[$0][0]); 
                                                this.$ = [$$[$0-2][0],$$[$0-2][1]];
break;
case 20:
 
                xParametroAux = new XParametro($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0][0]);
                nodoaux = new NodoArbol($$[$0-3]+" as xs:"+$$[$0][1],"");
                this.$ = [xParametroAux, nodoaux];


break;
case 21:
 this.$ = [TipoXDataType.INTEGER, $$[$0]];  
break;
case 22:
 this.$ = [TipoXDataType.DOUBLE,  $$[$0]];  
break;
case 23:
 this.$ = [TipoXDataType.FLOAT,   $$[$0]];  
break;
case 24:
 this.$ = [TipoXDataType.DECIMAL, $$[$0]];  
break;
case 25:
 this.$ = [TipoXDataType.BOOLEAN, $$[$0]];  
break;
case 26:
 this.$ = [TipoXDataType.STRING,  $$[$0]];  
break;
case 27:
  this.$ = $$[$0]; 
break;
case 28:
 
                        $$[$0-1][1].agregarHijo($$[$0][1]);
                        $$[$0-1][0].push($$[$0][0]); 
                        this.$ = [$$[$0-1][0],$$[$0-1][1]]; 
break;
case 30:

                XIFAux = new XIF(_$[$0-7].first_line, _$[$0-7].first_column, $$[$0-5][0], null, $$[$0-2][0], null, $$[$0][0], TipoXIF.IF);
                nodoaux = new NodoArbol("If","");
                nodoaux.agregarHijo($$[$0-5][1]);
                thenaux = new NodoArbol("Then","");
                thenaux.agregarHijo($$[$0-2][1]);
                elseaux = new NodoArbol("Else","");
                elseaux.agregarHijo($$[$0][1]);
                nodoaux.agregarHijo(thenaux);
                nodoaux.agregarHijo(elseaux);
                this.$ = [XIFAux,nodoaux];
 
break;
case 31:

                XIFAux = new XIF(_$[$0-14].first_line, _$[$0-14].first_column, $$[$0-12][0], $$[$0-5][0], $$[$0-9][0], $$[$0-2][0], $$[$0][0], TipoXIF.IFELSE);
                nodoaux = new NodoArbol("If","");
                nodoaux.agregarHijo($$[$0-12][1]);
                thenaux = new NodoArbol("Then","");
                thenaux.agregarHijo($$[$0-9][1]);
                elseifaux = new NodoArbol("Else If","");
                nodoaux.agregarHijo($$[$0-5][1]);
                elseifthenaux = new NodoArbol("Then","");
                elseifthenaux.agregarHijo($$[$0-2][1]);
                elseifaux.agregarHijo(elseifthenaux);
                elseaux = new NodoArbol("Else","");
                elseaux.agregarHijo($$[$0][1]);
                nodoaux.agregarHijo(thenaux);
                nodoaux.agregarHijo(elseifaux);
                elseifaux.agregarHijo(elseaux);
                this.$ = [XIFAux,nodoaux];  
break;
case 32:

                XLetAux = new XLet(_$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0][0], TipoXSENFUNCION.XLET);
                nodoaux = new NodoArbol($$[$0-2],"");
                nodoaux.agregarHijo($$[$0][1]);
                this.$ = [XLetAux,nodoaux];
break;
case 33:

                XAsignacionAux = new XAsignacion(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0][0], TipoXSENFUNCION.XASIGNACION);
                nodoaux = new NodoArbol($$[$0-2],"");
                nodoaux.agregarHijo($$[$0][1]);
                this.$ = [XAsignacionAux,nodoaux];
break;
case 34:

                XReturnAux = new XReturn(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0][0], TipoXSENFUNCION.XRETURN);
                nodoaux = new NodoArbol($$[$0-1],"");
                nodoaux.agregarHijo($$[$0][1]);
                this.$ = [XReturnAux,nodoaux];
break;
case 37:
  
                                operacionAux = new XOperacion($$[$0-2][0], $$[$0][0], Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column, "");
                                nodoaux = new NodoArbol("and","");
                                nodoaux.agregarHijo($$[$0-2][1]);
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [operacionAux,nodoaux]; 
break;
case 38:
  
                                operacionAux = new XOperacion($$[$0-2][0], $$[$0][0], Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column, "");
                                nodoaux = new NodoArbol("or","");
                                nodoaux.agregarHijo($$[$0-2][1]);
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [operacionAux,nodoaux]; 
break;
case 40:
 
                                operacionAux = new XOperacion($$[$0-2][0], $$[$0][0], Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column,"");
                                nodoaux = new NodoArbol(">","");
                                nodoaux.agregarHijo($$[$0-2][1]);
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [operacionAux,nodoaux];
break;
case 41:
 
                                operacionAux = new XOperacion($$[$0-2][0], $$[$0][0], Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column,"");
                                nodoaux = new NodoArbol("<","");
                                nodoaux.agregarHijo($$[$0-2][1]);
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [operacionAux,nodoaux];
break;
case 42:
 
                                operacionAux = new XOperacion($$[$0-2][0], $$[$0][0], Operador.MAYOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column,"");
                                nodoaux = new NodoArbol(">=","");
                                nodoaux.agregarHijo($$[$0-2][1]);
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [operacionAux,nodoaux];
break;
case 43:
 
                                operacionAux = new XOperacion($$[$0-2][0], $$[$0][0], Operador.MENOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column,"");
                                nodoaux = new NodoArbol("<=","");
                                nodoaux.agregarHijo($$[$0-2][1]);
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [operacionAux,nodoaux];
break;
case 44:
 
                                operacionAux = new XOperacion($$[$0-2][0], $$[$0][0], Operador.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column,"");
                                nodoaux = new NodoArbol("==","");
                                nodoaux.agregarHijo($$[$0-2][1]);
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [operacionAux,nodoaux];
break;
case 45:
 
                                operacionAux = new XOperacion($$[$0-2][0], $$[$0][0], Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column,"");
                                nodoaux = new NodoArbol("!=","");
                                nodoaux.agregarHijo($$[$0-2][1]);
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [operacionAux,nodoaux];
break;
case 47: case 57: case 136: case 182:
 this.$ = $$[$0-1]; 
break;
case 49: case 50:
  primitivoAux = new XPrimitivo($$[$0], _$[$0].first_line, _$[$0].first_column,TipoXPrimitivo.CADENA);
                                primitivoAux.setCadena(true);
                                nodoaux = new NodoArbol($$[$0],"");
                                this.$ = [primitivoAux,nodoaux]; 
break;
case 51:
 
                                negativo = new XPrimitivo(-1, _$[$0-1].first_line, _$[$0-1].first_column,"");
                                operacionAux = new XOperacion($$[$0][0], negativo, Operador.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column, "");
                                nodoaux = new NodoArbol("*","");
                                nodoaux.agregarHijo(new NodoArbol("-1",""));
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [operacionAux,nodoaux]; 
break;
case 52:
 
                                operacionAux = new XOperacion($$[$0-2][0], $$[$0][0], Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column,"");
                                nodoaux = new NodoArbol("+","");
                                nodoaux.agregarHijo($$[$0-2][1]);
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [operacionAux,nodoaux];
break;
case 53:
 
                                operacionAux = new XOperacion($$[$0-2][0], $$[$0][0], Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column,"");
                                nodoaux = new NodoArbol("-","");
                                nodoaux.agregarHijo($$[$0-2][1]);
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [operacionAux,nodoaux];
break;
case 54:
 
                                operacionAux = new XOperacion($$[$0-2][0], $$[$0][0], Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column,"");
                                nodoaux = new NodoArbol("*","");
                                nodoaux.agregarHijo($$[$0-2][1]);
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [operacionAux,nodoaux];
break;
case 55:
 
                                operacionAux = new XOperacion($$[$0-2][0], $$[$0][0], Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column,"");
                                nodoaux = new NodoArbol("%","");
                                nodoaux.agregarHijo($$[$0-2][1]);
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [operacionAux,nodoaux];
break;
case 56:
 
                                operacionAux = new XOperacion($$[$0-2][0], $$[$0][0], Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column,"");
                                nodoaux = new NodoArbol("÷","");
                                nodoaux.agregarHijo($$[$0-2][1]);
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [operacionAux,nodoaux];
break;
case 58:
     primitivoAux = new XPrimitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column,TipoXPrimitivo.NUMERO);
                                nodoaux = new NodoArbol($$[$0],"");
                                this.$ = [primitivoAux,nodoaux]; 
break;
case 59:
    primitivoAux = new XPrimitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column,TipoXPrimitivo.NUMERO);
                                nodoaux = new NodoArbol($$[$0],"");
                                this.$ = [primitivoAux,nodoaux];
break;
case 60:
 primitivoAux = new XPrimitivo($$[$0], _$[$0].first_line, _$[$0].first_column,TipoXPrimitivo.IDENTIFICADOR);
                                   nodoaux = new NodoArbol($$[$0],"");
                                   this.$ = [primitivoAux,nodoaux]; 
break;
case 61:
      primitivoAux = new XPrimitivo($$[$0], _$[$0].first_line, _$[$0].first_column,TipoXPrimitivo.IDFLOWER);
                                   nodoaux = new NodoArbol($$[$0],"");
                                   this.$ = [primitivoAux,nodoaux]; 
break;
case 62:
 
                                xLlamadaAux = new XLlamada($$[$0-3], _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1][0], "");
                                nodoaux = new NodoArbol($$[$0-3]+"()","");
                                nodoaux.agregarHijo($$[$0-1][1]);    
                                this.$ = [xLlamadaAux,nodoaux];
break;
case 63:
       $$[$0-2][1].agregarHijo($$[$0][1]);
                                        $$[$0-2][0].push($$[$0][0]); 
                                        this.$ = [$$[$0-2][0],$$[$0-2][1]]; 
break;
case 65:
     xValorAux = new XValor($$[$0][0], _$[$0].first_line, _$[$0].first_column, TipoXValor.PRIMITIVO);
                        this.$ = [xValorAux, $$[$0][1]]; 
break;
case 66:
  $$[$0-2][1].agregarHijo($$[$0][1]);
                                                 $$[$0-2][0].push($$[$0][0]); 
                                                 this.$ = [$$[$0-2][0],$$[$0-2][1]]; 
break;
case 68:
      instruccionAux = new XPath(_$[$0].first_line, _$[$0].first_column, $$[$0][0]);
                        xValorAux = new XValor(instruccionAux, _$[$0].first_line, _$[$0].first_column, TipoXValor.XPATH);
                        this.$ = [xValorAux, $$[$0][1]]; 
break;
case 69: case 70:
  
                        primitivoAux = new XPrimitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column,TipoXPrimitivo.NUMERO);
                        nodoaux = new NodoArbol($$[$0],"");
                        xValorAux = new XValor(primitivoAux, _$[$0].first_line, _$[$0].first_column, TipoXValor.PRIMITIVO);
                        this.$ = [xValorAux, nodoaux];
        
break;
case 71:
     xValorAux = new XValor($$[$0][0], _$[$0].first_line, _$[$0].first_column, TipoXValor.PRIMITIVO);
                        this.$ = [xValorAux, $$[$0][1]];
        
break;
case 72:
 $$[$0-1][1].agregarHijo($$[$0][1]);
                 $$[$0-1][0].push($$[$0][0]); 
                 this.$ = [$$[$0-1][0],$$[$0-1][1]]; 
break;
case 74:
 nodoXPath = new NodoXpath("", TipoNodo.SELECTOR_EXPRESION, null, $$[$0-1][0], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column); 
                               nodoaux= new NodoArbol($$[$0-1][1],"");
                               nodoaux.agregarHijo($$[$0][1]);
                               this.$ = [nodoXPath,nodoaux]; 
break;
case 75:
nodoXPath = new NodoXpath("", TipoNodo.EXPRESION, null, [], $$[$0][0], _$[$0].first_line, _$[$0].first_column);  
                        this.$ = [nodoXPath,$$[$0][1]] 
break;
case 76:
     nodoXPath = new NodoXpath("", TipoNodo.AXES, $$[$0][0], [], null, _$[$0].first_line, _$[$0].first_column); 
                        this.$ = [nodoXPath,$$[$0][1]]; 
break;
case 77:
  nodoXPath = new NodoXpath("", TipoNodo.SELECTOR_AXES, $$[$0][0], $$[$0-1][0], null, _$[$0-1].first_line, _$[$0-1].first_column);    
                                nodoaux= new NodoArbol($$[$0-1][1],"");
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [nodoXPath,nodoaux]; 
break;
case 78:
 arr = [TipoSelector.DOBLE_SLASH]; 
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1] ;
                                          this.$ = [arr,$$[$0-1]]; 
break;
case 79:
 this.$ = [[TipoSelector.DOBLE_SLASH],$$[$0]]; 
break;
case 80:
 this.$ = [[TipoSelector.SLASH],$$[$0]]; 
break;
case 81:
    arr = [TipoSelector.SLASH] 
                                        arr = arr.concat($$[$0][0]);
                                        $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                        this.$ = [arr,$$[$0-1]];
break;
case 82: case 87:
 this.$ = [$$[$0][0],$$[$0][1]];  
break;
case 83:
 arr = [TipoSelector.DOSPUNTOS_DOSSLASH];
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                          this.$ = [arr,$$[$0-1]];
break;
case 84:
 arr = [TipoSelector.PUNTO_DOSSLASH];
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                          this.$ = [arr,$$[$0-1]];
break;
case 85:
 arr = [TipoSelector.DOSPUNTOS_SLASH];
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                          this.$ = [arr,$$[$0-1]];
break;
case 86:
 arr = [TipoSelector.PUNTO_SLASH];
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                          this.$ = [arr,$$[$0-1]];
break;
case 88:
 this.$ = [[TipoSelector.FIN],""];  
break;
case 89:
 expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.IDENTIFICADOR, $$[$0][0]);
                                         nodoaux = new NodoArbol($$[$0-1],"");
                                         nodoaux.agregarHijo($$[$0][1]);
                                         this.$ = [expresionAux,nodoaux];
break;
case 90:
     expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.ASTERISCO, $$[$0][0]);
                                        nodoaux = new NodoArbol($$[$0-1],"");
                                        nodoaux.agregarHijo($$[$0][1]);
                                        this.$ = [expresionAux,nodoaux];
break;
case 91:
 expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.PUNTO, null);
                                nodoaux = new NodoArbol($$[$0-1],"");
                                this.$ = [expresionAux,nodoaux]; 
break;
case 92:
 expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.ARROBA, null);
                                          nodoaux = new NodoArbol($$[$0-1],"");
                                          this.$ = [expresionAux,nodoaux];
break;
case 93:
 expresionAux = new ExpresionXPath(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1], TipoExpresionXPath.ARROBA_ID, null);
                                                  nodoaux = new NodoArbol($$[$0-2]+""+$$[$0-1],"");
                                                  this.$ = [expresionAux,nodoaux]; 
break;
case 94:
 expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.TEXT, $$[$0][0]);
                                nodoaux = new NodoArbol($$[$0-1],"");
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [expresionAux,nodoaux]; 
break;
case 95:
    expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.DOBLEPUNTO, null);
                                        nodoaux = new NodoArbol($$[$0-1],"");
                                        this.$ = [expresionAux,nodoaux];
break;
case 96:
  expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.NODE, $$[$0][0]);
                                nodoaux = new NodoArbol($$[$0-1],"");
                                nodoaux.agregarHijo($$[$0][1]);
                                this.$ = [expresionAux,nodoaux]; 
break;
case 97:
 nodoaux = new NodoArbol("Predicado","");
                                                         nodoaux.agregarHijo(new NodoArbol("[",""));
                                                         nodoaux.agregarHijo($$[$0-1][1]);
                                                         nodoaux.agregarHijo(new NodoArbol("]",""));
                                                         this.$ = [$$[$0-1][0],nodoaux]; 
break;
case 98:
    nodoaux = new NodoArbol("Predicado","");
                nodoaux.agregarHijo(new NodoArbol("[",""));
                nodoaux.agregarHijo(new NodoArbol("]",""));
                this.$ = [null,nodoaux];
break;
case 100:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.ANCESTOR_OR_SELF, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux];
break;
case 101:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.ANCESTOR, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux];
break;
case 102:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.CHILD, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux];
break;
case 103:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.DESCENDANT_OR_SELF, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux];
break;
case 104:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.DESCENDANT, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux];
break;
case 105:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.FOLLOWING_SIBLING, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux]; 
break;
case 106:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.FOLLOWING, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux];
break;
case 107:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.SELF, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux];
break;
case 108:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.PARENT, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux];
break;
case 109:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.PRECEDING_SIBLING, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux];
break;
case 110:
 axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.PRECEDING, $$[$0][0]);
                                                   nodoaux = new NodoArbol($$[$0-1],"");
                                                   nodoaux.agregarHijo($$[$0][1]);
                                                   this.$ = [axesAux,nodoaux]; 
break;
case 111:
    idAux = new Primitivo($$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column);
                                                           operacionAux = new Operacion(TipoOperadores.ATRIBUTOS, idAux, $$[$0][0], Operador.IGUAL, _$[$0-3].first_line, _$[$0-3].first_column);
                                                           nodoaux = new NodoArbol("=","");
                                                           nodoaux.agregarHijo(new NodoArbol("@"+$$[$0-2],""));
                                                           nodoaux.agregarHijo($$[$0][1]);
                                                           this.$ = [operacionAux,nodoaux]; 
break;
case 112:
 idAux = new Primitivo($$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column);
                                                           operacionAux = new Operacion(TipoOperadores.ATRIBUTOS, idAux, $$[$0][0], Operador.IGUAL, _$[$0-3].first_line, _$[$0-3].first_column);
                                                           nodoaux = new NodoArbol("=","");
                                                           nodoaux.agregarHijo(new NodoArbol("attribute::"+$$[$0-2],""));
                                                           nodoaux.agregarHijo($$[$0][1]);
                                                           this.$ = [operacionAux,nodoaux]; 
break;
case 113:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("and","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 114:
  operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("or","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 115:
 this.$ = $$[$0];  
break;
case 116:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol(">","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux]; 
break;
case 117:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol("<","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux]; 
break;
case 118:
 
                                                                         operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MAYOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol(">=","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux];
break;
case 119:
 
                                                                         operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MENOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol("<=","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux]; 
break;
case 120:
   operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol("=","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux]; 
break;
case 121:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol("!=","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux]; 
break;
case 124:
  expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.ASTERISCO);
                                        nodoaux = new NodoArbol("*","");
                                        this.$ = [expresionAux,nodoaux]; 
break;
case 125:
      expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.TEXT);
                                        nodoaux = new NodoArbol($$[$0],"");
                                        this.$ = [expresionAux,nodoaux]; 
break;
case 126:
 expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.ARROBA);
                                             nodoaux = new NodoArbol("@*","");
                                             this.$ = [expresionAux,nodoaux];
break;
case 127:
 expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.NODE);
                                  nodoaux = new NodoArbol($$[$0],"");
                                  this.$ = [expresionAux,nodoaux]; 
break;
case 130: case 176:
 negativo = new Primitivo(-1, _$[$0-1].first_line, _$[$0-1].first_column);
                                                                  operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0][0], negativo, Operador.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column);
                                                                  nodoaux = new NodoArbol("*","");
                                                                  nodoaux.agregarHijo(new NodoArbol("-1",""));
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 131:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("+","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux];  
break;
case 132:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("-","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux];  
break;
case 133:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("*","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux];  
break;
case 134:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("%","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux];   
break;
case 135:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("÷","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 137: case 138: case 183: case 184:
 primitivoAux = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
                                                                  nodoaux = new NodoArbol($$[$0],"");
                                                                  this.$ = [primitivoAux,nodoaux]; 
break;
case 139:
 expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.LAST);
                                                                  nodoaux = new NodoArbol($$[$0],"");
                                                                  this.$ = [expresionAux,nodoaux]; 
break;
case 141:
  expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.POSITION);
                                                                  nodoaux = new NodoArbol($$[$0],"");
                                                                  this.$ = [expresionAux,nodoaux]; 
break;
case 142:
 primitivoAux = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
                                                                  nodoaux = new NodoArbol($$[$0],"");
                                                                  this.$ = [primitivoAux,nodoaux]; 
break;
case 143: case 144:
 primitivoAux = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
                              primitivoAux.setCadena(true);
                              nodoaux = new NodoArbol($$[$0],"");
                              this.$ = [primitivoAux,nodoaux]; 
break;
case 145:
 
                $$[$0-1][0].push($$[$0][0]);
                $$[$0-1][1].agregarHijo($$[$0][1]);
                instruccionAux = new XPath(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-2][0]);
                flowerAux = new Flower(_$[$0-5].first_line, _$[$0-5].first_column, $$[$0-4], instruccionAux, $$[$0-1][0]);
                nodoaux = new NodoArbol("for","");
                nodoaux.agregarHijo(new NodoArbol($$[$0-4],""));
                nodoaux.agregarHijo($$[$0-2][1]);
                nodoaux.agregarHijo($$[$0-1][1]);
                this.$ = [flowerAux,nodoaux]; 
break;
case 146:

                instruccionAux = new XPath(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1][0]);
                flowerIfAux = new FlowerIf(_$[$0-4].first_line, _$[$0-4].first_column, $$[$0-3], instruccionAux, $$[$0][0]);
                nodoaux = new NodoArbol("for","");
                nodoaux.agregarHijo(new NodoArbol($$[$0-3],""));
                nodoaux.agregarHijo($$[$0-1][1]);
                nodoaux.agregarHijo($$[$0][1]);
                this.$ = [flowerIfAux,nodoaux];
break;
case 147:

                XElseIfAux = new XFlowerIfThen($$[$0-5][0], $$[$0-3][0], _$[$0-7].first_line, _$[$0-7].first_column);
                nodoaux = new NodoArbol("return if","");
                nodoaux.agregarHijo($$[$0-5][1]);
                nodoaux.agregarHijo($$[$0-3][1]);
                listadoAux = [XElseIfAux];
                listadoXFlower = listadoAux.concat($$[$0-2][0]);
                nodoaux.agregarHijo($$[$0-2][1]);
                nodoelse = new NodoArbol("else","");
                nodoelse.agregarHijo($$[$0][1]);
                nodoaux.agregarHijo(nodoelse);
                IfFlowerAux = new XFlowerIF(listadoXFlower, $$[$0][0], _$[$0-7].first_line, _$[$0-7].first_column);
                this.$ = [IfFlowerAux,nodoaux];
break;
case 148:

                XElseIfAux = new XFlowerIfThen($$[$0-4][0], $$[$0-2][0], _$[$0-6].first_line, _$[$0-6].first_column);
                nodoaux = new NodoArbol(" return if","");
                nodoaux.agregarHijo($$[$0-4][1]);
                nodoaux.agregarHijo($$[$0-2][1]);
                listadoXFlower = [XElseIfAux];
                nodoelse = new NodoArbol("else","");
                nodoelse.agregarHijo($$[$0][1]);
                nodoaux.agregarHijo(nodoelse);
                IfFlowerAux = new XFlowerIF(listadoXFlower, $$[$0][0], _$[$0-6].first_line, _$[$0-6].first_column);
                this.$ = [IfFlowerAux,nodoaux];
break;
case 150:
 nodoaux = new NodoArbol("else()","");
            this.$ = [null,nodoaux];
break;
case 151:
 $$[$0-1][1].agregarHijo($$[$0][1]);
                                   $$[$0-1][0].push($$[$0][0]); 
                                   this.$ = [$$[$0-1][0],$$[$0-1][1]]; 
break;
case 153:

                XElseIfAux = new XFlowerIfThen($$[$0-2][0], $$[$0][0], _$[$0-4].first_line, _$[$0-4].first_column);
                nodoaux = new NodoArbol("else if","");
                nodoaux.agregarHijo($$[$0-2][1]);
                nodoaux.agregarHijo($$[$0][1]);
                this.$ = [XElseIfAux,nodoaux];
 
break;
case 154:

                condicionAux = new XFlowerCondicion($$[$0-3], $$[$0-1][0], _$[$0-4].first_line, _$[$0-4].first_column);
                nodoaux = new NodoArbol($$[$0-3]+"/","");
                nodoaux.agregarHijo($$[$0-1][1]);
                this.$ = [condicionAux,nodoaux];
 
break;
case 155:
 
                dataReturnAux = new XFlowerData($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
                nodoaux = new NodoArbol($$[$0-3]+"/"+$$[$0-1],"");
                this.$ = [dataReturnAux,nodoaux];

break;
case 156:
                                   
                                   $$[$0-1][1].agregarHijo($$[$0][1]);
                                   $$[$0-1][0].push($$[$0][0]); 
                                   this.$ = [$$[$0-1][0],$$[$0-1][1]];  
break;
case 158:
 
                                        nodoaux = new NodoArbol("Where","");
                                        nodoaux.agregarHijo($$[$0][1]);
                                        sentenciaAux = new Sentencia(TipoSentencia.WHERE, $$[$0][0], _$[$0-3].first_line, _$[$0-3].first_column);
                                        this.$ = [sentenciaAux,nodoaux]; 
break;
case 159:
    
                                        nodoaux = new NodoArbol("OrderBy","");
                                        nodoaux.agregarHijo(new NodoArbol($$[$0],""));
                                        sentenciaAux = new Sentencia(TipoSentencia.ORDERBY_ELEMENTO, $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
                                        this.$ = [sentenciaAux,nodoaux]; 
break;
case 160:
  
                                        nodoaux = new NodoArbol("OrderBy","");
                                        nodoaux.agregarHijo(new NodoArbol("@"+$$[$0],""));  
                                        sentenciaAux = new Sentencia(TipoSentencia.ORDERBY_ATRIBUTO, $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
                                        this.$ = [sentenciaAux,nodoaux]; 
break;
case 161:
  
                                        nodoaux = new NodoArbol("OrderBy","");
                                        nodoaux.agregarHijo(new NodoArbol($$[$0],""));  
                                        sentenciaAux = new Sentencia(TipoSentencia.ORDERBY, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
                                        this.$ = [sentenciaAux,nodoaux]; 
break;
case 162:
  
                                nodoaux = new NodoArbol("Return","");
                                nodoaux.agregarHijo(new NodoArbol($$[$0],""));
                                sentenciaAux = new Sentencia(TipoSentencia.RETURN, null, _$[$0-1].first_line, _$[$0-1].first_column);
                                this.$ = [sentenciaAux,nodoaux];  
break;
case 163:
 expresionAux = new ExpresionXQuery(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], $$[$0][0]);
                                      nodoaux = new NodoArbol($$[$0-1],"");
                                      nodoaux.agregarHijo($$[$0][1]);
                                      this.$ = [expresionAux,nodoaux]; 
break;
case 164:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                     nodoaux = new NodoArbol("and","");
                                                                     nodoaux.agregarHijo($$[$0-2][1]);
                                                                     nodoaux.agregarHijo($$[$0][1]);
                                                                     this.$ = [operacionAux,nodoaux]; 
break;
case 165:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                   nodoaux = new NodoArbol("or","");
                                                                   nodoaux.agregarHijo($$[$0-2][1]);
                                                                   nodoaux.agregarHijo($$[$0][1]);
                                                                   this.$ = [operacionAux,nodoaux]; 
break;
case 166:
 this.$ = $$[$0];
break;
case 167:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                            nodoaux = new NodoArbol(">","");
                                                                            nodoaux.agregarHijo($$[$0-2][1]);
                                                                            nodoaux.agregarHijo($$[$0][1]);
                                                                            this.$ = [operacionAux,nodoaux]; 
break;
case 168:
  operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                            nodoaux = new NodoArbol("<","");
                                                                            nodoaux.agregarHijo($$[$0-2][1]);
                                                                            nodoaux.agregarHijo($$[$0][1]);
                                                                            this.$ = [operacionAux,nodoaux]; 
break;
case 169:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MAYOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                                nodoaux = new NodoArbol(">=","");
                                                                                nodoaux.agregarHijo($$[$0-2][1]);
                                                                                nodoaux.agregarHijo($$[$0][1]);
                                                                                this.$ = [operacionAux,nodoaux]; 
break;
case 170:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MENOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                                nodoaux = new NodoArbol("<=","");
                                                                                nodoaux.agregarHijo($$[$0-2][1]);
                                                                                nodoaux.agregarHijo($$[$0][1]);
                                                                                this.$ = [operacionAux,nodoaux]; 
break;
case 171:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol("=","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux]; 
break;
case 172:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                           nodoaux = new NodoArbol("=","");
                                                                           nodoaux.agregarHijo($$[$0-2][1]);
                                                                           nodoaux.agregarHijo($$[$0][1]);
                                                                           this.$ = [operacionAux,nodoaux]; 
break;
case 177:
  operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                   nodoaux = new NodoArbol("+","");
                                                                   nodoaux.agregarHijo($$[$0-2][1]);
                                                                   nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 178:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("-","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 179:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column); 
                                                                  nodoaux = new NodoArbol("*","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 180:
  operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                   nodoaux = new NodoArbol("%","");
                                                                   nodoaux.agregarHijo($$[$0-2][1]);
                                                                   nodoaux.agregarHijo($$[$0][1]);
                                                                   this.$ = [operacionAux,nodoaux]; 
break;
case 181:
  operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                   nodoaux = new NodoArbol("÷","");
                                                                   nodoaux.agregarHijo($$[$0-2][1]);
                                                                   nodoaux.agregarHijo($$[$0][1]);
                                                                   this.$ = [operacionAux,nodoaux]; 
break;
case 185: case 186:
  primitivoAux = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
                                                                   nodoaux = new NodoArbol($$[$0],"");
                                                                   this.$ = [primitivoAux, nodoaux]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,18:$V1,24:$V2,26:$V3,29:$V4,30:$V5,31:$V6,32:$V7,34:$V8},{1:[3]},{5:[1,16],6:17,7:4,8:5,9:6,10:$V0,18:$V1,24:$V2,26:$V3,29:$V4,30:$V5,31:$V6,32:$V7,34:$V8},o($V9,[2,3]),o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),{11:[1,18]},{13:[1,19]},{13:[1,20]},{13:[1,21]},{13:[1,22]},{13:[1,23]},{33:[1,24]},{19:[1,25]},{19:[1,26]},{1:[2,1]},o($V9,[2,2]),{12:[1,27]},{13:$Va,14:$Vb,19:$Vc,25:28,27:29,47:$Vd,69:$Ve,70:$Vf,71:$Vg,83:38,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,117:30,121:$Vs,122:$Vt},{27:52,69:$Ve,70:$Vf},{27:53,69:$Ve,70:$Vf},{27:54,69:$Ve,70:$Vf},{13:$Va,14:$Vb,19:$Vc,25:55,27:29,47:$Vd,69:$Ve,70:$Vf,71:$Vg,83:38,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,117:30,121:$Vs,122:$Vt},{34:[1,56]},{20:[1,57]},{13:[1,58]},{13:[1,60],19:$Vu,23:$Vv,73:$Vw,79:59,80:61,81:62,82:63,83:64,84:$Vx,85:67,86:$Vy,88:$Vz,89:$VA,90:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr},{16:[1,80]},o($VI,[2,128]),o($VI,[2,129],{71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN}),o($VO,[2,143]),o($VO,[2,144]),{13:$Va,14:$Vb,19:$Vc,47:$Vd,71:$Vg,83:38,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,117:86,121:$Vs,122:$Vt},{13:$Va,14:$Vb,19:$Vc,47:$Vd,71:$Vg,83:38,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,117:87,121:$Vs,122:$Vt},o($VP,[2,137]),o($VP,[2,138]),o($VP,[2,139]),o($VP,[2,140]),o($VP,[2,141]),o($VP,[2,142]),{19:$Vu,73:$Vw,82:88,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},{19:$Vu,73:$Vw,82:89,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},{19:$Vu,73:$Vw,82:90,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},{19:$Vu,73:$Vw,82:91,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},{19:$Vu,73:$Vw,82:92,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},{19:$Vu,73:$Vw,82:93,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},{19:$Vu,73:$Vw,82:94,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},{19:$Vu,73:$Vw,82:95,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},{19:$Vu,73:$Vw,82:96,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},{19:$Vu,73:$Vw,82:97,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},{19:$Vu,73:$Vw,82:98,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH},{28:[1,99]},{16:[1,100]},{16:[1,101]},{16:[1,102]},{19:[1,103]},{21:[1,104]},{14:$VQ,19:$Vu,23:$Vv,39:105,47:$VR,68:110,69:$VS,70:$VT,73:$Vw,78:106,79:107,80:61,81:62,82:63,83:64,84:$Vx,85:67,86:$Vy,88:$Vz,89:$VA,90:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr},{17:[1,117],19:$Vu,23:$Vv,73:$Vw,80:115,81:62,82:63,83:64,84:$Vx,85:67,86:$Vy,88:$Vz,89:$VA,90:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,123:113,125:114,132:116,133:$VU,135:$VV},{14:[1,120]},o($VW,[2,73]),{19:$Vu,73:$Vw,82:121,83:122,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr},o($VW,[2,75]),o($VW,[2,76]),o($VX,[2,79],{85:123,86:$Vy,88:$Vz,89:$VA,90:$VB}),o($VX,[2,80],{85:124,86:$Vy,88:$Vz,89:$VA,90:$VB}),o($VX,[2,82]),o($VY,$VZ,{91:125,98:$V_}),o($VY,$VZ,{91:127,98:$V_}),o($VY,$VZ,{91:128,98:$V_}),o($VY,$VZ,{91:129,98:$V_}),{19:[1,130]},o($VY,$VZ,{91:131,98:$V_}),o($VY,$VZ,{91:132,98:$V_}),o($VY,$VZ,{91:133,98:$V_}),o($VX,$V$,{87:134,85:135,86:$Vy,88:$Vz,89:$VA,90:$VB}),o($VX,$V$,{85:135,87:136,86:$Vy,88:$Vz,89:$VA,90:$VB}),o($VX,$V$,{85:135,87:137,86:$Vy,88:$Vz,89:$VA,90:$VB}),o($VX,$V$,{85:135,87:138,86:$Vy,88:$Vz,89:$VA,90:$VB}),o($V9,[2,9]),{13:$Va,14:$Vb,19:$Vc,47:$Vd,71:$Vg,83:38,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,117:139,121:$Vs,122:$Vt},{13:$Va,14:$Vb,19:$Vc,47:$Vd,71:$Vg,83:38,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,117:140,121:$Vs,122:$Vt},{13:$Va,14:$Vb,19:$Vc,47:$Vd,71:$Vg,83:38,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,117:141,121:$Vs,122:$Vt},{13:$Va,14:$Vb,19:$Vc,47:$Vd,71:$Vg,83:38,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,117:142,121:$Vs,122:$Vt},{13:$Va,14:$Vb,19:$Vc,47:$Vd,71:$Vg,83:38,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,117:143,121:$Vs,122:$Vt},o($VP,[2,130]),{16:[1,144],71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN},o($VY,[2,100]),o($VY,[2,101]),o($VY,[2,102]),o($VY,[2,103]),o($VY,[2,104]),o($VY,[2,105]),o($VY,[2,106]),o($VY,[2,107]),o($VY,[2,108]),o($VY,[2,109]),o($VY,[2,110]),{14:[1,145]},o($V9,[2,12]),o($V9,[2,13]),o($V9,[2,14]),{13:[1,146]},{34:[1,147]},{16:[1,148],28:$V01},o($V11,[2,67]),o($V11,[2,68],{81:62,82:63,83:64,85:67,80:115,19:$Vu,23:$Vv,73:$Vw,84:$Vx,86:$Vy,88:$Vz,89:$VA,90:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr}),o($V11,[2,69]),o($V11,[2,70]),o($V11,[2,71]),o($V21,[2,49]),o($V21,[2,50]),{17:[1,152],124:150,132:151,133:$VU,135:$VV},o($V9,[2,146]),o($VW,[2,72]),o($V31,[2,157]),{50:[1,153]},{11:[1,154]},{136:[1,155]},{15:[1,156]},o($VW,[2,74]),o($VW,[2,77]),o($VX,[2,78]),o($VX,[2,81]),o($VY,[2,89]),{13:$Va,14:$Vb,19:$Vc,47:$Vd,71:$Vg,73:$V41,83:38,93:$V51,94:$V61,95:$V71,97:$V81,99:157,101:158,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:161,115:$V91,116:159,117:160,121:$Vs,122:$Vt},o($VY,[2,90]),o($VY,[2,91]),o($VY,[2,92]),o($VY,$VZ,{91:168,98:$V_}),o($VY,[2,94]),o($VY,[2,95]),o($VY,[2,96]),o($VX,[2,83]),o($VX,[2,87]),o($VX,[2,84]),o($VX,[2,85]),o($VX,[2,86]),o($Va1,[2,131],{73:$VL,74:$VM,75:$VN}),o($Va1,[2,132],{73:$VL,74:$VM,75:$VN}),o($VP,[2,133]),o($VP,[2,134]),o($VP,[2,135]),o($VP,[2,136]),{16:[1,169],28:[1,170]},{11:$Vb1,35:171,40:172},{19:[1,174]},o($V9,[2,17]),{14:$VQ,19:$Vu,23:$Vv,47:$VR,68:110,69:$VS,70:$VT,73:$Vw,78:175,79:107,80:61,81:62,82:63,83:64,84:$Vx,85:67,86:$Vy,88:$Vz,89:$VA,90:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr},o($V9,[2,145]),o($V31,[2,156]),{11:[1,176]},{13:$Vc1,126:177},{23:[1,179]},{11:[1,180]},{14:[1,181]},{100:[1,182]},{59:$Vd1,60:$Ve1,100:[2,99]},o($VI,[2,115]),o($VI,[2,122],{18:[1,186],20:[1,185],71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN,114:[1,189],118:[1,187],119:[1,188],120:[1,190]}),o($VI,[2,123]),o($VI,[2,124]),o($VI,[2,125]),o($VI,[2,126]),o($VI,[2,127]),{19:[1,191]},{19:[1,192]},o($VY,[2,93]),o($V9,[2,10]),{14:[1,193]},{16:[1,194],28:[1,195]},o($V11,[2,19]),{41:[1,196]},{13:[1,197]},o($V11,[2,66]),o($V9,[2,162]),{52:[1,198]},{11:[1,199]},{11:$Vf1,13:$Vg1,14:$Vh1,19:$Vi1,47:$Vj1,71:$Vk1,134:200,138:201,139:202},o($V31,[2,161],{23:[1,209]}),{16:[1,210]},o($VY,[2,97]),{13:$Va,14:$Vb,19:$Vc,47:$Vd,71:$Vg,73:$V41,83:38,93:$V51,94:$V61,95:$V71,97:$V81,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:161,115:$V91,116:211,117:160,121:$Vs,122:$Vt},{13:$Va,14:$Vb,19:$Vc,47:$Vd,71:$Vg,73:$V41,83:38,93:$V51,94:$V61,95:$V71,97:$V81,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:161,115:$V91,116:212,117:160,121:$Vs,122:$Vt},{13:$Va,14:$Vb,19:$Vc,47:$Vd,71:$Vg,83:38,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,117:213,121:$Vs,122:$Vt},{13:$Va,14:$Vb,19:$Vc,47:$Vd,71:$Vg,83:38,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,117:214,121:$Vs,122:$Vt},{13:$Va,14:$Vb,19:$Vc,47:$Vd,71:$Vg,83:38,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,117:215,121:$Vs,122:$Vt},{13:$Va,14:$Vb,19:$Vc,47:$Vd,71:$Vg,83:38,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,117:216,121:$Vs,122:$Vt},{13:$Va,14:$Vb,19:$Vc,25:217,27:29,47:$Vd,69:$Ve,70:$Vf,71:$Vg,83:38,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,117:30,121:$Vs,122:$Vt},{13:$Va,14:$Vb,19:$Vc,25:218,27:29,47:$Vd,69:$Ve,70:$Vf,71:$Vg,83:38,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,117:30,121:$Vs,122:$Vt},{114:[1,219]},{114:[1,220]},{16:[1,221]},{36:222,41:[1,223]},{11:$Vb1,40:224},{42:[1,225]},{14:$VQ,19:$Vu,23:$Vv,39:226,47:$VR,68:110,69:$VS,70:$VT,73:$Vw,78:106,79:107,80:61,81:62,82:63,83:64,84:$Vx,85:67,86:$Vy,88:$Vz,89:$VA,90:$VB,92:$VC,93:$VD,94:$VE,95:$VF,96:$VG,97:$VH,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr},{127:227,131:$Vl1},{23:[1,229]},o($V31,[2,158],{59:[1,230],60:[1,231]}),o($Vm1,[2,166]),o($Vm1,[2,173],{18:[1,233],20:[1,232],71:$Vn1,72:$Vo1,73:$Vp1,74:$Vq1,75:$Vr1,114:[1,236],118:[1,234],119:[1,235],120:[1,237]}),{11:$Vf1,13:$Vg1,14:$Vh1,19:$Vi1,47:$Vj1,71:$Vk1,139:243},{11:$Vf1,13:$Vg1,14:$Vh1,19:$Vi1,47:$Vj1,71:$Vk1,139:244},o($Vs1,[2,183]),o($Vs1,[2,184]),o($Vs1,[2,185]),o($Vs1,[2,186]),{19:[1,245],94:[1,246]},{17:[1,247]},o($VI,[2,113]),o($VI,[2,114]),o($VI,[2,116],{71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN}),o($VI,[2,117],{71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN}),o($VI,[2,118],{71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN}),o($VI,[2,119],{71:$VJ,72:$VK,73:$VL,74:$VM,75:$VN}),o($VI,[2,120]),o($VI,[2,121]),{27:248,69:$Ve,70:$Vf},{27:249,69:$Ve,70:$Vf},o($V9,[2,11]),{21:[1,250]},{42:[1,251]},o($V11,[2,18]),{31:$Vt1,43:252,44:$Vu1,45:$Vv1,46:$Vw1,47:$Vx1,48:$Vy1},{16:[1,259],28:$V01},{54:[1,261],128:260,130:262},{13:[1,263]},{13:$Va,14:$Vb,19:$Vc,47:$Vd,71:$Vg,73:$V41,83:38,93:$V51,94:$V61,95:$V71,97:$V81,101:264,102:$Vh,103:$Vi,104:$Vj,105:$Vk,106:$Vl,107:$Vm,108:$Vn,109:$Vo,110:$Vp,111:$Vq,112:$Vr,113:161,115:$V91,116:159,117:160,121:$Vs,122:$Vt},{11:$Vf1,13:$Vg1,14:$Vh1,19:$Vi1,47:$Vj1,71:$Vk1,138:265,139:202},{11:$Vf1,13:$Vg1,14:$Vh1,19:$Vi1,47:$Vj1,71:$Vk1,138:266,139:202},{11:$Vf1,13:$Vg1,14:$Vh1,19:$Vi1,47:$Vj1,71:$Vk1,139:267},{11:$Vf1,13:$Vg1,14:$Vh1,19:$Vi1,47:$Vj1,71:$Vk1,139:268},{11:$Vf1,13:$Vg1,14:$Vh1,19:$Vi1,47:$Vj1,71:$Vk1,139:269},{11:$Vf1,13:$Vg1,14:$Vh1,19:$Vi1,47:$Vj1,71:$Vk1,139:270},{11:$Vf1,13:$Vg1,14:$Vh1,19:$Vi1,27:272,47:$Vj1,69:$Ve,70:$Vf,71:$Vk1,139:273,140:271},{11:$Vf1,13:$Vg1,14:$Vh1,19:$Vi1,27:272,47:$Vj1,69:$Ve,70:$Vf,71:$Vk1,139:273,140:274},{11:$Vf1,13:$Vg1,14:$Vh1,19:$Vi1,47:$Vj1,71:$Vk1,139:275},{11:$Vf1,13:$Vg1,14:$Vh1,19:$Vi1,47:$Vj1,71:$Vk1,139:276},{11:$Vf1,13:$Vg1,14:$Vh1,19:$Vi1,47:$Vj1,71:$Vk1,139:277},{11:$Vf1,13:$Vg1,14:$Vh1,19:$Vi1,47:$Vj1,71:$Vk1,139:278},{11:$Vf1,13:$Vg1,14:$Vh1,19:$Vi1,47:$Vj1,71:$Vk1,139:279},o($Vs1,[2,176]),{16:[1,280],71:$Vn1,72:$Vo1,73:$Vp1,74:$Vq1,75:$Vr1},o($V31,[2,159]),{19:[1,281]},{11:[1,283],18:[1,282]},o($VI,[2,111]),o($VI,[2,112]),{11:$Vz1,17:$VA1,37:284,49:285,50:$VB1,55:$VC1},{31:$Vt1,43:290,44:$Vu1,45:$Vv1,46:$Vw1,47:$Vx1,48:$Vy1},o($V11,[2,20]),o($VD1,[2,21]),o($VD1,[2,22]),o($VD1,[2,23]),o($VD1,[2,24]),o($VD1,[2,25]),o($VD1,[2,26]),{22:[1,291]},{54:[1,292],130:293},o($V9,$VE1,{129:294,127:296,50:$VF1,131:$Vl1}),{54:[2,152]},{11:[1,297]},{16:[1,298],59:$Vd1,60:$Ve1},o($Vm1,[2,164]),o($Vm1,[2,165]),o($Vm1,[2,167],{71:$Vn1,72:$Vo1,73:$Vp1,74:$Vq1,75:$Vr1}),o($Vm1,[2,168],{71:$Vn1,72:$Vo1,73:$Vp1,74:$Vq1,75:$Vr1}),o($Vm1,[2,169],{71:$Vn1,72:$Vo1,73:$Vp1,74:$Vq1,75:$Vr1}),o($Vm1,[2,170],{71:$Vn1,72:$Vo1,73:$Vp1,74:$Vq1,75:$Vr1}),o($Vm1,[2,171]),o($Vm1,[2,174]),o($Vm1,[2,175],{71:$Vn1,72:$Vo1,73:$Vp1,74:$Vq1,75:$Vr1}),o($Vm1,[2,172]),o($VG1,[2,177],{73:$Vp1,74:$Vq1,75:$Vr1}),o($VG1,[2,178],{73:$Vp1,74:$Vq1,75:$Vr1}),o($Vs1,[2,179]),o($Vs1,[2,180]),o($Vs1,[2,181]),o($Vs1,[2,182]),o($V31,[2,160]),{19:[1,299]},o($V9,[2,8]),{11:$Vz1,17:$VA1,22:[1,300],49:301,50:$VB1,55:$VC1},o($VH1,[2,29]),{13:[1,302]},{11:[1,303]},{56:[1,304]},{11:$VI1,13:$VJ1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,51:307,53:305,57:306,58:311,61:310,68:308,69:$VS,70:$VT,71:$VO1},{21:[2,27]},{18:[1,318]},o($V9,$VE1,{127:296,129:319,50:$VF1,131:$Vl1}),{54:[2,151]},o($V9,[2,148]),{13:$Vc1,126:320},o($V9,[2,149]),{23:[1,321]},{52:[2,154]},{20:[1,322]},{38:[1,323]},o($VH1,[2,28]),{11:$VI1,13:$VP1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,51:324,58:311,61:325,71:$VO1},{56:[1,327]},{11:$VI1,13:$VJ1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,57:328,61:329,68:308,69:$VS,70:$VT,71:$VO1},o($VH1,[2,34]),o($VQ1,[2,35]),o($VQ1,[2,36]),o($V21,[2,46]),{11:$VI1,13:$VP1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,61:331,68:330,69:$VS,70:$VT,71:$VO1},o($VQ1,$VR1,{62:$VS1,63:$VT1,64:$VU1,65:$VV1,66:$VW1,67:$VX1,71:$VY1,72:$VZ1,73:$V_1,74:$V$1,75:$V02}),o($V12,[2,39],{59:[1,343],60:[1,344]}),{11:$VI1,13:$VP1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,61:345,71:$VO1},o($V22,[2,58]),o($V22,[2,59]),o($V22,[2,60]),o($V22,[2,61]),{19:[1,346]},{23:[1,347]},o($V9,[2,147]),{52:[1,348]},{19:[1,349]},{21:[1,350]},o($V9,[2,15]),{16:[1,351]},{62:$VS1,63:$VT1,64:$VU1,65:$VV1,66:$VW1,67:$VX1,71:$VY1,72:$VZ1,73:$V_1,74:$V$1,75:$V02},{11:$VI1,13:$VP1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,61:331,71:$VO1},{11:$VI1,13:$VJ1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,57:352,61:329,68:308,69:$VS,70:$VT,71:$VO1},o($VH1,[2,33]),o($V21,$VR1,{71:$VY1,72:$VZ1,73:$V_1,74:$V$1,75:$V02}),{16:[1,353]},{16:[1,354],71:$VY1,72:$VZ1,73:$V_1,74:$V$1,75:$V02},{11:$VI1,13:$VP1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,61:355,71:$VO1},{11:$VI1,13:$VP1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,61:356,71:$VO1},{11:$VI1,13:$VP1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,61:357,71:$VO1},{11:$VI1,13:$VP1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,61:358,71:$VO1},{11:$VI1,13:$VP1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,61:359,71:$VO1},{11:$VI1,13:$VP1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,61:360,71:$VO1},{11:$VI1,13:$VP1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,61:361,71:$VO1},{11:$VI1,13:$VP1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,61:362,71:$VO1},{11:$VI1,13:$VP1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,61:363,71:$VO1},{11:$VI1,13:$VJ1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,57:364,61:329,68:308,69:$VS,70:$VT,71:$VO1},{11:$VI1,13:$VJ1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,57:365,61:329,68:308,69:$VS,70:$VT,71:$VO1},{11:$VI1,13:$VP1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,58:366,61:325,71:$VO1},{11:$VI1,13:$VP1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,58:367,61:325,71:$VO1},o($V22,[2,51]),{13:[1,368]},{19:[1,369]},{127:370,131:$Vl1},{16:[1,371]},{11:[1,372]},{52:[1,373]},o($VH1,[2,32]),o($V21,[2,47]),o($V22,[2,57]),o($V32,[2,52],{73:$V_1,74:$V$1,75:$V02}),o($V32,[2,53],{73:$V_1,74:$V$1,75:$V02}),o($V22,[2,54]),o($V22,[2,55]),o($V22,[2,56]),o($V42,[2,40],{71:$VY1,72:$VZ1,73:$V_1,74:$V$1,75:$V02}),o($V42,[2,41],{71:$VY1,72:$VZ1,73:$V_1,74:$V$1,75:$V02}),o($V42,[2,42],{71:$VY1,72:$VZ1,73:$V_1,74:$V$1,75:$V02}),o($V42,[2,43],{71:$VY1,72:$VZ1,73:$V_1,74:$V$1,75:$V02}),o($V42,[2,44]),o($V42,[2,45]),o($V12,[2,37]),o($V12,[2,38]),{11:$VI1,13:$VJ1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,57:376,61:329,68:308,69:$VS,70:$VT,71:$VO1,76:374,77:375},{20:[1,377]},{54:[2,153]},o([5,10,18,24,26,29,30,31,32,34,54],[2,155]),{22:[1,378]},{11:$VI1,13:$VJ1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,51:307,53:379,57:306,58:311,61:310,68:308,69:$VS,70:$VT,71:$VO1},{16:[1,380],28:[1,381]},o($V11,[2,64]),o($V11,[2,65]),o($V9,[2,16]),{18:[1,382]},{54:[1,383]},o($V22,[2,62]),{11:$VI1,13:$VJ1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,57:376,61:329,68:308,69:$VS,70:$VT,71:$VO1,77:384},{23:[1,385]},{11:$VI1,13:$VJ1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,50:[1,387],51:307,53:386,57:306,58:311,61:310,68:308,69:$VS,70:$VT,71:$VO1},o($V11,[2,63]),{19:[1,388]},o($VH1,[2,30]),{13:[1,389]},{20:[1,390]},{11:$VI1,13:$VP1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,51:391,58:311,61:325,71:$VO1},o($V9,[2,7]),{16:[1,392]},{52:[1,393]},{11:$VI1,13:$VJ1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,51:307,53:394,57:306,58:311,61:310,68:308,69:$VS,70:$VT,71:$VO1},{54:[1,395]},{11:$VI1,13:$VJ1,14:$VK1,19:$VL1,34:$VM1,47:$VN1,51:307,53:396,57:306,58:311,61:310,68:308,69:$VS,70:$VT,71:$VO1},o($VH1,[2,31])],
defaultActions: {16:[2,1],262:[2,152],290:[2,27],293:[2,151],298:[2,154],370:[2,153]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('comment');
break;
case 1:this.popState();
break;
case 2:/* skip commentario content*/
break;
case 3: return 11; 
break;
case 4: return 131;  
break;
case 5: return 50;  
break;
case 6: return 52;  
break;
case 7: return 54;  
break;
case 8: return 66;  
break;
case 9: return 67;  
break;
case 10: return 63;  
break;
case 11: return 65;  
break;
case 12: return 62;  
break;
case 13: return 64;  
break;
case 14: return 32;  
break;
case 15: return 33;  
break;
case 16: return 34;  
break;
case 17: return 24;  
break;
case 18: return 41;  
break;
case 19: return 42;  
break;
case 20: return 48;  
break;
case 21: return 44;  
break;
case 22: return 45;  
break;
case 23: return 46;  
break;
case 24: return 47;  
break;
case 25: return 24;  
break;
case 26: return 26;  
break;
case 27: return 29;  
break;
case 28: return 30;  
break;
case 29: return 31;  
break;
case 30: return 97;  
break;
case 31: return 121;  
break;
case 32: return 122;  
break;
case 33: return 102;  
break;
case 34: return 103;  
break;
case 35: return 115;  
break;
case 36: return 104;  
break;
case 37: return 105;  
break;
case 38: return 106;  
break;
case 39: return 107;  
break;
case 40: return 108;  
break;
case 41: return 110;  
break;
case 42: return 111;  
break;
case 43: return 112;  
break;
case 44: return 109;  
break;
case 45: return 75;  
break;
case 46: return 60;  
break;
case 47: return 59;  
break;
case 48: return 74;  
break;
case 49: return 10;  
break;
case 50: return 12;  
break;
case 51: return 15;  
break;
case 52: return 55;  
break;
case 53: return 133;  
break;
case 54: return 17;  
break;
case 55: return 135;  
break;
case 56: return 136;  
break;
case 57: return 93;  
break;
case 58: return 94;  
break;
case 59: return 'tk_barra';  
break;
case 60: return 72;  
break;
case 61: return 71;  
break;
case 62: return 73;  
break;
case 63: return 120; 
break;
case 64: return 56; 
break;
case 65: return 119; 
break;
case 66: return 118; 
break;
case 67: return 114; 
break;
case 68: return 20; 
break;
case 69: return 18; 
break;
case 70: return 28; 
break;
case 71: return 38; 
break;
case 72: return 'tk_interrogacion'; 
break;
case 73: return 86; 
break;
case 74: return 88; 
break;
case 75: return 89; 
break;
case 76: return 90; 
break;
case 77: return 'tk_slashpunto'; 
break;
case 78: return 'tk_slashdoblepunto'; 
break;
case 79: return 84; 
break;
case 80: return 23; 
break;
case 81: return 96; 
break;
case 82: return 92; 
break;
case 83: return 47;  
break;
case 84: return 14;  
break;
case 85: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 69; 
break;
case 86: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 70; 
break;
case 87: return 19; 
break;
case 88: return 98; 
break;
case 89: return 100; 
break;
case 90: return 13; 
break;
case 91: return 16; 
break;
case 92: return 21; 
break;
case 93: return 22; 
break;
case 94:/* skip whitespace */
break;
case 95: /*Los Ignoramos*/   
break;
case 96: return 5;       
break;
case 97:  
        ListaErr.agregarError(new Error(NumeroE, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "Lexico", "El caracter " + yy_.yytext + " no pertenece al lenguaje.","XQuery")); NumeroE++;
 
break;
}
},
rules: [/^(?:\(:)/i,/^(?::\))/i,/^(?:.)/i,/^(?:(\$)([a-zA-ZáéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ])[a-zA-Z0-9áéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ_]*)/i,/^(?:data\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:eq\b)/i,/^(?:ne\b)/i,/^(?:lt\b)/i,/^(?:le\b)/i,/^(?:gt\b)/i,/^(?:ge\b)/i,/^(?:declare\b)/i,/^(?:function\b)/i,/^(?:local:)/i,/^(?:number\b)/i,/^(?:as\b)/i,/^(?:xs:)/i,/^(?:boolean\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:float\b)/i,/^(?:decimal\b)/i,/^(?:number\b)/i,/^(?:substring\b)/i,/^(?:upper-case\b)/i,/^(?:lower-case\b)/i,/^(?:string\b)/i,/^(?:node\(\))/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:ancestor-or-self::)/i,/^(?:ancestor::)/i,/^(?:attribute::)/i,/^(?:child::)/i,/^(?:descendant-or-self::)/i,/^(?:descendant::)/i,/^(?:following-sibling::)/i,/^(?:following::)/i,/^(?:parent::)/i,/^(?:preceding-sibling::)/i,/^(?:preceding::)/i,/^(?:self::)/i,/^(?:div\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:to\b)/i,/^(?:let\b)/i,/^(?:where\b)/i,/^(?:return\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:@\*)/i,/^(?:@)/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:!=)/i,/^(?::=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\?)/i,/^(?:\.\.\/\/)/i,/^(?:\.\/\/)/i,/^(?:\.\.\/)/i,/^(?:\.\/)/i,/^(?:\/\.)/i,/^(?:\/\.\.)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:([0-9]+["."][0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:([a-zA-ZáéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ])[a-zA-Z0-9áéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ_]*)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\s+)/i,/^(?:[ \t\r\n\f])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],"inclusive":true},"INITIAL":{"rules":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XQueryAsc;
exports.Parser = XQueryAsc.Parser;
exports.parse = function () { return XQueryAsc.parse.apply(XQueryAsc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}