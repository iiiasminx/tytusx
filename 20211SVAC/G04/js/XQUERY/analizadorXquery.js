/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizadorXquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,9],$V3=[5,11,23,51],$V4=[1,48],$V5=[1,27],$V6=[1,28],$V7=[1,29],$V8=[1,33],$V9=[1,26],$Va=[1,57],$Vb=[1,58],$Vc=[1,59],$Vd=[1,60],$Ve=[1,22],$Vf=[1,23],$Vg=[1,24],$Vh=[1,25],$Vi=[1,19],$Vj=[1,20],$Vk=[1,21],$Vl=[1,30],$Vm=[1,44],$Vn=[1,46],$Vo=[1,34],$Vp=[1,35],$Vq=[1,36],$Vr=[1,37],$Vs=[1,38],$Vt=[1,39],$Vu=[1,45],$Vv=[1,31],$Vw=[1,32],$Vx=[1,40],$Vy=[1,41],$Vz=[1,42],$VA=[1,43],$VB=[1,47],$VC=[1,49],$VD=[1,50],$VE=[1,51],$VF=[1,52],$VG=[1,53],$VH=[1,54],$VI=[1,55],$VJ=[1,56],$VK=[11,54],$VL=[2,147],$VM=[11,12,54],$VN=[11,15,17,31,33,54],$VO=[1,77],$VP=[1,86],$VQ=[1,83],$VR=[1,81],$VS=[1,80],$VT=[1,76],$VU=[1,75],$VV=[1,82],$VW=[1,84],$VX=[1,91],$VY=[1,97],$VZ=[1,93],$V_=[1,95],$V$=[1,110],$V01=[1,111],$V11=[1,94],$V21=[1,96],$V31=[1,98],$V41=[1,99],$V51=[1,100],$V61=[1,101],$V71=[1,102],$V81=[1,103],$V91=[1,104],$Va1=[1,105],$Vb1=[1,106],$Vc1=[1,107],$Vd1=[1,108],$Ve1=[1,109],$Vf1=[15,17,35,37,41,43,51,54,75,78,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96],$Vg1=[37,41],$Vh1=[2,89],$Vi1=[2,91],$Vj1=[1,151],$Vk1=[1,152],$Vl1=[1,148],$Vm1=[15,17,35,37,41,43,51,54,75,78,79,83,84,85,86,87,88,89,90,91],$Vn1=[15,17,35,37,41,43,51,54,75,78,79,83,84,85,86,87,88,89,90,91,94,95],$Vo1=[15,17,35,37,41,75,78,79],$Vp1=[1,173],$Vq1=[15,17],$Vr1=[1,187],$Vs1=[1,189],$Vt1=[1,190],$Vu1=[1,194],$Vv1=[1,201],$Vw1=[1,202],$Vx1=[1,200],$Vy1=[1,199],$Vz1=[11,92,114,115,132,134,137,139,140,141,142,144,145,146],$VA1=[1,216],$VB1=[35,42],$VC1=[11,33,51,121],$VD1=[2,160],$VE1=[15,17,35,37,42,56],$VF1=[2,11,15,17,35,37,42,43,51,54,56,76,78,79,83,84,85,92,93,94,95,96,105,124,125],$VG1=[2,172],$VH1=[1,253],$VI1=[1,251],$VJ1=[1,266],$VK1=[35,37,42,105],$VL1=[35,37,42,76,105],$VM1=[15,35,37,42,43,51,54,76,78,79,83,84,85,92,93,94,95,96,105,125],$VN1=[1,278],$VO1=[15,35,37,42,43,51,54,56,76,78,79,83,84,85,92,93,94,95,96,105,125],$VP1=[2,207],$VQ1=[1,283],$VR1=[2,11,15,35,37,42,43,51,54,56,76,78,79,83,84,85,92,93,94,95,96,105,125],$VS1=[1,285],$VT1=[1,284],$VU1=[11,33,51],$VV1=[35,37,42],$VW1=[2,11,15,35,37,42,43,51,54,56,76,78,79,83,84,85,92,93,94,95,96,105,124,125],$VX1=[43,51,54,56,78,79,83,84,85,92,93,94,95,96,125],$VY1=[1,316],$VZ1=[1,319],$V_1=[1,318],$V$1=[1,323],$V02=[1,324],$V12=[1,331],$V22=[2,20],$V32=[78,79,125],$V42=[1,355],$V52=[1,356],$V62=[1,353],$V72=[1,354],$V82=[1,357],$V92=[15,43,51,54,78,79,83,84,85,92,93,94,95,96,125],$Va2=[1,369],$Vb2=[56,78,79,92,93,94,95,96,125],$Vc2=[15,43,51,54,56,78,79,83,84,85,92,93,94,95,96,125],$Vd2=[11,33,35,51],$Ve2=[17,35,37,42],$Vf2=[35,37,42,78,79,105],$Vg2=[15,43,51,54,78,79,83,84,85,94,95,125];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"CONSULTAS_XQUERY":4,"eof":5,"RECURSIVA_QUERY":6,"OPCIONES_QUERY":7,"ETIQUETAS_QUERY":8,"ESTRUCTURA_FUNCION":9,"ESTRUCTURA_LLAMADA_FUNCION":10,"identificador":11,"dos_puntos":12,"parentesis_abierto":13,"OPCIONES_PARAMETRO":14,"parentesis_cerrado":15,"ESTRUCTURAS_PARAMETROS_LLAMADA":16,"coma":17,"ESTRUCTURA_PARAMETROS_LLAMADA":18,"EXPRESION_RELACIONAL_QUERY":19,"AUX_ESTRUCTURA_FUNCION":20,"CUERPO_FUNCION":21,"punto_coma":22,"declare":23,"function":24,"IDENTIFICADOR_FUNCION":25,"ESTRUCTURA_PARAMETROS":26,"OPCION_TIPO_RETORNO":27,"as":28,"TIPOS_QUERY":29,"OPCION_INTERROGACION":30,"interrogacion":31,"PARAMETROS_FUNCION":32,"llave_abierta":33,"OPCIONES_BLOQUE":34,"llave_cerrada":35,"DECLARACION_VARIABLE":36,"return":37,"OPCIONES_RETURN":38,"ESTRUCTURA_IF":39,"VARIABLE":40,"let":41,"identificadorXquery":42,"igual":43,"OPCIONES_LET":44,"TO":45,"PARAMETRO_FUNCION":46,"string_tipo":47,"int":48,"double_tipo":49,"boolean":50,"menor":51,"ID_ETIQUETA":52,"ATRIBUTOS_ETIQUETA":53,"mayor":54,"DENTRO_ETIQUETA_QUERY":55,"diagonal":56,"ESTRUCTURA_FOR":57,"for":58,"RECURSIVA_FOR":59,"FOR":60,"OPCION_AT":61,"in":62,"OPCIONES_FOR":63,"ESTRUCTURA_WHERE":64,"ESTRUCTURA_ORDER_BY":65,"ESTRUCTURA_RETURN":66,"at":67,"CONSULTAS_XPATH":68,"digito":69,"to":70,"if":71,"ESTRUCTURA_CONDICION":72,"then":73,"OPCIONES_ELSE":74,"else":75,"where":76,"FILTROS_QUERY":77,"and":78,"or":79,"RUTAS_QUERY":80,"DIAGONALES":81,"RUTA_WHERE":82,"menor_igual":83,"mayor_igual":84,"diferente":85,"eq":86,"ne":87,"lt":88,"le":89,"gt":90,"ge":91,"multiplicacion":92,"division":93,"suma":94,"resta":95,"mod":96,"negado":97,"TIPOS_EXPRESION":98,"decimal":99,"string":100,"ATRIBUTO":101,"PUNTOS":102,"NODE":103,"TEXT":104,"order":105,"by":106,"OPCIONES_ORDER_BY":107,"OPCION_ORDER_BY":108,"OPCIONES_ETIQUETA":109,"data":110,"OPCION_RUTA_QUERY":111,"DENTRO_ETIQUETA":112,"EJES":113,"node":114,"text":115,"last":116,"position":117,"div":118,"ATRIBUTO_ETIQUETA":119,"TIPO_ATRIBUTO":120,"comillas":121,"OPCION_ETIQUETA":122,"CONSULTA_XPATH":123,"corchete_abierto":124,"corchete_cerrado":125,"RELATIVA":126,"EXPRESIONES_RUTA":127,"EXPRESION_RUTA":128,"operador_o":129,"ACCESORES":130,"OPCIONAL_PREDICADO":131,"punto":132,"ID":133,"arroba":134,"EJE":135,"ACCESORES_EJE":136,"ancestor":137,"or-self":138,"attribute":139,"child":140,"descendant":141,"following":142,"sibling":143,"parent":144,"preceding":145,"self":146,"PREDICADOS":147,"PREDICADO":148,"FILTRO":149,"EXPR":150,"TIPOS":151,"$accept":0,"$end":1},
terminals_: {2:"error",5:"eof",11:"identificador",12:"dos_puntos",13:"parentesis_abierto",15:"parentesis_cerrado",17:"coma",22:"punto_coma",23:"declare",24:"function",28:"as",31:"interrogacion",33:"llave_abierta",35:"llave_cerrada",37:"return",41:"let",42:"identificadorXquery",43:"igual",47:"string_tipo",48:"int",49:"double_tipo",50:"boolean",51:"menor",54:"mayor",56:"diagonal",58:"for",62:"in",67:"at",69:"digito",70:"to",71:"if",73:"then",75:"else",76:"where",78:"and",79:"or",83:"menor_igual",84:"mayor_igual",85:"diferente",86:"eq",87:"ne",88:"lt",89:"le",90:"gt",91:"ge",92:"multiplicacion",93:"division",94:"suma",95:"resta",96:"mod",97:"negado",99:"decimal",100:"string",105:"order",106:"by",110:"data",114:"node",115:"text",116:"last",117:"position",118:"div",121:"comillas",124:"corchete_abierto",125:"corchete_cerrado",129:"operador_o",132:"punto",134:"arroba",137:"ancestor",138:"or-self",139:"attribute",140:"child",141:"descendant",142:"following",143:"sibling",144:"parent",145:"preceding",146:"self"},
productions_: [0,[3,2],[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[7,1],[10,6],[14,1],[14,0],[16,3],[16,1],[18,1],[9,3],[20,7],[25,1],[27,5],[27,0],[30,0],[30,1],[26,3],[21,3],[34,0],[34,1],[34,3],[34,1],[36,2],[36,1],[40,5],[44,1],[44,1],[32,3],[32,1],[32,0],[46,6],[29,1],[29,1],[29,1],[29,1],[8,9],[55,2],[55,1],[55,3],[55,1],[57,2],[59,1],[59,2],[60,6],[61,1],[61,3],[63,1],[63,1],[63,5],[45,5],[39,5],[74,2],[74,3],[72,3],[64,2],[64,0],[77,3],[77,3],[80,3],[80,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,2],[19,3],[19,1],[98,1],[98,1],[98,1],[98,1],[98,1],[82,1],[82,1],[82,1],[82,1],[82,1],[65,3],[65,0],[107,1],[107,3],[108,2],[108,1],[66,1],[66,0],[38,1],[38,5],[38,1],[38,1],[38,2],[109,8],[109,9],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[53,2],[53,0],[119,3],[120,1],[120,3],[112,1],[112,2],[112,2],[112,1],[122,1],[122,3],[122,7],[122,3],[111,1],[111,0],[68,1],[68,3],[68,3],[123,1],[123,1],[123,2],[127,2],[127,1],[127,2],[128,3],[128,2],[126,0],[126,2],[81,2],[81,1],[102,1],[102,2],[130,2],[130,2],[130,2],[130,1],[130,1],[130,1],[104,3],[103,3],[101,2],[101,2],[133,1],[133,1],[135,4],[136,1],[136,1],[136,1],[136,1],[113,1],[113,2],[113,1],[113,1],[113,2],[113,1],[113,1],[113,2],[113,1],[113,1],[113,2],[113,1],[131,0],[131,1],[147,2],[147,1],[147,3],[148,3],[149,3],[149,3],[149,3],[149,3],[149,3],[149,3],[149,3],[149,3],[149,2],[149,1],[150,3],[150,3],[150,3],[150,3],[150,3],[150,3],[150,1],[150,3],[151,1],[151,1],[151,1],[151,1],[151,1],[151,3],[151,3],[151,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log('\nexito al analizar\n',$$[$0-1].instrucciones);
        return $$[$0-1].instrucciones;
    
break;
case 2:

        console.log("Error sintatciti error eof "+$$[$0-1]);
        //erroresXpath.agregarError("Sintactico","//errores seguidos"+yytext,this._//$.first_line,this._//$.first_column);
        return [];
    
break;
case 3: case 10: case 31: case 32:
this.$ = $$[$0];
break;
case 4:
$$[$0-1].instrucciones.push($$[$0].instrucciones);this.$ = {instrucciones:$$[$0-1]};
break;
case 5:
this.$ = {instrucciones:[$$[$0].instrucciones]};
break;
case 7:
this.$ = {instrucciones:$$[$0].instrucciones}
break;
case 8:
this.$ = {instrucciones:$$[$0].expresion}
break;
case 9:

            this.$ = {expresion:ValidacionExpresion.validaarFuncion(funciones,$$[$0-3],$$[$0-1])};
        
break;
case 11:
this.$=[]
break;
case 12:
$$[$0-2].push($$[$0]);this.$ = $$[$0-2];
break;
case 13:
this.$ = [$$[$0]];
break;
case 14: case 93:
this.$ = $$[$0].expresion;
break;
case 15:

        $$[$0-2].setBloquecodigo($$[$0-1].instrucciones);
        this.$ = {instrucciones:$$[$0-2]};
    
break;
case 16:

        let funcionNew = new CrearFuncion($$[$0-2],$$[$0-1],$$[$0]);
        funciones.push(funcionNew);
        this.$ = funcionNew;
    
break;
case 17:

        ambito = $$[$0];
        this.$ = $$[$0];
    
break;
case 18:
this.$ = $$[$0-1];tipoDatoGlobal = this.$;
break;
case 19:
this.$ = null;tipoDatoGlobal = this.$;
break;
case 22: case 23:

        this.$ = $$[$0-1];
    
break;
case 25:

            this.$ = {instrucciones:[$$[$0].expresion]};
        
break;
case 26:

            $$[$0-2].push($$[$0].instrucciones);
            this.$ = {instrucciones:$$[$0-2]};
        
break;
case 27:

            this.$ = {instrucciones:[$$[$0].instrucciones]};
    
break;
case 28:
$$[$0-1].push($$[$0].instrucciones);this.$ = $$[$0-1];
break;
case 29:
this.$ = [$$[$0].instrucciones];
break;
case 30:

        let variable = new Variable(0,$$[$0-3],$$[$0].expresion,ambito);
        this.$ = {instrucciones:variable};
        if(variables.find(e => e.id == $$[$0-3])==undefined)variables.push(variable);
    
break;
case 33:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 34:

        this.$ = [$$[$0]];
    
break;
case 35:

        this.$ = [];
    
break;
case 36:

        this.$ = new Parametro($$[$0-5],$$[$0-1],ambito);
        variables.push(new Variable(0,$$[$0-5],new Expresion($$[$0-1],"0"),ambito));
    
break;
case 37:

        this.$ = TiposDatos.STRING;
    
break;
case 38:

        this.$ = TiposDatos.ENTERO;
    
break;
case 39:

        this.$ = TiposDatos.DECIMAL;
    
break;
case 40:

        this.$ = TipoDato.BOOLEAN;
    
break;
case 55:

        for(let i = $$[$0-3];i<$$[$0-1];i++){
            this.$ = i+"";
        }
        this.$ = {valor:this.$};
    
break;
case 56:

        this.$ = {instrucciones:If.validarIf($$[$0-3],$$[$0-1].expresion,$$[$0],tipoDatoGlobal)};
    
break;
case 57:
this.$ = $$[$0].instrucciones;
break;
case 58:
this.$ = null;
break;
case 59:
this.$ = $$[$0-1].expresion;
break;
case 66: case 74:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.MENOR,$$[$0].expresion)};
break;
case 67: case 75:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.MENOR_IGUAL,$$[$0].expresion)};
break;
case 68: case 76:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.MAYOR,$$[$0].expresion)};
break;
case 69: case 77:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.MAYOR_IGUAL,$$[$0].expresion)};
break;
case 70: case 72:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.IGUAL,$$[$0].expresion)};
break;
case 71: case 73:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.DIFERENTE,$$[$0].expresion)};
break;
case 78:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.MULTIPLICACION,$$[$0].expresion)};
break;
case 79:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.DIVISION,$$[$0].expresion)};
break;
case 80:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.SUMA,$$[$0].expresion)};
break;
case 81:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.RESTA,$$[$0].expresion)};
break;
case 82:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.MOD,$$[$0].expresion)};
break;
case 83:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.AND,$$[$0].expresion)};
break;
case 84:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.OR,$$[$0].expresion)};
break;
case 85:
this.$ = {expresion:ValidacionExpresion.negado($$[$0].expresion)};
break;
case 86:
this.$ = {expresion:ValidacionExpresion.umenos($$[$0].expresion)};
break;
case 87:
$$[$0-1].expresion.setValor("("+$$[$0-1].expresion.valor+")");this.$ = {expresion:$$[$0-1].expresion};
break;
case 88:
this.$ = {expresion:$$[$0]};
break;
case 89:
this.$ = new Expresion(TiposDatos.ENTERO ,$$[$0]);
break;
case 90:
this.$ = new Expresion(TiposDatos.DECIMAL ,$$[$0]);
break;
case 91:
this.$ = ValidacionExpresion.validarVariable(variables,$$[$0],ambito);
break;
case 92:
this.$ = new Expresion(TiposDatos.STRING ,$$[$0]);
break;
case 109:
this.$ = {instrucciones:$$[$0].instrucciones};
break;
case 110:
this.$ = {instrucciones:$$[$0].expresion};
break;
case 161:

        //$//$ = [//$$[$0]];
        
break;
case 162:

        //$//$ = [];
        //erroresXpath.agregarError("Sintactico","No puede venir un predicado como un nodo\n"+yytext,this._//$.first_line,this._//$.first_column);
        console.log("Error sintatciti "+$$[$0-1]);
    
break;
case 163:

        //$//$ = [];
        //erroresXpath.agregarError("Sintactico","No puede venir una expresion como un nodo\n"+yytext,this._//$.first_line,this._//$.first_column);
        console.log("Error sintatciti "+$$[$0-1]);
    
break;
case 164:

        //$//$ = [new ConsultaSimple(//$$[$0])];
        
break;
case 165: case 168:

        //$//$ = //$$[$0];
        
break;
case 166:

        //$//$= [];
        //if (//$$[$0-1] === "punto") {
            //$//$.push(new ConsultaPunto());
        //}
        //$$[$0].forEach(e => //$//$.push(e));
    
break;
case 167:

        ////$$[$0].forEach(e => //$$[$0-1].push(e)); //$//$ = //$$[$0-1];
        
break;
case 169:

        console.log("Error sintatciti "+$$[$0-1]);
        //$//$ = [];
        //erroresXpath.agregarError("Sintactico","Consulta no aceptada:\n"+yytext,this._//$.first_line,this._//$.first_column);
    
break;
case 170:

            //$//$ = [];
            //if (!(//$$[$0-2] === "")) {
                //$//$.push(new ConsultaSimple(//$$[$0-2]));
            //}
            //$//$.push(FabricaConsulta.fabricar(//$$[$0-1], //$$[$0].id, //$$[$0].eje));
    
break;
case 171:

        console.log("Error sintatciti "+$$[$0-1]);
        //erroresXpath.agregarError("Sintactico",yytext,this._//$.first_line,this._//$.first_column);
        //$//$ = [];
    
break;
case 172:

        //$//$ = "";
    
break;
case 173: case 178:

        //$//$ = //$$[$0-1];
    
break;
case 174:

        //$//$ = "doble";
    
break;
case 175:

        //$//$ = "simple";
    
break;
case 176:

        //$//$ = "punto";
    
break;
case 177:

        //$//$ = "puntos";
    
break;
case 179: case 180:

        //$//$ = {id: //$$[$0-1], eje: ""};
    
break;
case 181: case 182: case 183: case 188:

        //$//$ = {id: //$$[$0], eje: ""};
    
break;
case 184: case 185:

        //$//$ = //$$[$0-2] + "()";
    
break;
case 186: case 187:

        //$//$ = //$$[$0-1] + //$$[$0];
    
break;
case 189: case 191: case 192: case 193: case 194: case 195: case 197: case 198: case 200: case 201: case 203: case 204: case 206:

        //$//$ = //$$[$0];
    
break;
case 190:

        //$//$ = {id: //$$[$0], eje: //$$[$0-3]}
        
break;
case 196: case 199: case 202: case 205:

        //$//$ = //$$[$0-1]+//$$[$0];
    
break;
case 211:

        console.log("Error sintatciti "+$$[$0-1]);
        //erroresXpath.agregarError("Sintactico","Error en predicado\n"+yytext,this._//$.first_line,this._//$.first_column);
    
break;
case 230:

        console.log("Error sintatciti "+$$[$0-1]);
        //erroresXpath.agregarError("Sintactico","Error dentro expresion\n"+yytext,this._//$.first_line,this._//$.first_column);
    
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:5,8:6,9:7,10:8,11:$V0,20:10,23:$V1,51:$V2},{1:[3]},{5:[1,13]},{5:[1,14]},{5:[2,3],7:15,8:6,9:7,10:8,11:$V0,20:10,23:$V1,51:$V2},o($V3,[2,5]),o($V3,[2,6]),o($V3,[2,7]),o($V3,[2,8]),{11:$V4,23:$V5,24:$V6,28:$V7,29:18,37:$V8,41:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,52:16,58:$Ve,62:$Vf,67:$Vg,70:$Vh,71:$Vi,73:$Vj,75:$Vk,76:$Vl,78:$Vm,79:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,96:$Vu,105:$Vv,106:$Vw,113:17,114:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,144:$VH,145:$VI,146:$VJ},{21:61,33:[1,62]},{12:[1,63]},{24:[1,64]},{1:[2,1]},{1:[2,2]},o($V3,[2,4]),o($VK,$VL,{53:65}),o($VK,[2,114]),o($VK,[2,115]),o($VK,[2,116]),o($VK,[2,117]),o($VK,[2,118]),o($VK,[2,119]),o($VK,[2,120]),o($VK,[2,121]),o($VK,[2,122]),o($VK,[2,123]),o($VK,[2,124]),o($VK,[2,125]),o($VK,[2,126]),o($VK,[2,127]),o($VK,[2,128]),o($VK,[2,129]),o($VK,[2,130]),o($VK,[2,131]),o($VK,[2,132]),o($VK,[2,133]),o($VK,[2,134]),o($VK,[2,135]),o($VK,[2,136]),o($VK,[2,137]),o($VK,[2,138]),o($VK,[2,139]),o($VK,[2,140]),o($VK,[2,141]),o($VK,[2,142]),o($VK,[2,143]),o($VK,[2,144]),o($VK,[2,145]),o($VM,[2,195],{138:[1,66]}),o($VM,[2,197]),o($VM,[2,198]),o($VM,[2,200],{138:[1,67]}),o($VM,[2,201],{143:[1,68]}),o($VM,[2,203]),o($VM,[2,204],{143:[1,69]}),o($VM,[2,206]),o($VN,[2,37]),o($VN,[2,38]),o($VN,[2,39]),o($VN,[2,40]),{22:[1,70]},{10:85,11:$V0,13:$VO,19:72,34:71,35:[2,24],36:73,39:74,40:79,41:$VP,42:$VQ,69:$VR,71:$VS,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{11:[1,87]},{11:[1,88]},{11:$VX,54:[1,89],119:90},o($VM,[2,196]),o($VM,[2,199]),o($VM,[2,202]),o($VM,[2,205]),o($V3,[2,15]),{35:[1,92]},{35:[2,25],43:$VY,51:$VZ,54:$V_,78:$V$,79:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1},{37:[1,112],40:113,41:$VP},{35:[2,27]},{10:85,11:$V0,13:$VO,19:114,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:115,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:116,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},o($Vf1,[2,88]),o($Vg1,[2,29]),{13:[1,118],72:117},o($Vf1,$Vh1),o($Vf1,[2,90]),o($Vf1,$Vi1),o($Vf1,[2,92]),o($Vf1,[2,93]),{42:[1,119]},{13:[1,120]},{12:[1,121]},{8:123,11:[1,125],33:[1,124],51:$V2,55:122},o($VK,[2,146]),{43:[1,126]},{22:[2,23]},{10:85,11:$V0,13:$VO,19:127,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:128,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:129,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:130,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:131,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:132,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:133,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:134,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:135,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:136,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:137,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:138,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:139,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:140,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:141,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:142,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:143,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:144,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:145,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{10:85,11:$V0,13:$VO,19:150,38:146,39:149,42:$Vj1,51:$Vk1,69:$VR,71:$VS,95:$VT,97:$VU,98:78,99:$VV,100:$VW,109:147,110:$Vl1},o($Vg1,[2,28]),o($Vf1,[2,85]),o($Vf1,[2,86]),{15:[1,153],43:$VY,51:$VZ,54:$V_,78:$V$,79:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1},{73:[1,154]},{10:85,11:$V0,13:$VO,19:155,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{12:[1,156]},{10:85,11:$V0,13:$VO,14:157,15:[2,11],16:158,18:159,19:160,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{11:[1,162],25:161},{8:164,51:[1,163]},{51:[2,43]},{57:165,58:[1,166]},{51:[2,45]},{100:[1,168],120:167,121:[1,169]},o($Vm1,[2,66],{92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1}),o($Vm1,[2,67],{92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1}),o($Vm1,[2,68],{92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1}),o($Vm1,[2,69],{92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1}),o($Vm1,[2,70],{92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1}),o($Vm1,[2,71],{92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1}),o($Vm1,[2,72],{92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1}),o($Vm1,[2,73],{92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1}),o($Vm1,[2,74],{92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1}),o($Vm1,[2,75],{92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1}),o($Vm1,[2,76],{92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1}),o($Vm1,[2,77],{92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1}),o($Vf1,[2,78]),o($Vf1,[2,79]),o($Vn1,[2,80],{92:$Va1,93:$Vb1,96:$Ve1}),o($Vn1,[2,81],{92:$Va1,93:$Vb1,96:$Ve1}),o($Vf1,[2,82]),o($Vo1,[2,83],{43:$VY,51:$VZ,54:$V_,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1}),o($Vo1,[2,84],{43:$VY,51:$VZ,54:$V_,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1}),{35:[2,26]},{35:[2,107]},{13:[1,170]},{35:[2,109]},{35:[2,110],43:$VY,51:$VZ,54:$V_,78:$V$,79:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1},o([35,43,51,54,78,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96],$Vi1,{80:171,81:172,56:$Vp1}),{11:$V4,23:$V5,24:$V6,28:$V7,29:18,37:$V8,41:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,52:174,58:$Ve,62:$Vf,67:$Vg,70:$Vh,71:$Vi,73:$Vj,75:$Vk,76:$Vl,78:$Vm,79:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,96:$Vu,105:$Vv,106:$Vw,113:17,114:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,144:$VH,145:$VI,146:$VJ},o($Vf1,[2,87]),{10:85,11:$V0,13:$VO,19:175,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{15:[1,176],43:$VY,51:$VZ,54:$V_,78:$V$,79:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1},{43:[1,177]},{15:[1,178]},{15:[2,10],17:[1,179]},o($Vq1,[2,13]),o($Vq1,[2,14],{43:$VY,51:$VZ,54:$V_,78:$V$,79:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1}),{13:[1,181],26:180},{13:[2,17]},{11:$V4,23:$V5,24:$V6,28:$V7,29:18,37:$V8,41:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,52:16,56:[1,182],58:$Ve,62:$Vf,67:$Vg,70:$Vh,71:$Vi,73:$Vj,75:$Vk,76:$Vl,78:$Vm,79:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,96:$Vu,105:$Vv,106:$Vw,113:17,114:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,144:$VH,145:$VI,146:$VJ},{51:[2,42]},{35:[1,183]},{42:$Vr1,59:184,60:185,61:186},o($VK,[2,148]),o($VK,[2,149]),{11:$Vs1,33:$Vt1,122:188},{42:[1,191]},{35:[2,111],56:$Vp1,81:192},{11:$Vu1,82:193,101:195,102:196,103:197,104:198,114:$Vv1,115:$Vw1,132:$Vx1,134:$Vy1},o($Vz1,[2,175],{56:[1,203]}),o($VK,$VL,{53:204}),{43:$VY,51:$VZ,54:$V_,74:205,75:[1,206],78:$V$,79:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1},{73:[2,59]},{10:85,11:$V0,13:[1,210],19:208,42:$VQ,44:207,45:209,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},o([5,11,15,17,23,35,37,41,43,51,54,75,78,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96],[2,9]),{10:85,11:$V0,13:$VO,18:211,19:160,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},{27:212,28:[1,213],33:[2,19]},o($Vq1,[2,35],{32:214,46:215,42:$VA1}),{11:$V4,23:$V5,24:$V6,28:$V7,29:18,37:$V8,41:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,52:217,58:$Ve,62:$Vf,67:$Vg,70:$Vh,71:$Vi,73:$Vj,75:$Vk,76:$Vl,78:$Vm,79:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,96:$Vu,105:$Vv,106:$Vw,113:17,114:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,144:$VH,145:$VI,146:$VJ},{51:[2,44]},{35:[2,46],42:$Vr1,60:218,61:186},o($VB1,[2,47]),{62:[1,219]},{62:[2,50],67:[1,220]},{121:[1,221]},o($VC1,[2,155]),{10:224,11:$V0,42:[1,222],110:[1,223]},{15:$VD1,56:$Vp1,80:226,81:172,111:225},{11:$Vu1,82:227,101:195,102:196,103:197,104:198,114:$Vv1,115:$Vw1,132:$Vx1,134:$Vy1},o($VE1,[2,65]),o($VE1,[2,94]),o($VE1,[2,95]),o($VE1,[2,96]),o($VE1,[2,97]),o($VE1,[2,98]),{11:[1,228],92:[1,229]},o($VF1,[2,176],{132:[1,230]}),{13:[1,231]},{13:[1,232]},o($Vz1,[2,174]),{11:$VX,54:[1,233],119:90},{35:[2,56]},{10:85,11:$V0,13:[1,235],19:150,38:234,39:149,42:$Vj1,51:$Vk1,69:$VR,71:$VS,95:$VT,97:$VU,98:78,99:$VV,100:$VW,109:147,110:$Vl1},o($Vg1,[2,30]),o($Vg1,[2,31],{43:$VY,51:$VZ,54:$V_,78:$V$,79:$V01,83:$V11,84:$V21,85:$V31,86:$V41,87:$V51,88:$V61,89:$V71,90:$V81,91:$V91,92:$Va1,93:$Vb1,94:$Vc1,95:$Vd1,96:$Ve1}),o($Vg1,[2,32]),{10:85,11:$V0,13:$VO,19:116,42:$VQ,69:[1,236],95:$VT,97:$VU,98:78,99:$VV,100:$VW},o($Vq1,[2,12]),{33:[2,16]},{11:[1,237]},{15:[1,238],17:[1,239]},o($Vq1,[2,34]),{28:[1,240]},{54:[1,241]},o($VB1,[2,48]),o([35,37,42,56,76,105],$VG1,{63:242,68:243,45:244,123:246,126:248,127:249,102:250,128:252,2:$VH1,11:$VI1,13:[1,245],124:[1,247],132:$Vx1}),{42:[1,254]},o($VK,[2,150]),{35:[1,255]},{13:[1,256]},{35:[1,257]},{15:[1,258]},{15:[2,159],56:$Vp1,81:192},o($VE1,[2,64]),o($VF1,[2,186]),o($VF1,[2,187]),o($VF1,[2,177]),{15:[1,259]},{15:[1,260]},{11:$Vs1,33:$Vt1,51:[1,261],109:264,112:262,122:263},{35:[2,57]},{10:85,11:$V0,13:$VO,15:[1,265],19:116,42:$VQ,69:$VR,95:$VT,97:$VU,98:78,99:$VV,100:$VW},o([15,43,51,54,78,79,83,84,85,86,87,88,89,90,91,92,93,94,95,96],$Vh1,{70:$VJ1}),{12:[1,267]},o([28,33],[2,22]),{42:$VA1,46:268},{11:[1,269]},o($V3,[2,41]),o($VK1,[2,61],{64:270,76:[1,271]}),o($VL1,[2,52]),o($VL1,[2,53]),{2:[1,273],69:[1,272]},o($VL1,[2,161]),{2:[1,274]},o($VM1,[2,164],{81:275,56:$Vp1}),o($VM1,[2,165],{128:276,126:277,2:$VN1,11:$VI1,56:$VG1}),{2:$VH1,11:$VI1,56:$VG1,126:277,127:279,128:252},o($VO1,$VP1,{131:280,147:281,148:282,124:$VQ1}),o($VR1,[2,168]),{11:$VS1,129:$VT1},{62:[2,51]},o($VC1,[2,156]),{42:[1,286]},o($VC1,[2,158]),{35:[2,108]},o($VF1,[2,185]),o($VF1,[2,184]),{11:$V4,23:$V5,24:$V6,28:$V7,29:18,37:$V8,41:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,52:174,56:[1,287],58:$Ve,62:$Vf,67:$Vg,70:$Vh,71:$Vi,73:$Vj,75:$Vk,76:$Vl,78:$Vm,79:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,96:$Vu,105:$Vv,106:$Vw,113:17,114:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,144:$VH,145:$VI,146:$VJ},{11:$Vs1,33:$Vt1,51:[1,288],109:290,122:289},o($VU1,[2,151]),o($VU1,[2,154]),{35:[2,58]},{69:[1,291]},{29:292,47:$Va,48:$Vb,49:$Vc,50:$Vd},o($Vq1,[2,33]),{12:[1,293]},o($VV1,[2,100],{65:294,105:[1,295]}),{77:296},{17:[1,297],70:$VJ1},{15:[1,298]},{125:[1,299]},{11:[1,307],92:[1,304],101:302,102:303,103:305,104:306,113:309,114:$Vv1,115:$Vw1,130:300,132:$Vx1,133:301,134:$Vy1,135:308,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,144:$VH,145:$VI,146:$VJ},o($VR1,[2,167]),{56:$Vp1,81:275},{11:$VS1},o($VM1,[2,166],{128:276,126:277,2:$VN1,11:$VI1,56:$VG1}),o($VO1,[2,173]),o($VR1,[2,208],{148:310,124:[1,311]}),o($VW1,[2,210]),o($VX1,$VG1,{126:248,127:249,128:252,113:309,149:313,150:314,135:315,151:317,101:320,102:321,123:322,104:325,2:[1,312],11:$VI1,13:$VY1,69:$VZ1,100:$V_1,115:$Vw1,116:$V$1,117:$V02,132:$Vx1,134:$Vy1,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,144:$VH,145:$VI,146:$VJ}),o($VR1,[2,169]),o($VR1,[2,171]),{15:$VD1,56:$Vp1,80:226,81:172,111:326},{11:$V4,23:$V5,24:$V6,28:$V7,29:18,37:$V8,41:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,52:327,58:$Ve,62:$Vf,67:$Vg,70:$Vh,71:$Vi,73:$Vj,75:$Vk,76:$Vl,78:$Vm,79:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,96:$Vu,105:$Vv,106:$Vw,113:17,114:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,144:$VH,145:$VI,146:$VJ},{11:$V4,23:$V5,24:$V6,28:$V7,29:18,37:$V8,41:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,52:174,56:[1,328],58:$Ve,62:$Vf,67:$Vg,70:$Vh,71:$Vi,73:$Vj,75:$Vk,76:$Vl,78:$Vm,79:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,96:$Vu,105:$Vv,106:$Vw,113:17,114:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,144:$VH,145:$VI,146:$VJ},o($VU1,[2,152]),o($VU1,[2,153]),{15:[1,329]},{30:330,31:$V12,33:$V22},{29:332,47:$Va,48:$Vb,49:$Vc,50:$Vd},o($VB1,[2,106],{66:333,37:[1,334]}),{106:[1,335]},o($VK1,[2,60],{78:[1,336],79:[1,337]}),{69:[1,338]},o($VL1,[2,163]),o($VL1,[2,162]),o($VR1,[2,170]),o($VR1,$VP1,{147:281,148:282,131:339,124:$VQ1}),o($VR1,$VP1,{147:281,148:282,131:340,124:$VQ1}),o($VR1,$VP1,{147:281,148:282,131:341,124:$VQ1}),o($VR1,[2,181]),o($VR1,[2,182]),o($VR1,[2,183]),o($VW1,[2,188]),o($VW1,[2,189]),{12:[1,342]},o($VW1,[2,209]),o($VX1,$VG1,{126:248,127:249,128:252,113:309,149:313,150:314,135:315,151:317,101:320,102:321,123:322,104:325,2:$VH1,11:$VI1,13:$VY1,69:$VZ1,100:$V_1,115:$Vw1,116:$V$1,117:$V02,132:$Vx1,134:$Vy1,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,144:$VH,145:$VI,146:$VJ}),{11:$VS1,125:[1,343],129:$VT1},{78:[1,345],79:[1,346],125:[1,344]},o($V32,[2,222],{43:[1,347],51:[1,350],54:[1,349],83:[1,352],84:[1,351],85:[1,348],92:$V42,93:$V52,94:$V62,95:$V72,96:$V82}),o($V32,$VP1,{147:281,148:282,131:358,124:$VQ1}),o([15,56,92,93,94,95,96],$VG1,{126:248,127:249,128:252,151:317,101:320,102:321,123:322,104:325,150:359,2:[1,360],11:$VI1,13:$VY1,69:$VZ1,100:$V_1,115:$Vw1,116:$V$1,117:$V02,132:$Vx1,134:$Vy1}),o($V92,[2,229]),o($V92,[2,231]),o($V92,[2,232]),o($V92,[2,233]),o($V92,[2,234],{128:252,126:277,127:279,2:$VH1,11:$VI1,56:$VG1}),o($V92,[2,235]),{13:[1,361]},{13:[1,362]},o($V92,[2,238]),{15:[1,363]},{54:[1,364]},{11:$V4,23:$V5,24:$V6,28:$V7,29:18,37:$V8,41:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,52:365,58:$Ve,62:$Vf,67:$Vg,70:$Vh,71:$Vi,73:$Vj,75:$Vk,76:$Vl,78:$Vm,79:$Vn,86:$Vo,87:$Vp,88:$Vq,89:$Vr,90:$Vs,91:$Vt,96:$Vu,105:$Vv,106:$Vw,113:17,114:$Vx,115:$Vy,116:$Vz,117:$VA,118:$VB,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,144:$VH,145:$VI,146:$VJ},o([35,37,41,42,76,105],[2,55]),{33:[2,18]},o([15,17,33],[2,21]),o($Vq1,$V22,{30:366,31:$V12}),o($VB1,[2,49]),o($VB1,[2,105]),{42:$Va2,107:367,108:368},{77:370},{77:371},{15:[1,372]},o($VR1,[2,178]),o($VR1,[2,179]),o($VR1,[2,180]),{12:[1,373]},o($VW1,[2,211]),o($VW1,[2,212]),o($VX1,$VG1,{126:248,127:249,128:252,113:309,150:314,135:315,151:317,101:320,102:321,123:322,104:325,149:374,2:$VH1,11:$VI1,13:$VY1,69:$VZ1,100:$V_1,115:$Vw1,116:$V$1,117:$V02,132:$Vx1,134:$Vy1,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,144:$VH,145:$VI,146:$VJ}),o($VX1,$VG1,{126:248,127:249,128:252,113:309,150:314,135:315,151:317,101:320,102:321,123:322,104:325,149:375,2:$VH1,11:$VI1,13:$VY1,69:$VZ1,100:$V_1,115:$Vw1,116:$V$1,117:$V02,132:$Vx1,134:$Vy1,137:$VC,139:$VD,140:$VE,141:$VF,142:$VG,144:$VH,145:$VI,146:$VJ}),o($Vb2,$VG1,{126:248,127:249,128:252,151:317,101:320,102:321,123:322,104:325,150:376,2:$VH1,11:$VI1,13:$VY1,69:$VZ1,100:$V_1,115:$Vw1,116:$V$1,117:$V02,132:$Vx1,134:$Vy1}),o($Vb2,$VG1,{126:248,127:249,128:252,151:317,101:320,102:321,123:322,104:325,150:377,2:$VH1,11:$VI1,13:$VY1,69:$VZ1,100:$V_1,115:$Vw1,116:$V$1,117:$V02,132:$Vx1,134:$Vy1}),o($Vb2,$VG1,{126:248,127:249,128:252,151:317,101:320,102:321,123:322,104:325,150:378,2:$VH1,11:$VI1,13:$VY1,69:$VZ1,100:$V_1,115:$Vw1,116:$V$1,117:$V02,132:$Vx1,134:$Vy1}),o($Vb2,$VG1,{126:248,127:249,128:252,151:317,101:320,102:321,123:322,104:325,150:379,2:$VH1,11:$VI1,13:$VY1,69:$VZ1,100:$V_1,115:$Vw1,116:$V$1,117:$V02,132:$Vx1,134:$Vy1}),o($Vb2,$VG1,{126:248,127:249,128:252,151:317,101:320,102:321,123:322,104:325,150:380,2:$VH1,11:$VI1,13:$VY1,69:$VZ1,100:$V_1,115:$Vw1,116:$V$1,117:$V02,132:$Vx1,134:$Vy1}),o($Vb2,$VG1,{126:248,127:249,128:252,151:317,101:320,102:321,123:322,104:325,150:381,2:$VH1,11:$VI1,13:$VY1,69:$VZ1,100:$V_1,115:$Vw1,116:$V$1,117:$V02,132:$Vx1,134:$Vy1}),o($Vc2,$VG1,{126:248,127:249,128:252,151:317,101:320,102:321,123:322,104:325,150:382,2:$VH1,11:$VI1,13:$VY1,69:$VZ1,100:$V_1,115:$Vw1,116:$V$1,117:$V02,132:$Vx1,134:$Vy1}),o($Vc2,$VG1,{126:248,127:249,128:252,151:317,101:320,102:321,123:322,104:325,150:383,2:$VH1,11:$VI1,13:$VY1,69:$VZ1,100:$V_1,115:$Vw1,116:$V$1,117:$V02,132:$Vx1,134:$Vy1}),o($Vc2,$VG1,{126:248,127:249,128:252,151:317,101:320,102:321,123:322,104:325,150:384,2:$VH1,11:$VI1,13:$VY1,69:$VZ1,100:$V_1,115:$Vw1,116:$V$1,117:$V02,132:$Vx1,134:$Vy1}),o($Vc2,$VG1,{126:248,127:249,128:252,151:317,101:320,102:321,123:322,104:325,150:385,2:$VH1,11:$VI1,13:$VY1,69:$VZ1,100:$V_1,115:$Vw1,116:$V$1,117:$V02,132:$Vx1,134:$Vy1}),o($Vc2,$VG1,{126:248,127:249,128:252,151:317,101:320,102:321,123:322,104:325,150:386,2:$VH1,11:$VI1,13:$VY1,69:$VZ1,100:$V_1,115:$Vw1,116:$V$1,117:$V02,132:$Vx1,134:$Vy1}),o($V32,[2,221]),{15:[1,387],92:$V42,93:$V52,94:$V62,95:$V72,96:$V82},{11:$VS1,15:[1,388],129:$VT1},{15:[1,389]},{15:[1,390]},{35:[1,391]},o($Vd2,[2,112]),{54:[1,392]},o($Vq1,[2,36]),o($VV1,[2,99],{17:[1,393]}),o($Ve2,[2,101]),o($Ve2,[2,104],{81:172,80:394,56:$Vp1}),o($Vf2,[2,62]),o($Vf2,[2,63]),o($VL1,[2,54]),{11:[1,396],92:[1,399],103:397,104:398,114:$Vv1,115:$Vw1,136:395},o($V32,[2,219]),o($V32,[2,220]),o($V32,[2,213],{92:$V42,93:$V52,94:$V62,95:$V72,96:$V82}),o($V32,[2,214],{92:$V42,93:$V52,94:$V62,95:$V72,96:$V82}),o($V32,[2,215],{92:$V42,93:$V52,94:$V62,95:$V72,96:$V82}),o($V32,[2,216],{92:$V42,93:$V52,94:$V62,95:$V72,96:$V82}),o($V32,[2,217],{92:$V42,93:$V52,94:$V62,95:$V72,96:$V82}),o($V32,[2,218],{92:$V42,93:$V52,94:$V62,95:$V72,96:$V82}),o($Vg2,[2,223],{92:$V42,93:$V52,96:$V82}),o($Vg2,[2,224],{92:$V42,93:$V52,96:$V82}),o($V92,[2,225]),o($V92,[2,226]),o($V92,[2,227]),o($V92,[2,228]),o($V92,[2,230]),o($V92,[2,236]),o($V92,[2,237]),o($VC1,[2,157]),o($Vd2,[2,113]),{42:$Va2,108:400},o($Ve2,[2,103],{81:192,56:$Vp1}),o($VW1,[2,190]),o($VW1,[2,191]),o($VW1,[2,192]),o($VW1,[2,193]),o($VW1,[2,194]),o($Ve2,[2,102])],
defaultActions: {13:[2,1],14:[2,2],74:[2,27],92:[2,23],123:[2,43],125:[2,45],146:[2,26],147:[2,107],149:[2,109],162:[2,17],164:[2,42],176:[2,59],183:[2,44],205:[2,56],212:[2,16],234:[2,57],254:[2,51],258:[2,108],265:[2,58],330:[2,18]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

//metodos o atributos
let variables = [];
let funciones = [];
let ambito;
let tipoDatoGlobal;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
    //console.log("Comentario xquery");

break;
case 1:/*espacio en blanco*/
break;
case 2:
    //console.log('Detecto for');
    return 58;

break;
case 3:
    //console.log('Detecto in');
    return 62;

break;
case 4:
    //console.log('Detecto at');
    return 67;

break;
case 5:
    //console.log('Detecto to');
    return 70;

break;
case 6:
    //console.log('Detecto let');
    return 41;

break;
case 7:
    //console.log('Detecto if');
    return 71;

break;
case 8:
    //console.log('Detecto then');
    return 73;

break;
case 9:
    //console.log('Detecto else');
    return 75;

break;
case 10:
    //console.log('Detecto declare');
    return 23;

break;
case 11:
    //console.log('Detecto function');
    return 24;

break;
case 12:
    //console.log('Detecto as');
    return 28;

break;
case 13:
    //console.log('Detecto double_tipo');
    return 49;

break;
case 14:
    //console.log('Detecto int');
    return 48;

break;
case 15:
    //console.log('Detecto string_tipo');
    return 47;

break;
case 16:
    //console.log('Detecto boolean');
    return 50;

break;
case 17:
    //console.log('Detecto data');
    return 110;

break;
case 18:
    //console.log('Detecto where');
    return 76;

break;
case 19:
    //console.log('Detecto order');
    return 105;

break;
case 20:
    //console.log('Detecto by');
    return 106;

break;
case 21:
    //console.log('Detecto return');
    return 37;

break;
case 22:
    //console.log('Detecto eq');
    return 86;

break;
case 23:
    //console.log('Detecto ne');
    return 87;

break;
case 24:
    //console.log('Detecto lt');
    return 88;

break;
case 25:
    //console.log('Detecto le');
    return 89;

break;
case 26:
    //console.log('Detecto gt');
    return 90;

break;
case 27:
    //console.log('Detecto ge');
    return 91;

break;
case 28:
    ////console.log('Detecto diagonal');
     return 56;

break;
case 29:
    ////console.log('Detecto decimal');
     return 99;
    
break;
case 30:
    ////console.log('Detecto punto');
     return 132;

break;
case 31:
    ////console.log('Detecto coma');
     return 17;

break;
case 32:
    ////console.log('Detecto arroba');
     return 134;

break;
case 33:
    ////console.log('Detecto node');
     return 114;

break;
case 34:
    ////console.log('Detecto text');
     return 115;

break;
case 35:
    ////console.log('Detecto last');
     return 116;

break;
case 36:
    ////console.log('Detecto position');
     return 117;

break;
case 37:
    ////console.log('Detecto ancestor');
     return 137;

break;
case 38:
    ////console.log('Detecto attribute');
     return 139;

break;
case 39:
    ////console.log('Detecto child');
     return 140;

break;
case 40:
    ////console.log('Detecto descendant');
     return 141;

break;
case 41:
    ////console.log('Detecto descendant-or-self');
     return 138;

break;
case 42:
    ////console.log('Detecto following');
     return 142;

break;
case 43:
    ////console.log('Detecto following-sibling');
     return 143;

break;
case 44:
    ////console.log('Detecto parent');
     return 144;

break;
case 45:
    ////console.log('Detecto preceding');
     return 145;

break;
case 46:
    ////console.log('Detecto self');
     return 146;

break;
case 47:
    ////console.log('Detecto operador_o');
    return 129;

break;
case 48:
    ////console.log('Detecto suma');
    return 94;

break;
case 49:
    ////console.log('Detecto resta');
    return 95;

break;
case 50:
    ////console.log('Detecto multiplicacion');
    return 92;

break;
case 51:
    ////console.log('Detecto division');
    return 93;

break;
case 52:
    ////console.log('Detecto igual');
    return 43;

break;
case 53:
    ////console.log('Detecto diferente');
    return 85;

break;
case 54:
    ////console.log('Detecto menor_igual');
    return 83;

break;
case 55:
    ////console.log('Detecto menor');
    return 51;

break;
case 56:
    ////console.log('Detecto mayor_igual');
    return 84;

break;
case 57:
    ////console.log('Detecto mayor');
    return 54;

break;
case 58:
    ////console.log('Detecto or');
    return 79;

break;
case 59:
    ////console.log('Detecto and');
    return 78;

break;
case 60:
    ////console.log('Detecto negado');
    return 97;

break;
case 61:
    // equivalente a %
    ////console.log('Detecto mod');
    return 96;

break;
case 62:
    ////console.log('Detecto llave_abierta');
     return 33;
    
break;
case 63:
    ////console.log('Detecto llave_cerrada');
     return 35;
    
break;
case 64:
    ////console.log('Detecto parentesis_abierto');
     return 13;
    
break;
case 65:
    ////console.log('Detecto parentesis_cerrado');
     return 15;
    
break;
case 66:
    ////console.log('Detecto corchete_abierto');
    return 124;
    
break;
case 67:
    ////console.log('Detecto corchete_cerrado');
     return 125;
    
break;
case 68:
    ////console.log('Detecto dos_puntos');
     return 12;
    
break;
case 69:
    ////console.log('Detecto punto_coma');
     return 22;
    
break;
case 70:
    ////console.log('Detecto interrogacion');
     return 31;
    
break;
case 71:
    ////console.log('Detecto decimal');
    return 69;

break;
case 72:
    //console.log('Detecto identificador xquery');
     return 42;
    
break;
case 73:
    ////console.log('Detecto identificador');
     return 11;
    
break;
case 74:
    //console.log('string '+yy_.yytext);
    return 100;

break;
case 75:
    //console.log('Detecto comillas');
     return 121;
    
break;
case 76:return 5;
break;
case 77:
    //agregarErrorLexico("Lexico",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column+1);
    console.log("Error leixico "+yy_.yytext);
    
break;
}
},
rules: [/^(?:\(:[^:]*:\))/,/^(?:\s+)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:at\b)/,/^(?:to\b)/,/^(?:let\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:as\b)/,/^(?:double|decimal|float\b)/,/^(?:integer\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:data\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:return\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:\/)/,/^(?:(0|[1-9][0-9]*)(\.(0|[0-9]*[1-9](0)?)))/,/^(?:\.)/,/^(?:,)/,/^(?:@)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:-or-self\b)/,/^(?:following\b)/,/^(?:-sibling\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:div\b)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:!)/,/^(?:mod\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:(0|[1-9][0-9]*))/,/^(?:\$\w+)/,/^(?:\w+)/,/^(?:("|')[^"\"{}"]*("|'))/,/^(?:("|'))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizadorXquery;
exports.Parser = analizadorXquery.Parser;
exports.parse = function () { return analizadorXquery.parse.apply(analizadorXquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}