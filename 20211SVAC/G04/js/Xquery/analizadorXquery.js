/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizadorXquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,9],$V3=[5,11,24,51],$V4=[1,48],$V5=[1,27],$V6=[1,28],$V7=[1,29],$V8=[1,33],$V9=[1,26],$Va=[1,57],$Vb=[1,58],$Vc=[1,59],$Vd=[1,60],$Ve=[1,22],$Vf=[1,23],$Vg=[1,24],$Vh=[1,25],$Vi=[1,19],$Vj=[1,20],$Vk=[1,21],$Vl=[1,30],$Vm=[1,44],$Vn=[1,46],$Vo=[1,34],$Vp=[1,35],$Vq=[1,36],$Vr=[1,37],$Vs=[1,38],$Vt=[1,39],$Vu=[1,45],$Vv=[1,31],$Vw=[1,32],$Vx=[1,40],$Vy=[1,41],$Vz=[1,42],$VA=[1,43],$VB=[1,47],$VC=[1,49],$VD=[1,50],$VE=[1,51],$VF=[1,52],$VG=[1,53],$VH=[1,54],$VI=[1,55],$VJ=[1,56],$VK=[11,54],$VL=[2,153],$VM=[11,12,54],$VN=[11,15,18,32,34,54],$VO=[1,77],$VP=[1,87],$VQ=[1,83],$VR=[1,81],$VS=[1,80],$VT=[1,76],$VU=[1,75],$VV=[1,82],$VW=[1,84],$VX=[1,92],$VY=[1,98],$VZ=[1,94],$V_=[1,96],$V$=[1,111],$V01=[1,112],$V11=[1,95],$V21=[1,97],$V31=[1,99],$V41=[1,100],$V51=[1,101],$V61=[1,102],$V71=[1,103],$V81=[1,104],$V91=[1,105],$Va1=[1,106],$Vb1=[1,107],$Vc1=[1,108],$Vd1=[1,109],$Ve1=[1,110],$Vf1=[1,118],$Vg1=[15,18,36,38,42,44,51,54,76,79,80,84,85,86,87,88,89,90,91,92,93,94,95,96,97],$Vh1=[38,42],$Vi1=[2,88],$Vj1=[2,94],$Vk1=[1,122],$Vl1=[1,155],$Vm1=[1,156],$Vn1=[1,152],$Vo1=[1,158],$Vp1=[15,18,36,38,42,44,51,54,76,79,80,84,85,86,87,88,89,90,91,92],$Vq1=[15,18,36,38,42,44,51,54,76,79,80,84,85,86,87,88,89,90,91,92,95,96],$Vr1=[15,18,36,38,42,76,79,80],$Vs1=[1,183],$Vt1=[15,18],$Vu1=[1,203],$Vv1=[1,205],$Vw1=[1,206],$Vx1=[1,210],$Vy1=[1,216],$Vz1=[1,217],$VA1=[1,218],$VB1=[1,215],$VC1=[11,93,102,121,122,140,143,145,146,147,148,150,151,152],$VD1=[5,11,15,18,24,36,38,42,44,51,54,76,79,80,84,85,86,87,88,89,90,91,92,93,94,95,96,97],$VE1=[1,237],$VF1=[36,43],$VG1=[11,34,51,128],$VH1=[2,166],$VI1=[15,18,36,38,43,56],$VJ1=[2,11,15,18,36,38,43,44,51,54,56,77,79,80,84,85,86,93,94,95,96,97,112,131,132],$VK1=[2,178],$VL1=[1,274],$VM1=[1,272],$VN1=[36,38,43,112],$VO1=[36,38,43,77,112],$VP1=[15,36,38,43,44,51,54,77,79,80,84,85,86,93,94,95,96,97,112,132],$VQ1=[1,299],$VR1=[15,36,38,43,44,51,54,56,77,79,80,84,85,86,93,94,95,96,97,112,132],$VS1=[2,213],$VT1=[1,304],$VU1=[2,11,15,36,38,43,44,51,54,56,77,79,80,84,85,86,93,94,95,96,97,112,132],$VV1=[1,306],$VW1=[1,305],$VX1=[11,34,51],$VY1=[36,38,43],$VZ1=[2,11,15,36,38,43,44,51,54,56,77,79,80,84,85,86,93,94,95,96,97,112,131,132],$V_1=[44,51,54,56,79,80,84,85,86,93,94,95,96,97,132],$V$1=[1,337],$V02=[1,340],$V12=[1,339],$V22=[1,344],$V32=[1,345],$V42=[1,351],$V52=[2,20],$V62=[79,80,132],$V72=[1,375],$V82=[1,376],$V92=[1,373],$Va2=[1,374],$Vb2=[1,377],$Vc2=[15,44,51,54,79,80,84,85,86,93,94,95,96,97,132],$Vd2=[1,389],$Ve2=[56,79,80,93,94,95,96,97,132],$Vf2=[15,44,51,54,56,79,80,84,85,86,93,94,95,96,97,132],$Vg2=[11,34,36,51],$Vh2=[18,36,38,43],$Vi2=[36,38,43,79,80,112],$Vj2=[15,44,51,54,79,80,84,85,86,95,96,132];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"CONSULTAS_XQUERY":4,"eof":5,"RECURSIVA_QUERY":6,"OPCIONES_QUERY":7,"ETIQUETAS_QUERY":8,"ESTRUCTURA_FUNCION":9,"ESTRUCTURA_LLAMADA_FUNCION":10,"identificador":11,"dos_puntos":12,"parentesis_abierto":13,"OPCIONES_PARAMETRO":14,"parentesis_cerrado":15,"OPCIONAL_NATIVA":16,"ESTRUCTURAS_PARAMETROS_LLAMADA":17,"coma":18,"ESTRUCTURA_PARAMETROS_LLAMADA":19,"EXPRESION_RELACIONAL_QUERY":20,"AUX_ESTRUCTURA_FUNCION":21,"CUERPO_FUNCION":22,"punto_coma":23,"declare":24,"function":25,"IDENTIFICADOR_FUNCION":26,"ESTRUCTURA_PARAMETROS":27,"OPCION_TIPO_RETORNO":28,"as":29,"TIPOS_QUERY":30,"OPCION_INTERROGACION":31,"interrogacion":32,"PARAMETROS_FUNCION":33,"llave_abierta":34,"OPCIONES_BLOQUE":35,"llave_cerrada":36,"DECLARACION_VARIABLE":37,"return":38,"OPCIONES_RETURN":39,"ESTRUCTURA_IF":40,"VARIABLE":41,"let":42,"identificadorXquery":43,"igual":44,"OPCIONES_LET":45,"PARAMETRO_FUNCION":46,"string_tipo":47,"int":48,"double_tipo":49,"boolean":50,"menor":51,"ID_ETIQUETA":52,"ATRIBUTOS_ETIQUETA":53,"mayor":54,"DENTRO_ETIQUETA_QUERY":55,"diagonal":56,"ESTRUCTURA_FOR":57,"for":58,"RECURSIVA_FOR":59,"FOR":60,"OPCION_AT":61,"in":62,"OPCIONES_FOR":63,"ESTRUCTURA_WHERE":64,"ESTRUCTURA_ORDER_BY":65,"ESTRUCTURA_RETURN":66,"at":67,"CONSULTAS_XPATH":68,"TO":69,"digito":70,"to":71,"if":72,"ESTRUCTURA_CONDICION":73,"then":74,"OPCIONES_ELSE":75,"else":76,"where":77,"FILTROS_QUERY":78,"and":79,"or":80,"RUTAS_QUERY":81,"DIAGONALES":82,"RUTA_WHERE":83,"menor_igual":84,"mayor_igual":85,"diferente":86,"eq":87,"ne":88,"lt":89,"le":90,"gt":91,"ge":92,"multiplicacion":93,"division":94,"suma":95,"resta":96,"mod":97,"negado":98,"TIPOS_EXPRESION":99,"decimal":100,"string":101,"punto":102,"toUppercase":103,"toLowercase":104,"toString_":105,"parseInt":106,"subString":107,"ATRIBUTO":108,"PUNTOS":109,"NODE":110,"TEXT":111,"order":112,"by":113,"OPCIONES_ORDER_BY":114,"OPCION_ORDER_BY":115,"OPCIONES_ETIQUETA":116,"data":117,"OPCION_RUTA_QUERY":118,"DENTRO_ETIQUETA":119,"EJES":120,"node":121,"text":122,"last":123,"position":124,"div":125,"ATRIBUTO_ETIQUETA":126,"TIPO_ATRIBUTO":127,"comillas":128,"OPCION_ETIQUETA":129,"CONSULTA_XPATH":130,"corchete_abierto":131,"corchete_cerrado":132,"RELATIVA":133,"EXPRESIONES_RUTA":134,"EXPRESION_RUTA":135,"operador_o":136,"ACCESORES":137,"OPCIONAL_PREDICADO":138,"ID":139,"arroba":140,"EJE":141,"ACCESORES_EJE":142,"ancestor":143,"or-self":144,"attribute":145,"child":146,"descendant":147,"following":148,"sibling":149,"parent":150,"preceding":151,"self":152,"PREDICADOS":153,"PREDICADO":154,"FILTRO":155,"EXPR":156,"TIPOS":157,"$accept":0,"$end":1},
terminals_: {2:"error",5:"eof",11:"identificador",12:"dos_puntos",13:"parentesis_abierto",15:"parentesis_cerrado",18:"coma",23:"punto_coma",24:"declare",25:"function",29:"as",32:"interrogacion",34:"llave_abierta",36:"llave_cerrada",38:"return",42:"let",43:"identificadorXquery",44:"igual",47:"string_tipo",48:"int",49:"double_tipo",50:"boolean",51:"menor",54:"mayor",56:"diagonal",58:"for",62:"in",67:"at",70:"digito",71:"to",72:"if",74:"then",76:"else",77:"where",79:"and",80:"or",84:"menor_igual",85:"mayor_igual",86:"diferente",87:"eq",88:"ne",89:"lt",90:"le",91:"gt",92:"ge",93:"multiplicacion",94:"division",95:"suma",96:"resta",97:"mod",98:"negado",100:"decimal",101:"string",102:"punto",103:"toUppercase",104:"toLowercase",105:"toString_",106:"parseInt",107:"subString",112:"order",113:"by",117:"data",121:"node",122:"text",123:"last",124:"position",125:"div",128:"comillas",131:"corchete_abierto",132:"corchete_cerrado",136:"operador_o",140:"arroba",143:"ancestor",144:"or-self",145:"attribute",146:"child",147:"descendant",148:"following",149:"sibling",150:"parent",151:"preceding",152:"self"},
productions_: [0,[3,2],[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[7,1],[10,7],[14,1],[14,0],[17,3],[17,1],[19,1],[9,3],[21,7],[26,1],[28,5],[28,0],[31,0],[31,1],[27,3],[22,3],[35,0],[35,1],[35,3],[35,1],[37,2],[37,1],[41,5],[45,1],[33,3],[33,1],[33,0],[46,6],[30,1],[30,1],[30,1],[30,1],[8,9],[55,2],[55,1],[55,3],[55,1],[57,2],[59,1],[59,2],[60,6],[61,1],[61,3],[63,1],[63,1],[63,5],[69,5],[40,5],[75,2],[75,3],[73,3],[64,2],[64,0],[78,3],[78,3],[81,3],[81,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,2],[20,2],[20,3],[20,1],[99,1],[99,1],[99,2],[99,1],[99,1],[99,1],[16,0],[16,4],[16,4],[16,4],[16,4],[16,7],[83,1],[83,1],[83,1],[83,1],[83,1],[65,3],[65,0],[114,1],[114,3],[115,2],[115,1],[66,1],[66,0],[39,1],[39,5],[39,1],[39,1],[39,2],[116,8],[116,9],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[52,1],[53,2],[53,0],[126,3],[127,1],[127,3],[119,1],[119,2],[119,2],[119,1],[129,1],[129,3],[129,7],[129,3],[118,1],[118,0],[68,1],[68,3],[68,3],[130,1],[130,1],[130,2],[134,2],[134,1],[134,2],[135,3],[135,2],[133,0],[133,2],[82,2],[82,1],[109,1],[109,2],[137,2],[137,2],[137,2],[137,1],[137,1],[137,1],[111,3],[110,3],[108,2],[108,2],[139,1],[139,1],[141,4],[142,1],[142,1],[142,1],[142,1],[120,1],[120,2],[120,1],[120,1],[120,2],[120,1],[120,1],[120,2],[120,1],[120,1],[120,2],[120,1],[138,0],[138,1],[153,2],[153,1],[153,3],[154,3],[155,3],[155,3],[155,3],[155,3],[155,3],[155,3],[155,3],[155,3],[155,2],[155,1],[156,3],[156,3],[156,3],[156,3],[156,3],[156,3],[156,1],[156,3],[157,1],[157,1],[157,1],[157,1],[157,1],[157,3],[157,3],[157,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log('\nexito al analizar\n');
        this.$ = {instrucciones:$$[$0-1],variables:variables,funciones:funciones};
        variables = [];
        funciones = [];
        ambito = "";
        tipoDatoGlobal = "";
        return this.$;
    
break;
case 2:

        console.log("Error sintatciti error eof "+$$[$0-1]);
        //erroresXpath.agregarError("Sintactico","//errores seguidos"+yytext,this._//$.first_line,this._//$.first_column);
        return [];
    
break;
case 3: case 10: case 31:
this.$ = $$[$0];
break;
case 4: case 28:
$$[$0-1].push($$[$0].instrucciones);this.$ = $$[$0-1];
break;
case 5: case 29:
this.$ = [$$[$0].instrucciones];
break;
case 7: case 115:
this.$ = {instrucciones:$$[$0].instrucciones};
break;
case 8: case 116:
this.$ = {instrucciones:$$[$0].expresion};
break;
case 9:

            let retornoLF = ValidacionExpresion.validaarFuncion(funciones,$$[$0-4],$$[$0-2]);
            this.$ = {expresion:ValidacionExpresion.validarNativa($$[$0],retornoLF,true)};
            console.log("salida",this.$.expresion);
        
break;
case 11:
this.$=[]
break;
case 12:
$$[$0-2].push($$[$0]);this.$ = $$[$0-2];
break;
case 13:
this.$ = [$$[$0]];
break;
case 14: case 92:
this.$ = $$[$0].expresion;
break;
case 15:

        $$[$0-2].setBloquecodigo($$[$0-1].instrucciones);
        this.$ = {instrucciones:$$[$0-2]};
    
break;
case 16:

        let funcionNew = new CrearFuncion($$[$0-2],$$[$0-1],$$[$0]);
        funciones.push(funcionNew);
        this.$ = funcionNew;
    
break;
case 17:

        ambito = $$[$0];
        this.$ = $$[$0];
    
break;
case 18:
this.$ = $$[$0-1];tipoDatoGlobal = this.$;
break;
case 19:
this.$ = null;tipoDatoGlobal = this.$;
break;
case 22: case 23:

        this.$ = $$[$0-1];
    
break;
case 25:

            this.$ = {instrucciones:[$$[$0].expresion]};
        
break;
case 26:

            $$[$0-2].push($$[$0].instrucciones);
            this.$ = {instrucciones:$$[$0-2]};
        
break;
case 27:

            this.$ = {instrucciones:[$$[$0].instrucciones]};
    
break;
case 30:

        let variable = new Variable(0,$$[$0-3],$$[$0].expresion,ambito);
        this.$ = {instrucciones:variable};
        if(variables.find(e => e.id == $$[$0-3])==undefined)variables.push(variable);
    
break;
case 32:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 33:

        this.$ = [$$[$0]];
    
break;
case 34:

        this.$ = [];
    
break;
case 35:

        this.$ = new Parametro($$[$0-5],$$[$0-1],ambito);
        let verificador = variables.find(e => e.id == $$[$0-5] && e.ambito == ambito);
        if(verificador == undefined){
            variables.push(new Variable(0,$$[$0-5],new Expresion($$[$0-1],"0"),ambito));
        }else{
            console.log("error variable repetida");
        }
    
break;
case 36:

        this.$ = TiposDatos.STRING;
    
break;
case 37:

        this.$ = TiposDatos.ENTERO;
    
break;
case 38:

        this.$ = TiposDatos.DECIMAL;
    
break;
case 39:

        this.$ = TipoDato.BOOLEAN;
    
break;
case 54:

        let inicio = parseInt($$[$0-3],10);
        let fin = parseInt($$[$0-1],10);
        let retornoTo = " ";
        for(let i=inicio;i<=fin;i++){
            retornoTo += i+" ";
        }
        this.$ = {valor:retornoTo};
    
break;
case 55:

        let elseAux = new Else($$[$0]);
        this.$ = {instrucciones:If.validarIf($$[$0-3],$$[$0-1].expresion,elseAux,tipoDatoGlobal)};
    
break;
case 56:
this.$ = $$[$0].instrucciones;
break;
case 57: case 94:
this.$ = null;
break;
case 58:
this.$ = $$[$0-1].expresion;
break;
case 65: case 73:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.MENOR,$$[$0].expresion)};
break;
case 66: case 74:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.MENOR_IGUAL,$$[$0].expresion)};
break;
case 67: case 75:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.MAYOR,$$[$0].expresion)};
break;
case 68: case 76:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.MAYOR_IGUAL,$$[$0].expresion)};
break;
case 69: case 71:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.IGUAL,$$[$0].expresion)};
break;
case 70: case 72:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.DIFERENTE,$$[$0].expresion)};
break;
case 77:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.MULTIPLICACION,$$[$0].expresion)};
break;
case 78:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.DIVISION,$$[$0].expresion)};
break;
case 79:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.SUMA,$$[$0].expresion)};
break;
case 80:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.RESTA,$$[$0].expresion)};
break;
case 81:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.MOD,$$[$0].expresion)};
break;
case 82:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.AND,$$[$0].expresion)};
break;
case 83:
this.$ = {expresion:ValidacionExpresion.validacion($$[$0-2].expresion,tiposOperando.OR,$$[$0].expresion)};
break;
case 84:
this.$ = {expresion:ValidacionExpresion.negado($$[$0].expresion)};
break;
case 85:
this.$ = {expresion:ValidacionExpresion.umenos($$[$0].expresion)};
break;
case 86:
$$[$0-1].expresion.setValor("("+$$[$0-1].expresion.valor+")");this.$ = {expresion:$$[$0-1].expresion};
break;
case 87:
this.$ = {expresion:$$[$0]};
break;
case 88:
this.$ = new Expresion(TiposDatos.ENTERO ,$$[$0]);
break;
case 89:
this.$ = new Expresion(TiposDatos.DECIMAL ,$$[$0]);
break;
case 90:
this.$ = ValidacionExpresion.validarVariable(variables,$$[$0-1],ambito,$$[$0]);
break;
case 91:
this.$ = new Expresion(TiposDatos.STRING ,$$[$0]);
break;
case 93:
this.$ = new Expresion(TiposDatos.STRING ,"\""+$$[$0].valor+"\"");
break;
case 95:
this.$ = {tipo:tiposNativas.UPPER_CASE};
break;
case 96:
this.$ = {tipo:tiposNativas.LOWER_CASE};
break;
case 97:
this.$ = {tipo:tiposNativas.TO_STRING};
break;
case 98:
this.$ = {tipo:tiposNativas.TO_NUMBER};
break;
case 99:
this.$ = {tipo:tiposNativas.SUB_STRING,posx:parseInt($$[$0-3]),posy:parseInt($$[$0-1])};
break;
case 167:

        //$//$ = [//$$[$0]];
        
break;
case 168:

        //$//$ = [];
        //erroresXpath.agregarError("Sintactico","No puede venir un predicado como un nodo\n"+yytext,this._//$.first_line,this._//$.first_column);
        console.log("Error sintatciti "+$$[$0-1]);
    
break;
case 169:

        //$//$ = [];
        //erroresXpath.agregarError("Sintactico","No puede venir una expresion como un nodo\n"+yytext,this._//$.first_line,this._//$.first_column);
        console.log("Error sintatciti "+$$[$0-1]);
    
break;
case 170:

        //$//$ = [new ConsultaSimple(//$$[$0])];
        
break;
case 171: case 174:

        //$//$ = //$$[$0];
        
break;
case 172:

        //$//$= [];
        //if (//$$[$0-1] === "punto") {
            //$//$.push(new ConsultaPunto());
        //}
        //$$[$0].forEach(e => //$//$.push(e));
    
break;
case 173:

        ////$$[$0].forEach(e => //$$[$0-1].push(e)); //$//$ = //$$[$0-1];
        
break;
case 175:

        console.log("Error sintatciti "+$$[$0-1]);
        //$//$ = [];
        //erroresXpath.agregarError("Sintactico","Consulta no aceptada:\n"+yytext,this._//$.first_line,this._//$.first_column);
    
break;
case 176:

            //$//$ = [];
            //if (!(//$$[$0-2] === "")) {
                //$//$.push(new ConsultaSimple(//$$[$0-2]));
            //}
            //$//$.push(FabricaConsulta.fabricar(//$$[$0-1], //$$[$0].id, //$$[$0].eje));
    
break;
case 177:

        console.log("Error sintatciti "+$$[$0-1]);
        //erroresXpath.agregarError("Sintactico",yytext,this._//$.first_line,this._//$.first_column);
        //$//$ = [];
    
break;
case 178:

        //$//$ = "";
    
break;
case 179: case 184:

        //$//$ = //$$[$0-1];
    
break;
case 180:

        //$//$ = "doble";
    
break;
case 181:

        //$//$ = "simple";
    
break;
case 182:

        //$//$ = "punto";
    
break;
case 183:

        //$//$ = "puntos";
    
break;
case 185: case 186:

        //$//$ = {id: //$$[$0-1], eje: ""};
    
break;
case 187: case 188: case 189: case 194:

        //$//$ = {id: //$$[$0], eje: ""};
    
break;
case 190: case 191:

        //$//$ = //$$[$0-2] + "()";
    
break;
case 192: case 193:

        //$//$ = //$$[$0-1] + //$$[$0];
    
break;
case 195: case 197: case 198: case 199: case 200: case 201: case 203: case 204: case 206: case 207: case 209: case 210: case 212:

        //$//$ = //$$[$0];
    
break;
case 196:

        //$//$ = {id: //$$[$0], eje: //$$[$0-3]}
        
break;
case 202: case 205: case 208: case 211:

        //$//$ = //$$[$0-1]+//$$[$0];
    
break;
case 217:

        console.log("Error sintatciti "+$$[$0-1]);
        //erroresXpath.agregarError("Sintactico","Error en predicado\n"+yytext,this._//$.first_line,this._//$.first_column);
    
break;
case 236:

        console.log("Error sintatciti "+$$[$0-1]);
        //erroresXpath.agregarError("Sintactico","Error dentro expresion\n"+yytext,this._//$.first_line,this._//$.first_column);
    
break;
}
},
table: [{2:[1,3],3:1,4:2,6:4,7:5,8:6,9:7,10:8,11:$V0,21:10,24:$V1,51:$V2},{1:[3]},{5:[1,13]},{5:[1,14]},{5:[2,3],7:15,8:6,9:7,10:8,11:$V0,21:10,24:$V1,51:$V2},o($V3,[2,5]),o($V3,[2,6]),o($V3,[2,7]),o($V3,[2,8]),{11:$V4,24:$V5,25:$V6,29:$V7,30:18,38:$V8,42:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,52:16,58:$Ve,62:$Vf,67:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,77:$Vl,79:$Vm,80:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,97:$Vu,112:$Vv,113:$Vw,120:17,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,143:$VC,145:$VD,146:$VE,147:$VF,148:$VG,150:$VH,151:$VI,152:$VJ},{22:61,34:[1,62]},{12:[1,63]},{25:[1,64]},{1:[2,1]},{1:[2,2]},o($V3,[2,4]),o($VK,$VL,{53:65}),o($VK,[2,120]),o($VK,[2,121]),o($VK,[2,122]),o($VK,[2,123]),o($VK,[2,124]),o($VK,[2,125]),o($VK,[2,126]),o($VK,[2,127]),o($VK,[2,128]),o($VK,[2,129]),o($VK,[2,130]),o($VK,[2,131]),o($VK,[2,132]),o($VK,[2,133]),o($VK,[2,134]),o($VK,[2,135]),o($VK,[2,136]),o($VK,[2,137]),o($VK,[2,138]),o($VK,[2,139]),o($VK,[2,140]),o($VK,[2,141]),o($VK,[2,142]),o($VK,[2,143]),o($VK,[2,144]),o($VK,[2,145]),o($VK,[2,146]),o($VK,[2,147]),o($VK,[2,148]),o($VK,[2,149]),o($VK,[2,150]),o($VK,[2,151]),o($VM,[2,201],{144:[1,66]}),o($VM,[2,203]),o($VM,[2,204]),o($VM,[2,206],{144:[1,67]}),o($VM,[2,207],{149:[1,68]}),o($VM,[2,209]),o($VM,[2,210],{149:[1,69]}),o($VM,[2,212]),o($VN,[2,36]),o($VN,[2,37]),o($VN,[2,38]),o($VN,[2,39]),{23:[1,70]},{10:85,11:$V0,13:$VO,20:72,35:71,36:[2,24],37:73,40:74,41:79,42:$VP,43:$VQ,69:86,70:$VR,72:$VS,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{11:[1,88]},{11:[1,89]},{11:$VX,54:[1,90],126:91},o($VM,[2,202]),o($VM,[2,205]),o($VM,[2,208]),o($VM,[2,211]),o($V3,[2,15]),{36:[1,93]},{36:[2,25],44:$VY,51:$VZ,54:$V_,79:$V$,80:$V01,84:$V11,85:$V21,86:$V31,87:$V41,88:$V51,89:$V61,90:$V71,91:$V81,92:$V91,93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1},{38:[1,113],41:114,42:$VP},{36:[2,27]},{10:85,11:$V0,13:$VO,20:115,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:116,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:117,43:$VQ,69:86,70:$Vf1,96:$VT,98:$VU,99:78,100:$VV,101:$VW},o($Vg1,[2,87]),o($Vh1,[2,29]),{13:[1,120],73:119},o($Vg1,$Vi1),o($Vg1,[2,89]),o($Vg1,$Vj1,{16:121,102:$Vk1}),o($Vg1,[2,91]),o($Vg1,[2,92]),o($Vg1,[2,93]),{43:[1,123]},{13:[1,124]},{12:[1,125]},{8:127,11:[1,129],34:[1,128],51:$V2,55:126},o($VK,[2,152]),{44:[1,130]},{23:[2,23]},{10:85,11:$V0,13:$VO,20:131,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:132,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:133,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:134,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:135,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:136,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:137,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:138,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:139,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:140,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:141,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:142,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:143,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:144,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:145,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:146,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:147,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:148,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:149,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{10:85,11:$V0,13:$VO,20:154,39:150,40:153,43:$Vl1,51:$Vm1,69:86,70:$VR,72:$VS,96:$VT,98:$VU,99:78,100:$VV,101:$VW,116:151,117:$Vn1},o($Vh1,[2,28]),o($Vg1,[2,84]),o($Vg1,[2,85]),{15:[1,157],44:$VY,51:$VZ,54:$V_,79:$V$,80:$V01,84:$V11,85:$V21,86:$V31,87:$V41,88:$V51,89:$V61,90:$V71,91:$V81,92:$V91,93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1},o([15,44,51,54,79,80,84,85,86,87,88,89,90,91,92,93,94,95,96,97],$Vi1,{71:$Vo1}),{74:[1,159]},{10:85,11:$V0,13:$VO,20:160,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},o($Vg1,[2,90]),{103:[1,161],104:[1,162],105:[1,163],106:[1,164],107:[1,165]},{12:[1,166]},{10:85,11:$V0,13:$VO,14:167,15:[2,11],17:168,19:169,20:170,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{11:[1,172],26:171},{8:174,51:[1,173]},{51:[2,42]},{57:175,58:[1,176]},{51:[2,44]},{101:[1,178],127:177,128:[1,179]},o($Vp1,[2,65],{93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1}),o($Vp1,[2,66],{93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1}),o($Vp1,[2,67],{93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1}),o($Vp1,[2,68],{93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1}),o($Vp1,[2,69],{93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1}),o($Vp1,[2,70],{93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1}),o($Vp1,[2,71],{93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1}),o($Vp1,[2,72],{93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1}),o($Vp1,[2,73],{93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1}),o($Vp1,[2,74],{93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1}),o($Vp1,[2,75],{93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1}),o($Vp1,[2,76],{93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1}),o($Vg1,[2,77]),o($Vg1,[2,78]),o($Vq1,[2,79],{93:$Va1,94:$Vb1,97:$Ve1}),o($Vq1,[2,80],{93:$Va1,94:$Vb1,97:$Ve1}),o($Vg1,[2,81]),o($Vr1,[2,82],{44:$VY,51:$VZ,54:$V_,84:$V11,85:$V21,86:$V31,87:$V41,88:$V51,89:$V61,90:$V71,91:$V81,92:$V91,93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1}),o($Vr1,[2,83],{44:$VY,51:$VZ,54:$V_,84:$V11,85:$V21,86:$V31,87:$V41,88:$V51,89:$V61,90:$V71,91:$V81,92:$V91,93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1}),{36:[2,26]},{36:[2,113]},{13:[1,180]},{36:[2,115]},{36:[2,116],44:$VY,51:$VZ,54:$V_,79:$V$,80:$V01,84:$V11,85:$V21,86:$V31,87:$V41,88:$V51,89:$V61,90:$V71,91:$V81,92:$V91,93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1},o([36,44,51,54,79,80,84,85,86,87,88,89,90,91,92,93,94,95,96,97],$Vj1,{16:121,81:181,82:182,56:$Vs1,102:$Vk1}),{11:$V4,24:$V5,25:$V6,29:$V7,30:18,38:$V8,42:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,52:184,58:$Ve,62:$Vf,67:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,77:$Vl,79:$Vm,80:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,97:$Vu,112:$Vv,113:$Vw,120:17,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,143:$VC,145:$VD,146:$VE,147:$VF,148:$VG,150:$VH,151:$VI,152:$VJ},o($Vg1,[2,86]),{70:[1,185]},{10:85,11:$V0,13:$VO,20:186,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{15:[1,187],44:$VY,51:$VZ,54:$V_,79:$V$,80:$V01,84:$V11,85:$V21,86:$V31,87:$V41,88:$V51,89:$V61,90:$V71,91:$V81,92:$V91,93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1},{13:[1,188]},{13:[1,189]},{13:[1,190]},{13:[1,191]},{13:[1,192]},{44:[1,193]},{15:[1,194]},{15:[2,10],18:[1,195]},o($Vt1,[2,13]),o($Vt1,[2,14],{44:$VY,51:$VZ,54:$V_,79:$V$,80:$V01,84:$V11,85:$V21,86:$V31,87:$V41,88:$V51,89:$V61,90:$V71,91:$V81,92:$V91,93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1}),{13:[1,197],27:196},{13:[2,17]},{11:$V4,24:$V5,25:$V6,29:$V7,30:18,38:$V8,42:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,52:16,56:[1,198],58:$Ve,62:$Vf,67:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,77:$Vl,79:$Vm,80:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,97:$Vu,112:$Vv,113:$Vw,120:17,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,143:$VC,145:$VD,146:$VE,147:$VF,148:$VG,150:$VH,151:$VI,152:$VJ},{51:[2,41]},{36:[1,199]},{43:$Vu1,59:200,60:201,61:202},o($VK,[2,154]),o($VK,[2,155]),{11:$Vv1,34:$Vw1,129:204},{43:[1,207]},{36:[2,117],56:$Vs1,82:208},{11:$Vx1,83:209,102:$Vy1,108:211,109:212,110:213,111:214,121:$Vz1,122:$VA1,140:$VB1},o($VC1,[2,181],{56:[1,219]}),o($VK,$VL,{53:220}),{15:[1,221]},{44:$VY,51:$VZ,54:$V_,75:222,76:[1,223],79:$V$,80:$V01,84:$V11,85:$V21,86:$V31,87:$V41,88:$V51,89:$V61,90:$V71,91:$V81,92:$V91,93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1},{74:[2,58]},{15:[1,224]},{15:[1,225]},{15:[1,226]},{15:[1,227]},{70:[1,228]},{10:85,11:$V0,13:$VO,20:230,43:$VQ,45:229,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},o($VD1,$Vj1,{16:231,102:$Vk1}),{10:85,11:$V0,13:$VO,19:232,20:170,43:$VQ,69:86,70:$VR,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{28:233,29:[1,234],34:[2,19]},o($Vt1,[2,34],{33:235,46:236,43:$VE1}),{11:$V4,24:$V5,25:$V6,29:$V7,30:18,38:$V8,42:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,52:238,58:$Ve,62:$Vf,67:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,77:$Vl,79:$Vm,80:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,97:$Vu,112:$Vv,113:$Vw,120:17,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,143:$VC,145:$VD,146:$VE,147:$VF,148:$VG,150:$VH,151:$VI,152:$VJ},{51:[2,43]},{36:[2,45],43:$Vu1,60:239,61:202},o($VF1,[2,46]),{62:[1,240]},{62:[2,49],67:[1,241]},{128:[1,242]},o($VG1,[2,161]),{10:245,11:$V0,43:[1,243],117:[1,244]},{15:$VH1,56:$Vs1,81:247,82:182,118:246},{11:$Vx1,83:248,102:$Vy1,108:211,109:212,110:213,111:214,121:$Vz1,122:$VA1,140:$VB1},o($VI1,[2,64]),o($VI1,[2,100]),o($VI1,[2,101]),o($VI1,[2,102]),o($VI1,[2,103]),o($VI1,[2,104]),{11:[1,249],93:[1,250]},o($VJ1,[2,182],{102:[1,251]}),{13:[1,252]},{13:[1,253]},o($VC1,[2,180]),{11:$VX,54:[1,254],126:91},o([15,18,36,38,42,43,44,51,54,76,77,79,80,84,85,86,87,88,89,90,91,92,93,94,95,96,97,112],[2,54]),{36:[2,55]},{10:85,11:$V0,13:[1,256],20:154,39:255,40:153,43:$Vl1,51:$Vm1,69:86,70:$VR,72:$VS,96:$VT,98:$VU,99:78,100:$VV,101:$VW,116:151,117:$Vn1},o($VD1,[2,95]),o($VD1,[2,96]),o($VD1,[2,97]),o($VD1,[2,98]),{18:[1,257]},o($Vh1,[2,30]),o($Vh1,[2,31],{44:$VY,51:$VZ,54:$V_,79:$V$,80:$V01,84:$V11,85:$V21,86:$V31,87:$V41,88:$V51,89:$V61,90:$V71,91:$V81,92:$V91,93:$Va1,94:$Vb1,95:$Vc1,96:$Vd1,97:$Ve1}),o($VD1,[2,9]),o($Vt1,[2,12]),{34:[2,16]},{11:[1,258]},{15:[1,259],18:[1,260]},o($Vt1,[2,33]),{29:[1,261]},{54:[1,262]},o($VF1,[2,47]),o([36,38,43,56,77,112],$VK1,{63:263,68:264,69:265,130:267,133:269,134:270,109:271,135:273,2:$VL1,11:$VM1,13:[1,266],102:$Vy1,131:[1,268]}),{43:[1,275]},o($VK,[2,156]),{36:[1,276]},{13:[1,277]},{36:[1,278]},{15:[1,279]},{15:[2,165],56:$Vs1,82:208},o($VI1,[2,63]),o($VJ1,[2,192]),o($VJ1,[2,193]),o($VJ1,[2,183]),{15:[1,280]},{15:[1,281]},{11:$Vv1,34:$Vw1,51:[1,282],116:285,119:283,129:284},{36:[2,56]},{10:85,11:$V0,13:$VO,15:[1,286],20:117,43:$VQ,69:86,70:$Vf1,96:$VT,98:$VU,99:78,100:$VV,101:$VW},{70:[1,287]},{12:[1,288]},o([29,34],[2,22]),{43:$VE1,46:289},{11:[1,290]},o($V3,[2,40]),o($VN1,[2,60],{64:291,77:[1,292]}),o($VO1,[2,51]),o($VO1,[2,52]),{2:[1,294],70:[1,293]},o($VO1,[2,167]),{2:[1,295]},o($VP1,[2,170],{82:296,56:$Vs1}),o($VP1,[2,171],{135:297,133:298,2:$VQ1,11:$VM1,56:$VK1}),{2:$VL1,11:$VM1,56:$VK1,133:298,134:300,135:273},o($VR1,$VS1,{138:301,153:302,154:303,131:$VT1}),o($VU1,[2,174]),{11:$VV1,136:$VW1},{62:[2,50]},o($VG1,[2,162]),{43:[1,307]},o($VG1,[2,164]),{36:[2,114]},o($VJ1,[2,191]),o($VJ1,[2,190]),{11:$V4,24:$V5,25:$V6,29:$V7,30:18,38:$V8,42:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,52:184,56:[1,308],58:$Ve,62:$Vf,67:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,77:$Vl,79:$Vm,80:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,97:$Vu,112:$Vv,113:$Vw,120:17,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,143:$VC,145:$VD,146:$VE,147:$VF,148:$VG,150:$VH,151:$VI,152:$VJ},{11:$Vv1,34:$Vw1,51:[1,309],116:311,129:310},o($VX1,[2,157]),o($VX1,[2,160]),{36:[2,57]},{15:[1,312]},{30:313,47:$Va,48:$Vb,49:$Vc,50:$Vd},o($Vt1,[2,32]),{12:[1,314]},o($VY1,[2,106],{65:315,112:[1,316]}),{78:317},{18:[1,318],71:$Vo1},{15:[1,319]},{132:[1,320]},{11:[1,328],93:[1,325],102:$Vy1,108:323,109:324,110:326,111:327,120:330,121:$Vz1,122:$VA1,137:321,139:322,140:$VB1,141:329,143:$VC,145:$VD,146:$VE,147:$VF,148:$VG,150:$VH,151:$VI,152:$VJ},o($VU1,[2,173]),{56:$Vs1,82:296},{11:$VV1},o($VP1,[2,172],{135:297,133:298,2:$VQ1,11:$VM1,56:$VK1}),o($VR1,[2,179]),o($VU1,[2,214],{154:331,131:[1,332]}),o($VZ1,[2,216]),o($V_1,$VK1,{133:269,134:270,135:273,120:330,155:334,156:335,141:336,157:338,108:341,109:342,130:343,111:346,2:[1,333],11:$VM1,13:$V$1,70:$V02,101:$V12,102:$Vy1,122:$VA1,123:$V22,124:$V32,140:$VB1,143:$VC,145:$VD,146:$VE,147:$VF,148:$VG,150:$VH,151:$VI,152:$VJ}),o($VU1,[2,175]),o($VU1,[2,177]),{15:$VH1,56:$Vs1,81:247,82:182,118:347},{11:$V4,24:$V5,25:$V6,29:$V7,30:18,38:$V8,42:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,52:348,58:$Ve,62:$Vf,67:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,77:$Vl,79:$Vm,80:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,97:$Vu,112:$Vv,113:$Vw,120:17,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,143:$VC,145:$VD,146:$VE,147:$VF,148:$VG,150:$VH,151:$VI,152:$VJ},{11:$V4,24:$V5,25:$V6,29:$V7,30:18,38:$V8,42:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,52:184,56:[1,349],58:$Ve,62:$Vf,67:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,77:$Vl,79:$Vm,80:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,97:$Vu,112:$Vv,113:$Vw,120:17,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,143:$VC,145:$VD,146:$VE,147:$VF,148:$VG,150:$VH,151:$VI,152:$VJ},o($VX1,[2,158]),o($VX1,[2,159]),o($VD1,[2,99]),{31:350,32:$V42,34:$V52},{30:352,47:$Va,48:$Vb,49:$Vc,50:$Vd},o($VF1,[2,112],{66:353,38:[1,354]}),{113:[1,355]},o($VN1,[2,59],{79:[1,356],80:[1,357]}),{70:[1,358]},o($VO1,[2,169]),o($VO1,[2,168]),o($VU1,[2,176]),o($VU1,$VS1,{153:302,154:303,138:359,131:$VT1}),o($VU1,$VS1,{153:302,154:303,138:360,131:$VT1}),o($VU1,$VS1,{153:302,154:303,138:361,131:$VT1}),o($VU1,[2,187]),o($VU1,[2,188]),o($VU1,[2,189]),o($VZ1,[2,194]),o($VZ1,[2,195]),{12:[1,362]},o($VZ1,[2,215]),o($V_1,$VK1,{133:269,134:270,135:273,120:330,155:334,156:335,141:336,157:338,108:341,109:342,130:343,111:346,2:$VL1,11:$VM1,13:$V$1,70:$V02,101:$V12,102:$Vy1,122:$VA1,123:$V22,124:$V32,140:$VB1,143:$VC,145:$VD,146:$VE,147:$VF,148:$VG,150:$VH,151:$VI,152:$VJ}),{11:$VV1,132:[1,363],136:$VW1},{79:[1,365],80:[1,366],132:[1,364]},o($V62,[2,228],{44:[1,367],51:[1,370],54:[1,369],84:[1,372],85:[1,371],86:[1,368],93:$V72,94:$V82,95:$V92,96:$Va2,97:$Vb2}),o($V62,$VS1,{153:302,154:303,138:378,131:$VT1}),o([15,56,93,94,95,96,97],$VK1,{133:269,134:270,135:273,157:338,108:341,109:342,130:343,111:346,156:379,2:[1,380],11:$VM1,13:$V$1,70:$V02,101:$V12,102:$Vy1,122:$VA1,123:$V22,124:$V32,140:$VB1}),o($Vc2,[2,235]),o($Vc2,[2,237]),o($Vc2,[2,238]),o($Vc2,[2,239]),o($Vc2,[2,240],{135:273,133:298,134:300,2:$VL1,11:$VM1,56:$VK1}),o($Vc2,[2,241]),{13:[1,381]},{13:[1,382]},o($Vc2,[2,244]),{15:[1,383]},{54:[1,384]},{11:$V4,24:$V5,25:$V6,29:$V7,30:18,38:$V8,42:$V9,47:$Va,48:$Vb,49:$Vc,50:$Vd,52:385,58:$Ve,62:$Vf,67:$Vg,71:$Vh,72:$Vi,74:$Vj,76:$Vk,77:$Vl,79:$Vm,80:$Vn,87:$Vo,88:$Vp,89:$Vq,90:$Vr,91:$Vs,92:$Vt,97:$Vu,112:$Vv,113:$Vw,120:17,121:$Vx,122:$Vy,123:$Vz,124:$VA,125:$VB,143:$VC,145:$VD,146:$VE,147:$VF,148:$VG,150:$VH,151:$VI,152:$VJ},{34:[2,18]},o([15,18,34],[2,21]),o($Vt1,$V52,{31:386,32:$V42}),o($VF1,[2,48]),o($VF1,[2,111]),{43:$Vd2,114:387,115:388},{78:390},{78:391},{15:[1,392]},o($VU1,[2,184]),o($VU1,[2,185]),o($VU1,[2,186]),{12:[1,393]},o($VZ1,[2,217]),o($VZ1,[2,218]),o($V_1,$VK1,{133:269,134:270,135:273,120:330,156:335,141:336,157:338,108:341,109:342,130:343,111:346,155:394,2:$VL1,11:$VM1,13:$V$1,70:$V02,101:$V12,102:$Vy1,122:$VA1,123:$V22,124:$V32,140:$VB1,143:$VC,145:$VD,146:$VE,147:$VF,148:$VG,150:$VH,151:$VI,152:$VJ}),o($V_1,$VK1,{133:269,134:270,135:273,120:330,156:335,141:336,157:338,108:341,109:342,130:343,111:346,155:395,2:$VL1,11:$VM1,13:$V$1,70:$V02,101:$V12,102:$Vy1,122:$VA1,123:$V22,124:$V32,140:$VB1,143:$VC,145:$VD,146:$VE,147:$VF,148:$VG,150:$VH,151:$VI,152:$VJ}),o($Ve2,$VK1,{133:269,134:270,135:273,157:338,108:341,109:342,130:343,111:346,156:396,2:$VL1,11:$VM1,13:$V$1,70:$V02,101:$V12,102:$Vy1,122:$VA1,123:$V22,124:$V32,140:$VB1}),o($Ve2,$VK1,{133:269,134:270,135:273,157:338,108:341,109:342,130:343,111:346,156:397,2:$VL1,11:$VM1,13:$V$1,70:$V02,101:$V12,102:$Vy1,122:$VA1,123:$V22,124:$V32,140:$VB1}),o($Ve2,$VK1,{133:269,134:270,135:273,157:338,108:341,109:342,130:343,111:346,156:398,2:$VL1,11:$VM1,13:$V$1,70:$V02,101:$V12,102:$Vy1,122:$VA1,123:$V22,124:$V32,140:$VB1}),o($Ve2,$VK1,{133:269,134:270,135:273,157:338,108:341,109:342,130:343,111:346,156:399,2:$VL1,11:$VM1,13:$V$1,70:$V02,101:$V12,102:$Vy1,122:$VA1,123:$V22,124:$V32,140:$VB1}),o($Ve2,$VK1,{133:269,134:270,135:273,157:338,108:341,109:342,130:343,111:346,156:400,2:$VL1,11:$VM1,13:$V$1,70:$V02,101:$V12,102:$Vy1,122:$VA1,123:$V22,124:$V32,140:$VB1}),o($Ve2,$VK1,{133:269,134:270,135:273,157:338,108:341,109:342,130:343,111:346,156:401,2:$VL1,11:$VM1,13:$V$1,70:$V02,101:$V12,102:$Vy1,122:$VA1,123:$V22,124:$V32,140:$VB1}),o($Vf2,$VK1,{133:269,134:270,135:273,157:338,108:341,109:342,130:343,111:346,156:402,2:$VL1,11:$VM1,13:$V$1,70:$V02,101:$V12,102:$Vy1,122:$VA1,123:$V22,124:$V32,140:$VB1}),o($Vf2,$VK1,{133:269,134:270,135:273,157:338,108:341,109:342,130:343,111:346,156:403,2:$VL1,11:$VM1,13:$V$1,70:$V02,101:$V12,102:$Vy1,122:$VA1,123:$V22,124:$V32,140:$VB1}),o($Vf2,$VK1,{133:269,134:270,135:273,157:338,108:341,109:342,130:343,111:346,156:404,2:$VL1,11:$VM1,13:$V$1,70:$V02,101:$V12,102:$Vy1,122:$VA1,123:$V22,124:$V32,140:$VB1}),o($Vf2,$VK1,{133:269,134:270,135:273,157:338,108:341,109:342,130:343,111:346,156:405,2:$VL1,11:$VM1,13:$V$1,70:$V02,101:$V12,102:$Vy1,122:$VA1,123:$V22,124:$V32,140:$VB1}),o($Vf2,$VK1,{133:269,134:270,135:273,157:338,108:341,109:342,130:343,111:346,156:406,2:$VL1,11:$VM1,13:$V$1,70:$V02,101:$V12,102:$Vy1,122:$VA1,123:$V22,124:$V32,140:$VB1}),o($V62,[2,227]),{15:[1,407],93:$V72,94:$V82,95:$V92,96:$Va2,97:$Vb2},{11:$VV1,15:[1,408],136:$VW1},{15:[1,409]},{15:[1,410]},{36:[1,411]},o($Vg2,[2,118]),{54:[1,412]},o($Vt1,[2,35]),o($VY1,[2,105],{18:[1,413]}),o($Vh2,[2,107]),o($Vh2,[2,110],{82:182,81:414,56:$Vs1}),o($Vi2,[2,61]),o($Vi2,[2,62]),o($VO1,[2,53]),{11:[1,416],93:[1,419],110:417,111:418,121:$Vz1,122:$VA1,142:415},o($V62,[2,225]),o($V62,[2,226]),o($V62,[2,219],{93:$V72,94:$V82,95:$V92,96:$Va2,97:$Vb2}),o($V62,[2,220],{93:$V72,94:$V82,95:$V92,96:$Va2,97:$Vb2}),o($V62,[2,221],{93:$V72,94:$V82,95:$V92,96:$Va2,97:$Vb2}),o($V62,[2,222],{93:$V72,94:$V82,95:$V92,96:$Va2,97:$Vb2}),o($V62,[2,223],{93:$V72,94:$V82,95:$V92,96:$Va2,97:$Vb2}),o($V62,[2,224],{93:$V72,94:$V82,95:$V92,96:$Va2,97:$Vb2}),o($Vj2,[2,229],{93:$V72,94:$V82,97:$Vb2}),o($Vj2,[2,230],{93:$V72,94:$V82,97:$Vb2}),o($Vc2,[2,231]),o($Vc2,[2,232]),o($Vc2,[2,233]),o($Vc2,[2,234]),o($Vc2,[2,236]),o($Vc2,[2,242]),o($Vc2,[2,243]),o($VG1,[2,163]),o($Vg2,[2,119]),{43:$Vd2,115:420},o($Vh2,[2,109],{82:208,56:$Vs1}),o($VZ1,[2,196]),o($VZ1,[2,197]),o($VZ1,[2,198]),o($VZ1,[2,199]),o($VZ1,[2,200]),o($Vh2,[2,108])],
defaultActions: {13:[2,1],14:[2,2],74:[2,27],93:[2,23],127:[2,42],129:[2,44],150:[2,26],151:[2,113],153:[2,115],172:[2,17],174:[2,41],187:[2,58],199:[2,43],222:[2,55],233:[2,16],255:[2,56],275:[2,50],279:[2,114],286:[2,57],350:[2,18]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

//metodos o atributos
let variables = [];
let funciones = [];
let ambito;
let tipoDatoGlobal;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
    //console.log("Comentario xquery");

break;
case 1:/*espacio en blanco*/
break;
case 2:
    //console.log('Detecto for');
    return 58;

break;
case 3:
    //console.log('Detecto in');
    return 62;

break;
case 4:
    //console.log('Detecto at');
    return 67;

break;
case 5:
    //console.log('Detecto to');
    return 71;

break;
case 6:
    //console.log('Detecto let');
    return 42;

break;
case 7:
    //console.log('Detecto if');
    return 72;

break;
case 8:
    //console.log('Detecto then');
    return 74;

break;
case 9:
    //console.log('Detecto else');
    return 76;

break;
case 10:
    //console.log('Detecto declare');
    return 24;

break;
case 11:
    //console.log('Detecto function');
    return 25;

break;
case 12:
    //console.log('Detecto as');
    return 29;

break;
case 13:
    //console.log('Detecto parseInt');
    return 106;

break;
case 14:
    //console.log('Detecto toString');
    return 105;

break;
case 15:
   // console.log('Detecto toUppercase');
    return 103;

break;
case 16:
    //console.log('Detecto toLowercase');
    return 104;

break;
case 17:
    //console.log('Detecto subString');
    return 107;

break;
case 18:
    //console.log('Detecto double_tipo');
    return 49;

break;
case 19:
    //console.log('Detecto int');
    return 48;

break;
case 20:
    //console.log('Detecto string_tipo');
    return 47;

break;
case 21:
    //console.log('Detecto boolean');
    return 50;

break;
case 22:
    //console.log('Detecto data');
    return 117;

break;
case 23:
    //console.log('Detecto where');
    return 77;

break;
case 24:
    //console.log('Detecto order');
    return 112;

break;
case 25:
    //console.log('Detecto by');
    return 113;

break;
case 26:
    //console.log('Detecto return');
    return 38;

break;
case 27:
    //console.log('Detecto eq');
    return 87;

break;
case 28:
    //console.log('Detecto ne');
    return 88;

break;
case 29:
    //console.log('Detecto lt');
    return 89;

break;
case 30:
    //console.log('Detecto le');
    return 90;

break;
case 31:
    //console.log('Detecto gt');
    return 91;

break;
case 32:
    //console.log('Detecto ge');
    return 92;

break;
case 33:
    ////console.log('Detecto diagonal');
     return 56;

break;
case 34:
    ////console.log('Detecto decimal');
     return 100;
    
break;
case 35:
    console.log('Detecto punto');
     return 102;

break;
case 36:
    ////console.log('Detecto coma');
     return 18;

break;
case 37:
    ////console.log('Detecto arroba');
     return 140;

break;
case 38:
    ////console.log('Detecto node');
     return 121;

break;
case 39:
    ////console.log('Detecto text');
     return 122;

break;
case 40:
    ////console.log('Detecto last');
     return 123;

break;
case 41:
    ////console.log('Detecto position');
     return 124;

break;
case 42:
    ////console.log('Detecto ancestor');
     return 143;

break;
case 43:
    ////console.log('Detecto attribute');
     return 145;

break;
case 44:
    ////console.log('Detecto child');
     return 146;

break;
case 45:
    ////console.log('Detecto descendant');
     return 147;

break;
case 46:
    ////console.log('Detecto descendant-or-self');
     return 144;

break;
case 47:
    ////console.log('Detecto following');
     return 148;

break;
case 48:
    ////console.log('Detecto following-sibling');
     return 149;

break;
case 49:
    ////console.log('Detecto parent');
     return 150;

break;
case 50:
    ////console.log('Detecto preceding');
     return 151;

break;
case 51:
    ////console.log('Detecto self');
     return 152;

break;
case 52:
    ////console.log('Detecto operador_o');
    return 136;

break;
case 53:
    ////console.log('Detecto suma');
    return 95;

break;
case 54:
    ////console.log('Detecto resta');
    return 96;

break;
case 55:
    ////console.log('Detecto multiplicacion');
    return 93;

break;
case 56:
    ////console.log('Detecto division');
    return 94;

break;
case 57:
    ////console.log('Detecto igual');
    return 44;

break;
case 58:
    ////console.log('Detecto diferente');
    return 86;

break;
case 59:
    ////console.log('Detecto menor_igual');
    return 84;

break;
case 60:
    ////console.log('Detecto menor');
    return 51;

break;
case 61:
    ////console.log('Detecto mayor_igual');
    return 85;

break;
case 62:
    ////console.log('Detecto mayor');
    return 54;

break;
case 63:
    ////console.log('Detecto or');
    return 80;

break;
case 64:
    ////console.log('Detecto and');
    return 79;

break;
case 65:
    ////console.log('Detecto negado');
    return 98;

break;
case 66:
    // equivalente a %
    ////console.log('Detecto mod');
    return 97;

break;
case 67:
    ////console.log('Detecto llave_abierta');
     return 34;
    
break;
case 68:
    ////console.log('Detecto llave_cerrada');
     return 36;
    
break;
case 69:
    ////console.log('Detecto parentesis_abierto');
     return 13;
    
break;
case 70:
    ////console.log('Detecto parentesis_cerrado');
     return 15;
    
break;
case 71:
    ////console.log('Detecto corchete_abierto');
    return 131;
    
break;
case 72:
    ////console.log('Detecto corchete_cerrado');
     return 132;
    
break;
case 73:
    ////console.log('Detecto dos_puntos');
     return 12;
    
break;
case 74:
    ////console.log('Detecto punto_coma');
     return 23;
    
break;
case 75:
    ////console.log('Detecto interrogacion');
     return 32;
    
break;
case 76:
    ////console.log('Detecto decimal');
    return 70;

break;
case 77:
    //console.log('Detecto identificador xquery');
     return 43;
    
break;
case 78:
    ////console.log('Detecto identificador');
     return 11;
    
break;
case 79:
    //console.log('string '+yy_.yytext);
    return 101;

break;
case 80:
    //console.log('Detecto comillas');
     return 128;
    
break;
case 81:return 5;
break;
case 82:
    agregarErrorLexico("Lexico",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column+1);
    //console.log("Error leixico "+yy_.yytext);
    
break;
}
},
rules: [/^(?:\(:[^:]*:\))/,/^(?:\s+)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:at\b)/,/^(?:to\b)/,/^(?:let\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:as\b)/,/^(?:parseInt\b)/,/^(?:toString\b)/,/^(?:toUppercase|uppercase\b)/,/^(?:toLowercase|lowercase\b)/,/^(?:subString\b)/,/^(?:double|decimal|float\b)/,/^(?:integer\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:data\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:return\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:\/)/,/^(?:(0|[1-9][0-9]*)(\.(0|[0-9]*[1-9](0)?)))/,/^(?:\.)/,/^(?:,)/,/^(?:@)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:-or-self\b)/,/^(?:following\b)/,/^(?:-sibling\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:div\b)/,/^(?:=)/,/^(?:!=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:!)/,/^(?:mod\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:(0|[1-9][0-9]*))/,/^(?:\$\w+)/,/^(?:\w+)/,/^(?:("|')[^"\"{}"]*("|'))/,/^(?:("|'))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizadorXquery;
exports.Parser = analizadorXquery.Parser;
exports.parse = function () { return analizadorXquery.parse.apply(analizadorXquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}