/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XqueryC3D = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,6],$V1=[1,10],$V2=[5,12,14],$V3=[1,25],$V4=[1,31],$V5=[1,28],$V6=[1,23],$V7=[1,24],$V8=[1,26],$V9=[1,29],$Va=[1,30],$Vb=[1,32],$Vc=[21,24,33,34,42,47],$Vd=[1,39],$Ve=[1,40],$Vf=[1,45],$Vg=[1,41],$Vh=[1,42],$Vi=[1,43],$Vj=[1,44],$Vk=[1,46],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[1,50],$Vp=[1,51],$Vq=[1,52],$Vr=[1,53],$Vs=[1,54],$Vt=[1,55],$Vu=[1,56],$Vv=[1,57],$Vw=[24,42],$Vx=[1,65],$Vy=[21,24,33,34,42,43,47,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],$Vz=[1,72],$VA=[21,24,33,34,42,47,50,51],$VB=[1,95],$VC=[21,24,33,34,42,43,47,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65],$VD=[33,34],$VE=[1,117],$VF=[1,128],$VG=[1,129],$VH=[1,130],$VI=[1,131],$VJ=[2,16],$VK=[1,134],$VL=[19,30,33,34];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"OPTIONS":4,"eof":5,"DECLARACION_FUNCIONES":6,"ESTRUCTURA_LLAMADA_FUNCION":7,"ESTRUCTURA_FUNCION":8,"AUX_ESTRUCTURA_FUNCION":9,"CUERPO_FUNCION":10,"punto_coma":11,"declare":12,"function":13,"identificador":14,"dos_puntos":15,"IDENTIFICADOR_FUNCION":16,"ESTRUCTURA_PARAMETROS":17,"OPCION_TIPO_RETORNO":18,"llave_abierta":19,"OPCIONES_BLOQUE":20,"llave_cerrada":21,"EXPRESION_OPTIONS":22,"DECLARACION_VARIABLE":23,"return":24,"OPCIONES_RETURN":25,"ESTRUCTURA_IF":26,"as":27,"TIPOS_QUERY":28,"OPCION_INTERROGACION":29,"interrogacion":30,"parentesis_abierto":31,"PARAMETROS_FUNCION":32,"parentesis_cerrado":33,"coma":34,"PARAMETRO_FUNCION":35,"identificadorXquery":36,"string_tipo":37,"int":38,"double_tipo":39,"boolean":40,"VARIABLE":41,"let":42,"igual":43,"if":44,"ESTRUCTURA_CONDICION":45,"then":46,"else":47,"BOOLEAN_EXPRESION":48,"EXPRESION":49,"and":50,"or":51,"negacion":52,"menor":53,"menor_igual":54,"mayor":55,"mayor_igual":56,"diferente":57,"eq":58,"ne":59,"lt":60,"le":61,"gt":62,"ge":63,"suma":64,"resta":65,"multiplicacion":66,"division":67,"mod":68,"TIPOS_EXPRESION":69,"digito":70,"decimal":71,"string":72,"OPCIONES_PARAMETRO":73,"ESTRUCTURAS_PARAMETROS_LLAMADA":74,"$accept":0,"$end":1},
terminals_: {2:"error",5:"eof",11:"punto_coma",12:"declare",13:"function",14:"identificador",15:"dos_puntos",19:"llave_abierta",21:"llave_cerrada",24:"return",27:"as",30:"interrogacion",31:"parentesis_abierto",33:"parentesis_cerrado",34:"coma",36:"identificadorXquery",37:"string_tipo",38:"int",39:"double_tipo",40:"boolean",42:"let",43:"igual",44:"if",46:"then",47:"else",50:"and",51:"or",52:"negacion",53:"menor",54:"menor_igual",55:"mayor",56:"mayor_igual",57:"diferente",58:"eq",59:"ne",60:"lt",61:"le",62:"gt",63:"ge",64:"suma",65:"resta",66:"multiplicacion",67:"division",68:"mod",70:"digito",71:"decimal",72:"string"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[8,3],[9,7],[10,3],[20,0],[20,1],[20,3],[20,1],[16,1],[18,5],[18,0],[29,0],[29,1],[17,3],[32,3],[32,1],[32,0],[35,6],[28,1],[28,1],[28,1],[28,1],[23,2],[23,1],[41,5],[26,6],[45,3],[25,1],[25,1],[25,2],[22,1],[22,1],[48,3],[48,3],[48,2],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[48,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,2],[49,1],[69,1],[69,1],[69,1],[69,1],[69,1],[7,6],[73,1],[73,0],[74,3],[74,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log("\nAnalisis finalizado correctamente")
        console.log($$[$0-1]);
        console.log(vars);
        this.$ = {code: $$[$0-1].code, main: $$[$0-1].main, t: t, s: s, l: l};
        t=0;l=0;s=0;
        return this.$;
        
break;
case 2:
this.$ = {code: `${$$[$0-1].code}`, main:`${$$[$0].code}`}
break;
case 3:
this.$ = {code: $$[$0]};
break;
case 4: case 27:
this.$ = {code: `${$$[$0-1].code}${$$[$0].code}`};
break;
case 5: case 12: case 28: case 32: case 35: case 60: case 65: case 67:
this.$ = $$[$0];
break;
case 6:

        code = new Array();
        //code.push(`\n//Declarando funcion ${$$[$0-2].id}\n`);
        code.push(`void ${$$[$0-2].id}() {`);

        let aux = new Array();
        aux.push("double");
        for (let i = 0; i < t; i++) {
            aux.push(` t${i}`);
            aux.push(",");
        }
        aux.pop();
        aux.push(";");
        code.push(aux.join(""));

        code.push(`${temp(t)} = P + 1;`);
        $$[$0-2].params.forEach(p => {
            let varXquery = vars.find(e => e.id === p && e.ambito === ambito);
            code.push(`${temp(t+1)} = ${stack(temp(t))};`);
            code.push(`${stack(varXquery.sp)} = ${temp(t+1)};`);
            code.push(`${temp(t)} = ${temp(t)} + 1;`);
        });
        code.pop();
        code.push(`${$$[$0-1].code}`);
        code.push(`return;\n}`);
        t+=2;
        this.$ = {code: code.join("\n")};
    
break;
case 7:
this.$ = {id: $$[$0-2], params: $$[$0-1]};
break;
case 8: case 18: case 31:
this.$ = $$[$0-1];
break;
case 9:
this.$ = {code: ""};
break;
case 10: case 33:
this.$ = {val: $$[$0].val, code: `${$$[$0].code}${stack('P')} = ${$$[$0].val};\n`};
break;
case 11:
this.$ = {code: `${$$[$0-2].code}${$$[$0].code}\n`};
break;
case 13:

        ambito = $$[$0];
        this.$ = $$[$0];
    
break;
case 19: case 69:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 20: case 70:
this.$ = [$$[$0]];
break;
case 21: case 68:
this.$ = [];
break;
case 22:

        vars.push({id: $$[$0-5], ambito: ambito, sp: s++});
        this.$ = $$[$0-5];
    
break;
case 29:

        vars.push({id: $$[$0-3], ambito: ambito, sp: s});
        code = new Array();
        code.push(`\n//Declarando variable\n`);
        code.push(`${$$[$0].code}`);
        code.push(`${stack(s++)} = ${$$[$0].val};`);
        this.$ = {code: `${code.join("\n")}\n`};
    
break;
case 30:

        //this.$ = {code: `${$$[$0-4].code}${$$[$0-4].true}${($$[$0-2].code === "")? $$[$0-2].val : $$[$0-2].code}\n${stack('P')} = ${$$[$0-2].val};\ngoto ${tag(l)};\n${$$[$0-4].false}${($$[$0].code === "")? $$[$0].val : $$[$0].code}\n${stack('P')} = ${$$[$0].val};\n${tag(l++)}:\n`};
        code = new Array();
        code.push(`${$$[$0-4].code}`);
        code.push(`${$$[$0-4].true}`);
        code.push(`${($$[$0-2].code === "")? $$[$0-2].val : $$[$0-2].code}\n`);
        code.push(`${stack('P')} = ${$$[$0-2].val};`);
        code.push(`\ngoto ${tag(l)};\n`);
        code.push(`${$$[$0-4].false}`);
        code.push(`${($$[$0].code === "")? $$[$0].val : $$[$0].code}\n`);
        if ($$[$0].val != undefined) code.push(`${stack('P')} = ${$$[$0].val};\n`);
        code.push(`${tag(l++)}:\n`);
        this.$ = {code: code.join("")};
    
break;
case 34:
this.$ = {code: ""}
break;
case 36:
this.$ = {val:$$[$0].val, code: `${$$[$0].code}\n`};
break;
case 37:
this.$ = {true: `${$$[$0].true}`,   false: `${$$[$0-2].false}${$$[$0].false}`, code: `${$$[$0-2].code}${$$[$0-2].true}${$$[$0].code}\n`}
break;
case 38:
this.$ = {true: `${$$[$0].true}`,   false: `${$$[$0].false}`, code: `${$$[$0-2].code}${$$[$0-2].true}goto ${$$[$0].true.replace(':', ';')}${$$[$0-2].false}${$$[$0].code}\n`}
break;
case 39:
this.$ = {true: `${$$[$0].false}`,  false: `${$$[$0].true}`, code: `${$$[$0].code}\n`}
break;
case 40: case 48:
this.$ = {true: `${tag(l)}:\n`, false: `${tag(l+1)}:\n`, code: `${$$[$0-2].code}${$$[$0].code}if (${$$[$0-2].val} <  ${$$[$0].val}) goto ${tag(l)};\ngoto ${tag(l+1)};\n`};l+=2;
break;
case 41: case 49:
this.$ = {true: `${tag(l)}:\n`, false: `${tag(l+1)}:\n`, code: `${$$[$0-2].code}${$$[$0].code}if (${$$[$0-2].val} <= ${$$[$0].val}) goto ${tag(l)};\ngoto ${tag(l+1)};\n`};l+=2;
break;
case 42: case 50:
this.$ = {true: `${tag(l)}:\n`, false: `${tag(l+1)}:\n`, code: `${$$[$0-2].code}${$$[$0].code}if (${$$[$0-2].val} >  ${$$[$0].val}) goto ${tag(l)};\ngoto ${tag(l+1)};\n`};l+=2;
break;
case 43: case 51:
this.$ = {true: `${tag(l)}:\n`, false: `${tag(l+1)}:\n`, code: `${$$[$0-2].code}${$$[$0].code}if (${$$[$0-2].val} >= ${$$[$0].val}) goto ${tag(l)};\ngoto ${tag(l+1)};\n`};l+=2;
break;
case 44: case 46:
this.$ = {true: `${tag(l)}:\n`, false: `${tag(l+1)}:\n`, code: `${$$[$0-2].code}${$$[$0].code}if (${$$[$0-2].val} == ${$$[$0].val}) goto ${tag(l)};\ngoto ${tag(l+1)};\n`};l+=2;
break;
case 45: case 47:
this.$ = {true: `${tag(l)}:\n`, false: `${tag(l+1)}:\n`, code: `${$$[$0-2].code}${$$[$0].code}if (${$$[$0-2].val} != ${$$[$0].val}) goto ${tag(l)};\ngoto ${tag(l+1)};\n`};l+=2;
break;
case 52:
this.$ = {true: $$[$0-1].true, false: $$[$0-1].false, code: `${$$[$0-1].code}\n`}
break;
case 53:
this.$ = {val: temp(t), code: `${$$[$0-2].code}${$$[$0].code}${temp(t++)} = ${$$[$0-2].val} + ${$$[$0].val};\n`}
break;
case 54:
this.$ = {val: temp(t), code: `${$$[$0-2].code}${$$[$0].code}${temp(t++)} = ${$$[$0-2].val} - ${$$[$0].val};\n`}
break;
case 55:
this.$ = {val: temp(t), code: `${$$[$0-2].code}${$$[$0].code}${temp(t++)} = ${$$[$0-2].val} * ${$$[$0].val};\n`}
break;
case 56:
this.$ = {val: temp(t), code: `${$$[$0-2].code}${$$[$0].code}${temp(t++)} = ${$$[$0-2].val} / ${$$[$0].val};\n`}
break;
case 57:
this.$ = {val: temp(t), code: `${$$[$0-2].code}${$$[$0].code}${temp(t++)} = ${$$[$0-2].val} % ${$$[$0].val};\n`}
break;
case 58:
this.$ = {val: $$[$0-1].val,  code: `${$$[$0-1].code}`}
break;
case 59:
this.$ = {val: temp(t), code: `${$$[$0].code}${temp(t++)} = -${$$[$0].val};\n`}
break;
case 61: case 62:
this.$ = {val: $$[$0], code: ""}
break;
case 63:

        let varXquery = vars.find(e => e.id === $$[$0] && e.ambito === ambito);
        this.$ = {val: temp(t), code: `${temp(t++)} = ${stack(varXquery.sp)};\n`};
    
break;
case 64:

        code = new Array();
        $$[$0] = $$[$0].replace('\"', '');
        $$[$0] = $$[$0].replace('\"', '');
        code.push(`${temp(t)} = H;`);
        Array.from($$[$0]).forEach(c => {
            code.push(`heap[(int)H] = ${c.charCodeAt(0)};`);
            code.push(`H = H + 1;`);
        });
        code.push(`${heap('H')} = -1;`);
        code.push(`H = H + 1;`);
        //code.push(`${stack(s++)} = ${temp(t)};`);
        this.$ = {val: temp(t++), code: `${code.join("\n")}\n`};
    
break;
case 66:

        code = new Array();
        $$[$0-1].forEach(p => code.push(p.code));
        code.push(`\n//Llamando a funcion ${$$[$0-3]}\n`);
        code.push(`P = P + ${s};\n`);
        if ($$[$0-1].length > 0) code.push(`${temp(t)} = P + 1;\n`);
        $$[$0-1].forEach(p => {
            code.push(`${stack(temp(t))} = ${p.val};\n`);
            code.push(`${temp(t)} = ${temp(t)} + 1;\n`);
        });
        code.pop();
        code.push(`${$$[$0-3]}();\n`);
        code.push(`${temp(t+1)} = ${stack('P')};\n`);
        code.push(`P = P - ${s};\n`);
        t+=1;
        this.$ = {val: temp(t++), code: `${code.join("")}\n`};
    
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:5,12:$V0},{1:[3]},{5:[1,7]},{5:[2,3],7:8,8:9,9:5,12:$V0,14:$V1},o($V2,[2,5]),{10:11,19:[1,12]},{13:[1,13]},{1:[2,1]},{5:[2,2]},o($V2,[2,4]),{15:[1,14]},{11:[1,15]},{7:33,14:$V1,20:16,21:[2,9],22:17,23:18,26:19,31:$V3,36:$V4,41:22,42:$V5,44:$V6,48:20,49:21,52:$V7,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{14:[1,34]},{14:[1,35]},o($V2,[2,6]),{21:[1,36]},{21:[2,10]},{24:[1,37],41:38,42:$V5},{21:[2,12]},o($Vc,[2,35],{50:$Vd,51:$Ve}),o($Vc,[2,36],{43:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($Vw,[2,28]),{31:[1,59],45:58},{7:33,14:$V1,31:$V3,36:$V4,48:60,49:61,52:$V7,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$V3,36:$V4,48:62,49:63,52:$V7,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$Vx,36:$V4,49:64,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},o($Vy,[2,60]),{36:[1,66]},o($Vy,[2,61]),o($Vy,[2,62]),o($Vy,[2,63]),o($Vy,[2,64]),o($Vy,[2,65]),{15:[1,67]},{31:[1,68]},{11:[2,8]},{7:33,14:$V1,22:71,25:69,26:70,31:$Vz,36:$V4,44:$V6,48:20,49:21,52:$V7,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},o($Vw,[2,27]),{7:33,14:$V1,31:$V3,36:$V4,48:73,49:61,52:$V7,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$V3,36:$V4,48:74,49:61,52:$V7,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$Vx,36:$V4,49:75,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$Vx,36:$V4,49:76,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$Vx,36:$V4,49:77,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$Vx,36:$V4,49:78,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$Vx,36:$V4,49:79,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$Vx,36:$V4,49:80,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$Vx,36:$V4,49:81,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$Vx,36:$V4,49:82,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$Vx,36:$V4,49:83,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$Vx,36:$V4,49:84,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$Vx,36:$V4,49:85,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$Vx,36:$V4,49:86,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$Vx,36:$V4,49:87,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$Vx,36:$V4,49:88,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$Vx,36:$V4,49:89,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$Vx,36:$V4,49:90,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,31:$Vx,36:$V4,49:91,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{46:[1,92]},{7:33,14:$V1,31:$V3,36:$V4,48:93,49:61,52:$V7,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},o($VA,[2,39]),{43:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv},{33:[1,94],50:$Vd,51:$Ve},{33:$VB,43:$Vf,53:$Vg,54:$Vh,55:$Vi,56:$Vj,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp,63:$Vq,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv},o($Vy,[2,59]),{7:33,14:$V1,31:$Vx,36:$V4,49:96,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{15:[1,97]},{14:[1,99],16:98},{7:33,14:$V1,22:102,31:$V3,33:[2,68],36:$V4,48:20,49:21,52:$V7,65:$V8,69:27,70:$V9,71:$Va,72:$Vb,73:100,74:101},{21:[2,11]},{21:[2,32]},{21:[2,33]},{7:33,14:$V1,31:$V3,33:[1,103],36:$V4,48:62,49:63,52:$V7,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},o($VA,[2,37]),o($VA,[2,38]),o($VA,[2,40],{64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($VA,[2,41],{64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($VA,[2,42],{64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($VA,[2,43],{64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($VA,[2,44],{64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($VA,[2,45],{64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($VA,[2,46],{64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($VA,[2,47],{64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($VA,[2,48],{64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($VA,[2,49],{64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($VA,[2,50],{64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($VA,[2,51],{64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv}),o($VC,[2,53],{66:$Vt,67:$Vu,68:$Vv}),o($VC,[2,54],{66:$Vt,67:$Vu,68:$Vv}),o($Vy,[2,55]),o($Vy,[2,56]),o($Vy,[2,57]),{7:33,14:$V1,22:104,31:$V3,36:$V4,48:20,49:21,52:$V7,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{33:[1,105],50:$Vd,51:$Ve},o($VA,[2,52]),o($Vy,[2,58]),{33:$VB,64:$Vr,65:$Vs,66:$Vt,67:$Vu,68:$Vv},{43:[1,106]},{17:107,31:[1,108]},{31:[2,13]},{33:[1,109]},{33:[2,67],34:[1,110]},o($VD,[2,70]),{21:[2,34]},{47:[1,111]},{46:[2,31]},{7:33,14:$V1,22:112,31:$V3,36:$V4,48:20,49:21,52:$V7,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{18:113,19:[2,15],27:[1,114]},o($VD,[2,21],{32:115,35:116,36:$VE}),o([5,21,24,33,34,42,43,47,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],[2,66]),{7:33,14:$V1,22:118,31:$V3,36:$V4,48:20,49:21,52:$V7,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},{7:33,14:$V1,22:71,25:119,26:70,31:$Vz,36:$V4,44:$V6,48:20,49:21,52:$V7,65:$V8,69:27,70:$V9,71:$Va,72:$Vb},o($Vw,[2,29]),{19:[2,7]},{14:[1,120]},{33:[1,121],34:[1,122]},o($VD,[2,20]),{27:[1,123]},o($VD,[2,69]),{21:[2,30]},{15:[1,124]},o([19,27],[2,18]),{35:125,36:$VE},{14:[1,126]},{28:127,37:$VF,38:$VG,39:$VH,40:$VI},o($VD,[2,19]),{15:[1,132]},{19:$VJ,29:133,30:$VK},o($VL,[2,23]),o($VL,[2,24]),o($VL,[2,25]),o($VL,[2,26]),{28:135,37:$VF,38:$VG,39:$VH,40:$VI},{19:[2,14]},o([19,33,34],[2,17]),o($VD,$VJ,{29:136,30:$VK}),o($VD,[2,22])],
defaultActions: {7:[2,1],8:[2,2],17:[2,10],19:[2,12],36:[2,8],69:[2,11],70:[2,32],71:[2,33],99:[2,13],103:[2,34],105:[2,31],113:[2,7],119:[2,30],133:[2,14]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    let t = 0;
    let s = 0;
    let l = 0;
    let code = new Array();
    let temp = (i) => {return `t${i}`};
    let tag = (i) => {return `L${i}`};
    let heap = (i) => {return `heap[(int)${i}]`};
    let stack = (i) => {return `stack[(int)${i}]`};
    let vars = new Array();
    let ambito = "";
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:

break;
case 1:/*espacio en blanco*/
break;
case 2:
    //console.log('Detecto let');
    return 42;

break;
case 3:
    //console.log('Detecto if');
    return 44;

break;
case 4:
    //console.log('Detecto then');
    return 46;

break;
case 5:
    //console.log('Detecto else');
    return 47;

break;
case 6:
    //console.log('Detecto declare');
    return 12;

break;
case 7:
    //console.log('Detecto function');
    return 13;

break;
case 8:
    //console.log('Detecto as');
    return 27;

break;
case 9:
    return 39;

break;
case 10:
    return 38;

break;
case 11:
    return 37;

break;
case 12:
    return 40;

break;
case 13:
    //console.log('Detecto return');
    return 24;

break;
case 14:
    return 58;

break;
case 15:
    return 59;

break;
case 16:
    return 60;

break;
case 17:
    return 61;

break;
case 18:
    return 62;

break;
case 19:
    return 63;

break;
case 20:
     return 'diagonal';

break;
case 21:
     return 71;
    
break;
case 22:
     return 'punto';

break;
case 23:
     return 34;

break;
case 24:
    return 'operador_o';

break;
case 25:
    return 64;

break;
case 26:
    return 65;

break;
case 27:
    return 66;

break;
case 28:
    return 67;

break;
case 29:
    return 43;

break;
case 30:
    return 57;

break;
case 31:
    return 52;

break;
case 32:
    return 54;

break;
case 33:
    return 53;

break;
case 34:
    return 56;

break;
case 35:
    return 55;

break;
case 36:
    return 51;

break;
case 37:
    return 50;

break;
case 38:
    // equivalente a %
    return 68;

break;
case 39:
     return 19;
    
break;
case 40:
     return 21;
    
break;
case 41:
     return 31;
    
break;
case 42:
     return 33;
    
break;
case 43:
    return 'corchete_abierto';
    
break;
case 44:
     return 'corchete_cerrado';
    
break;
case 45:
     return 15;
    
break;
case 46:
     return 11;
    
break;
case 47:
     return 30;
    
break;
case 48:
    return 70;

break;
case 49:
     return 36;
    
break;
case 50:
     return 14;
    
break;
case 51:
    return 72;

break;
case 52:
     return 'comillas';
    
break;
case 53:return 5;
break;
case 54:
        console.log("error lexico detectado "+yy_.yytext);

    //agregarErrorLexico("Lexico",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column+1);
    
break;
}
},
rules: [/^(?:#[^\n]+)/,/^(?:\s+)/,/^(?:let\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:as\b)/,/^(?:double|decimal|float\b)/,/^(?:integer\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:return\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:\/)/,/^(?:(0|[1-9][0-9]*)(\.(0|[0-9]*[1-9](0)?)))/,/^(?:\.)/,/^(?:,)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:div\b)/,/^(?:=)/,/^(?:!=)/,/^(?:!)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:(0|[1-9][0-9]*))/,/^(?:\$\w+)/,/^(?:\w+)/,/^(?:("|')[^"\"{}"]*("|'))/,/^(?:("|'))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XqueryC3D;
exports.Parser = XqueryC3D.Parser;
exports.parse = function () { return XqueryC3D.parse.apply(XqueryC3D, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}