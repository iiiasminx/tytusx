/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizadorXquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,51],$V1=[2,161],$V2=[1,22],$V3=[1,21],$V4=[1,20],$V5=[1,8],$V6=[1,19],$V7=[1,26],$V8=[1,25],$V9=[5,20,22,33,39,46,52,72,98],$Va=[1,29],$Vb=[2,196],$Vc=[1,30],$Vd=[1,34],$Ve=[5,22,46,52],$Vf=[5,17,20,22,33,37,39,46,49,52,72,73,74,79,80,81,88,89,90,91,92,98,118],$Vg=[1,36],$Vh=[1,39],$Vi=[1,40],$Vj=[1,42],$Vk=[2,5,13,17,20,22,33,37,39,46,49,51,52,72,73,74,79,80,81,88,89,90,91,92,98,118],$Vl=[2,5,13,17,18,20,22,33,37,39,46,49,51,52,70,72,73,74,79,80,81,82,83,84,85,86,87,88,89,90,91,92,98,117,118],$Vm=[1,47],$Vn=[1,80],$Vo=[1,59],$Vp=[1,60],$Vq=[1,61],$Vr=[1,58],$Vs=[1,65],$Vt=[1,89],$Vu=[1,90],$Vv=[1,91],$Vw=[1,92],$Vx=[1,54],$Vy=[1,55],$Vz=[1,56],$VA=[1,57],$VB=[1,51],$VC=[1,52],$VD=[1,53],$VE=[1,62],$VF=[1,76],$VG=[1,78],$VH=[1,66],$VI=[1,67],$VJ=[1,68],$VK=[1,69],$VL=[1,70],$VM=[1,71],$VN=[1,77],$VO=[1,63],$VP=[1,64],$VQ=[1,72],$VR=[1,73],$VS=[1,74],$VT=[1,75],$VU=[1,79],$VV=[1,81],$VW=[1,82],$VX=[1,83],$VY=[1,84],$VZ=[1,85],$V_=[1,86],$V$=[1,87],$V01=[1,88],$V11=[5,17,20,22,33,37,39,46,49,51,52,72,73,74,79,80,81,88,89,90,91,92,98,118],$V21=[2,5,13,17,20,22,33,37,39,46,49,51,52,72,73,74,79,80,81,88,89,90,91,92,98,117,118],$V31=[37,46,49,51,73,74,79,80,81,88,89,90,91,92,118],$V41=[1,103],$V51=[1,107],$V61=[1,106],$V71=[1,115],$V81=[1,111],$V91=[1,112],$Va1=[1,114],$Vb1=[1,125],$Vc1=[13,88,107,108,125,127,130,132,133,134,135,137,138,139],$Vd1=[5,20,22,33,46,52],$Ve1=[13,49],$Vf1=[2,136],$Vg1=[13,14,49],$Vh1=[13,27,49],$Vi1=[73,74,118],$Vj1=[1,149],$Vk1=[1,150],$Vl1=[1,147],$Vm1=[1,148],$Vn1=[1,151],$Vo1=[17,37,46,49,73,74,79,80,81,88,89,90,91,92,118],$Vp1=[1,172],$Vq1=[1,176],$Vr1=[51,73,74,88,89,90,91,92,118],$Vs1=[17,37,46,49,51,73,74,79,80,81,88,89,90,91,92,118],$Vt1=[5,20,22,33,39,46,52,98],$Vu1=[17,18],$Vv1=[17,37,46,49,73,74,79,80,81,90,91,118],$Vw1=[5,20,22,33,39,46,52],$Vx1=[1,219],$Vy1=[1,221],$Vz1=[1,233],$VA1=[1,241],$VB1=[1,242],$VC1=[5,17,20,22,33,39,46,52,73,74,98],$VD1=[1,249],$VE1=[1,250],$VF1=[1,254],$VG1=[5,17,18,20,22,33,37,39,46,49,51,52,70,79,80,81,82,83,84,85,86,87],$VH1=[1,258],$VI1=[1,261],$VJ1=[1,262],$VK1=[1,259],$VL1=[1,265],$VM1=[13,31,46,114],$VN1=[5,20,22,33,46,52,70],$VO1=[5,18,20,22,33,39,46,52],$VP1=[1,303],$VQ1=[1,301],$VR1=[1,305],$VS1=[1,302],$VT1=[1,304],$VU1=[1,329],$VV1=[1,330],$VW1=[1,331],$VX1=[1,332],$VY1=[1,333],$VZ1=[5,13,15,17,20,22,33,36,39,46,52,62,73,74,88,89,90,91,92,93,98],$V_1=[2,79],$V$1=[2,149],$V02=[5,13,15,17,20,22,33,36,39,46,52,62,73,74,90,91,93,98],$V12=[13,31,46],$V22=[1,374],$V32=[1,375],$V42=[13,15,20,33,36,39,62,93],$V52=[5,13,20,22,31,33,46,52,70];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INIT":3,"CONSULTAS_XQUERY":4,"eof":5,"CONSULTAS_XPATH":6,"ESTRUCTURA_LLAMADA_FUNCION":7,"RECURSIVA_QUERY":8,"OPCIONES_QUERY":9,"ESTRUCTURA_FOR":10,"ETIQUETAS_QUERY":11,"ESTRUCTURA_FUNCION":12,"identificador":13,"dos_puntos":14,"parentesis_abierto":15,"ESTRUCTURAS_PARAMETROS_LLAMADA":16,"parentesis_cerrado":17,"coma":18,"ESTRUCTURA_PARAMETROS_LLAMADA":19,"identificadorXquery":20,"RUTAS_QUERY":21,"declare":22,"function":23,"ESTRUCTURA_PARAMETROS":24,"as":25,"TIPOS_QUERY":26,"interrogacion":27,"CUERPO_FUNCION":28,"punto_coma":29,"PARAMETROS_FUNCION":30,"llave_abierta":31,"BLOQUES_CODIGO":32,"llave_cerrada":33,"BLOQUE_CODIGO":34,"EXPRESION_SIMPLE":35,"let":36,"igual":37,"OPCIONES_LET":38,"return":39,"TO":40,"PARAMETRO_FUNCION":41,"string_tipo":42,"int":43,"double":44,"boolean":45,"menor":46,"ID_ETIQUETA":47,"ATRIBUTOS_ETIQUETA":48,"mayor":49,"DENTRO_ETIQUETA_QUERY":50,"diagonal":51,"for":52,"RECURSIVA_FOR":53,"FOR":54,"OPCION_AT":55,"in":56,"OPCIONES_FOR":57,"ESTRUCTURA_WHERE":58,"ESTRUCTURA_ORDER_BY":59,"ESTRUCTURA_RETURN":60,"at":61,"digito":62,"to":63,"ESTRUCTURA_IF":64,"if":65,"ESTRUCTURA_CONDICION":66,"then":67,"OPCIONES_RETURN":68,"OPCIONES_ELSE":69,"else":70,"FILTROS_QUERY":71,"where":72,"and":73,"or":74,"FILTRO_QUERY":75,"EXPRESION_RELACIONAL_QUERY":76,"DIAGONALES":77,"RUTA_WHERE":78,"menor_igual":79,"mayor_igual":80,"diferente":81,"eq":82,"ne":83,"lt":84,"le":85,"gt":86,"ge":87,"multiplicacion":88,"division":89,"suma":90,"resta":91,"mod":92,"string":93,"ATRIBUTO":94,"PUNTOS":95,"NODE":96,"TEXT":97,"order":98,"by":99,"OPCIONES_ORDER_BY":100,"OPCION_ORDER_BY":101,"OPCIONES_ETIQUETA":102,"data":103,"OPCION_RUTA_QUERY":104,"DENTRO_ETIQUETA":105,"EJES":106,"node":107,"text":108,"last":109,"position":110,"div":111,"ATRIBUTO_ETIQUETA":112,"TIPO_ATRIBUTO":113,"comillas":114,"OPCION_ETIQUETA":115,"CONSULTA_XPATH":116,"corchete_abierto":117,"corchete_cerrado":118,"RELATIVA":119,"EXPRESIONES_RUTA":120,"EXPRESION_RUTA":121,"operador_o":122,"ACCESORES":123,"OPCIONAL_PREDICADO":124,"punto":125,"ID":126,"arroba":127,"EJE":128,"ACCESORES_EJE":129,"ancestor":130,"or-self":131,"attribute":132,"child":133,"descendant":134,"following":135,"sibling":136,"parent":137,"preceding":138,"self":139,"PREDICADOS":140,"PREDICADO":141,"FILTRO":142,"EXPR":143,"TIPOS":144,"$accept":0,"$end":1},
terminals_: {2:"error",5:"eof",13:"identificador",14:"dos_puntos",15:"parentesis_abierto",17:"parentesis_cerrado",18:"coma",20:"identificadorXquery",22:"declare",23:"function",25:"as",27:"interrogacion",29:"punto_coma",31:"llave_abierta",33:"llave_cerrada",36:"let",37:"igual",39:"return",42:"string_tipo",43:"int",44:"double",45:"boolean",46:"menor",49:"mayor",51:"diagonal",52:"for",56:"in",61:"at",62:"digito",63:"to",65:"if",67:"then",70:"else",72:"where",73:"and",74:"or",79:"menor_igual",80:"mayor_igual",81:"diferente",82:"eq",83:"ne",84:"lt",85:"le",86:"gt",87:"ge",88:"multiplicacion",89:"division",90:"suma",91:"resta",92:"mod",93:"string",98:"order",99:"by",103:"data",107:"node",108:"text",109:"last",110:"position",111:"div",114:"comillas",117:"corchete_abierto",118:"corchete_cerrado",122:"operador_o",125:"punto",127:"arroba",130:"ancestor",131:"or-self",132:"attribute",133:"child",134:"descendant",135:"following",136:"sibling",137:"parent",138:"preceding",139:"self"},
productions_: [0,[3,2],[3,2],[4,1],[4,1],[4,1],[8,2],[8,1],[9,1],[9,1],[9,1],[7,6],[16,3],[16,1],[19,1],[19,2],[12,13],[24,3],[28,3],[32,2],[32,1],[34,1],[34,5],[34,2],[38,1],[38,1],[30,3],[30,1],[30,0],[41,6],[26,1],[26,1],[26,1],[26,1],[11,9],[50,2],[50,1],[50,3],[50,1],[10,2],[53,1],[53,2],[54,6],[55,1],[55,3],[57,1],[57,1],[57,5],[40,5],[64,5],[69,2],[69,3],[66,3],[58,2],[58,0],[71,3],[71,3],[71,1],[75,3],[21,3],[21,2],[76,2],[76,2],[76,2],[76,2],[76,2],[76,2],[76,2],[76,2],[76,2],[76,2],[76,2],[76,2],[35,3],[35,3],[35,3],[35,3],[35,3],[35,3],[35,1],[35,1],[35,1],[35,1],[78,1],[78,1],[78,1],[78,1],[78,1],[59,3],[59,0],[100,1],[100,3],[101,2],[101,1],[60,2],[60,0],[68,1],[68,1],[68,2],[68,5],[68,1],[102,8],[102,9],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[47,1],[48,2],[48,0],[112,3],[113,1],[113,3],[105,1],[105,2],[105,2],[105,1],[115,1],[115,3],[115,7],[115,3],[104,1],[104,0],[6,1],[6,3],[6,3],[116,1],[116,1],[116,2],[120,2],[120,1],[120,2],[121,3],[121,2],[119,0],[119,2],[77,2],[77,1],[95,1],[95,2],[123,2],[123,2],[123,2],[123,1],[123,1],[123,1],[97,3],[96,3],[94,2],[94,2],[126,1],[126,1],[128,4],[129,1],[129,1],[129,1],[129,1],[106,1],[106,2],[106,1],[106,1],[106,2],[106,1],[106,1],[106,2],[106,1],[106,1],[106,2],[106,1],[124,0],[124,1],[140,2],[140,1],[140,3],[141,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,2],[142,1],[143,3],[143,3],[143,3],[143,3],[143,3],[143,3],[143,1],[143,3],[144,1],[144,1],[144,1],[144,1],[144,1],[144,3],[144,3],[144,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log('\nexito al analizar\n');
        //return //$$[$0-1];
    
break;
case 2:

        console.log("Error sintatciti error eof "+$$[$0-1]);
        //erroresXpath.agregarError("Sintactico","//errores seguidos"+yytext,this._//$.first_line,this._//$.first_column);
        return [];
    
break;
case 26:

        $$[$0-2].parametros,push($$[$0]);
        this.$ = {parametros:$$[$0-2]}
    
break;
case 27:

        this.$ = {parametros:[$$[$0]]};
    
break;
case 29:

        this.$ = {parametro:new Dato($$[$0-5],$$[$0-1])};
    
break;
case 30:

        this.$ = TipoDato.STRING;
    
break;
case 31:

        this.$ = TipoDato.INT;
    
break;
case 32:

        this.$ = TipoDato.DOUBLE;
    
break;
case 33:

        this.$ = TipoDato.BOOLEAN;
    
break;
case 150:

        //$//$ = [//$$[$0]];
        
break;
case 151:

        //$//$ = [];
        //erroresXpath.agregarError("Sintactico","No puede venir un predicado como un nodo\n"+yytext,this._//$.first_line,this._//$.first_column);
        console.log("Error sintatciti "+$$[$0-1]);
    
break;
case 152:

        //$//$ = [];
        //erroresXpath.agregarError("Sintactico","No puede venir una expresion como un nodo\n"+yytext,this._//$.first_line,this._//$.first_column);
        console.log("Error sintatciti "+$$[$0-1]);
    
break;
case 153:

        //$//$ = [new ConsultaSimple(//$$[$0])];
        
break;
case 154: case 157:

        //$//$ = //$$[$0];
        
break;
case 155:

        //$//$= [];
        //if (//$$[$0-1] === "punto") {
            //$//$.push(new ConsultaPunto());
        //}
        //$$[$0].forEach(e => //$//$.push(e));
    
break;
case 156:

        ////$$[$0].forEach(e => //$$[$0-1].push(e)); //$//$ = //$$[$0-1];
        
break;
case 158:

        console.log("Error sintatciti "+$$[$0-1]);
        //$//$ = [];
        //erroresXpath.agregarError("Sintactico","Consulta no aceptada:\n"+yytext,this._//$.first_line,this._//$.first_column);
    
break;
case 159:

            //$//$ = [];
            //if (!(//$$[$0-2] === "")) {
                //$//$.push(new ConsultaSimple(//$$[$0-2]));
            //}
            //$//$.push(FabricaConsulta.fabricar(//$$[$0-1], //$$[$0].id, //$$[$0].eje));
    
break;
case 160:

        console.log("Error sintatciti "+$$[$0-1]);
        //erroresXpath.agregarError("Sintactico",yytext,this._//$.first_line,this._//$.first_column);
        //$//$ = [];
    
break;
case 161:

        //$//$ = "";
    
break;
case 162: case 167:

        //$//$ = //$$[$0-1];
    
break;
case 163:

        //$//$ = "doble";
    
break;
case 164:

        //$//$ = "simple";
    
break;
case 165:

        //$//$ = "punto";
    
break;
case 166:

        //$//$ = "puntos";
    
break;
case 168: case 169:

        //$//$ = {id: //$$[$0-1], eje: ""};
    
break;
case 170: case 171: case 172: case 177:

        //$//$ = {id: //$$[$0], eje: ""};
    
break;
case 173: case 174:

        //$//$ = //$$[$0-2] + "()";
    
break;
case 175: case 176:

        //$//$ = //$$[$0-1] + //$$[$0];
    
break;
case 178: case 180: case 181: case 182: case 183: case 184: case 186: case 187: case 189: case 190: case 192: case 193: case 195:

        //$//$ = //$$[$0];
    
break;
case 179:

        //$//$ = {id: //$$[$0], eje: //$$[$0-3]}
        
break;
case 185: case 188: case 191: case 194:

        //$//$ = //$$[$0-1]+//$$[$0];
    
break;
case 200:

        console.log("Error sintatciti "+$$[$0-1]);
        //erroresXpath.agregarError("Sintactico","Error en predicado\n"+yytext,this._//$.first_line,this._//$.first_column);
    
break;
case 219:

        console.log("Error sintatciti "+$$[$0-1]);
        //erroresXpath.agregarError("Sintactico","Error dentro expresion\n"+yytext,this._//$.first_line,this._//$.first_column);
    
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:4,7:5,8:6,116:7,9:11,119:12,120:13,95:14,10:15,11:16,12:17,121:18,2:[1,3],13:[1,10],15:[1,9],22:$V2,46:$V3,52:$V4,117:$V5,125:$V6}),{1:[3]},{5:[1,23]},{5:[1,24],13:$V7,122:$V8},{5:[2,3]},{5:[2,4]},{5:[2,5],9:27,10:15,11:16,12:17,22:$V2,46:$V3,52:$V4},o($V9,[2,150]),{2:[1,28]},{2:$Va},o($V0,$Vb,{124:31,140:32,141:33,14:$Vc,117:$Vd}),o($Ve,[2,7]),o($Vf,[2,153],{77:35,51:$Vg}),o($Vf,[2,154],{121:37,119:38,2:$Vh,13:$Vi,51:$V1}),{2:$Vj,13:$Vi,51:$V1,119:38,120:41,121:18},o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Vk,[2,157]),o($Vl,[2,165],{125:[1,43]}),{20:$Vm,53:44,54:45,55:46},{13:$Vn,22:$Vo,23:$Vp,25:$Vq,26:50,36:$Vr,39:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,47:48,52:$Vx,56:$Vy,61:$Vz,63:$VA,65:$VB,67:$VC,70:$VD,72:$VE,73:$VF,74:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,92:$VN,98:$VO,99:$VP,106:49,107:$VQ,108:$VR,109:$VS,110:$VT,111:$VU,130:$VV,132:$VW,133:$VX,134:$VY,135:$VZ,137:$V_,138:$V$,139:$V01},{23:[1,93]},{1:[2,1]},{1:[2,2]},o($Vk,[2,158]),o($Vk,[2,160]),o($Ve,[2,6]),{118:[1,94]},{17:[1,95]},{13:[1,96]},o($V11,[2,162]),o($Vk,[2,197],{141:97,117:[1,98]}),o($V21,[2,199]),o($V31,$V1,{119:12,120:13,121:18,142:100,143:101,128:102,144:104,106:105,94:108,95:109,116:110,97:113,2:[1,99],13:$Vi,15:$V41,62:$V51,93:$V61,108:$V71,109:$V81,110:$V91,125:$V6,127:$Va1,130:$VV,132:$VW,133:$VX,134:$VY,135:$VZ,137:$V_,138:$V$,139:$V01}),{13:[1,123],88:[1,120],94:118,95:119,96:121,97:122,106:105,107:$Vb1,108:$V71,123:116,125:$V6,126:117,127:$Va1,128:124,130:$VV,132:$VW,133:$VX,134:$VY,135:$VZ,137:$V_,138:$V$,139:$V01},o($Vc1,[2,164],{51:[1,126]}),o($Vk,[2,156]),{51:$Vg,77:35},{13:$V7},o($V11,$Vb,{124:31,140:32,141:33,117:$Vd}),o($Vf,[2,155],{121:37,119:38,2:$Vh,13:$Vi,51:$V1}),{13:$V7,122:$V8},o($Vl,[2,166]),o([5,22,33,46,52],[2,39],{55:46,54:127,20:$Vm}),o($Vd1,[2,40]),{56:[1,128]},{56:[2,43],61:[1,129]},o($Ve1,$Vf1,{48:130}),o($Ve1,[2,103]),o($Ve1,[2,104]),o($Ve1,[2,105]),o($Ve1,[2,106]),o($Ve1,[2,107]),o($Ve1,[2,108]),o($Ve1,[2,109]),o($Ve1,[2,110]),o($Ve1,[2,111]),o($Ve1,[2,112]),o($Ve1,[2,113]),o($Ve1,[2,114]),o($Ve1,[2,115]),o($Ve1,[2,116]),o($Ve1,[2,117]),o($Ve1,[2,118]),o($Ve1,[2,119]),o($Ve1,[2,120]),o($Ve1,[2,121]),o($Ve1,[2,122]),o($Ve1,[2,123]),o($Ve1,[2,124]),o($Ve1,[2,125]),o($Ve1,[2,126]),o($Ve1,[2,127]),o($Ve1,[2,128]),o($Ve1,[2,129]),o($Ve1,[2,130]),o($Ve1,[2,131]),o($Ve1,[2,132]),o($Ve1,[2,133]),o($Ve1,[2,134]),o($Vg1,[2,184],{131:[1,131]}),o($Vg1,[2,186]),o($Vg1,[2,187]),o($Vg1,[2,189],{131:[1,132]}),o($Vg1,[2,190],{136:[1,133]}),o($Vg1,[2,192]),o($Vg1,[2,193],{136:[1,134]}),o($Vg1,[2,195]),o($Vh1,[2,30]),o($Vh1,[2,31]),o($Vh1,[2,32]),o($Vh1,[2,33]),{13:[1,135]},o($V9,[2,151]),o($V9,[2,152]),{15:[1,136]},o($V21,[2,198]),o($V31,$V1,{119:12,120:13,121:18,142:100,143:101,128:102,144:104,106:105,94:108,95:109,116:110,97:113,2:$Vj,13:$Vi,15:$V41,62:$V51,93:$V61,108:$V71,109:$V81,110:$V91,125:$V6,127:$Va1,130:$VV,132:$VW,133:$VX,134:$VY,135:$VZ,137:$V_,138:$V$,139:$V01}),{13:$V7,118:[1,137],122:$V8},{73:[1,139],74:[1,140],118:[1,138]},o($Vi1,[2,211],{37:[1,141],46:[1,144],49:[1,143],79:[1,146],80:[1,145],81:[1,142],88:$Vj1,89:$Vk1,90:$Vl1,91:$Vm1,92:$Vn1}),o($Vi1,$Vb,{140:32,141:33,124:152,117:$Vd}),o([17,51,88,89,90,91,92],$V1,{119:12,120:13,121:18,144:104,94:108,95:109,116:110,97:113,143:153,2:[1,154],13:$Vi,15:$V41,62:$V51,93:$V61,108:$V71,109:$V81,110:$V91,125:$V6,127:$Va1}),o($Vo1,[2,218]),{14:[1,155]},o($Vo1,[2,220]),o($Vo1,[2,221]),o($Vo1,[2,222]),o($Vo1,[2,223],{121:18,119:38,120:41,2:$Vj,13:$Vi,51:$V1}),o($Vo1,[2,224]),{15:[1,156]},{15:[1,157]},o($Vo1,[2,227]),{13:[1,158],88:[1,159]},{15:[1,160]},o($Vk,[2,159]),o($Vk,$Vb,{140:32,141:33,124:161,117:$Vd}),o($Vk,$Vb,{140:32,141:33,124:162,117:$Vd}),o($Vk,$Vb,{140:32,141:33,124:163,117:$Vd}),o($Vk,[2,170]),o($Vk,[2,171]),o($Vk,[2,172]),o($V21,[2,177]),o($V21,[2,178]),{15:[1,164]},o($Vc1,[2,163]),o($Vd1,[2,41]),o([5,20,22,33,39,46,51,52,72,98],$V1,{116:7,119:12,120:13,95:14,121:18,57:165,6:166,40:167,2:$Vj,13:$Vi,15:[1,168],117:$V5,125:$V6}),{20:[1,169]},{13:$Vp1,49:[1,170],112:171},o($Vg1,[2,185]),o($Vg1,[2,188]),o($Vg1,[2,191]),o($Vg1,[2,194]),{14:[1,173]},{16:174,19:175,20:$Vq1},o($V21,[2,200]),o($V21,[2,201]),o($V31,$V1,{119:12,120:13,121:18,143:101,128:102,144:104,106:105,94:108,95:109,116:110,97:113,142:177,2:$Vj,13:$Vi,15:$V41,62:$V51,93:$V61,108:$V71,109:$V81,110:$V91,125:$V6,127:$Va1,130:$VV,132:$VW,133:$VX,134:$VY,135:$VZ,137:$V_,138:$V$,139:$V01}),o($V31,$V1,{119:12,120:13,121:18,143:101,128:102,144:104,106:105,94:108,95:109,116:110,97:113,142:178,2:$Vj,13:$Vi,15:$V41,62:$V51,93:$V61,108:$V71,109:$V81,110:$V91,125:$V6,127:$Va1,130:$VV,132:$VW,133:$VX,134:$VY,135:$VZ,137:$V_,138:$V$,139:$V01}),o($Vr1,$V1,{119:12,120:13,121:18,144:104,94:108,95:109,116:110,97:113,143:179,2:$Vj,13:$Vi,15:$V41,62:$V51,93:$V61,108:$V71,109:$V81,110:$V91,125:$V6,127:$Va1}),o($Vr1,$V1,{119:12,120:13,121:18,144:104,94:108,95:109,116:110,97:113,143:180,2:$Vj,13:$Vi,15:$V41,62:$V51,93:$V61,108:$V71,109:$V81,110:$V91,125:$V6,127:$Va1}),o($Vr1,$V1,{119:12,120:13,121:18,144:104,94:108,95:109,116:110,97:113,143:181,2:$Vj,13:$Vi,15:$V41,62:$V51,93:$V61,108:$V71,109:$V81,110:$V91,125:$V6,127:$Va1}),o($Vr1,$V1,{119:12,120:13,121:18,144:104,94:108,95:109,116:110,97:113,143:182,2:$Vj,13:$Vi,15:$V41,62:$V51,93:$V61,108:$V71,109:$V81,110:$V91,125:$V6,127:$Va1}),o($Vr1,$V1,{119:12,120:13,121:18,144:104,94:108,95:109,116:110,97:113,143:183,2:$Vj,13:$Vi,15:$V41,62:$V51,93:$V61,108:$V71,109:$V81,110:$V91,125:$V6,127:$Va1}),o($Vr1,$V1,{119:12,120:13,121:18,144:104,94:108,95:109,116:110,97:113,143:184,2:$Vj,13:$Vi,15:$V41,62:$V51,93:$V61,108:$V71,109:$V81,110:$V91,125:$V6,127:$Va1}),o($Vs1,$V1,{119:12,120:13,121:18,144:104,94:108,95:109,116:110,97:113,143:185,2:$Vj,13:$Vi,15:$V41,62:$V51,93:$V61,108:$V71,109:$V81,110:$V91,125:$V6,127:$Va1}),o($Vs1,$V1,{119:12,120:13,121:18,144:104,94:108,95:109,116:110,97:113,143:186,2:$Vj,13:$Vi,15:$V41,62:$V51,93:$V61,108:$V71,109:$V81,110:$V91,125:$V6,127:$Va1}),o($Vs1,$V1,{119:12,120:13,121:18,144:104,94:108,95:109,116:110,97:113,143:187,2:$Vj,13:$Vi,15:$V41,62:$V51,93:$V61,108:$V71,109:$V81,110:$V91,125:$V6,127:$Va1}),o($Vs1,$V1,{119:12,120:13,121:18,144:104,94:108,95:109,116:110,97:113,143:188,2:$Vj,13:$Vi,15:$V41,62:$V51,93:$V61,108:$V71,109:$V81,110:$V91,125:$V6,127:$Va1}),o($Vs1,$V1,{119:12,120:13,121:18,144:104,94:108,95:109,116:110,97:113,143:189,2:$Vj,13:$Vi,15:$V41,62:$V51,93:$V61,108:$V71,109:$V81,110:$V91,125:$V6,127:$Va1}),o($Vi1,[2,210]),{17:[1,190],88:$Vj1,89:$Vk1,90:$Vl1,91:$Vm1,92:$Vn1},{13:$V7,17:[1,191],122:$V8},{14:[1,192]},{17:[1,193]},{17:[1,194]},o($Vl,[2,175]),o($Vl,[2,176]),{17:[1,195]},o($Vk,[2,167]),o($Vk,[2,168]),o($Vk,[2,169]),{17:[1,196]},o($Vt1,[2,54],{58:197,72:[1,198]}),o($V9,[2,45]),o($V9,[2,46]),{2:$Va,62:[1,199]},{56:[2,44]},{11:201,13:[1,203],31:[1,202],46:$V3,50:200},o($Ve1,[2,135]),{37:[1,204]},{13:[1,205]},{17:[1,206],18:[1,207]},o($Vu1,[2,13]),o($Vu1,[2,14],{21:208,77:209,51:$Vg}),o($Vi1,[2,208]),o($Vi1,[2,209]),o($Vi1,[2,202],{88:$Vj1,89:$Vk1,90:$Vl1,91:$Vm1,92:$Vn1}),o($Vi1,[2,203],{88:$Vj1,89:$Vk1,90:$Vl1,91:$Vm1,92:$Vn1}),o($Vi1,[2,204],{88:$Vj1,89:$Vk1,90:$Vl1,91:$Vm1,92:$Vn1}),o($Vi1,[2,205],{88:$Vj1,89:$Vk1,90:$Vl1,91:$Vm1,92:$Vn1}),o($Vi1,[2,206],{88:$Vj1,89:$Vk1,90:$Vl1,91:$Vm1,92:$Vn1}),o($Vi1,[2,207],{88:$Vj1,89:$Vk1,90:$Vl1,91:$Vm1,92:$Vn1}),o($Vv1,[2,212],{88:$Vj1,89:$Vk1,92:$Vn1}),o($Vv1,[2,213],{88:$Vj1,89:$Vk1,92:$Vn1}),o($Vo1,[2,214]),o($Vo1,[2,215]),o($Vo1,[2,216]),o($Vo1,[2,217]),o($Vo1,[2,219]),{13:[1,211],88:[1,214],96:212,97:213,107:$Vb1,108:$V71,129:210},o($Vo1,[2,225]),o($Vo1,[2,226]),o($Vl,[2,173]),o($Vl,[2,174]),o($Vw1,[2,89],{59:215,98:[1,216]}),{20:$Vx1,71:217,75:218},{18:[1,220],63:$Vy1},{11:223,46:[1,222]},{46:[2,36]},{10:224,52:$V4},{46:[2,38]},{93:[1,226],113:225,114:[1,227]},{15:[1,229],24:228},o([5,33],[2,11]),{19:230,20:$Vq1},o($Vu1,[2,15],{77:231,51:$Vg}),{13:$Vz1,78:232,94:234,95:235,96:236,97:237,107:$Vb1,108:$V71,125:$V6,127:$Va1},o($V21,[2,179]),o($V21,[2,180]),o($V21,[2,181]),o($V21,[2,182]),o($V21,[2,183]),o($Vd1,[2,95],{60:238,39:[1,239]}),{99:[1,240]},o($Vt1,[2,53],{73:$VA1,74:$VB1}),o($VC1,[2,57]),{21:243,51:$Vg,77:209},{62:[1,244]},{62:[1,245]},{13:$Vn,22:$Vo,23:$Vp,25:$Vq,26:50,36:$Vr,39:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,47:48,51:[1,246],52:$Vx,56:$Vy,61:$Vz,63:$VA,65:$VB,67:$VC,70:$VD,72:$VE,73:$VF,74:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,92:$VN,98:$VO,99:$VP,106:49,107:$VQ,108:$VR,109:$VS,110:$VT,111:$VU,130:$VV,132:$VW,133:$VX,134:$VY,135:$VZ,137:$V_,138:$V$,139:$V01},{46:[2,35]},{33:[1,247]},o($Ve1,[2,137]),o($Ve1,[2,138]),{13:$VD1,31:$VE1,115:248},{25:[1,251]},o($Vu1,[2,28],{30:252,41:253,20:$VF1}),o($Vu1,[2,12]),{13:$Vz1,78:255,94:234,95:235,96:236,97:237,107:$Vb1,108:$V71,125:$V6,127:$Va1},o($VG1,[2,60]),o($VG1,[2,83]),o($VG1,[2,84]),o($VG1,[2,85]),o($VG1,[2,86]),o($VG1,[2,87]),o($Vd1,[2,42]),{20:$VH1,46:$VI1,64:260,65:$VJ1,68:256,102:257,103:$VK1},{20:$VL1,100:263,101:264},{20:$Vx1,71:266,75:218},{20:$Vx1,71:267,75:218},{37:[1,273],46:[1,269],49:[1,271],51:$Vg,76:268,77:231,79:[1,270],80:[1,272],81:[1,274],82:[1,275],83:[1,276],84:[1,277],85:[1,278],86:[1,279],87:[1,280]},{17:[1,281]},{17:[1,282]},{13:$Vn,22:$Vo,23:$Vp,25:$Vq,26:50,36:$Vr,39:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,47:283,52:$Vx,56:$Vy,61:$Vz,63:$VA,65:$VB,67:$VC,70:$VD,72:$VE,73:$VF,74:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,92:$VN,98:$VO,99:$VP,106:49,107:$VQ,108:$VR,109:$VS,110:$VT,111:$VU,130:$VV,132:$VW,133:$VX,134:$VY,135:$VZ,137:$V_,138:$V$,139:$V01},{46:[2,37]},{114:[1,284]},o($VM1,[2,144]),{7:287,13:[1,288],20:[1,285],103:[1,286]},{13:[1,289]},{17:[1,290],18:[1,291]},o($Vu1,[2,27]),{25:[1,292]},o($VG1,[2,59]),o($Vd1,[2,94]),o($VN1,[2,96]),o($VN1,[2,97],{77:209,21:293,51:$Vg}),{15:[1,294]},o($VN1,[2,100]),{13:$Vn,22:$Vo,23:$Vp,25:$Vq,26:50,36:$Vr,39:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,47:295,52:$Vx,56:$Vy,61:$Vz,63:$VA,65:$VB,67:$VC,70:$VD,72:$VE,73:$VF,74:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,92:$VN,98:$VO,99:$VP,106:49,107:$VQ,108:$VR,109:$VS,110:$VT,111:$VU,130:$VV,132:$VW,133:$VX,134:$VY,135:$VZ,137:$V_,138:$V$,139:$V01},{15:[1,297],66:296},o($Vw1,[2,88],{18:[1,298]}),o($VO1,[2,90]),o($VO1,[2,93],{77:209,21:299,51:$Vg}),o($VC1,[2,55]),o($VC1,[2,56]),o($VC1,[2,58]),{13:$VP1,15:$VQ1,20:$VR1,35:300,62:$VS1,93:$VT1},{13:$VP1,15:$VQ1,20:$VR1,35:306,62:$VS1,93:$VT1},{13:$VP1,15:$VQ1,20:$VR1,35:307,62:$VS1,93:$VT1},{13:$VP1,15:$VQ1,20:$VR1,35:308,62:$VS1,93:$VT1},{13:$VP1,15:$VQ1,20:$VR1,35:309,62:$VS1,93:$VT1},{13:$VP1,15:$VQ1,20:$VR1,35:310,62:$VS1,93:$VT1},{13:$VP1,15:$VQ1,20:$VR1,35:311,62:$VS1,93:$VT1},{13:$VP1,15:$VQ1,20:$VR1,35:312,62:$VS1,93:$VT1},{13:$VP1,15:$VQ1,20:$VR1,35:313,62:$VS1,93:$VT1},{13:$VP1,15:$VQ1,20:$VR1,35:314,62:$VS1,93:$VT1},{13:$VP1,15:$VQ1,20:$VR1,35:315,62:$VS1,93:$VT1},{13:$VP1,15:$VQ1,20:$VR1,35:316,62:$VS1,93:$VT1},o($V9,[2,47]),o([5,13,15,20,22,33,36,39,46,52,62,72,93,98],[2,48]),{49:[1,317]},o($Ve1,[2,139]),{33:[1,318]},{15:[1,319]},{33:[1,320]},{14:$Vc},{14:[1,321]},{25:[2,17]},{20:$VF1,41:322},{13:[1,323]},o($VN1,[2,98],{77:231,51:$Vg}),{20:[1,324]},o($Ve1,$Vf1,{48:325}),{67:[1,326]},{20:$Vx1,71:327,75:218},{20:$VL1,101:328},o($VO1,[2,92],{77:231,51:$Vg}),o($VC1,[2,61],{88:$VU1,89:$VV1,90:$VW1,91:$VX1,92:$VY1}),{13:$VP1,15:$VQ1,20:$VR1,35:334,62:$VS1,93:$VT1},o($VZ1,$V_1),o($VZ1,[2,80]),o($VZ1,[2,81]),o($VZ1,[2,82]),o($VC1,[2,62],{88:$VU1,89:$VV1,90:$VW1,91:$VX1,92:$VY1}),o($VC1,[2,63],{88:$VU1,89:$VV1,90:$VW1,91:$VX1,92:$VY1}),o($VC1,[2,64],{88:$VU1,89:$VV1,90:$VW1,91:$VX1,92:$VY1}),o($VC1,[2,65],{88:$VU1,89:$VV1,90:$VW1,91:$VX1,92:$VY1}),o($VC1,[2,66],{88:$VU1,89:$VV1,90:$VW1,91:$VX1,92:$VY1}),o($VC1,[2,67],{88:$VU1,89:$VV1,90:$VW1,91:$VX1,92:$VY1}),o($VC1,[2,68],{88:$VU1,89:$VV1,90:$VW1,91:$VX1,92:$VY1}),o($VC1,[2,69],{88:$VU1,89:$VV1,90:$VW1,91:$VX1,92:$VY1}),o($VC1,[2,70],{88:$VU1,89:$VV1,90:$VW1,91:$VX1,92:$VY1}),o($VC1,[2,71],{88:$VU1,89:$VV1,90:$VW1,91:$VX1,92:$VY1}),o($VC1,[2,72],{88:$VU1,89:$VV1,90:$VW1,91:$VX1,92:$VY1}),o($Ve,[2,34]),o($VM1,[2,145]),{20:[1,335]},o($VM1,[2,147]),{26:336,42:$Vt,43:$Vu,44:$Vv,45:$Vw},o($Vu1,[2,26]),{14:[1,337]},{17:$V$1,21:339,51:$Vg,77:209,104:338},{13:$Vp1,49:[1,340],112:171},{20:$VH1,46:$VI1,64:260,65:$VJ1,68:341,102:257,103:$VK1},{17:[1,342],73:$VA1,74:$VB1},o($VO1,[2,91]),{13:$VP1,15:$VQ1,20:$VR1,35:343,62:$VS1,93:$VT1},{13:$VP1,15:$VQ1,20:$VR1,35:344,62:$VS1,93:$VT1},{13:$VP1,15:$VQ1,20:$VR1,35:345,62:$VS1,93:$VT1},{13:$VP1,15:$VQ1,20:$VR1,35:346,62:$VS1,93:$VT1},{13:$VP1,15:$VQ1,20:$VR1,35:347,62:$VS1,93:$VT1},{17:[1,348],88:$VU1,89:$VV1,90:$VW1,91:$VX1,92:$VY1},{17:$V$1,21:339,51:$Vg,77:209,104:349},{27:[1,350]},{26:351,42:$Vt,43:$Vu,44:$Vv,45:$Vw},{17:[1,352]},{17:[2,148],51:$Vg,77:231},{13:$VD1,31:$VE1,46:[1,353],102:356,105:354,115:355},{69:357,70:[1,358]},{67:[2,52]},o($VZ1,[2,73]),o($VZ1,[2,74]),o($V02,[2,75],{88:$VU1,89:$VV1,92:$VY1}),o($V02,[2,76],{88:$VU1,89:$VV1,92:$VY1}),o($VZ1,[2,77]),o($VZ1,[2,78]),{17:[1,359]},{28:360,31:[1,361]},{27:[1,362]},o($VN1,[2,99]),{13:$Vn,22:$Vo,23:$Vp,25:$Vq,26:50,36:$Vr,39:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,47:295,51:[1,363],52:$Vx,56:$Vy,61:$Vz,63:$VA,65:$VB,67:$VC,70:$VD,72:$VE,73:$VF,74:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,92:$VN,98:$VO,99:$VP,106:49,107:$VQ,108:$VR,109:$VS,110:$VT,111:$VU,130:$VV,132:$VW,133:$VX,134:$VY,135:$VZ,137:$V_,138:$V$,139:$V01},{13:$VD1,31:$VE1,46:[1,364],102:366,115:365},o($V12,[2,140]),o($V12,[2,143]),o($VN1,[2,49]),{15:[1,368],20:$VH1,46:$VI1,64:260,65:$VJ1,68:367,102:257,103:$VK1},{33:[1,369]},{29:[1,370]},{13:$VP1,15:$VQ1,20:$VR1,32:371,34:372,35:373,36:$V22,39:$V32,62:$VS1,93:$VT1},o($Vu1,[2,29]),{13:$Vn,22:$Vo,23:$Vp,25:$Vq,26:50,36:$Vr,39:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,47:376,52:$Vx,56:$Vy,61:$Vz,63:$VA,65:$VB,67:$VC,70:$VD,72:$VE,73:$VF,74:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,92:$VN,98:$VO,99:$VP,106:49,107:$VQ,108:$VR,109:$VS,110:$VT,111:$VU,130:$VV,132:$VW,133:$VX,134:$VY,135:$VZ,137:$V_,138:$V$,139:$V01},{13:$Vn,22:$Vo,23:$Vp,25:$Vq,26:50,36:$Vr,39:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,47:295,51:[1,377],52:$Vx,56:$Vy,61:$Vz,63:$VA,65:$VB,67:$VC,70:$VD,72:$VE,73:$VF,74:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,92:$VN,98:$VO,99:$VP,106:49,107:$VQ,108:$VR,109:$VS,110:$VT,111:$VU,130:$VV,132:$VW,133:$VX,134:$VY,135:$VZ,137:$V_,138:$V$,139:$V01},o($V12,[2,141]),o($V12,[2,142]),o($VN1,[2,50]),{17:[1,378]},o($VM1,[2,146]),o($Ve,[2,16]),{13:$VP1,15:$VQ1,20:$VR1,33:[1,379],34:380,35:373,36:$V22,39:$V32,62:$VS1,93:$VT1},o($V42,[2,20]),o($V42,[2,21],{88:$VU1,89:$VV1,90:$VW1,91:$VX1,92:$VY1}),{20:[1,381]},{13:$VP1,15:$VQ1,20:$VR1,35:382,62:$VS1,93:$VT1},{49:[1,383]},{13:$Vn,22:$Vo,23:$Vp,25:$Vq,26:50,36:$Vr,39:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,47:384,52:$Vx,56:$Vy,61:$Vz,63:$VA,65:$VB,67:$VC,70:$VD,72:$VE,73:$VF,74:$VG,82:$VH,83:$VI,84:$VJ,85:$VK,86:$VL,87:$VM,92:$VN,98:$VO,99:$VP,106:49,107:$VQ,108:$VR,109:$VS,110:$VT,111:$VU,130:$VV,132:$VW,133:$VX,134:$VY,135:$VZ,137:$V_,138:$V$,139:$V01},o($VN1,[2,51]),{29:[2,18]},o($V42,[2,19]),{14:[1,385]},o($V42,[2,23],{88:$VU1,89:$VV1,90:$VW1,91:$VX1,92:$VY1}),o($V52,[2,101]),{49:[1,386]},{37:[1,387]},o($V52,[2,102]),{13:$VP1,15:[1,391],20:$VR1,35:389,38:388,40:390,62:$VS1,93:$VT1},o($V42,[2,22]),o($V42,[2,24],{88:$VU1,89:$VV1,90:$VW1,91:$VX1,92:$VY1}),o($V42,[2,25]),{13:$VP1,15:$VQ1,20:$VR1,35:334,62:[1,392],93:$VT1},o([17,88,89,90,91,92],$V_1,{63:$Vy1})],
defaultActions: {4:[2,3],5:[2,4],23:[2,1],24:[2,2],169:[2,44],201:[2,36],203:[2,38],223:[2,35],247:[2,37],290:[2,17],342:[2,52],379:[2,18]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

//metodos o atributos
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
    //console.log("Comentario xquery");

break;
case 1:/*espacio en blanco*/
break;
case 2:
    //console.log('Detecto for');
    return 52;

break;
case 3:
    //console.log('Detecto in');
    return 56;

break;
case 4:
    //console.log('Detecto at');
    return 61;

break;
case 5:
    //console.log('Detecto to');
    return 63;

break;
case 6:
    //console.log('Detecto let');
    return 36;

break;
case 7:
    //console.log('Detecto if');
    return 65;

break;
case 8:
    //console.log('Detecto then');
    return 67;

break;
case 9:
    //console.log('Detecto else');
    return 70;

break;
case 10:
    //console.log('Detecto declare');
    return 22;

break;
case 11:
    //console.log('Detecto function');
    return 23;

break;
case 12:
    //console.log('Detecto as');
    return 25;

break;
case 13:
    //console.log('Detecto double');
    return 44;

break;
case 14:
    //console.log('Detecto int');
    return 43;

break;
case 15:
    //console.log('Detecto string_tipo');
    return 42;

break;
case 16:
    //console.log('Detecto boolean');
    return 45;

break;
case 17:
    //console.log('Detecto data');
    return 103;

break;
case 18:
    //console.log('Detecto where');
    return 72;

break;
case 19:
    //console.log('Detecto order');
    return 98;

break;
case 20:
    //console.log('Detecto by');
    return 99;

break;
case 21:
    //console.log('Detecto return');
    return 39;

break;
case 22:
    //console.log('Detecto eq');
    return 82;

break;
case 23:
    //console.log('Detecto ne');
    return 83;

break;
case 24:
    //console.log('Detecto lt');
    return 84;

break;
case 25:
    //console.log('Detecto le');
    return 85;

break;
case 26:
    //console.log('Detecto gt');
    return 86;

break;
case 27:
    //console.log('Detecto ge');
    return 87;

break;
case 28:
    ////console.log('Detecto diagonal');
     return 51;

break;
case 29:
    ////console.log('Detecto punto');
     return 125;

break;
case 30:
    ////console.log('Detecto coma');
     return 18;

break;
case 31:
    ////console.log('Detecto arroba');
     return 127;

break;
case 32:
    ////console.log('Detecto node');
     return 107;

break;
case 33:
    ////console.log('Detecto text');
     return 108;

break;
case 34:
    ////console.log('Detecto last');
     return 109;

break;
case 35:
    ////console.log('Detecto position');
     return 110;

break;
case 36:
    ////console.log('Detecto ancestor');
     return 130;

break;
case 37:
    ////console.log('Detecto attribute');
     return 132;

break;
case 38:
    ////console.log('Detecto child');
     return 133;

break;
case 39:
    ////console.log('Detecto descendant');
     return 134;

break;
case 40:
    ////console.log('Detecto descendant-or-self');
     return 131;

break;
case 41:
    ////console.log('Detecto following');
     return 135;

break;
case 42:
    ////console.log('Detecto following-sibling');
     return 136;

break;
case 43:
    ////console.log('Detecto parent');
     return 137;

break;
case 44:
    ////console.log('Detecto preceding');
     return 138;

break;
case 45:
    ////console.log('Detecto self');
     return 139;

break;
case 46:
    ////console.log('Detecto operador_o');
    return 122;

break;
case 47:
    ////console.log('Detecto suma');
    return 90;

break;
case 48:
    ////console.log('Detecto resta');
    return 91;

break;
case 49:
    ////console.log('Detecto multiplicacion');
    return 88;

break;
case 50:
    ////console.log('Detecto division');
    return 89;

break;
case 51:
    ////console.log('Detecto igual');
    return 37;

break;
case 52:
    ////console.log('Detecto diferente');
    return 81;

break;
case 53:
    ////console.log('Detecto menor');
    return 46;

break;
case 54:
    ////console.log('Detecto menor_igual');
    return 79;

break;
case 55:
    ////console.log('Detecto mayor');
    return 49;

break;
case 56:
    ////console.log('Detecto mayor_igual');
    return 80;

break;
case 57:
    ////console.log('Detecto or');
    return 74;

break;
case 58:
    ////console.log('Detecto and');
    return 73;

break;
case 59:
    // equivalente a %
    ////console.log('Detecto mod');
    return 92;

break;
case 60:
    ////console.log('Detecto llave_abierta');
     return 31;
    
break;
case 61:
    ////console.log('Detecto llave_cerrada');
     return 33;
    
break;
case 62:
    ////console.log('Detecto parentesis_abierto');
     return 15;
    
break;
case 63:
    ////console.log('Detecto parentesis_cerrado');
     return 17;
    
break;
case 64:
    ////console.log('Detecto corchete_abierto');
    return 117;
    
break;
case 65:
    ////console.log('Detecto corchete_cerrado');
     return 118;
    
break;
case 66:
    ////console.log('Detecto dos_puntos');
     return 14;
    
break;
case 67:
    ////console.log('Detecto punto_coma');
     return 29;
    
break;
case 68:
    ////console.log('Detecto interrogacion');
     return 27;
    
break;
case 69:
    ////console.log('Detecto digito');
     return 62;
    
break;
case 70:
    //console.log('Detecto identificador xquery');
     return 20;
    
break;
case 71:
    ////console.log('Detecto identificador');
     return 13;
    
break;
case 72:
    //console.log('string '+yy_.yytext);
    return 93;

break;
case 73:
    //console.log('Detecto comillas');
     return 114;
    
break;
case 74:return 5;
break;
case 75:
    //agregarErrorLexico("Lexico",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column+1);
    console.log("Error leixico "+yy_.yytext);
    
break;
}
},
rules: [/^(?:\(:[^:]*:\))/,/^(?:\s+)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:at\b)/,/^(?:to\b)/,/^(?:let\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:as\b)/,/^(?:double\b)/,/^(?:int\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:data\b)/,/^(?:where\b)/,/^(?:order\b)/,/^(?:by\b)/,/^(?:return\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:\/)/,/^(?:\.)/,/^(?:,)/,/^(?:@)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:-or-self\b)/,/^(?:following\b)/,/^(?:-sibling\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:div\b)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:(0|[1-9][0-9]*)(\.(0|[0-9]*[1-9](0)?))?)/,/^(?:\$\w+)/,/^(?:\w+)/,/^(?:("|')[^"\"{}"]*("|'))/,/^(?:("|'))/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizadorXquery;
exports.Parser = analizadorXquery.Parser;
exports.parse = function () { return analizadorXquery.parse.apply(analizadorXquery, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}