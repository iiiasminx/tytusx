/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizadorOptimizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,6],$V2=[1,10],$V3=[12,14,15],$V4=[14,28],$V5=[1,24],$V6=[14,15,28],$V7=[1,32],$V8=[20,24],$V9=[1,55],$Va=[1,58],$Vb=[1,57],$Vc=[1,50],$Vd=[1,49],$Ve=[1,59],$Vf=[1,56],$Vg=[14,21,22,26,33,40,46,65],$Vh=[1,85],$Vi=[1,95],$Vj=[1,94],$Vk=[1,96],$Vl=[14,35],$Vm=[2,20],$Vn=[53,61,62,63],$Vo=[2,56],$Vp=[2,57],$Vq=[30,55,73,74,75],$Vr=[1,122],$Vs=[1,127],$Vt=[1,126],$Vu=[19,20,53,61,62,63],$Vv=[19,20],$Vw=[1,172],$Vx=[1,173];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"START":3,"ENCABEZADO":4,"EOF":5,"LIBRERIAS":6,"HEAP_STACK":7,"DECLARACIONES":8,"CUERPOS_FUNCIONES":9,"CUERPO_MAIN":10,"LIBRERIA":11,"include":12,"libreria":13,"comentario":14,"double":15,"OPCION_HEAP_STACK":16,"corchete_abierto":17,"digito":18,"corchete_cerrado":19,"punto_coma":20,"heap":21,"stack":22,"DECLARACION_VARIABLES":23,"coma":24,"DECLARACION_VARIABLE":25,"identificador":26,"CUERPO_FUNCION":27,"void":28,"parentesis_abierto":29,"parentesis_cerrado":30,"llave_abierta":31,"RECURSIVIDAD_BLOQUE_CODIGO":32,"return":33,"OPCIONAL_COMENTARIO":34,"llave_cerrada":35,"main":36,"OPCIONES_MAIN":37,"ASIGNACION_SIMPLE":38,"ASIGNACION_EXPRESION":39,"goto":40,"dos_puntos":41,"OPTIMIZADOR_IF":42,"ASIGNACION_STACK":43,"ASIGNACION_HEAP":44,"ESTRUCTURA_PRINT":45,"printf":46,"tipoPrint":47,"TIPOS_PRINT":48,"float":49,"NUMERICO_PRINT":50,"char":51,"int":52,"resta":53,"TIPOS_ARITMETICOS":54,"igual":55,"OPTIMIZADORES_ARITMETICOS":56,"OPTIMIZADOR_SUMA":57,"OPTIMIZADOR_RESTA":58,"OPTIMIZADOR_MULTIPLICACION":59,"OPTIMIZADOR_DIVISION":60,"suma":61,"multiplicacion":62,"division":63,"TIPOS_CONDICIONAL":64,"if":65,"OPCIONES_CONDICIONAL":66,"CONDICIONAL_MENORQ":67,"CONDICIONAL_MAYORQ":68,"CONDICIONAL_MENORIGUALQ":69,"CONDICIONAL_MAYORIGUALQ":70,"CONDICIONAL_IGUAL":71,"CONDICIONAL_DIFERENTE":72,"menor":73,"mayor":74,"diferente":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"include",13:"libreria",14:"comentario",15:"double",17:"corchete_abierto",18:"digito",19:"corchete_cerrado",20:"punto_coma",21:"heap",22:"stack",24:"coma",26:"identificador",28:"void",29:"parentesis_abierto",30:"parentesis_cerrado",31:"llave_abierta",33:"return",35:"llave_cerrada",36:"main",40:"goto",41:"dos_puntos",46:"printf",47:"tipoPrint",49:"float",51:"char",52:"int",53:"resta",55:"igual",61:"suma",62:"multiplicacion",63:"division",65:"if",73:"menor",74:"mayor",75:"diferente"},
productions_: [0,[3,2],[4,6],[6,2],[6,1],[11,2],[11,1],[7,6],[16,1],[16,1],[8,4],[8,3],[8,1],[23,3],[23,1],[25,1],[9,2],[9,0],[27,10],[27,1],[34,0],[34,2],[10,10],[32,2],[32,1],[37,2],[37,2],[37,3],[37,2],[37,1],[37,1],[37,1],[37,1],[37,1],[45,7],[48,4],[48,4],[48,4],[48,4],[50,1],[50,2],[44,10],[43,10],[38,3],[38,3],[38,9],[38,9],[39,3],[56,1],[56,1],[56,1],[56,1],[57,3],[58,3],[59,3],[60,3],[54,1],[54,1],[54,2],[54,2],[64,1],[64,1],[64,2],[64,2],[42,10],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[67,3],[68,3],[69,4],[70,4],[71,4],[72,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        console.log("\nexito en analisis optimizador");
        console.log($$[$0-1]);
        resultadoOptimizar.forEach(e => {
            console.log("Anterior: "+e.anterior+" optimizado: "+e.optimizado);
        });
        return {codigo:$$[$0-1],reporte:resultadoOptimizar};

break;
case 2:

        let resultadoOptimizado = $$[$0-5]+"\n"+$$[$0-4]+"\n"+$$[$0-3]+"\n"+$$[$0-2]+"\n"+$$[$0-1]+"\n"+$$[$0];
        this.$ = resultadoOptimizado;
    
break;
case 3: case 16: case 21:
this.$ = $$[$0-1]+"\n"+$$[$0];
break;
case 4: case 6: case 8: case 9: case 12: case 19: case 29: case 30: case 31: case 32: case 33: case 39: case 48: case 49: case 50: case 51: case 56: case 57: case 65: case 66: case 67: case 68: case 69: case 70:
this.$ = $$[$0];
break;
case 5: case 58: case 59:
this.$ = $$[$0-1] + $$[$0];
break;
case 7:
this.$ = "double "+$$[$0-4]+"    ["+$$[$0-2]+"];";
break;
case 10:
this.$ = $$[$0-3]+"\ndouble "+$$[$0-1]+";"
break;
case 11:
this.$ = "double "+$$[$0-1]+";"
break;
case 13:
this.$=$$[$0-2]+","+$$[$0]
break;
case 14: case 15:
this.$=$$[$0]
break;
case 17:
this.$ = "";
break;
case 18:

            this.$ = "void "+$$[$0-9]+" () {\n"+bloqueCodigo.join("\n")+"\n     return;"+$$[$0-1]+" \n}";
            resultadoOptimizar.push({anterior:"Fin optmizacion funcion "+$$[$0-9],optimizado:"------"});    
            bloqueCodigo = [];
        
break;
case 20:
this.$ = ""
break;
case 22:

        this.$ = "void main () {\n"+bloqueCodigo.join("\n")+"\n    return;"+$$[$0-1]+"\n}";
        resultadoOptimizar.push({anterior:"Fin optmizacion funcion main",optimizado:"------"});
        bloqueCodigo = [];
        
break;
case 23:

            if($$[$0]!=";"){
                //this.$ = $$[$0-1]+"\n"+$$[$0];
                this.$ = $$[$0];
                bloqueCodigo.push(this.$);
            }
            else{
                this.$ = "";
            }
        
break;
case 24:

        if($$[$0]!=";"){
            this.$ = $$[$0];
            bloqueCodigo.push(this.$);            
        }
        else{
            this.$ = "";
        }
    
break;
case 25: case 26:
this.$ = $$[$0-1]+";";
break;
case 27:
ignorar.push({pos:bloqueCodigo.length,linea:this._$.first_line});this.$ = "goto "+$$[$0-1]+";";
break;
case 28:
ignorarCodigoMuerto(this._$.first_line);this.$ = $$[$0-1]+":";
break;
case 34:
this.$ = "printf("+$$[$0-4]+", "+$$[$0-2]+");"
break;
case 35: case 36: case 37: case 38:
this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
break;
case 40:
this.$ = $$[$0-1]+$$[$0];
break;
case 41: case 42:
this.$ = "heap[(int)"+$$[$0-4]+"] = "+$$[$0-1]+";";
break;
case 43: case 44:
this.$ = $$[$0-2]+" = "+$$[$0];
break;
case 45:
this.$ = $$[$0-8]+" = stack[(int)"+$$[$0-1]+"]";
break;
case 46:
this.$ = $$[$0-8]+" = heap[(int)"+$$[$0-1]+"]";
break;
case 47:

        resultadoOriginal = $$[$0-2]+" = "+$$[$0].valor;
        if($$[$0-2] == $$[$0].valor){
            this.$ = "";
        }else{
            this.$ = resultadoOriginal
        }
        if($$[$0].original != $$[$0].valor)resultadoOptimizar.push({anterior:$$[$0-2]+" = "+$$[$0].original,optimizado:$$[$0].valor});
        if($$[$0].valor == $$[$0-2])resultadoOptimizar.push({anterior:resultadoOriginal,optimizado:this.$});
    
break;
case 52:

        resultadoOriginal = $$[$0-2]+" + "+$$[$0];
        if($$[$0-2] == 0 && $$[$0] != 0)this.$ = $$[$0];
        else if($$[$0-2] != 0 && $$[$0] == 0)this.$ = $$[$0-2];
        else if($$[$0-2] == 0 && $$[$0] == 0)this.$ = 0;
        else this.$ = resultadoOriginal;
        this.$ = {original:resultadoOriginal,valor:this.$};
    
break;
case 53:

        resultadoOriginal = $$[$0-2]+" - "+$$[$0];
        if($$[$0-2] == 0 && $$[$0] != 0)this.$ = "-"+$$[$0];
        else if($$[$0-2] != 0 && $$[$0] == 0)this.$ = $$[$0-2];
        else if($$[$0-2] == 0 && $$[$0] == 0)this.$ = 0;
        else this.$ = resultadoOriginal;
        this.$ = {original:resultadoOriginal,valor:this.$};
    
break;
case 54:

        resultadoOriginal = $$[$0-2]+" * "+$$[$0];
        if($$[$0-2] == 0 || $$[$0] == 0)this.$ = 0;
        else if($$[$0-2] == 1 && $$[$0] != 1)this.$ = $$[$0];
        else if($$[$0-2] != 1 && $$[$0] == 1)this.$ = $$[$0-2];
        else if($$[$0-2] != 1 && $$[$0] == 2)this.$ = $$[$0-2]+"+"+$$[$0-2];
        else if($$[$0-2] == 2 && $$[$0] != 2)this.$ = $$[$0]+"+"+$$[$0];
        else if($$[$0-2] == 1 && $$[$0] == 1)this.$ = 1;
        else this.$ = resultadoOriginal;
        this.$ = {original:resultadoOriginal,valor:this.$};
    
break;
case 55:

        resultadoOriginal = $$[$0-2]+" / "+$$[$0];
        if($$[$0-2] == 0)this.$ = 0;
        else if($$[$0] == 1)this.$ = $$[$0-2];        
        else if($$[$0-2] == 1 && $$[$0] == 1)this.$ = 1;
        else this.$ = resultadoOriginal;
        this.$ = {original:resultadoOriginal,valor:this.$};
    
break;
case 60:
this.$ ={tipo:"identificador",valor:$$[$0]};
break;
case 61:
this.$ ={tipo:"digito",valor:$$[$0]};
break;
case 62: case 63:
this.$ ={tipo:"digito",valor:$$[$0-1]+$$[$0]};
break;
case 64:

        resultadoOriginal = "if ("+$$[$0-7].original+") goto "+$$[$0-4]+"; goto "+$$[$0-1]+";";
        if($$[$0-7].tipo == "entradaDirecta"){
            this.$ = "goto "+$$[$0-4]+";";
            ignorar.push({pos:bloqueCodigo.length,linea:this._$.first_line});
        }
        else if($$[$0-7].tipo =="salidaDirecta"){
            this.$ = "goto "+$$[$0-1]+";";
            ignorar.push({pos:bloqueCodigo.length,linea:this._$.first_line});
        }
        else {
            this.$ = "if ("+$$[$0-7].contrario+") goto "+$$[$0-1]+";";
            resultadoOptimizar.push({anterior:resultadoOriginal,optimizado:this.$});
        }
        if($$[$0-7].original != $$[$0-7].valor)resultadoOptimizar.push({anterior:resultadoOriginal,optimizado:this.$});
    
break;
case 71:

        resultadoOriginal = $$[$0-2].valor+" < "+$$[$0].valor;
        if ($$[$0-2].tipo == "digito" && $$[$0].tipo == "digito"){
            if($$[$0-2].valor < $$[$0].valor)this.$ = {contrario: " ",original:resultadoOriginal,tipo:"entradaDirecta",valor:""};
            else this.$ = {contrario: " ",original:resultadoOriginal,tipo:"salidaDirecta",valor:""};
        }
        else this.$ = {contrario: $$[$0-2].valor+" > "+$$[$0].valor,original:resultadoOriginal,tipo:"noAplica",valor:$$[$0-2].valor+" < "+$$[$0].valor};
    
break;
case 72:

        resultadoOriginal = $$[$0-2].valor+" > "+$$[$0].valor;
        if ($$[$0-2].tipo == "digito" && $$[$0].tipo == "digito"){
            if($$[$0-2].valor > $$[$0].valor)this.$ = {contrario: " ",original:resultadoOriginal,tipo:"entradaDirecta",valor:""};
            else this.$ = {contrario: " ",original:resultadoOriginal,tipo:"salidaDirecta",valor:""};
        }
        else this.$ = {contrario: $$[$0-2].valor+" < "+$$[$0].valor,original:resultadoOriginal,tipo:"noAplica",valor:$$[$0-2].valor+" > "+$$[$0].valor};
    
break;
case 73:

        resultadoOriginal = $$[$0-3].valor+" <= "+$$[$0].valor;
        if ($$[$0-3].tipo == "digito" && $$[$0].tipo == "digito"){
            if($$[$0-3].valor <= $$[$0].valor)this.$ = {contrario: " ",original:resultadoOriginal,tipo:"entradaDirecta",valor:""};
            else this.$ = {contrario: " ",original:resultadoOriginal,tipo:"salidaDirecta",valor:""};
        }
        else this.$ = {contrario: $$[$0-3].valor+" >= "+$$[$0].valor,original:resultadoOriginal,tipo:"noAplica",valor:$$[$0-3].valor+" <= "+$$[$0].valor};
    
break;
case 74:

        resultadoOriginal = $$[$0-3].valor+" >= "+$$[$0].valor;
        if ($$[$0-3].tipo == "digito" && $$[$0].tipo == "digito"){
            if($$[$0-3].valor >= $$[$0].valor)this.$ = {contrario: " ",original:resultadoOriginal,tipo:"entradaDirecta",valor:""};
            else this.$ = {contrario: " ",original:resultadoOriginal,tipo:"salidaDirecta",valor:""};
        }
        else this.$ = {contrario: $$[$0-3].valor+" <= "+$$[$0].valor,original:resultadoOriginal,tipo:"noAplica",valor:$$[$0-3].valor+" >= "+$$[$0].valor};
    
break;
case 75:

        resultadoOriginal = $$[$0-3].valor+" == "+$$[$0].valor;
        if($$[$0-3].valor == $$[$0].valor)this.$ = {contrario: " ",original:resultadoOriginal,tipo:"entradaDirecta",valor:""};
        else if ($$[$0-3].tipo == "digito" && $$[$0].tipo == "digito")this.$ = {contrario: " ",original:resultadoOriginal,tipo:"salidaDirecta",valor:""};
        else this.$ = {contrario: $$[$0-3].valor+" != "+$$[$0].valor ,original:resultadoOriginal,tipo:"noAplica",valor:$$[$0-3].valor+" == "+$$[$0].valor};
    
break;
case 76:

        resultadoOriginal = $$[$0-2].valor+" != "+$$[$0].valor;
        if($$[$0-2].valor == $$[$0].valor)this.$ = {contrario: " ",original:resultadoOriginal,tipo:"salidaDirecta",valor:""};
        else if ($$[$0-2].tipo == "digito" && $$[$0].tipo == "digito")this.$ = {contrario: " ",original:resultadoOriginal,tipo:"entradaDirecta",valor:""};
        else this.$ = {contrario: $$[$0-2].valor+" == "+$$[$0].valor ,original:resultadoOriginal,tipo:"noAplica",valor:resultadoOriginal};
    
break;
}
},
table: [{3:1,4:2,6:3,11:4,12:$V0,14:$V1},{1:[3]},{5:[1,7]},{7:8,11:9,12:$V0,14:$V1,15:$V2},o($V3,[2,4]),{13:[1,11]},o($V3,[2,6]),{1:[2,1]},{7:12,15:$V2},o($V3,[2,3]),{16:13,21:[1,14],22:[1,15]},o($V3,[2,5]),{8:16,14:[1,18],15:[1,17]},{17:[1,19]},{17:[2,8]},{17:[2,9]},o($V4,[2,17],{9:20,15:[1,21]}),{23:22,25:23,26:$V5},o($V6,[2,12]),{18:[1,25]},{10:26,14:[1,29],27:27,28:[1,28]},{23:30,25:23,26:$V5},{20:[1,31],24:$V7},o($V8,[2,14]),o($V8,[2,15]),{19:[1,33]},{5:[2,2]},o($V4,[2,16]),{26:[1,35],36:[1,34]},o($V4,[2,19]),{20:[1,36],24:$V7},o($V6,[2,11]),{25:37,26:$V5},{20:[1,38]},{29:[1,39]},{29:[1,40]},o($V6,[2,10]),o($V8,[2,13]),o([14,15],[2,7]),{30:[1,41]},{30:[1,42]},{31:[1,43]},{31:[1,44]},{14:$V9,21:$Va,22:$Vb,26:$Vc,32:45,37:46,38:47,39:48,40:$Vd,42:51,43:52,44:53,45:54,46:$Ve,65:$Vf},{14:$V9,21:$Va,22:$Vb,26:$Vc,32:60,37:46,38:47,39:48,40:$Vd,42:51,43:52,44:53,45:54,46:$Ve,65:$Vf},{14:$V9,21:$Va,22:$Vb,26:$Vc,33:[1,61],37:62,38:47,39:48,40:$Vd,42:51,43:52,44:53,45:54,46:$Ve,65:$Vf},o($Vg,[2,24]),{20:[1,63]},{20:[1,64]},{26:[1,65]},{41:[1,66],55:[1,67]},o($Vg,[2,29]),o($Vg,[2,30]),o($Vg,[2,31]),o($Vg,[2,32]),o($Vg,[2,33]),{29:[1,68]},{17:[1,69]},{17:[1,70]},{29:[1,71]},{14:$V9,21:$Va,22:$Vb,26:$Vc,33:[1,72],37:62,38:47,39:48,40:$Vd,42:51,43:52,44:53,45:54,46:$Ve,65:$Vf},{20:[1,73]},o($Vg,[2,23]),o($Vg,[2,25]),o($Vg,[2,26]),{20:[1,74]},o($Vg,[2,28]),{18:[1,76],21:[1,78],22:[1,77],26:[1,75],53:$Vh,54:84,56:79,57:80,58:81,59:82,60:83},{18:$Vi,26:$Vj,53:$Vk,64:93,66:86,67:87,68:88,69:89,70:90,71:91,72:92},{29:[1,97]},{29:[1,98]},{47:[1,99]},{20:[1,100]},o($Vl,$Vm,{34:101}),o($Vg,[2,27]),o($Vn,$Vo,{20:[2,43]}),o($Vn,$Vp,{20:[2,44]}),{17:[1,102]},{17:[1,103]},{20:[2,47]},{20:[2,48]},{20:[2,49]},{20:[2,50]},{20:[2,51]},{53:[1,105],61:[1,104],62:[1,106],63:[1,107]},{18:[1,109],26:[1,108]},{30:[1,110]},{30:[2,65]},{30:[2,66]},{30:[2,67]},{30:[2,68]},{30:[2,69]},{30:[2,70]},{55:[1,113],73:[1,111],74:[1,112],75:[1,114]},o($Vq,[2,60]),o($Vq,[2,61]),{18:[1,116],26:[1,115]},{52:[1,117]},{52:[1,118]},{24:[1,119]},o($Vl,$Vm,{34:120}),{14:$Vr,35:[1,121]},{29:[1,123]},{29:[1,124]},{18:$Vs,26:$Vt,53:$Vh,54:125},{18:$Vs,26:$Vt,53:$Vh,54:128},{18:$Vs,26:$Vt,53:$Vh,54:129},{18:$Vs,26:$Vt,53:$Vh,54:130},o($Vu,[2,58]),o($Vu,[2,59]),{40:[1,131]},{18:$Vi,26:$Vj,53:$Vk,55:[1,133],64:132},{18:$Vi,26:$Vj,53:$Vk,55:[1,135],64:134},{55:[1,136]},{18:$Vi,26:$Vj,53:$Vk,64:137},o($Vq,[2,62]),o($Vq,[2,63]),{30:[1,138]},{30:[1,139]},{29:[1,141],48:140},{14:$Vr,35:[1,142]},{5:[2,22]},o($Vl,[2,21]),{52:[1,143]},{52:[1,144]},{20:[2,52]},o($Vv,$Vo),o($Vv,$Vp),{20:[2,53]},{20:[2,54]},{20:[2,55]},{26:[1,145]},{30:[2,71]},{18:$Vi,26:$Vj,53:$Vk,64:146},{30:[2,72]},{18:$Vi,26:$Vj,53:$Vk,64:147},{18:$Vi,26:$Vj,53:$Vk,64:148},{30:[2,76]},{18:$Vs,26:$Vt,53:$Vh,54:149},{18:$Vs,26:$Vt,53:$Vh,54:150},{30:[1,151]},{15:[1,155],49:[1,152],51:[1,153],52:[1,154]},o($V4,[2,18]),{30:[1,156]},{30:[1,157]},{20:[1,158]},{30:[2,73]},{30:[2,74]},{30:[2,75]},{19:[1,159]},{19:[1,160]},{20:[1,161]},{30:[1,162]},{30:[1,163]},{30:[1,164]},{30:[1,165]},{18:$Vs,26:$Vt,53:$Vh,54:166},{18:$Vs,26:$Vt,53:$Vh,54:167},{40:[1,168]},{55:[1,169]},{55:[1,170]},o($Vg,[2,34]),{18:$Vw,50:171,53:$Vx},{18:$Vw,50:174,53:$Vx},{18:$Vw,50:175,53:$Vx},{18:$Vw,50:176,53:$Vx},{19:[1,177]},{19:[1,178]},{26:[1,179]},{18:$Vs,26:$Vt,53:$Vh,54:180},{18:$Vs,26:$Vt,53:$Vh,54:181},{30:[2,35]},{30:[2,39]},{18:[1,182]},{30:[2,36]},{30:[2,37]},{30:[2,38]},{20:[2,45]},{20:[2,46]},{20:[1,183]},{20:[1,184]},{20:[1,185]},{30:[2,40]},o($Vg,[2,64]),o($Vg,[2,42]),o($Vg,[2,41])],
defaultActions: {7:[2,1],14:[2,8],15:[2,9],26:[2,2],79:[2,47],80:[2,48],81:[2,49],82:[2,50],83:[2,51],87:[2,65],88:[2,66],89:[2,67],90:[2,68],91:[2,69],92:[2,70],121:[2,22],125:[2,52],128:[2,53],129:[2,54],130:[2,55],132:[2,71],134:[2,72],137:[2,76],146:[2,73],147:[2,74],148:[2,75],171:[2,35],172:[2,39],174:[2,36],175:[2,37],176:[2,38],177:[2,45],178:[2,46],182:[2,40]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    bloqueCodigo = [];
    ignorar = [];
    function ignorarCodigoMuerto(linea){
        if(ignorar.length>0 && bloqueCodigo.length>0){
            let diferencia = bloqueCodigo.length-ignorar[0].pos;
            if(diferencia >1){
                bloqueCodigo.splice(ignorar[0].pos+1,diferencia);
                resultadoOptimizar.push({anterior:"Codigo muerto",optimizado:"De linea "+ignorar[0].linea+" a "+linea});
            }
        }
        ignorar = [];
    }
    resultadoOptimizar = [];
    let resultadoOriginal;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://Ignorar espacios
break;
case 1:
    console.log("Comentario\n"+yy_.yytext+"\n");
    return 14;

break;
case 2:
    ////console.log('Detecto suma');
    return 61;

break;
case 3:
    ////console.log('Detecto resta');
    return 53;

break;
case 4:
    ////console.log('Detecto multiplicacion');
    return 62;

break;
case 5:
    ////console.log('Detecto division');
    return 63;

break;
case 6:
    ////console.log('Detecto igual');
    return 55;

break;
case 7:
    ////console.log('Detecto diferente');
    return 75;

break;
case 8:
    //console.log('Detecto libreria');
     return 13;

break;
case 9:
    ////console.log('Detecto menor');
    return 73;

break;
case 10:
    ////console.log('Detecto mayor');
    return 74;

break;
case 11:
    ////console.log('Detecto llave_abierta');
     return 31;

break;
case 12:
    ////console.log('Detecto llave_cerrada');
     return 35;

break;
case 13:
    ////console.log('Detecto parentesis_abierto');
     return 29;

break;
case 14:
    ////console.log('Detecto parentesis_cerrado');
     return 30;

break;
case 15:
    ////console.log('Detecto corchete_abierto');
    return 17;

break;
case 16:
    ////console.log('Detecto corchete_cerrado');
     return 19;

break;
case 17:
    //console.log('Detecto dos_puntos');
     return 41;

break;
case 18:
    ////console.log('Detecto punto_coma');
     return 20;

break;
case 19:
    //console.log('Detecto coma');
     return 24;

break;
case 20:
    ////console.log('Detecto include');
     return 12;

break;
case 21:
    ////console.log('Detecto heap');
     return 21;

break;
case 22:
    ////console.log('Detecto stack');
     return 22;

break;
case 23:
    console.log('Detecto double');
     return 15;

break;
case 24:
    ////console.log('Detecto int');
     return 52;

break;
case 25:
    ////console.log('Detecto float');
     return 49;

break;
case 26:
    ////console.log('Detecto char');
     return 51;

break;
case 27:
    ////console.log('Detecto void');
     return 28;

break;
case 28:
    ////console.log('Detecto main');
     return 36;

break;
case 29:
    ////console.log('Detecto return');
     return 33;

break;
case 30:
    //console.log('Detecto goto');
     return 40;

break;
case 31:
    //console.log('Detecto if');
     return 65;

break;
case 32:
    //console.log('Detecto printf');
     return 46;

break;
case 33:
    //console.log('Detecto tipoPrint');
     return 47;

break;
case 34:
    //console.log('Detecto digito '+yy_.yytext);
     return 18;

break;
case 35:
    //console.log("Detecto identificador "+yy_.yytext);
    return 26;

break;
case 36: return 5; 
break;
case 37:
                                //agregarErrorLexico("Lexico",yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column+1);
                                //console.log('     error lexico '+yy_.yytext);
                            
break;
}
},
rules: [/^(?:\s+)/,/^(?:(\/\/[^\n]*)|((\/\*.*(?=\*\/))\*\/))/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:=)/,/^(?:!=)/,/^(?:<[^<>=]*>)/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:#include\b)/,/^(?:heap\b)/,/^(?:stack\b)/,/^(?:double\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:void\b)/,/^(?:main\b)/,/^(?:return\b)/,/^(?:goto\b)/,/^(?:if\b)/,/^(?:printf\b)/,/^(?:"(%c|%d|%f)")/,/^(?:(0|[1-9][0-9]*)(\.(0|[0-9]*[1-9](0)?))?)/,/^(?:\w+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizadorOptimizador;
exports.Parser = analizadorOptimizador.Parser;
exports.parse = function () { return analizadorOptimizador.parse.apply(analizadorOptimizador, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}