/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica_c = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,10],$V2=[1,11],$V3=[1,12],$V4=[1,25],$V5=[1,20],$V6=[1,26],$V7=[1,27],$V8=[1,28],$V9=[1,29],$Va=[1,30],$Vb=[1,31],$Vc=[1,22],$Vd=[1,21],$Ve=[1,24],$Vf=[1,23],$Vg=[2,5,14,15,16,22,23,26,27,28,29,30,31,32,37,38,45,46],$Vh=[1,40],$Vi=[1,43],$Vj=[1,47],$Vk=[1,39],$Vl=[1,38],$Vm=[1,41],$Vn=[1,42],$Vo=[1,44],$Vp=[1,45],$Vq=[1,46],$Vr=[1,57],$Vs=[23,33,35,39,43,49,54,61,62,63,64,65],$Vt=[1,60],$Vu=[2,62],$Vv=[1,63],$Vw=[13,35,40],$Vx=[1,64],$Vy=[1,65],$Vz=[1,66],$VA=[1,67],$VB=[1,68],$VC=[1,69],$VD=[1,70],$VE=[1,71],$VF=[1,72],$VG=[1,73],$VH=[1,74],$VI=[1,75],$VJ=[2,5,13,14,15,16,22,23,26,27,28,29,30,31,32,35,37,38,40,44,45,46,48,49,50,51,52,53,55,56,57,58,59,60],$VK=[2,5,13,14,15,16,22,23,26,27,28,29,30,31,32,35,37,38,40,44,45,46,48,49,55,56,57,58,59,60],$VL=[2,5,13,14,15,16,22,23,26,27,28,29,30,31,32,35,37,38,40,44,45,46,48,49,50,51,53,55,56,57,58,59,60],$VM=[2,5,13,14,15,16,22,23,26,27,28,29,30,31,32,35,37,38,40,44,45,46,55,56,57,58,59,60];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ASIGNACION":8,"IPRIM":9,"SENT_IF":10,"FUNCION":11,"LLAMADA":12,"pyc":13,"TRANSFERENCIA":14,"CREAVECTOR":15,"ASIGNAVECTOR":16,"LIBRERIAS":17,"RETURN":18,"GOTOI":19,"CREAETIQUETA":20,"DECLARACION2":21,"goto":22,"identificador":23,"dosp":24,"TIPO":25,"int":26,"double":27,"string":28,"char":29,"boolean":30,"void":31,"if":32,"para":33,"E":34,"parc":35,"lla":36,"llc":37,"printf":38,"cadena":39,"coma":40,"LISTA_E":41,"igual":42,"cora":43,"corc":44,"return":45,"include":46,"libreria":47,"mas":48,"menos":49,"multi":50,"div":51,"potencia":52,"modular":53,"not":54,"mayorque":55,"igualigual":56,"diferente":57,"menorigual":58,"menorque":59,"mayorigual":60,"decimal":61,"entero":62,"caracter":63,"true":64,"false":65,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"pyc",14:"TRANSFERENCIA",15:"CREAVECTOR",16:"ASIGNAVECTOR",22:"goto",23:"identificador",24:"dosp",26:"int",27:"double",28:"string",29:"char",30:"boolean",31:"void",32:"if",33:"para",35:"parc",36:"lla",37:"llc",38:"printf",39:"cadena",40:"coma",42:"igual",43:"cora",44:"corc",45:"return",46:"include",47:"libreria",48:"mas",49:"menos",50:"multi",51:"div",52:"potencia",53:"modular",54:"not",55:"mayorque",56:"igualigual",57:"diferente",58:"menorigual",59:"menorque",60:"mayorigual",61:"decimal",62:"entero",63:"caracter",64:"true",65:"false"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[19,3],[20,2],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[10,7],[11,7],[12,3],[9,5],[9,7],[7,3],[21,4],[41,3],[41,1],[8,4],[8,7],[18,3],[18,2],[17,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,3],[34,3],[34,3],[34,3],[34,3],[34,3],[34,2],[34,3],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,4],[34,3],[34,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new NodoAST({label: '/', hijos: $$[$0-1], linea: yylineno});  
break;
case 2:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
this.$= new Array(); this.$.push($$[$0]); 
break;
case 4: case 5: case 6: case 7: case 8: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 21: case 22: case 23: case 24: case 25: case 26:
this.$=$$[$0];
break;
case 9:
this.$=$$[$0-1];
break;
case 18:

                var regla = new regla_1.reglaGramatical({ produccion: ` Linea: ${yylineno+1} `, regla: $$[$0] });
                reporte_1.ReporteGramatical.getInstance().push(regla);
            
break;
case 19:
this.$ = new NodoAST({label:'GOTO', hijos:[$$[$0-1]], linea:yylineno});
break;
case 20:
this.$=new NodoAST({label:'LABEL', hijos:[$$[$0-1]], linea:yylineno});
break;
case 27:
this.$= new NodoAST({label: 'IF', hijos: [$$[$0-4], $$[$0-1]], linea: yylineno}); 
break;
case 28:
this.$=new NodoAST({label: 'CREAR_FUNCION', hijos: [$$[$0-6], $$[$0-5], $$[$0-1]], linea: yylineno}); 
break;
case 29:
this.$=new NodoAST({label: 'LLAMAR_FUNCION', hijos: [$$[$0-2]], linea: yylineno}); 
break;
case 30:

$$[$0-2] = $$[$0-2].slice(1, $$[$0-2].length-1);  
this.$ = new NodoAST({label: 'PRINT', hijos: [$$[$0-2]], linea: yylineno}); 


break;
case 31:

        
var ListaE = new NodoAST({label:'LISTA_E', hijos:[...$$[$0-2]], linea:yylineno});
var String3 = $$[$0-4].slice(1, $$[$0-4].length-1);
this.$ = new NodoAST({label:'PRINT', hijos:[String3, ListaE], linea:yylineno});

break;
case 32:

var ListaS = new NodoAST({label: 'LISTA_E', hijos: [...$$[$0-1]], linea: yylineno}); 
this.$ = new NodoAST({label: 'DECLARACION', hijos: [$$[$0-2], ListaS], linea: yylineno}); 

break;
case 33:
this.$=new NodoAST({label:'DECLARACION2', hijos:[$$[$0-3], $$[$0-2], $$[$0]], linea:yylineno});
break;
case 34:
this.$=$$[$0-2]; this.$.push($$[$0]);
break;
case 35:
this.$ = new Array(); this.$.push($$[$0]);
break;
case 36:
this.$ = new NodoAST({label: 'ASIGNACION', hijos: [$$[$0-3], $$[$0-1]], linea: yylineno}); 
break;
case 37:

this.$ = new NodoAST({label:'ASIGNACIONV', hijos:[$$[$0-6],$$[$0-4],$$[$0-1]], linea:yylineno});

break;
case 38:
this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 39:
this.$ = new NodoAST({label: 'RETURN', hijos: [], linea: yylineno}); 
break;
case 40:
this.$= new NodoAST({label: 'LIBRERIA', hijos: [$$[$0]], linea: yylineno}); 
break;
case 41:
this.$=new NodoAST({label:'E', hijos: [$$[$0-2], '+', $$[$0]], linea: yylineno});
break;
case 42:
this.$=new NodoAST({label:'E', hijos: [$$[$0-2],'-',$$[$0]], linea: yylineno});
break;
case 43:
this.$=new NodoAST({label:'E', hijos: [$$[$0-2],'*',$$[$0]], linea: yylineno});
break;
case 44:
this.$=new NodoAST({label:'E', hijos: [$$[$0-2],'/',$$[$0]], linea: yylineno});
break;
case 45:
this.$=new NodoAST({label:'E', hijos: [$$[$0-2],'^',$$[$0]], linea: yylineno});
break;
case 46:
this.$=new NodoAST({label:'E', hijos: [$$[$0-2],'%',$$[$0]], linea: yylineno});
break;
case 47:
this.$=new NodoAST({label:'E', hijos: ['!',$$[$0]], linea: yylineno});
break;
case 48:
this.$=new NodoAST({label:'E', hijos: [$$[$0-2],'>',$$[$0]], linea: yylineno});
break;
case 49:
this.$=new NodoAST({label:'E', hijos: [$$[$0-2],'==',$$[$0]], linea: yylineno});
break;
case 50:
this.$=new NodoAST({label:'E', hijos: [$$[$0-2],'!=',$$[$0]], linea: yylineno});
break;
case 51:
this.$=new NodoAST({label:'E', hijos: [$$[$0-2],'<=',$$[$0]], linea: yylineno});
break;
case 52:
this.$=new NodoAST({label:'E', hijos: [$$[$0-2],'<',$$[$0]], linea: yylineno});
break;
case 53:
this.$=new NodoAST({label:'E', hijos: [$$[$0-2],'>=',$$[$0]], linea: yylineno});
break;
case 54:
this.$=new NodoAST({label:'E', hijos: ['-',$$[$0]], linea: yylineno});
break;
case 55:
this.$ = $$[$0-1];
break;
case 56: case 57:
this.$ = new NodoAST({label: 'NUM', hijos: [$$[$0]], linea: yylineno}); 
break;
case 58:
$$[$0] = $$[$0].slice(1, $$[$0].length-1); 
this.$=new NodoAST({label: 'CADENA', hijos: [$$[$0]], linea: yylineno}); ; 

break;
case 59:
$$[$0] = $$[$0].slice(1, $$[$0].length-1); 
this.$=new NodoAST({label: 'CADENA', hijos: [$$[$0]], linea: yylineno});  

break;
case 60:
this.$='true';
break;
case 61:
this.$='false'
break;
case 62:
this.$=new NodoAST({label: 'ID', hijos: [$$[$0]], linea: yylineno});
break;
case 63:
this.$= new NodoAST({label:'CORCHETE_ID', hijos:[$$[$0-3], $$[$0-1]], linea:yylineno});
break;
case 64:
this.$ = new NodoAST({label:'CORCHETE', hijos:[$$[$0-1]], linea:yylineno});
break;
case 65:
this.$ = new NodoAST({label: 'CAST', hijos:[$$[$0-2], $$[$0]], linea:yylineno});
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:$V1,15:$V2,16:$V3,17:13,18:14,19:15,20:16,21:17,22:$V4,23:$V5,25:19,26:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc,38:$Vd,45:$Ve,46:$Vf},{1:[3]},{2:$V0,5:[1,32],6:33,7:4,8:5,9:6,10:7,11:8,12:9,14:$V1,15:$V2,16:$V3,17:13,18:14,19:15,20:16,21:17,22:$V4,23:$V5,25:19,26:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc,38:$Vd,45:$Ve,46:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),{13:[1,34]},o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),o($Vg,[2,18]),{23:[1,36],33:$Vh,34:37,39:$Vi,41:35,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{24:[1,51],33:[1,50],42:[1,48],43:[1,49]},{33:[1,52]},{33:[1,53]},{47:[1,54]},{13:[1,56],23:$Vr,33:$Vh,34:55,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{23:[1,58]},o($Vs,[2,21]),o($Vs,[2,22]),o($Vs,[2,23]),o($Vs,[2,24]),o($Vs,[2,25]),o($Vs,[2,26]),{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,9]),{13:[1,59],40:$Vt},o([13,40,48,49,50,51,52,53,55,56,57,58,59,60],$Vu,{33:[1,61],42:[1,62],43:$Vv}),o($Vw,[2,35],{48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI}),{23:$Vr,33:$Vh,34:76,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{23:$Vr,33:$Vh,34:77,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{23:$Vr,25:79,26:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,33:$Vh,34:78,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},o($VJ,[2,56]),o($VJ,[2,57]),o($VJ,[2,58]),o($VJ,[2,59]),o($VJ,[2,60]),o($VJ,[2,61]),{23:$Vr,33:$Vh,34:80,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{23:$Vr,33:$Vh,34:81,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{23:$Vr,33:$Vh,34:82,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{35:[1,83]},o($Vg,[2,20]),{39:[1,84]},{23:$Vr,33:$Vh,34:85,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},o($Vg,[2,40]),{13:[1,86],48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},o($Vg,[2,39]),o($VJ,$Vu,{43:$Vv}),{13:[1,87]},o($Vg,[2,32]),{23:$Vr,33:$Vh,34:88,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{35:[1,89]},{23:$Vr,33:$Vh,34:90,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{23:$Vr,33:$Vh,34:91,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{23:$Vr,33:$Vh,34:92,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{23:$Vr,33:$Vh,34:93,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{23:$Vr,33:$Vh,34:94,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{23:$Vr,33:$Vh,34:95,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{23:$Vr,33:$Vh,34:96,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{23:$Vr,33:$Vh,34:97,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{23:$Vr,33:$Vh,34:98,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{23:$Vr,33:$Vh,34:99,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{23:$Vr,33:$Vh,34:100,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{23:$Vr,33:$Vh,34:101,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{23:$Vr,33:$Vh,34:102,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{23:$Vr,33:$Vh,34:103,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},o([2,5,13,14,15,16,22,23,26,27,28,29,30,31,32,35,37,38,40,44,45,46],[2,47],{48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI}),o($VK,[2,54],{50:$Vz,51:$VA,52:$VB,53:$VC}),{35:[1,104],48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},{35:[1,105]},{44:[1,106],48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},{13:[1,107],48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},{44:[1,108],48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},{13:[2,29]},{35:[1,109],40:[1,110]},{35:[1,111],48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},o($Vg,[2,38]),o($Vg,[2,19]),o($Vw,[2,34],{48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI}),{36:[1,112]},o($Vg,[2,33],{48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI}),{44:[1,113],48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},o($VK,[2,41],{50:$Vz,51:$VA,52:$VB,53:$VC}),o($VK,[2,42],{50:$Vz,51:$VA,52:$VB,53:$VC}),o($VL,[2,43],{52:$VB}),o($VL,[2,44],{52:$VB}),o($VL,[2,45]),o($VL,[2,46],{52:$VB}),o($VM,[2,48],{48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC}),o($VM,[2,49],{48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC}),o($VM,[2,50],{48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC}),o($VM,[2,51],{48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC}),o($VM,[2,52],{48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC}),o($VM,[2,53],{48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC}),o($VJ,[2,55]),{23:$Vr,33:$Vh,34:114,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},o($VJ,[2,64]),o($Vg,[2,36]),{42:[1,115]},{13:[1,116]},{23:$Vr,33:$Vh,34:37,39:$Vi,41:117,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},{22:[1,118]},{2:$V0,4:119,6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:$V1,15:$V2,16:$V3,17:13,18:14,19:15,20:16,21:17,22:$V4,23:$V5,25:19,26:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc,38:$Vd,45:$Ve,46:$Vf},o($VJ,[2,63]),o($VJ,[2,65]),{23:$Vr,33:$Vh,34:120,39:$Vi,43:$Vj,49:$Vk,54:$Vl,61:$Vm,62:$Vn,63:$Vo,64:$Vp,65:$Vq},o($Vg,[2,30]),{35:[1,121],40:$Vt},{23:[1,122]},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,14:$V1,15:$V2,16:$V3,17:13,18:14,19:15,20:16,21:17,22:$V4,23:$V5,25:19,26:$V6,27:$V7,28:$V8,29:$V9,30:$Va,31:$Vb,32:$Vc,37:[1,123],38:$Vd,45:$Ve,46:$Vf},{13:[1,124],48:$Vx,49:$Vy,50:$Vz,51:$VA,52:$VB,53:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI},{13:[1,125]},{13:[1,126]},o($Vg,[2,28]),o($Vg,[2,37]),o($Vg,[2,31]),o($Vg,[2,27])],
defaultActions: {32:[2,1],83:[2,29]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


  const { NodoAST } = require('../arbol/nodoAST');
  const error_1 = require("../arbol/error");
  const errores_1 = require("../arbol/errores");
  const regla_1 = require("../arbol/reglaGramatical");
  const reporte_1 = require("../arbol/reporteGramatical");

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* Ignoro los comentarios simples */
break;
case 1:/* Ignoro bloque comentarios */
break;
case 2: return 33
break;
case 3:  return 35
break;
case 4:  return 43
break;
case 5:  return 44
break;
case 6: return 36
break;
case 7: return 37
break;
case 8:  return 13
break;
case 9:  return 24
break;
case 10:  return 'punto'
break;
case 11: return 40
break;
case 12: return 'signopregunta'
break;
case 13:  return 48
break;
case 14:  return 49
break;
case 15: return 50
break;
case 16:  return 51
break;
case 17:  return 52
break;
case 18:  return 53
break;
case 19:return 46;
break;
case 20:return 47;
break;
case 21:return 64
break;
case 22: return 65
break;
case 23:  return 26
break;
case 24:  return 28
break;
case 25: return 30
break;
case 26:return 27;
break;
case 27:return 29;
break;
case 28:return 'float';
break;
case 29:return "if";
break;
case 30:return 'else';
break;
case 31:return 'short';
break;
case 32:return 'long';
break;
case 33:return 26;
break;
case 34:return 45;
break;
case 35:return 31;
break;
case 36:return 38;
break;
case 37:return 'print';
break;
case 38:return 22;
break;
case 39:  return 56
break;
case 40:  return 57
break;
case 41:  return 58
break;
case 42: return 60
break;
case 43: return 59
break;
case 44:  return 55
break;
case 45:return 54
break;
case 46: return 42
break;
case 47:  return 61
break;
case 48: return 62
break;
case 49:  return 39
break;
case 50: return 63
break;
case 51: return 29
break;
case 52: return 23;
break;
case 53:/* skip whitespace */
break;
case 54:return 5
break;
case 55:
  const er = new error_1.Error({ tipo: 'lexico', linea: `${yy_.yylineno + 1}`, descripcion: `XML> El valor "${yy_.yytext}" no es valido, columna: ${yy_.yylloc.first_column + 1}` });
  errores_1.Errores.getInstance().push(er);
  
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\?)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:#include\b)/i,/^(?:<([a-zñA-ZÑ_])[a-zñA-ZÑ0-9_\-\.]*>)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:float\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:short\b)/i,/^(?:long\b)/i,/^(?:int\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:printf\b)/i,/^(?:print\b)/i,/^(?:goto\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:=)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:\{num\})/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:\{caracter\})/i,/^(?:([a-zñA-ZÑ_])[a-zñA-ZÑ0-9_]*)/i,/^(?:[\s\r\n\t])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica_c;
exports.Parser = gramatica_c.Parser;
exports.parse = function () { return gramatica_c.parse.apply(gramatica_c, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}