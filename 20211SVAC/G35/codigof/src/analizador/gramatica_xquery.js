/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica_xquery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,15],$V1=[1,12],$V2=[1,14],$V3=[1,16],$V4=[1,20],$V5=[1,18],$V6=[1,17],$V7=[5,62,79,80,90,91,108,110,111],$V8=[1,34],$V9=[1,35],$Va=[1,41],$Vb=[1,46],$Vc=[1,49],$Vd=[1,39],$Ve=[1,26],$Vf=[1,25],$Vg=[1,27],$Vh=[1,28],$Vi=[1,29],$Vj=[1,30],$Vk=[1,31],$Vl=[1,32],$Vm=[1,37],$Vn=[1,38],$Vo=[1,40],$Vp=[1,42],$Vq=[1,43],$Vr=[1,44],$Vs=[1,45],$Vt=[1,47],$Vu=[1,48],$Vv=[1,51],$Vw=[62,80],$Vx=[1,63],$Vy=[1,61],$Vz=[1,62],$VA=[1,64],$VB=[1,65],$VC=[1,66],$VD=[1,67],$VE=[1,68],$VF=[1,69],$VG=[1,70],$VH=[1,71],$VI=[1,72],$VJ=[1,73],$VK=[1,74],$VL=[1,75],$VM=[1,76],$VN=[1,77],$VO=[1,78],$VP=[1,79],$VQ=[5,15,18,23,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,62,79,80,90,91,106,108,110,111,114,116,118,119],$VR=[1,91],$VS=[5,10,12,13,14,15,18,20,21,23,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,62,65,66,67,68,69,70,71,72,73,75,79,80,90,91,106,108,110,111,114,116,118,119],$VT=[1,110],$VU=[5,18,23,37,38,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,62,79,80,90,91,106,108,110,111,114,116,118,119],$VV=[2,80],$VW=[5,62,79,80,90,91,106,108,110,111],$VX=[5,18,23,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,62,79,80,90,91,106,108,110,111,114,116,118,119],$VY=[5,18,23,40,41,47,48,49,50,55,62,79,80,90,91,106,108,110,111,114,116,118,119],$VZ=[1,194],$V_=[1,195],$V$=[23,62],$V01=[1,206],$V11=[1,235],$V21=[1,232],$V31=[1,233],$V41=[1,234],$V51=[23,62,79];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"S":4,"EOF":5,"L_INS":6,"CONSULTA":7,"|":8,"INSTRUCCIONES":9,"/":10,"INSTRUCCION":11,":":12,"id":13,"@":14,"*":15,"[":16,"E":17,"]":18,"RESERVADAS_XPATH":19,"aaa":20,"rText":21,"parentesisIzquierdo":22,"parentesisDerecho":23,"rAncestor":24,"rAncestorOrSelf":25,"rAttribute":26,"rChild":27,"rDescendant":28,"rDescendantOrSelf":29,"rFollowing":30,"rFollowingSibling":31,"rNamespace":32,"rParent":33,"rPreceding":34,"rPrecedingSibling":35,"rSelf":36,"+":37,"-":38,"rDiv":39,"rAnd":40,"rOr":41,"mod":42,"menorIgualQue":43,"mayorIgualQue":44,"menorQue":45,"mayorQue":46,"=":47,"diferenteQue":48,"rEq":49,"rNe":50,"rLt":51,"rLe":52,"rGt":53,"rGe":54,"rTo":55,"dolar":56,"rString":57,"rUpper":58,"rLower":59,"rNumber":60,"rSubstring":61,"coma":62,"VALOR_INI":63,"VALOR":64,"rLast":65,"rPosition":66,"rNode":67,"entero":68,"doble":69,"rTrue":70,"rFalse":71,"rStringComillaSimple":72,"rStringComillaDoble":73,"LLAMADA_FUNCION":74,"rLocal":75,"PARAMETROS2":76,"L_PARAMETROS2":77,"BLOQUE":78,"llaveIzq":79,"llaveDer":80,"INS":81,"IMPRIMIR":82,"INS_IF":83,"DECLARACION":84,"REASIGNACION":85,"DECLARA_FUNCION":86,"INS_FOR":87,"RETORNO":88,"L_EXP":89,"rLet":90,"rDeclare":91,"rFunction":92,"PREFIJO":93,"PARAMETROS":94,"rAs":95,"TIPO":96,"ptoComa":97,"L_PARAMETROS":98,"DECLARACION2":99,"rDecimal":100,"rInteger":101,"rBoolean":102,"interrogacion":103,"INS_IF2":104,"L_COND":105,"rElse":106,"BLOQUE2":107,"rIf":108,"rThen":109,"rReturn":110,"rFor":111,"rIn":112,"RETORNO_FOR":113,"rWhere":114,"ORDER_BY":115,"rOrder":116,"rBy":117,"rAscending":118,"rDescending":119,"IF_FOR":120,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"|",10:"/",12:":",13:"id",14:"@",15:"*",16:"[",18:"]",20:"aaa",21:"rText",22:"parentesisIzquierdo",23:"parentesisDerecho",24:"rAncestor",25:"rAncestorOrSelf",26:"rAttribute",27:"rChild",28:"rDescendant",29:"rDescendantOrSelf",30:"rFollowing",31:"rFollowingSibling",32:"rNamespace",33:"rParent",34:"rPreceding",35:"rPrecedingSibling",36:"rSelf",37:"+",38:"-",39:"rDiv",40:"rAnd",41:"rOr",42:"mod",43:"menorIgualQue",44:"mayorIgualQue",45:"menorQue",46:"mayorQue",47:"=",48:"diferenteQue",49:"rEq",50:"rNe",51:"rLt",52:"rLe",53:"rGt",54:"rGe",55:"rTo",56:"dolar",57:"rString",58:"rUpper",59:"rLower",60:"rNumber",61:"rSubstring",62:"coma",65:"rLast",66:"rPosition",67:"rNode",68:"entero",69:"doble",70:"rTrue",71:"rFalse",72:"rStringComillaSimple",73:"rStringComillaDoble",75:"rLocal",79:"llaveIzq",80:"llaveDer",90:"rLet",91:"rDeclare",92:"rFunction",95:"rAs",97:"ptoComa",100:"rDecimal",101:"rInteger",102:"rBoolean",103:"interrogacion",106:"rElse",108:"rIf",109:"rThen",110:"rReturn",111:"rFor",112:"rIn",114:"rWhere",116:"rOrder",117:"rBy",118:"rAscending",119:"rDescending"},
productions_: [0,[3,2],[4,1],[7,3],[7,1],[9,4],[9,3],[9,4],[9,2],[9,3],[9,2],[9,3],[9,1],[11,1],[11,2],[11,2],[11,4],[11,5],[11,1],[11,1],[11,1],[11,3],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[17,3],[17,3],[17,3],[17,3],[17,2],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,5],[17,5],[17,4],[17,4],[17,4],[17,4],[17,6],[17,8],[17,1],[63,4],[63,3],[63,4],[63,2],[63,3],[63,2],[63,3],[63,1],[64,3],[64,3],[64,3],[64,3],[64,1],[64,1],[64,1],[64,2],[64,1],[64,1],[64,2],[64,1],[64,1],[64,2],[64,1],[64,4],[64,5],[64,1],[74,4],[76,2],[76,3],[77,3],[77,1],[78,3],[78,2],[6,2],[6,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[82,3],[89,3],[89,1],[84,6],[86,12],[93,1],[94,2],[94,3],[98,3],[98,1],[99,6],[96,1],[96,1],[96,1],[96,1],[96,2],[96,2],[96,2],[96,2],[83,1],[104,3],[104,1],[105,8],[105,6],[107,2],[107,1],[88,2],[85,6],[87,6],[87,8],[87,7],[87,9],[115,3],[115,4],[115,4],[113,2],[113,2],[120,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return new NodoAST({label: 'INICIO', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 2:
 
  var regla = new regla_1.reglaGramatical({ produccion: 'S → L_INS', regla:'crearNodoAST(\'RAIZ\',[n1],yyline)' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);
  this.$ = new NodoAST({label: 'S', hijos: [$$[$0]], linea:yylineno});

break;
case 3:
 
  var regla = new regla_1.reglaGramatical({ produccion: 'CONSULTA → CONSULTA \'|\' INSTRUCCIONES', regla:'crearNodoAST(\'L\',[n1,n2],yyline)' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);
  this.$ = new NodoAST({label: 'L', hijos: [...$$[$0-2].hijos, new NodoAST({label:'CONSULTA', hijos:[...$$[$0].hijos], linea:yylineno})], linea: yylineno}); 
break;
case 4:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'CONSULTA → INSTRUCCIONES', regla:'crearNodoAST(\'L\',[n1],yyline)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: 'L', hijos: [new NodoAST({label:'CONSULTA', hijos:[...$$[$0].hijos], linea:yylineno})], linea: yylineno}); 
break;
case 5:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'INSTRUCCIONES → INSTRUCCIONES / / INSTRUCCION', regla:'crearNodoAST(\'DOBLE\',[n1,n4],yyline)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
  this.$ = new NodoAST({label: 'RUTA', hijos: [...$$[$0-3].hijos, new NodoAST({label:'DOBLE', hijos:[...$$[$0].hijos], linea:yylineno})], linea: yylineno}); 
break;
case 6:
 
                var regla = new regla_1.reglaGramatical({ produccion: 'INSTRUCCIONES → INSTRUCCIONES / INSTRUCCION', regla:'crearNodoAST(\'SIMPLE\',[n1,n3],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'RUTA', hijos: [...$$[$0-2].hijos, new NodoAST({label:'SIMPLE', hijos:[...$$[$0].hijos], linea:yylineno})], linea: yylineno}); 
break;
case 7:
 
                var regla = new regla_1.reglaGramatical({ produccion: 'INSTRUCCIONES → INSTRUCCIONES \':\' \':\' INSTRUCCION', regla:'crearNodoAST(\'AXE\',[n1,n4],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'RUTA', hijos: [...$$[$0-3].hijos, new NodoAST({label:'AXE', hijos:[...$$[$0].hijos], linea:yylineno})], linea: yylineno}); 
break;
case 8:
 
                var regla = new regla_1.reglaGramatical({ produccion: 'INSTRUCCIONES → INSTRUCCIONES INSTRUCCION', regla:'crearNodoAST(\'RUTA\',[n1,n2],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'RUTA', hijos: [...$$[$0-1].hijos, new NodoAST({label:'X', hijos:[...$$[$0].hijos], linea:yylineno})], linea: yylineno}); 
break;
case 9:

                var regla = new regla_1.reglaGramatical({ produccion: 'INSTRUCCIONES → \'/\' \'/\' INSTRUCCION', regla:'crearNodoAST(\'DOBLE\',[n1,n2],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'RUTA', hijos: [new NodoAST({label:'DOBLE', hijos:[...$$[$0].hijos], linea:yylineno})], linea: yylineno});
                
break;
case 10:

                var regla = new regla_1.reglaGramatical({ produccion: 'INSTRUCCIONES → \'/\' INSTRUCCION', regla:'crearNodoAST(\'SIMPLE\',[n1,n2],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'RUTA', hijos: [new NodoAST({label:'SIMPLE', hijos:[...$$[$0].hijos], linea:yylineno})], linea: yylineno});
break;
case 11:
 
                var regla = new regla_1.reglaGramatical({ produccion: 'INSTRUCCIONES → \':\' \':\' INSTRUCCION', regla:'crearNodoAST(\'AXE\',[n1,n2],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'RUTA', hijos: [new NodoAST({label:'AXE', hijos:[...$$[$0].hijos], linea:yylineno})], linea: yylineno}); 
break;
case 12:
 
                var regla = new regla_1.reglaGramatical({ produccion: 'INSTRUCCIONES → INSTRUCCION', regla:'crearNodoAST(\'X\',[n1],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'RUTA', hijos: [new NodoAST({label:'X', hijos:[...$$[$0].hijos], linea:yylineno})], linea: yylineno}); 
break;
case 13:
 
  var regla = new regla_1.reglaGramatical({ produccion: 'INSTRUCCION → id', regla:'retornar identificador' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);
  this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'identificador', hijos:[$$[$0]], linea:yylineno})], linea: yylineno}); 
break;
case 14:
 
                var regla = new regla_1.reglaGramatical({ produccion: 'INSTRUCCION → \'@\' id', regla:'crearNodoAST(\'ATRIBUTO\',[n1],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'atributo', hijos:[$$[$0]], linea:yylineno})], linea: yylineno}); 
break;
case 15:
 
                var regla = new regla_1.reglaGramatical({ produccion: 'INSTRUCCION → \'@\' \'*\'', regla:'crearNodoAST(\'ANY\',[],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'any_att', hijos:[], linea:yylineno})], linea: yylineno}); 
break;
case 16:
 
                var regla = new regla_1.reglaGramatical({ produccion: 'INSTRUCCION → id \'[\' E \']\'', regla:'crearNodoAST(\'PREDICADO\',[n2],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'PREDICADO', hijos:[$$[$0-3],$$[$0-1]], linea:yylineno})], linea: yylineno}); 
break;
case 17:
 
                var regla = new regla_1.reglaGramatical({ produccion: 'INSTRUCCION → \'@\' id \'[\' E \']\'', regla:'crearNodoAST(\'PREDICADO\',[n2],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'PREDICADO_A', hijos:[$$[$0-3],$$[$0-1]], linea:yylineno})], linea: yylineno}); 
break;
case 18:
 
                var regla = new regla_1.reglaGramatical({ produccion: 'INSTRUCCION → \'*\'', regla:'crearNodoAST(\'FRAG\',[],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'any', hijos:[], linea:yylineno})], linea: yylineno}); 
break;
case 19:
 
                var regla = new regla_1.reglaGramatical({ produccion: 'INSTRUCCION → RESERVADAS_XPATH', regla:'crearNodoAST(\'RESERVADA\',[n1],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'reservada', hijos:[$$[$0]], linea:yylineno})], linea: yylineno}); 
break;
case 20:
 
                var regla = new regla_1.reglaGramatical({ produccion: 'INSTRUCCION → punto punto', regla:'crearNodoAST(\'PUNTOS\',[n1],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'puntos', hijos:[$$[$0]], linea:yylineno})], linea: yylineno}); 
break;
case 21:
 
                var regla = new regla_1.reglaGramatical({ produccion: 'INSTRUCCION → rText parentesisIzquierdo parentesisDerecho', regla:'crearNodoAST(\'TEXTO\',[n1],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'text', hijos:[], linea:yylineno})], linea: yylineno}); 
break;
case 22:

  var regla = new regla_1.reglaGramatical({ produccion: 'RESERVADAS_XPATH → rAncestor', regla:' ' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);

break;
case 23:

  var regla = new regla_1.reglaGramatical({ produccion: 'RESERVADAS_XPATH → rAncestorOrSelf', regla:' ' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);

break;
case 24:

  var regla = new regla_1.reglaGramatical({ produccion: 'RESERVADAS_XPATH → rAttribute', regla:' ' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);

break;
case 25:

  var regla = new regla_1.reglaGramatical({ produccion: 'RESERVADAS_XPATH → rChild', regla:' ' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);

break;
case 26:

  var regla = new regla_1.reglaGramatical({ produccion: 'RESERVADAS_XPATH → rDescendant', regla:' ' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);

break;
case 27:

  var regla = new regla_1.reglaGramatical({ produccion: 'RESERVADAS_XPATH → rDescendantOrSelf', regla:' ' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);

break;
case 28:

  var regla = new regla_1.reglaGramatical({ produccion: 'RESERVADAS_XPATH → rFollowing', regla:' ' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);

break;
case 29:

  var regla = new regla_1.reglaGramatical({ produccion: 'RESERVADAS_XPATH → rFollowingSibling', regla:' ' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);

break;
case 30:

  var regla = new regla_1.reglaGramatical({ produccion: 'RESERVADAS_XPATH → rNamespace', regla:' ' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);

break;
case 31:

  var regla = new regla_1.reglaGramatical({ produccion: 'RESERVADAS_XPATH → rParent', regla:' ' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);

break;
case 32:

  var regla = new regla_1.reglaGramatical({ produccion: 'RESERVADAS_XPATH → rPreceding', regla:' ' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);

break;
case 33:

  var regla = new regla_1.reglaGramatical({ produccion: 'RESERVADAS_XPATH → rPrecedingSibling', regla:' ' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);

break;
case 34:

  var regla = new regla_1.reglaGramatical({ produccion: 'RESERVADAS_XPATH → rSelf', regla:' ' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);

break;
case 35:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E \'+\' E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: '+', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 36:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E \'-\' E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: '-', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 37:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E \'*\' E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: '*', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 38:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E rDiv E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: 'div', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 39:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → \'-\'E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: 'negativo', hijos: [$$[$0]], linea: yylineno}); 
break;
case 40:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → parentesisIzquierdo E parentesisDerecho', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: 'E', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 41:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E rAnd E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: 'and', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 42:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E rOr E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: 'or', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 43:

    var regla = new regla_1.reglaGramatical({ produccion: 'E → E mod E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
     this.$ = new NodoAST({label: 'mod', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 44:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E menorIgualQue E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: '<=', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 45:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E mayorIgualQue E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: '>=', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 46:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E menorQue E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: '<', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 47:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E mayorQue E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: '>', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 48:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E \'=\' E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: '=', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 49:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E diferenteQue E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: '!=', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 50:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E rEq E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: '=', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 51:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E rNe E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: '!=', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 52:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E rLt E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: '<', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 53:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E rLe E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: '<=', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 54:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E rGt E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: '>', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 55:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E rGe E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: '>=', hijos: [$$[$0-2],$$[$0]], linea: yylineno}); 
break;
case 56:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → E rTo E', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: 'DECLARA_ARREGLO', hijos: [$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 57:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → $ ID', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: 'ACCESO_ARREGLO', hijos: [$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 58:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → $ STRING', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: 'TO_STRING', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 59:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → $ UPPER', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: 'UPPER', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 60:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → $ LOWER', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: 'LOWER', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 61:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → $ NUMBER', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: 'TO_NUMBER', hijos: [$$[$0-1]], linea: yylineno}); 
break;
case 62:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → $ SUBSTRING', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: 'SUBSTRING1', hijos: [$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 63:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → $ SUBSTRING', regla:'resolverExpresion(n2)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: 'SUBSTRING2', hijos: [$$[$0-5],$$[$0-3],$$[$0-1]], linea: yylineno}); 
break;
case 64:
 
    var regla = new regla_1.reglaGramatical({ produccion: 'E → VALOR_INI', regla:'retornar VALOR' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
    this.$ = new NodoAST({label: 'VAL', hijos: [...$$[$0].hijos], linea: yylineno}); 
break;
case 65:
 
  var regla = new regla_1.reglaGramatical({ produccion: 'VALOR_INI → VALOR_INI \'/\' \'/\' VALOR', regla:'crearNodoAST(\'RUTA\',[n1,n4],yyline)' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);
  this.$ = new NodoAST({label: 'RUTA', hijos: [...$$[$0-3].hijos, new NodoAST({label:'DOBLE', hijos:[...$$[$0].hijos], linea:yylineno})], linea: yylineno}); 
break;
case 66:
 
                var regla = new regla_1.reglaGramatical({ produccion: 'VALOR_INI → VALOR_INI \'/\' VALOR', regla:'crearNodoAST(\'RUTA\',[n1,n3],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'RUTA', hijos: [...$$[$0-2].hijos, new NodoAST({label:'SIMPLE', hijos:[...$$[$0].hijos], linea:yylineno})], linea: yylineno}); 
break;
case 67:
 
                var regla = new regla_1.reglaGramatical({ produccion: 'VALOR_INI → VALOR_INI \':\' \':\' VALOR', regla:'crearNodoAST(\'RUTA\',[n1,n4],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'RUTA', hijos: [...$$[$0-3].hijos, new NodoAST({label:'AXE', hijos:[...$$[$0].hijos], linea:yylineno})], linea: yylineno}); 
break;
case 68:
 
                var regla = new regla_1.reglaGramatical({ produccion: 'VALOR_INI → VALOR_INI VALOR', regla:'crearNodoAST(\'RUTA\',[n1,n2],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'RUTA', hijos: [...$$[$0-1].hijos, new NodoAST({label:'X', hijos:[...$$[$0].hijos], linea:yylineno})], linea: yylineno}); 
break;
case 69:

                var regla = new regla_1.reglaGramatical({ produccion: 'VALOR_INI → \'/\' \'/\' VALOR', regla:'crearNodoAST(\'RUTA\',[n3],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'RUTA', hijos: [new NodoAST({label:'DOBLE', hijos:[...$$[$0].hijos], linea:yylineno})], linea: yylineno});
break;
case 70:

                var regla = new regla_1.reglaGramatical({ produccion: 'VALOR_INI → \'/\' VALOR', regla:'crearNodoAST(\'RUTA\',[n2],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'RUTA', hijos: [new NodoAST({label:'SIMPLE', hijos:[...$$[$0].hijos], linea:yylineno})], linea: yylineno});
break;
case 71:
 
                var regla = new regla_1.reglaGramatical({ produccion: 'VALOR_INI → \':\' \':\' VALOR', regla:'crearNodoAST(\'RUTA\',[$$[$0]],yyline)' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'RUTA', hijos: [new NodoAST({label:'AXE', hijos:[...$$[$0].hijos], linea:yylineno})], linea: yylineno}); 
break;
case 72:
 
                var regla = new regla_1.reglaGramatical({ produccion: 'VALOR_INI → VALOR', regla:'retornar VALOR' });
                reporte_1.ReporteGramatical.getInstance().push3(regla);
                this.$ = new NodoAST({label: 'RUTA', hijos: [new NodoAST({label:'X', hijos:[...$$[$0].hijos], linea:yylineno})], linea: yylineno}); 
break;
case 73:
 
  var regla = new regla_1.reglaGramatical({ produccion: 'VALOR → rLast parentesisIzquierdo parentesisDerecho', regla:'retornar \'last\'' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);
  this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'last', hijos:[], linea:yylineno})], linea: yylineno}); 
break;
case 74:
 
        var regla = new regla_1.reglaGramatical({ produccion: 'VALOR → rPosition parentesisIzquierdo parentesisDerecho', regla:'crearNodoAST(\'position\',[],yyline)' });
        reporte_1.ReporteGramatical.getInstance().push3(regla);
        this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'position', hijos:[], linea:yylineno})], linea: yylineno}); 
break;
case 75:
 
        var regla = new regla_1.reglaGramatical({ produccion: 'VALOR → rText parentesisIzquierdo parentesisDerecho', regla:'crearNodoAST(\'text\',[],yyline)' });
        reporte_1.ReporteGramatical.getInstance().push3(regla);
        this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'text', hijos:[], linea:yylineno})], linea: yylineno}); 
break;
case 76:
 
        var regla = new regla_1.reglaGramatical({ produccion: 'VALOR → rNode parentesisIzquierdo parentesisDerecho', regla:'crearNodoAST(\'node\',[],yyline)' });
        reporte_1.ReporteGramatical.getInstance().push3(regla);
         this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'node', hijos:[], linea:yylineno})], linea: yylineno}); 
break;
case 77:
 
        var regla = new regla_1.reglaGramatical({ produccion: 'VALOR → id', regla:'retornar \'id\'' });
        reporte_1.ReporteGramatical.getInstance().push3(regla);
        this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'identificador', hijos:[$$[$0]], linea:yylineno})], linea: yylineno}); 
break;
case 78:
 
        var regla = new regla_1.reglaGramatical({ produccion: 'VALOR → entero', regla:'retornar \'entero\'' });
        reporte_1.ReporteGramatical.getInstance().push3(regla);
        this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'entero', hijos:[$$[$0]], linea:yylineno})], linea: yylineno}); 
break;
case 79:
 
        var regla = new regla_1.reglaGramatical({ produccion: 'VALOR → doble', regla:'retornar \'doble\'' });
        reporte_1.ReporteGramatical.getInstance().push3(regla);
        this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'doble', hijos:[$$[$0]], linea:yylineno})], linea: yylineno}); 
break;
case 80:
 
        var regla = new regla_1.reglaGramatical({ produccion: 'VALOR → doble', regla:'retornar \'dolar id\'' });
        reporte_1.ReporteGramatical.getInstance().push3(regla);
        this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'identificador2', hijos:[$$[$0]], linea:yylineno})], linea: yylineno}); 
break;
case 81:
 
        var regla = new regla_1.reglaGramatical({ produccion: 'VALOR → doble', regla:'retornar \'true\'' });
        reporte_1.ReporteGramatical.getInstance().push3(regla);
        this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'booleano', hijos:[$$[$0]], linea:yylineno})], linea: yylineno}); 
break;
case 82:
 
        var regla = new regla_1.reglaGramatical({ produccion: 'VALOR → doble', regla:'retornar \'false\'' });
        reporte_1.ReporteGramatical.getInstance().push3(regla);
        this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'booleano', hijos:[$$[$0]], linea:yylineno})], linea: yylineno}); 
break;
case 83:
 
        var regla = new regla_1.reglaGramatical({ produccion: 'VALOR → \'@\' \'*\'', regla:'crearNodoAST(\'FRAG\', [], yylineno});' });
        reporte_1.ReporteGramatical.getInstance().push3(regla);
        this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'any_att', hijos:[], linea:yylineno})], linea: yylineno}); 
break;
case 84:
 
        var regla = new regla_1.reglaGramatical({ produccion: 'VALOR → rStringComillaSimple', regla:'retornar \'string_1\'' });
        reporte_1.ReporteGramatical.getInstance().push3(regla);
        this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'string_s', hijos:[$$[$0]], linea:yylineno})], linea: yylineno}); 
break;
case 85:
 
        var regla = new regla_1.reglaGramatical({ produccion: 'VALOR → rStringComillaDoble', regla:'retornar \'string_2\'' });
        reporte_1.ReporteGramatical.getInstance().push3(regla);
        this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'string_d', hijos:[$$[$0]], linea:yylineno})], linea: yylineno}); 
break;
case 86:
 
        var regla = new regla_1.reglaGramatical({ produccion: 'VALOR → \'@\' id', regla:'retornar \'ID2\'' });
        reporte_1.ReporteGramatical.getInstance().push3(regla);
        this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'atributo', hijos:[$$[$0]], linea:yylineno})], linea: yylineno}); 
break;
case 87:
 
        
        var regla = new regla_1.reglaGramatical({ produccion: 'VALOR → punto', regla:'crearNodoAST(\'puntos\',[],yyline)' });
        reporte_1.ReporteGramatical.getInstance().push3(regla);
        this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'puntos', hijos:[$$[$0]], linea:yylineno})], linea: yylineno}); 
break;
case 88:
 
        var regla = new regla_1.reglaGramatical({ produccion: 'VALOR → id \'[\' E \']\'', regla:'crearNodoAST(\'ID\',[n3],yyline)' });
        reporte_1.ReporteGramatical.getInstance().push3(regla);
        this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'PREDICADO', hijos:[$$[$0-1]], linea:yylineno})], linea: yylineno}); 
break;
case 89:
 
        var regla = new regla_1.reglaGramatical({ produccion: 'VALOR → \'@\' id \'[\' E \']\'', regla:'crearNodoAST(\'ID\',[n4],yyline)' });
        reporte_1.ReporteGramatical.getInstance().push3(regla);
        this.$ = new NodoAST({label: 'FRAG', hijos: [new NodoAST({label:'PREDICADO_A', hijos:[$$[$0-1]], linea:yylineno})], linea: yylineno}); 
break;
case 90:

        var regla = new regla_1.reglaGramatical({ produccion: 'VALOR → LLAMADA_FUNCION', regla:'llamadaFuncion(n1,entorno)' });
        reporte_1.ReporteGramatical.getInstance().push3(regla); 
        //this.$ = $$[$0]; 
        this.$=new NodoAST({label: 'FRAG', hijos: [$$[$0]], linea: yylineno});
        
break;
case 91:

  var regla = new regla_1.reglaGramatical({ produccion: 'LLAMADA_FUNCION → rLocal \':\' id PARAMETROS2', regla:'crearNodoAST(\'LLAMADAF\',[n1,n3,n4],yyline)' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);
this.$ = new NodoAST({label: 'LLAMADA_FUNCION', hijos: [$$[$0-1],$$[$0]], linea:yylineno});

break;
case 92:

    var regla = new regla_1.reglaGramatical({ produccion: 'PARAMETROS2 → ( )', regla:'sin parametros' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
this.$ = new NodoAST({label: 'SIN_PARAMETROS', hijos: [], linea:yylineno});

break;
case 93:

    var regla = new regla_1.reglaGramatical({ produccion: 'PARAMETROS2 → ( L_P )', regla:'crearNodoAST(\'L_P\',[n2],yyline)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
this.$ = $$[$0-1];

break;
case 94:

    var regla = new regla_1.reglaGramatical({ produccion: 'L_PARAMETROS2 → L_PARAMETROS2 , E', regla:'crearNodoAST(\'L_P\',[n1,n2],yyline)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
  $$[$0-2].hijos.push($$[$0]);
  this.$=$$[$0-2];

break;
case 95:

    var regla = new regla_1.reglaGramatical({ produccion: 'L_PARAMETROS2 → E', regla:'crearNodoAST(\'L_P\',[n1],yyline)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
  this.$ = new NodoAST({label: 'L_PARAMETROS', hijos: [$$[$0]], linea:yylineno});

break;
case 96:

  var regla = new regla_1.reglaGramatical({ produccion: 'BLOQUE → ( L_INS  )', regla:'crearNodoAST(\'BLOQUE\',[n2],yyline)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
  this.$ = new NodoAST({label: 'BLOQUE', hijos: [$$[$0-1]], linea:yylineno});

break;
case 97:

    var regla = new regla_1.reglaGramatical({ produccion: 'BLOQUE → ( )', regla:'sin parametros' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
  
  this.$ = new NodoAST({label: 'BLOQUE', hijos: [], linea:yylineno});

break;
case 98:

      var regla = new regla_1.reglaGramatical({ produccion: 'L_INS → L_INS INS', regla:'crearNodoAST(\'L INS\',[n1,n2],yyline)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);

  $$[$0-1].hijos.push($$[$0]);
  this.$=$$[$0-1];

break;
case 99:
 
      var regla = new regla_1.reglaGramatical({ produccion: 'L_INS → INS', regla:'crearNodoAST(\'L INS\',[n1],yyline)' });
    reporte_1.ReporteGramatical.getInstance().push3(regla);
  this.$ = new NodoAST({label: 'L_INS', hijos: [$$[$0]], linea:yylineno}); 
break;
case 100:
this.$ = $$[$0]; 
break;
case 101: case 102: case 103: case 104: case 143:
 this.$=$$[$0];
break;
case 105: case 106: case 112:
this.$=$$[$0];
break;
case 107:

      var regla = new regla_1.reglaGramatical({ produccion: 'INS → SALIDA', regla:'ejecutarSalida(n1)' });
      reporte_1.ReporteGramatical.getInstance().push3(regla);
  this.$ = new NodoAST({label: 'SALIDA', hijos: [$$[$0-1]], linea:yylineno});

break;
case 108: case 115:

  $$[$0-2].hijos.push($$[$0]);
  this.$=$$[$0-2];

break;
case 109:

  this.$ = new NodoAST({label: 'L_EXP', hijos: [$$[$0]], linea:yylineno});

break;
case 110:

  var regla = new regla_1.reglaGramatical({ produccion: 'INS → DECLARACION', regla:'ejecutarDeclaracion(n3,n6)' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);
  this.$ = new NodoAST({label: 'DECLARACION', hijos: [$$[$0-3],$$[$0]], linea:yylineno}); 

break;
case 111:

  var regla = new regla_1.reglaGramatical({ produccion: 'INS → DECLARACION_FUNCION', regla:'declararFuncion(n5,n6,n8,n10)' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);


  this.$ = new NodoAST({label: 'DECLARAR_FUNCION', hijos: [
    new NodoAST({label: 'PREFIJO', hijos: [$$[$0-9]], linea:yylineno}),
    $$[$0-7],
    $$[$0-6],
    new NodoAST({label: 'AS_', hijos: [$$[$0-4]], linea:yylineno}),
    new NodoAST({label: 'TIPO', hijos: [$$[$0-2]], linea:yylineno}),
    $$[$0-1]
  ], linea:yylineno});

break;
case 113:

  this.$ = new NodoAST({label: 'SIN_PARAMETROS', hijos: [], linea:yylineno});

break;
case 114:

  this.$ = $$[$0-1];

break;
case 116:

  this.$ = new NodoAST({label: 'L_PARAMETROS', hijos: [$$[$0]], linea:yylineno});

break;
case 117:

  this.$ = new NodoAST({label: 'DECLARACION2', hijos: [$$[$0-4],$$[$0-2],$$[$0]], linea:yylineno});

break;
case 118: case 119: case 120: case 121:
this.$=$$[$0]
break;
case 122: case 123: case 124: case 125:
this.$=$$[$0-1]
break;
case 126:

  var regla = new regla_1.reglaGramatical({ produccion: 'INS → S_IF', regla:'ejecutarIf(n1)' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);

  this.$ = new NodoAST({label: 'S_IF', hijos: [$$[$0]], linea:yylineno});

break;
case 127:

  $$[$0-2].hijos.push(new NodoAST({label: 'ELSE', hijos: [$$[$0]], linea:yylineno}));
  this.$=$$[$0-2];

break;
case 128:

  this.$ = $$[$0];

break;
case 129:

    $$[$0-7].hijos.push(new NodoAST({label: 'ELSE_IF', hijos: [$$[$0-3],$$[$0]], linea:yylineno}));
    this.$ = $$[$0-7];

break;
case 130:

  this.$ = new NodoAST({label: 'L_CONDICIONES', hijos: [new NodoAST({label: 'IF', hijos: [$$[$0-3],$$[$0]], linea:yylineno})], linea:yylineno});

break;
case 131: case 132:

  this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0]], linea:yylineno});

break;
case 133:

  var regla = new regla_1.reglaGramatical({ produccion: 'INS → RETORNO', regla:'ejecutarRetorno(n2)' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);
  this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0]], linea:yylineno});

break;
case 134:

  var regla = new regla_1.reglaGramatical({ produccion: 'INS → , REASGINACION', regla:'ejecutarReasignacion(n2,n4)' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);
  this.$ = new NodoAST({label: 'REASIGNACION', hijos: [$$[$0-3],$$[$0]], linea:yylineno}); 

break;
case 135:

  var regla = new regla_1.reglaGramatical({ produccion: 'INS → FOR', regla:'ejecutarFOR(n3,n4,n5)' });
  reporte_1.ReporteGramatical.getInstance().push3(regla);

  this.$ = new NodoAST({label: 'FOR1', hijos: [
    new NodoAST({label:'Identificador', hijos:[$$[$0-3]], linea:yylineno}),
    new NodoAST({label:'In', hijos:[$$[$0-1]], linea:yylineno}),
    $$[$0]], linea: yylineno}); 
break;
case 136:


  this.$ = new NodoAST({label: 'FOR2', hijos: [
    new NodoAST({label:'Identificador', hijos:[$$[$0-5]], linea:yylineno}),
    new NodoAST({label:'In', hijos:[$$[$0-3]], linea:yylineno}),
    new NodoAST({label:'Where', hijos:[$$[$0-1]], linea:yylineno}),
    $$[$0]], linea: yylineno}); 
break;
case 137:


  this.$ = new NodoAST({label: 'FOR3', hijos: [
    new NodoAST({label:'Identificador', hijos:[$$[$0-4]], linea:yylineno}),
    new NodoAST({label:'In', hijos:[$$[$0-2]], linea:yylineno}),
    $$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 138:

  this.$ = new NodoAST({label: 'FOR4', hijos: [
    new NodoAST({label:'Identificador', hijos:[$$[$0-6]], linea:yylineno}),
    new NodoAST({label:'In', hijos:[$$[$0-4]], linea:yylineno}),
    new NodoAST({label:'Where', hijos:[$$[$0-2]], linea:yylineno}),
    $$[$0-1],$$[$0]], linea: yylineno}); 
break;
case 139:

  this.$ =new NodoAST({label:'Order', hijos:[$$[$0],new NodoAST({label:'ASC', hijos:[], linea:yylineno})], linea:yylineno});

break;
case 140:

  this.$ =new NodoAST({label:'Order', hijos:[$$[$0-1],new NodoAST({label:'ASC', hijos:[], linea:yylineno})], linea:yylineno});

break;
case 141:

  this.$ =new NodoAST({label:'Order', hijos:[$$[$0-1],new NodoAST({label:'DESC', hijos:[], linea:yylineno})], linea:yylineno});

break;
case 142:

  this.$ = new NodoAST({label: 'RETURN', hijos: [$$[$0]], linea: yylineno}); 
break;
case 144:

  this.$ = new NodoAST({label: 'RETURN_IF', hijos: [$$[$0]], linea: yylineno}); 
break;
}
},
table: [{3:1,4:2,6:3,62:$V0,79:$V1,81:4,82:5,83:6,84:7,85:8,86:9,87:10,88:11,90:$V2,91:$V3,104:13,105:19,108:$V4,110:$V5,111:$V6},{1:[3]},{5:[1,21]},{5:[2,2],62:$V0,79:$V1,81:22,82:5,83:6,84:7,85:8,86:9,87:10,88:11,90:$V2,91:$V3,104:13,105:19,108:$V4,110:$V5,111:$V6},o($V7,[2,99]),o($V7,[2,100]),o($V7,[2,101]),o($V7,[2,102]),o($V7,[2,103]),o($V7,[2,104]),o($V7,[2,105]),o($V7,[2,106]),{10:$V8,12:$V9,13:$Va,14:$Vb,17:24,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv,89:23},o($V7,[2,126]),{56:[1,52]},{56:[1,53]},{92:[1,54]},{56:[1,55]},{10:$V8,12:$V9,13:$Va,14:$Vb,17:56,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},o($V7,[2,128],{106:[1,57]}),{22:[1,58]},{1:[2,1]},o($V7,[2,98]),{62:[1,60],80:[1,59]},o($Vw,[2,109],{15:$Vx,37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP}),{10:$V8,12:$V9,13:$Va,14:$Vb,17:80,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:81,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{13:[1,82]},{22:[1,83]},{22:[1,84]},{22:[1,85]},{22:[1,86]},{22:[1,87]},o($VQ,[2,64],{74:50,64:90,10:[1,88],12:[1,89],13:$Va,14:$Vb,20:$Vc,21:$Vd,56:$VR,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,75:$Vv}),{10:[1,92],13:$Va,14:$Vb,20:$Vc,21:$Vd,56:$VR,64:93,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{12:[1,94]},o($VS,[2,72]),{22:[1,95]},{22:[1,96]},{22:[1,97]},{22:[1,98]},o($VS,[2,77],{16:[1,99]}),o($VS,[2,78]),o($VS,[2,79]),o($VS,[2,81]),o($VS,[2,82]),{13:[1,101],15:[1,100]},o($VS,[2,84]),o($VS,[2,85]),o($VS,[2,87]),o($VS,[2,90]),{12:[1,102]},{13:[1,103]},{13:[1,104]},{75:[1,106],93:105},{13:[1,107]},o($V7,[2,133],{15:$Vx,37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP}),{10:$V8,12:$V9,13:$Va,14:$Vb,17:111,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv,107:108,108:[1,109],110:$VT},{10:$V8,12:$V9,13:$Va,14:$Vb,17:112,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},o($V7,[2,107]),{10:$V8,12:$V9,13:$Va,14:$Vb,17:113,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:114,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:115,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:116,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:117,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:118,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:119,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:120,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:121,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:122,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:123,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:124,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:125,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:126,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:127,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:128,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:129,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:130,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:131,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:132,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},o($VU,[2,39],{15:$Vx,39:$VA,42:$VD}),{15:$Vx,23:[1,133],37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,55:[1,134]},o($VS,$VV,{16:[1,135]}),{10:$V8,12:$V9,13:$Va,14:$Vb,17:136,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:137,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:138,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:139,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:140,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:[1,141],13:$Va,14:$Vb,20:$Vc,21:$Vd,56:$VR,64:142,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{12:[1,143]},o($VS,[2,68]),{13:[1,144]},{13:$Va,14:$Vb,20:$Vc,21:$Vd,56:$VR,64:145,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},o($VS,[2,70]),{13:$Va,14:$Vb,20:$Vc,21:$Vd,56:$VR,64:146,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{23:[1,147]},{23:[1,148]},{23:[1,149]},{23:[1,150]},{10:$V8,12:$V9,13:$Va,14:$Vb,17:151,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},o($VS,[2,83]),o($VS,[2,86],{16:[1,152]}),{13:[1,153]},{12:[1,154]},{12:[1,155]},{12:[1,156]},{12:[2,112]},{112:[1,157]},o($V7,[2,127]),{22:[1,158]},{10:$V8,12:$V9,13:$Va,14:$Vb,17:159,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},o($VW,[2,132],{15:$Vx,37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP}),{15:$Vx,23:[1,160],37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP},o($Vw,[2,108],{15:$Vx,37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP}),o($VU,[2,35],{15:$Vx,39:$VA,42:$VD}),o($VU,[2,36],{15:$Vx,39:$VA,42:$VD}),o($VQ,[2,37]),o($VQ,[2,38]),o([5,18,23,40,41,55,62,79,80,90,91,106,108,110,111,114,116,118,119],[2,41],{15:$Vx,37:$Vy,38:$Vz,39:$VA,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP}),o([5,18,23,41,55,62,79,80,90,91,106,108,110,111,114,116,118,119],[2,42],{15:$Vx,37:$Vy,38:$Vz,39:$VA,40:$VB,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP}),o($VQ,[2,43]),o($VX,[2,44],{15:$Vx,37:$Vy,38:$Vz,39:$VA,42:$VD}),o($VX,[2,45],{15:$Vx,37:$Vy,38:$Vz,39:$VA,42:$VD}),o($VX,[2,46],{15:$Vx,37:$Vy,38:$Vz,39:$VA,42:$VD}),o($VX,[2,47],{15:$Vx,37:$Vy,38:$Vz,39:$VA,42:$VD}),o($VY,[2,48],{15:$Vx,37:$Vy,38:$Vz,39:$VA,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,51:$VM,52:$VN,53:$VO,54:$VP}),o($VY,[2,49],{15:$Vx,37:$Vy,38:$Vz,39:$VA,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,51:$VM,52:$VN,53:$VO,54:$VP}),o($VY,[2,50],{15:$Vx,37:$Vy,38:$Vz,39:$VA,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,51:$VM,52:$VN,53:$VO,54:$VP}),o($VY,[2,51],{15:$Vx,37:$Vy,38:$Vz,39:$VA,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,51:$VM,52:$VN,53:$VO,54:$VP}),o($VX,[2,52],{15:$Vx,37:$Vy,38:$Vz,39:$VA,42:$VD}),o($VX,[2,53],{15:$Vx,37:$Vy,38:$Vz,39:$VA,42:$VD}),o($VX,[2,54],{15:$Vx,37:$Vy,38:$Vz,39:$VA,42:$VD}),o($VX,[2,55],{15:$Vx,37:$Vy,38:$Vz,39:$VA,42:$VD}),o($VQ,[2,40]),{10:$V8,12:$V9,13:$Va,14:$Vb,17:161,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:162,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{15:$Vx,23:[1,163],37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP},{15:$Vx,23:[1,164],37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP},{15:$Vx,23:[1,165],37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP},{15:$Vx,23:[1,166],37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP},{15:$Vx,37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,62:[1,167]},{13:$Va,14:$Vb,20:$Vc,21:$Vd,56:$VR,64:168,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},o($VS,[2,66]),{13:$Va,14:$Vb,20:$Vc,21:$Vd,56:$VR,64:169,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},o($VS,$VV),o($VS,[2,69]),o($VS,[2,71]),o($VS,[2,73]),o($VS,[2,74]),o($VS,[2,75]),o($VS,[2,76]),{15:$Vx,18:[1,170],37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP},{10:$V8,12:$V9,13:$Va,14:$Vb,17:171,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{22:[1,173],76:172},{47:[1,174]},{47:[1,175]},{13:[1,176]},{10:$V8,12:$V9,13:$Va,14:$Vb,17:177,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:178,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},o($VW,[2,131],{15:$Vx,37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP}),{109:[1,179]},{15:$Vx,23:[1,180],37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP},{15:$Vx,18:[1,181],37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP},o($VQ,[2,58]),o($VQ,[2,59]),o($VQ,[2,60]),o($VQ,[2,61]),{10:$V8,12:$V9,13:$Va,14:$Vb,17:182,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},o($VS,[2,65]),o($VS,[2,67]),o($VS,[2,88]),{15:$Vx,18:[1,183],37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP},o($VS,[2,91]),{10:$V8,12:$V9,13:$Va,14:$Vb,17:186,20:$Vc,21:$Vd,22:$Ve,23:[1,184],38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv,77:185},{10:$V8,12:$V9,13:$Va,14:$Vb,17:187,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:188,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{22:[1,190],94:189},{15:$Vx,37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,110:$VZ,113:191,114:[1,192],115:193,116:$V_},{15:$Vx,23:[1,196],37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP},{10:$V8,12:$V9,13:$Va,14:$Vb,17:111,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv,107:197,110:$VT},o($VQ,[2,56]),o($VQ,[2,57]),{15:$Vx,23:[1,198],37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,62:[1,199]},o($VS,[2,89]),o($VS,[2,92]),{23:[1,200],62:[1,201]},o($V$,[2,95],{15:$Vx,37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP}),o($V7,[2,110],{15:$Vx,37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP}),o($V7,[2,134],{15:$Vx,37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP}),{95:[1,202]},{23:[1,203],56:$V01,98:204,99:205},o($V7,[2,135]),{10:$V8,12:$V9,13:$Va,14:$Vb,17:207,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{110:$VZ,113:208},{10:$V8,12:$V9,13:$Va,14:$Vb,17:209,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv,104:211,105:19,108:$V4,120:210},{117:[1,212]},{109:[1,213]},o($VW,[2,130]),o($VQ,[2,62]),{10:$V8,12:$V9,13:$Va,14:$Vb,17:214,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},o($VS,[2,93]),{10:$V8,12:$V9,13:$Va,14:$Vb,17:215,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{13:[1,216]},{95:[2,113]},{23:[1,217],62:[1,218]},o($V$,[2,116]),{13:[1,219]},{15:$Vx,37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,110:$VZ,113:220,115:221,116:$V_},o($V7,[2,137]),o($V7,[2,142],{15:$Vx,37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP}),o($V7,[2,143]),o($V7,[2,144]),{10:$V8,12:$V9,13:$Va,14:$Vb,17:222,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv},{10:$V8,12:$V9,13:$Va,14:$Vb,17:111,20:$Vc,21:$Vd,22:$Ve,38:$Vf,56:$Vg,57:$Vh,58:$Vi,59:$Vj,60:$Vk,61:$Vl,63:33,64:36,65:$Vm,66:$Vn,67:$Vo,68:$Vp,69:$Vq,70:$Vr,71:$Vs,72:$Vt,73:$Vu,74:50,75:$Vv,107:223,110:$VT},{15:$Vx,23:[1,224],37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP},o($V$,[2,94],{15:$Vx,37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP}),{12:[1,225]},{95:[2,114]},{56:$V01,99:226},{95:[1,227]},o($V7,[2,136]),{110:$VZ,113:228},{15:$Vx,37:$Vy,38:$Vz,39:$VA,40:$VB,41:$VC,42:$VD,43:$VE,44:$VF,45:$VG,46:$VH,47:$VI,48:$VJ,49:$VK,50:$VL,51:$VM,52:$VN,53:$VO,54:$VP,110:[2,139],118:[1,229],119:[1,230]},o($VW,[2,129]),o($VQ,[2,63]),{57:$V11,96:231,100:$V21,101:$V31,102:$V41},o($V$,[2,115]),{13:[1,236]},o($V7,[2,138]),{110:[2,140]},{110:[2,141]},{78:237,79:[1,238]},o($V51,[2,118],{103:[1,239]}),o($V51,[2,119],{103:[1,240]}),o($V51,[2,120],{103:[1,241]}),o($V51,[2,121],{103:[1,242]}),{12:[1,243]},{97:[1,244]},{6:245,62:$V0,79:$V1,80:[1,246],81:4,82:5,83:6,84:7,85:8,86:9,87:10,88:11,90:$V2,91:$V3,104:13,105:19,108:$V4,110:$V5,111:$V6},o($V51,[2,122]),o($V51,[2,123]),o($V51,[2,124]),o($V51,[2,125]),{57:$V11,96:247,100:$V21,101:$V31,102:$V41},o($V7,[2,111]),{62:$V0,79:$V1,80:[1,248],81:22,82:5,83:6,84:7,85:8,86:9,87:10,88:11,90:$V2,91:$V3,104:13,105:19,108:$V4,110:$V5,111:$V6},{97:[2,97]},o($V$,[2,117]),{97:[2,96]}],
defaultActions: {21:[2,1],106:[2,112],203:[2,113],217:[2,114],229:[2,140],230:[2,141],246:[2,97],248:[2,96]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  const { NodoAST } = require('../arbol/nodoAST');
  const error_1 = require("../arbol/error");
  const errores_1 = require("../arbol/errores");
  const regla_1 = require("../arbol/reglaGramatical");
  const reporte_1 = require("../arbol/reporteGramatical");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// espacios en blanco
break;
case 1:return 20;
break;
case 2:return 25;
break;
case 3:return 24;
break;
case 4:return 26;
break;
case 5:return 27;
break;
case 6:return 29;
break;
case 7:return 28;
break;
case 8:return 31;
break;
case 9:return 30;
break;
case 10:return 32;
break;
case 11:return 33;
break;
case 12:return 35;
break;
case 13:return 34;
break;
case 14:return 36;
break;
case 15:return 21;
break;
case 16:return 67;
break;
case 17:return 10;
break;
case 18:return 14;
break;
case 19:return 16;
break;
case 20:return 18;
break;
case 21:return 15;
break;
case 22:return 22;
break;
case 23:return 23;
break;
case 24:return 12;
break;
case 25:return 39;
break;
case 26:return 42;
break;
case 27:return 37;
break;
case 28:return 38;
break;
case 29:return 15;
break;
case 30:return 40;
break;
case 31:return 41;
break;
case 32:return 43;
break;
case 33:return 44;
break;
case 34:return 48;
break;
case 35:return 45;
break;
case 36:return 46;
break;
case 37:return 47;
break;
case 38:return 65;
break;
case 39:return 66;
break;
case 40:return 8;
break;
case 41:return 56;
break;
case 42:return 111;
break;
case 43:return 112;
break;
case 44:return 114;
break;
case 45:return 110;
break;
case 46:return 116;
break;
case 47:return 117;
break;
case 48:return 118;
break;
case 49:return 119;
break;
case 50:return 90;
break;
case 51:return 55;
break;
case 52:return 97;
break;
case 53:return 62;
break;
case 54:return 103;
break;
case 55:return 79;
break;
case 56:return 80;
break;
case 57:return 108;
break;
case 58:return 109;
break;
case 59:return 106;
break;
case 60:return 91;
break;
case 61:return 92;
break;
case 62:return 75;
break;
case 63:return 95;
break;
case 64:return 70;
break;
case 65:return 71;
break;
case 66:return 100;
break;
case 67:return 101;
break;
case 68:return 102;
break;
case 69:return 'rDouble';
break;
case 70:return 'rFloat';
break;
case 71:return 57;
break;
case 72:return 49;
break;
case 73:return 50;
break;
case 74:return 51;
break;
case 75:return 53;
break;
case 76:return 52;
break;
case 77:return 54;
break;
case 78:return 57;
break;
case 79:return 60;
break;
case 80:return 61;
break;
case 81:return 58;
break;
case 82:return 59
break;
case 83:return 13;
break;
case 84:return 69;
break;
case 85:return 68;
break;
case 86: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 72; 
break;
case 87: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 73; 
break;
case 88:return 5;
break;
case 89:
  const er = new error_1.Error({ tipo: 'lexico', linea: `${yy_.yylineno + 1}`, descripcion: `El valor "${yy_.yytext}" no es valido, columna: ${yy_.yylloc.first_column + 1}` });
  errores_1.Errores.getInstance().push(er);
  
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\.+)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:text\b)/i,/^(?:node\b)/i,/^(?:\/)/i,/^(?:@)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\*)/i,/^(?:\()/i,/^(?:\))/i,/^(?::)/i,/^(?:div\b)/i,/^(?:mod\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:last\b)/i,/^(?:position\b)/i,/^(?:\|)/i,/^(?:\$)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:where\b)/i,/^(?:return\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:ascending\b)/i,/^(?:descending\b)/i,/^(?:let\b)/i,/^(?:to\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\?)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:declare\b)/i,/^(?:function\b)/i,/^(?:local\b)/i,/^(?:as\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:decimal\b)/i,/^(?:integer\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:float\b)/i,/^(?:string\b)/i,/^(?:eq\b)/i,/^(?:ne\b)/i,/^(?:lt\b)/i,/^(?:gt\b)/i,/^(?:le\b)/i,/^(?:ge\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:substring\b)/i,/^(?:upper-case\b)/i,/^(?:lower-case\b)/i,/^(?:([a-zñA-ZÑ_])[a-zñA-ZÑ0-9_]*)/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:'[^\']*')/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica_xquery;
exports.Parser = gramatica_xquery.Parser;
exports.parse = function () { return gramatica_xquery.parse.apply(gramatica_xquery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}