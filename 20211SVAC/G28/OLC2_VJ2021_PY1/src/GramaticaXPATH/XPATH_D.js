/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XPATH_D = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36],$V1=[2,9],$V2=[1,5],$V3=[1,6],$V4=[2,6],$V5=[1,8],$V6=[1,9],$V7=[29,30,31,32,33,35,36],$V8=[2,23],$V9=[1,12],$Va=[1,13],$Vb=[1,14],$Vc=[1,15],$Vd=[1,16],$Ve=[1,17],$Vf=[1,18],$Vg=[1,19],$Vh=[1,20],$Vi=[1,21],$Vj=[1,22],$Vk=[1,23],$Vl=[1,24],$Vm=[1,29],$Vn=[1,30],$Vo=[1,31],$Vp=[1,32],$Vq=[1,33],$Vr=[1,34],$Vs=[1,35],$Vt=[6,12,13,14,15],$Vu=[2,32],$Vv=[1,39],$Vw=[6,12,13,14,15,37],$Vx=[1,41],$Vy=[1,42],$Vz=[6,12,13],$VA=[2,67],$VB=[1,44],$VC=[1,45],$VD=[1,55],$VE=[1,56],$VF=[1,51],$VG=[1,52],$VH=[1,53],$VI=[1,54],$VJ=[1,57],$VK=[1,58],$VL=[1,59],$VM=[6,12,13,14,15,30,37,39,42,43,46,47,48,49,50,51,54,55,58,59,60,66],$VN=[39,66],$VO=[2,36],$VP=[1,65],$VQ=[1,66],$VR=[39,42,43,66],$VS=[2,44],$VT=[1,68],$VU=[1,69],$VV=[1,70],$VW=[1,71],$VX=[1,72],$VY=[1,73],$VZ=[39,42,43,46,47,48,49,50,51,66],$V_=[2,48],$V$=[1,75],$V01=[1,76],$V11=[39,42,43,46,47,48,49,50,51,54,55,66],$V21=[30,39,42,43,46,47,48,49,50,51,54,55,58,59,60,66];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONSULTA":4,"LISTA_CONSULTA":5,"EOF":6,"RELATIVO":7,"AXIS":8,"POSICION":9,"PREDICADO":10,"SECUENCIA":11,"Simbolo_AND":12,"Simbolo_Doble_AND":13,"Simbolo_Barra":14,"Simbolo_Barra_Doble":15,"Reservada_ancestor":16,"Reservada_ancestor-or-self":17,"Reservada_attribute":18,"Reservada_child":19,"Reservada_descendant":20,"Reservada_descendant-or-self":21,"Reservada_following":22,"Reservada_following-sibling":23,"Reservada_namespace":24,"Reservada_parent":25,"Reservada_preceding":26,"Reservada_preceding-sibling":27,"Reservada_self":28,"ID":29,"Simbolo_Asterisco":30,"Reservada_Node":31,"Reservada_Text":32,"Simbolo_Arroba":33,"SELECTF":34,"Simbolo_Punto":35,"Simbolo_Doble_Punto":36,"Simbolo_Abrir_Corchete":37,"VALOR":38,"Simbolo_Cerrar_Corchete":39,"C":40,"VP":41,"Reservada_or":42,"Reservada_and":43,"E":44,"CP":45,"Simbolo_Mayor":46,"Simbolo_Mayor_Igual":47,"Simbolo_Menor":48,"Simbolo_Menor_Igual":49,"Simbolo_Igual":50,"Simbolo_Distinto":51,"T":52,"EP":53,"Simbolo_Mas":54,"Simbolo_Menos":55,"F":56,"TP":57,"ET":58,"Reservada_div":59,"Reservada_mod":60,"Entero":61,"Decimal":62,"Reservada_last":63,"Reservada_position":64,"Simbolo_Abrir_Parentesis":65,"Simbolo_Cerrar_Parentesis":66,"Cadena":67,"Caracter":68,"SUBCONSULTA":69,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",12:"Simbolo_AND",13:"Simbolo_Doble_AND",14:"Simbolo_Barra",15:"Simbolo_Barra_Doble",16:"Reservada_ancestor",17:"Reservada_ancestor-or-self",18:"Reservada_attribute",19:"Reservada_child",20:"Reservada_descendant",21:"Reservada_descendant-or-self",22:"Reservada_following",23:"Reservada_following-sibling",24:"Reservada_namespace",25:"Reservada_parent",26:"Reservada_preceding",27:"Reservada_preceding-sibling",28:"Reservada_self",29:"ID",30:"Simbolo_Asterisco",31:"Reservada_Node",32:"Reservada_Text",33:"Simbolo_Arroba",35:"Simbolo_Punto",36:"Simbolo_Doble_Punto",37:"Simbolo_Abrir_Corchete",39:"Simbolo_Cerrar_Corchete",42:"Reservada_or",43:"Reservada_and",46:"Simbolo_Mayor",47:"Simbolo_Mayor_Igual",48:"Simbolo_Menor",49:"Simbolo_Menor_Igual",50:"Simbolo_Igual",51:"Simbolo_Distinto",54:"Simbolo_Mas",55:"Simbolo_Menos",58:"ET",59:"Reservada_div",60:"Reservada_mod",61:"Entero",62:"Decimal",63:"Reservada_last",64:"Reservada_position",65:"Simbolo_Abrir_Parentesis",66:"Simbolo_Cerrar_Parentesis",67:"Cadena",68:"Caracter"},
productions_: [0,[3,3],[3,2],[4,5],[5,3],[5,3],[5,0],[7,1],[7,1],[7,0],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,1],[8,0],[9,1],[9,1],[9,1],[9,1],[9,2],[9,1],[9,1],[10,3],[10,0],[38,2],[41,3],[41,3],[41,0],[40,2],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,0],[44,2],[53,3],[53,3],[53,0],[52,2],[57,3],[57,3],[57,3],[57,0],[56,1],[56,1],[56,1],[56,1],[56,1],[56,2],[56,3],[56,1],[56,1],[34,1],[34,1],[11,2],[11,2],[11,0],[69,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		    this.$=new Nodo("Inicio","");
        this.$.Hijos.push($$[$0-2]);
        this.$.Hijos.push($$[$0-1]);
        Raiz=this.$;
        var retorno={
          raiz:Raiz,
          Errores: ListaErrores,
          Consultas: ListaConsultas,
        };
        ListaErrores = new Array();
        ListaConsultas = new Array();
        return retorno;
	    
break;
case 2:

        ListaErrores.push(new Error("Sintactico", yytext, "Token inesperado", this._$.first_line, this._$.first_column));
        this.$=new Nodo("Inicio","");
        this.$.Hijos.push($$[$0-1]);
        this.$.Hijos.push($$[$0]);
        Raiz=this.$;
        var retorno={
          raiz:Raiz,
          Errores: ListaErrores,
          Consultas: ListaConsultas,
        };
        ListaErrores = new Array();
        ListaConsultas = new Array();
        return retorno;
      
break;
case 3:

          this.$=new Nodo("Consulta", "");
          this.$.Hijos.push($$[$0-4]);
          this.$.Hijos.push($$[$0-3]);
          this.$.Hijos.push($$[$0-2]);
          this.$.Hijos.push($$[$0-1]);
          this.$.Hijos.push($$[$0]);
          ListaConsultas.push(new Consulta($$[$0-4].Valor, $$[$0-3].Valor, $$[$0-2], $$[$0-1], $$[$0].Valor));
			  
break;
case 4:

                this.$=new Nodo("Lista_Consulta", "");
                this.$.Hijos.push(new Nodo("|", ""));
                this.$.Hijos.push($$[$0-1]);
                this.$.Hijos.push($$[$0]);
              
break;
case 5:

                this.$=new Nodo("Lista_Consulta", "");
                this.$.Hijos.push(new Nodo("||", ""));
                this.$.Hijos.push($$[$0-1]);
                this.$.Hijos.push($$[$0]);
              
break;
case 6:
this.$=new Nodo("Lista_Consulta", "");
break;
case 7:
this.$=new Nodo("Relativo", ""); this.$.Hijos.push(new Nodo("/", ""));
break;
case 8:
this.$=new Nodo("Relativo", ""); this.$.Hijos.push(new Nodo("//", ""));
break;
case 9:
this.$=new Nodo("Relativo", "");
break;
case 10:
this.$=new Nodo("Axis", ""); this.$.Hijos.push(new Nodo("ancestor", ""));
break;
case 11:
this.$=new Nodo("Axis", ""); this.$.Hijos.push(new Nodo("ancestor-or-self", ""));
break;
case 12:
this.$=new Nodo("Axis", ""); this.$.Hijos.push(new Nodo("attribute", ""));
break;
case 13:
this.$=new Nodo("Axis", ""); this.$.Hijos.push(new Nodo("child", ""));
break;
case 14:
this.$=new Nodo("Axis", ""); this.$.Hijos.push(new Nodo("descendant", ""));
break;
case 15:
this.$=new Nodo("Axis", ""); this.$.Hijos.push(new Nodo("descendant-or-self", ""));
break;
case 16:
this.$=new Nodo("Axis", ""); this.$.Hijos.push(new Nodo("following", ""));
break;
case 17:
this.$=new Nodo("Axis", ""); this.$.Hijos.push(new Nodo("following-sibling", ""));
break;
case 18:
this.$=new Nodo("Axis", ""); this.$.Hijos.push(new Nodo("namespace", ""));
break;
case 19:
this.$=new Nodo("Axis", ""); this.$.Hijos.push(new Nodo("parent", ""));
break;
case 20:
this.$=new Nodo("Axis", ""); this.$.Hijos.push(new Nodo("preceding", ""));
break;
case 21:
this.$=new Nodo("Axis", ""); this.$.Hijos.push(new Nodo("preceding-sibling", ""));
break;
case 22:
this.$=new Nodo("Axis", ""); this.$.Hijos.push(new Nodo("self", ""));
break;
case 23:
this.$=new Nodo("Axis", "");
break;
case 24:
this.$=new Nodo("Posicion", ""); this.$.Hijos.push(new Nodo("ID", $$[$0]));
break;
case 25:
this.$=new Nodo("Posicion", ""); this.$.Hijos.push(new Nodo("*", ""));
break;
case 26:
this.$=new Nodo("Posicion", ""); this.$.Hijos.push(new Nodo("node()", ""));
break;
case 27:
this.$=new Nodo("Posicion", ""); this.$.Hijos.push(new Nodo("Text()", ""));
break;
case 28:
this.$=new Nodo("Posicion", ""); this.$.Hijos.push(new Nodo("@", "")); this.$.Hijos.push($$[$0]);
break;
case 29:
this.$=new Nodo("Posicion", ""); this.$.Hijos.push(new Nodo(".", ""));
break;
case 30:
this.$=new Nodo("Posicion", ""); this.$.Hijos.push(new Nodo("..", ""));
break;
case 31:

				   this.$=new Nodo("Predicado", "");
				   this.$.Hijos.push(new Nodo("[", ""));
				   this.$.Hijos.push($$[$0-1]);
				   this.$.Hijos.push(new Nodo("]", ""));
		   	 
break;
case 32:
this.$=new Nodo("Predicado", "");
break;
case 33:

				this.$=new Nodo("Valor", "");
        this.$.Hijos.push($$[$0-1]);
			  this.$.Hijos.push($$[$0]);
		 
break;
case 34:

		this.$=new Nodo("VP", "");
    this.$.Hijos.push(new Nodo("or", ""));
    this.$.Hijos.push($$[$0-1]);
		this.$.Hijos.push($$[$0]);
	
break;
case 35:

		this.$=new Nodo("VP", "");
    this.$.Hijos.push(new Nodo("and", ""));
    this.$.Hijos.push($$[$0-1]);
		this.$.Hijos.push($$[$0]);
	
break;
case 36:
this.$=new Nodo("VP", "");
break;
case 37:

		this.$=new Nodo("C", "");
    this.$.Hijos.push($$[$0-1]);
	  this.$.Hijos.push($$[$0]);
	
break;
case 38:

		this.$=new Nodo("CP", "");
    this.$.Hijos.push(new Nodo(">", ""));
    this.$.Hijos.push($$[$0-1]);
		this.$.Hijos.push($$[$0]);
	
break;
case 39:

		this.$=new Nodo("CP", "");
    this.$.Hijos.push(new Nodo(">=", ""));
    this.$.Hijos.push($$[$0-1]);
		this.$.Hijos.push($$[$0]);
	
break;
case 40:

		this.$=new Nodo("CP", "");
    this.$.Hijos.push(new Nodo("<", ""));
    this.$.Hijos.push($$[$0-1]);
		this.$.Hijos.push($$[$0]);
	
break;
case 41:

		this.$=new Nodo("CP", "");
    this.$.Hijos.push(new Nodo("<=", ""));
    this.$.Hijos.push($$[$0-1]);
		this.$.Hijos.push($$[$0]);
	
break;
case 42:

		this.$=new Nodo("CP", "");
    this.$.Hijos.push(new Nodo("=", ""));
    this.$.Hijos.push($$[$0-1]);
		this.$.Hijos.push($$[$0]);
	
break;
case 43:

		this.$=new Nodo("CP", "");
    this.$.Hijos.push(new Nodo("!=", ""));
    this.$.Hijos.push($$[$0-1]);
		this.$.Hijos.push($$[$0]);
	
break;
case 44:
this.$=new Nodo("CP", "");
break;
case 45:

		this.$=new Nodo("E", "");
    this.$.Hijos.push($$[$0-1]);
	  this.$.Hijos.push($$[$0]);
	
break;
case 46:

		this.$=new Nodo("EP", "");
    this.$.Hijos.push(new Nodo("+", ""));
    this.$.Hijos.push($$[$0-1]);
		this.$.Hijos.push($$[$0]);
	
break;
case 47:

		this.$=new Nodo("EP", "");
    this.$.Hijos.push(new Nodo("-", ""));
    this.$.Hijos.push($$[$0-1]);
		this.$.Hijos.push($$[$0]);
	
break;
case 48:
this.$=new Nodo("EP", "");
break;
case 49:

		this.$=new Nodo("T", "");
    this.$.Hijos.push($$[$0-1]);
	  this.$.Hijos.push($$[$0]);
	
break;
case 50:

		this.$=new Nodo("TP", "");
    this.$.Hijos.push(new Nodo("*", ""));
    this.$.Hijos.push($$[$0-1]);
		this.$.Hijos.push($$[$0]);
	
break;
case 51:

		this.$=new Nodo("TP", "");
    this.$.Hijos.push(new Nodo("div", ""));
    this.$.Hijos.push($$[$0-1]);
		this.$.Hijos.push($$[$0]);
	
break;
case 52:

		this.$=new Nodo("TP", "");
    this.$.Hijos.push(new Nodo("mod", ""));
    this.$.Hijos.push($$[$0-1]);
		this.$.Hijos.push($$[$0]);
	
break;
case 53:
this.$=new Nodo("TP", "");
break;
case 54: case 55:
this.$=new Nodo("F", ""); this.$.Hijos.push(new Nodo("Entero", $$[$0]));
break;
case 56:
this.$=new Nodo("F", ""); this.$.Hijos.push(new Nodo("last()", ""));
break;
case 57:
this.$=new Nodo("F", ""); this.$.Hijos.push(new Nodo("position()", ""));
break;
case 58:
this.$=new Nodo("F", ""); this.$.Hijos.push(new Nodo("ID", $$[$0]));
break;
case 59:
this.$=new Nodo("F", ""); this.$.Hijos.push(new Nodo("@", "")); this.$.Hijos.push($$[$0]);
break;
case 60:

                            this.$=new Nodo("F", "");
                            this.$.Hijos.push(new Nodo("(", ""));
                            this.$.Hijos.push($$[$0-1]);
                            this.$.Hijos.push(new Nodo(")", ""));
                          
break;
case 61: case 62:
this.$=new Nodo("F", ""); this.$.Hijos.push(new Nodo("Cadena", $$[$0]));
break;
case 63:
this.$=new Nodo("SelectF", ""); this.$.Hijos.push(new Nodo("ID", $$[$0]));
break;
case 64:
this.$=new Nodo("SelectF", ""); this.$.Hijos.push(new Nodo("*", ""));
break;
case 65:
this.$=new Nodo("Secuencia", ""); this.$.Hijos.push(new Nodo("/", "")); this.$.Hijos.push($$[$0]); $$[$0].Valor.Relativo = "/"; this.$.Valor = $$[$0].Valor;
break;
case 66:
this.$=new Nodo("Secuencia", ""); this.$.Hijos.push(new Nodo("//", "")); this.$.Hijos.push($$[$0]); $$[$0].Valor.Relativo = "//"; this.$.Valor = $$[$0].Valor;
break;
case 67:
this.$=new Nodo("Secuencia", "");
break;
case 68:

              this.$=new Nodo("Consulta", "");
              this.$.Hijos.push($$[$0-3]);
              this.$.Hijos.push($$[$0-2]);
              this.$.Hijos.push($$[$0-1]);
              this.$.Hijos.push($$[$0]);
              this.$.Valor = new Consulta("", $$[$0-3].Valor, $$[$0-2], $$[$0-1], $$[$0].Valor);
			     
break;
}
},
table: [o($V0,$V1,{3:1,4:2,7:4,2:[1,3],14:$V2,15:$V3}),{1:[3]},{5:7,6:$V4,12:$V5,13:$V6},{6:[1,10]},o($V7,$V8,{8:11,16:$V9,17:$Va,18:$Vb,19:$Vc,20:$Vd,21:$Ve,22:$Vf,23:$Vg,24:$Vh,25:$Vi,26:$Vj,27:$Vk,28:$Vl}),o($V0,[2,7]),o($V0,[2,8]),{6:[1,25]},o($V0,$V1,{7:4,4:26,14:$V2,15:$V3}),o($V0,$V1,{7:4,4:27,14:$V2,15:$V3}),{1:[2,2]},{9:28,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:$Vr,36:$Vs},o($V7,[2,10]),o($V7,[2,11]),o($V7,[2,12]),o($V7,[2,13]),o($V7,[2,14]),o($V7,[2,15]),o($V7,[2,16]),o($V7,[2,17]),o($V7,[2,18]),o($V7,[2,19]),o($V7,[2,20]),o($V7,[2,21]),o($V7,[2,22]),{1:[2,1]},{5:36,6:$V4,12:$V5,13:$V6},{5:37,6:$V4,12:$V5,13:$V6},o($Vt,$Vu,{10:38,37:$Vv}),o($Vw,[2,24]),o($Vw,[2,25]),o($Vw,[2,26]),o($Vw,[2,27]),{29:$Vx,30:$Vy,34:40},o($Vw,[2,29]),o($Vw,[2,30]),{6:[2,4]},{6:[2,5]},o($Vz,$VA,{11:43,14:$VB,15:$VC}),{29:$VD,33:$VE,38:46,40:47,44:48,52:49,56:50,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,67:$VK,68:$VL},o($Vw,[2,28]),o($VM,[2,63]),o($VM,[2,64]),o($Vz,[2,3]),o($V7,$V8,{69:60,8:61,16:$V9,17:$Va,18:$Vb,19:$Vc,20:$Vd,21:$Ve,22:$Vf,23:$Vg,24:$Vh,25:$Vi,26:$Vj,27:$Vk,28:$Vl}),o($V7,$V8,{8:61,69:62,16:$V9,17:$Va,18:$Vb,19:$Vc,20:$Vd,21:$Ve,22:$Vf,23:$Vg,24:$Vh,25:$Vi,26:$Vj,27:$Vk,28:$Vl}),{39:[1,63]},o($VN,$VO,{41:64,42:$VP,43:$VQ}),o($VR,$VS,{45:67,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY}),o($VZ,$V_,{53:74,54:$V$,55:$V01}),o($V11,[2,53],{57:77,30:[1,78],59:[1,79],60:[1,80]}),o($V21,[2,54]),o($V21,[2,55]),o($V21,[2,56]),o($V21,[2,57]),o($V21,[2,58]),{29:$Vx,30:$Vy,34:81},{29:$VD,33:$VE,38:82,40:47,44:48,52:49,56:50,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,67:$VK,68:$VL},o($V21,[2,61]),o($V21,[2,62]),o($Vz,[2,65]),{9:83,29:$Vm,30:$Vn,31:$Vo,32:$Vp,33:$Vq,35:$Vr,36:$Vs},o($Vz,[2,66]),o($Vt,[2,31]),o($VN,[2,33]),{29:$VD,33:$VE,40:84,44:48,52:49,56:50,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,67:$VK,68:$VL},{29:$VD,33:$VE,40:85,44:48,52:49,56:50,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,67:$VK,68:$VL},o($VR,[2,37]),{29:$VD,33:$VE,44:86,52:49,56:50,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,67:$VK,68:$VL},{29:$VD,33:$VE,44:87,52:49,56:50,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,67:$VK,68:$VL},{29:$VD,33:$VE,44:88,52:49,56:50,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,67:$VK,68:$VL},{29:$VD,33:$VE,44:89,52:49,56:50,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,67:$VK,68:$VL},{29:$VD,33:$VE,44:90,52:49,56:50,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,67:$VK,68:$VL},{29:$VD,33:$VE,44:91,52:49,56:50,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,67:$VK,68:$VL},o($VZ,[2,45]),{29:$VD,33:$VE,52:92,56:50,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,67:$VK,68:$VL},{29:$VD,33:$VE,52:93,56:50,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,67:$VK,68:$VL},o($V11,[2,49]),{29:$VD,33:$VE,56:94,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,67:$VK,68:$VL},{29:$VD,33:$VE,56:95,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,67:$VK,68:$VL},{29:$VD,33:$VE,56:96,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,67:$VK,68:$VL},o($V21,[2,59]),{66:[1,97]},o($Vt,$Vu,{10:98,37:$Vv}),o($VN,$VO,{41:99,42:$VP,43:$VQ}),o($VN,$VO,{41:100,42:$VP,43:$VQ}),o($VR,$VS,{45:101,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY}),o($VR,$VS,{45:102,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY}),o($VR,$VS,{45:103,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY}),o($VR,$VS,{45:104,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY}),o($VR,$VS,{45:105,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY}),o($VR,$VS,{45:106,46:$VT,47:$VU,48:$VV,49:$VW,50:$VX,51:$VY}),o($VZ,$V_,{53:107,54:$V$,55:$V01}),o($VZ,$V_,{53:108,54:$V$,55:$V01}),{58:[1,109]},{58:[1,110]},{58:[1,111]},o($V21,[2,60]),o($Vz,$VA,{11:112,14:$VB,15:$VC}),o($VN,[2,34]),o($VN,[2,35]),o($VR,[2,38]),o($VR,[2,39]),o($VR,[2,40]),o($VR,[2,41]),o($VR,[2,42]),o($VR,[2,43]),o($VZ,[2,46]),o($VZ,[2,47]),o($V11,[2,50]),o($V11,[2,51]),o($V11,[2,52]),o($Vz,[2,68])],
defaultActions: {10:[2,2],25:[2,1],36:[2,4],37:[2,5]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const {Nodo} = require("../Expresiones/Nodo");
	const {Consulta} = require("../Expresiones/Consulta");
	const {Error} = require("../Expresiones/Error");

	var ListaErrores = [];
  var ListaConsultas = [];
  var Raiz;
  
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// Espacios
break;
case 1:return 31;
break;
case 2:return 63;
break;
case 3:return 64;
break;
case 4:return 59;
break;
case 5:return 42;
break;
case 6:return 43;
break;
case 7:return 60;
break;
case 8:return 32;
break;
case 9:return 16;
break;
case 10:return 17;
break;
case 11:return 18;
break;
case 12:return 19;
break;
case 13:return 20;
break;
case 14:return 21;
break;
case 15:return 22;
break;
case 16:return 23;
break;
case 17:return 24;
break;
case 18:return 25;
break;
case 19:return 26;
break;
case 20:return 27;
break;
case 21:return 28;
break;
case 22:return 13;
break;
case 23:return 12;
break;
case 24:return 54;
break;
case 25:return 55;
break;
case 26:return 30;
break;
case 27:return 15;
break;
case 28:return 14;
break;
case 29:return 50;
break;
case 30:return 47;
break;
case 31:return 46;
break;
case 32:return 49;
break;
case 33:return 48;
break;
case 34:return 51;
break;
case 35:return 65;
break;
case 36:return 66;
break;
case 37:return 37;
break;
case 38:return 39;
break;
case 39:return 33;
break;
case 40:return 36;
break;
case 41:return 35;
break;
case 42:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 67; 
break;
case 43:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 68; 
break;
case 44:return 62;
break;
case 45:return 61;
break;
case 46:return 29;
break;
case 47:return 6;
break;
case 48:ListaErrores.push(new Error('Lexico', yy_.yytext, "Simbolo no perteneciente al lenguaje", yy_.yylloc.first_line, yy_.yylloc.first_column));
break;
}
},
rules: [/^(?:\s+)/i,/^(?:node\(\))/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:div\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:text\(\))/i,/^(?:ancestor::)/i,/^(?:ancestor-or-self::)/i,/^(?:attribute::)/i,/^(?:child::)/i,/^(?:descendant::)/i,/^(?:descendant-or-self::)/i,/^(?:following::)/i,/^(?:following-sibling::)/i,/^(?:namespace::)/i,/^(?:parent::)/i,/^(?:preceding::)/i,/^(?:preceding-sibling::)/i,/^(?:self::)/i,/^(?:\|\|)/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:@)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:"[^\"]*")/i,/^(?:'[^\"]*')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XPATH_D;
exports.Parser = XPATH_D.Parser;
exports.parse = function () { return XPATH_D.parse.apply(XPATH_D, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}