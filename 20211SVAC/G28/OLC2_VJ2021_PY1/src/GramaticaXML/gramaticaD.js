/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaD = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,5],$V2=[1,9],$V3=[6,7],$V4=[14,24],$V5=[2,10],$V6=[1,14],$V7=[6,7,26],$V8=[1,48],$V9=[1,34],$Va=[1,33],$Vb=[1,26],$Vc=[1,32],$Vd=[2,43],$Ve=[1,27],$Vf=[1,28],$Vg=[1,29],$Vh=[1,30],$Vi=[1,31],$Vj=[1,35],$Vk=[1,36],$Vl=[1,37],$Vm=[1,38],$Vn=[1,39],$Vo=[1,40],$Vp=[1,41],$Vq=[1,42],$Vr=[1,43],$Vs=[1,44],$Vt=[1,45],$Vu=[1,46],$Vv=[1,47],$Vw=[2,20],$Vx=[14,17,24];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"RAIZ":3,"L_RAIZ":4,"ENCODING":5,"EOF":6,"<":7,"?":8,"XML":9,"tk_version":10,"=":11,"StringLiteral":12,"tk_encoding":13,">":14,"HIJOS":15,"tk_xml":16,"tk_id":17,"ATRIBUTOS2":18,"FIN_HIJO":19,"ATRIBUTOS":20,"ATRIBUTO":21,"charLiteral":22,"FIN_HIJO_P":23,"/":24,"L_HIJOS":25,"</":26,"L_ID_HIJOS":27,"L_HIJOS_P":28,"res_menor":29,"res_mayor":30,"res_amp":31,"res_comillaDoble":32,"res_comillaSimple":33,"!":34,"#":35,"$":36,"%":37,"(":38,")":39,"[":40,"]":41,"@":42,"¡":43,"¿":44,"tk_numero":45,"otro":46,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:"<",8:"?",10:"tk_version",11:"=",12:"StringLiteral",13:"tk_encoding",14:">",16:"tk_xml",17:"tk_id",22:"charLiteral",24:"/",26:"</",29:"res_menor",30:"res_mayor",31:"res_amp",32:"res_comillaDoble",33:"res_comillaSimple",34:"!",35:"#",36:"$",37:"%",38:"(",39:")",40:"[",41:"]",42:"@",43:"¡",44:"¿",45:"tk_numero",46:"otro"},
productions_: [0,[3,1],[4,2],[4,1],[5,12],[5,1],[9,1],[9,0],[15,4],[18,2],[18,0],[20,3],[21,1],[21,1],[19,2],[19,2],[23,4],[23,4],[25,2],[28,2],[28,0],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0]; 
break;
case 2:
 this.$ = [$$[$0-1]]; this.$ = this.$.concat($$[$0]);
break;
case 4:
 this.$ = new Encoding("almacenamiento", $$[$0-7], $$[$0-4], _$[$0-11].first_line, _$[$0-11].first_column, $$[$0-1]); 
																									let newSymgd1 = "<tr> <td>ENCODING-> '<' '?' XML tk_version '=' StringLiteral tk_encoding '=' StringLiteral '?' '>' HIJOS</td>   <td>ENCODING.val = concat('<'+'?' + XML.val + tk_version.lexVal + '=' + StringLiteral.lexVal + tk_encoding.lexVal + '=' + StringLiteral.lexVal + '?' + '>' + HIJOS.val)</td> </tr>"
                                                                                                    gramaticalArrayD.push(newSymgd1);
																								
break;
case 5:
 this.$ = new Encoding("almacenamiento", "", "", _$[$0].first_line, _$[$0].first_column, $$[$0]); 
																									let newSymgd2 = "<tr> <td>ENCODING-> HIJOS</td>   <td>ENCODING.val = HIJOS.val</td> </tr>"
                                                                                                    gramaticalArrayD.push(newSymgd2);
																								
break;
case 6:
 this.$ = $$[$0];  
                    let newSymgd3 = "<tr> <td>XML-> tk_xml</td> <td>XML.val = tk_xml.lexVal</td> </tr>"
                    gramaticalArrayD.push(newSymgd3);
                
break;
case 7:
 this.$ = []; 
                    let newSymgd4 = "<tr> <td>XML-> epsilon</td> <td>XML.val = epsilon</td> </tr>"
                    gramaticalArrayD.push(newSymgd4);
                
break;
case 8:
 this.$ = new Objeto($$[$0-2], '', _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1], $$[$0]); 
                                                let newSym = "<tr><td>"+$$[$0-2]+"</td> <td>Objeto</td> <td>"+$$[$0-2]+"</td> <td></td> <td>"+_$[$0-3].first_line+"</td> <td>"+_$[$0-3].first_column+"</td> </tr>"
                                                tokenArrayD.push(newSym);
                    							let newSymgd5 = "<tr> <td>HIJOS-> '<' tk_id ATRIBUTOS2 FIN_HIJO</td> <td>HIJOS.val = concat('<' + tk_id.lexVal + ATRIBUTOS2 + FIN_HIJO)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd5);
											
break;
case 9:
 this.$ = [$$[$0-1]]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd6 = "<tr> <td>ATRIBUTOS2-> ATRIBUTOS ATRIBUTOS2 </td> <td>ATRIBUTOS2.val = concat(ATRIBUTOS.val + ATRIBUTOS2'.val)	</td> </tr>"
                    							gramaticalArrayD.push(newSymgd6);
											
break;
case 10:
 this.$ = []; 
                    							let newSymgd7 = "<tr> <td>ATRIBUTOS2-> epsilon</td> <td>ATRIBUTOS2.val = epsilon</td> </tr>"
                    							gramaticalArrayD.push(newSymgd7);
											
break;
case 11:
 this.$ = new Atributo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
                                                let newSym2 = "<tr><td>"+$$[$0-2]+"</td> <td>Atributo</td> <td>"+$$[$0-2]+"</td> <td></td> <td>"+_$[$0-2].first_line+"</td> <td>"+_$[$0-2].first_column+"</td> </tr>"
                                                tokenArrayD.push(newSym2); 
                                        		let newSym3 = "<tr><td> String </td> <td>Atributo</td> <td>"+$$[$0-2]+"</td> <td>"+$$[$0]+"</td> <td>"+_$[$0-2].first_line+"</td> <td>"+_$[$0-2].first_column+"</td> </tr>"
                                        		tokenArrayD.push(newSym3);
                    							let newSymgd8 = "<tr> <td>ATRIBUTOS-> tk_id '=' ATRIBUTO </td> <td>ATRIBUTOS.val = concat(tk_id.lexVal + '=' + ATRIBUTO.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd8);
											
break;
case 12:
 this.$ = $$[$0]; 
                    							let newSymgd9 = "<tr> <td>ATRIBUTO-> StringLiteral</td> <td>ATRIBUTO.val = StringLiteral.lexVal</td> </tr>"
                    							gramaticalArrayD.push(newSymgd9);
											
break;
case 13:
 this.$ = $$[$0]; 
                    							let newSymgd10 = "<tr> <td>ATRIBUTO-> charLiteral</td> <td>ATRIBUTO.val = charLiteral.lexVal</td> </tr>"
                    							gramaticalArrayD.push(newSymgd10);
											
break;
case 14:
 this.$ = [$$[$0]]; 
                    							let newSymgd11 = "<tr> <td>FIN_HIJO-> '>' FIN_HIJO_P</td> <td>FIN_HIJO.val =  concat('>' + FIN_HIJO_P.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd11);
											
break;
case 15:
  
                    							let newSymgd12 = "<tr> <td>FIN_HIJO-> '/' '>'</td> <td>FIN_HIJO.val =  concat('/' + '>')</td> </tr>"
                    							gramaticalArrayD.push(newSymgd12);
											
break;
case 16:
 this.$ = new Objeto('objeto etiqueta', '', _$[$0-3].first_line, _$[$0-3].first_column, [], $$[$0-3]); 
                    							let newSymgd13 = "<tr> <td>FIN_HIJO_P-> L_HIJOS '<''/' tk_id '>'</td> <td>FIN_HIJO_P.val = concat(L_HIJOS.val + '<' +'/' + tk_id.lexVal + '>')</td> </tr>"
                    							gramaticalArrayD.push(newSymgd13);
											
break;
case 17:
 this.$ = new Objeto('dentro etiqueta', $$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, [], []); 
                                                let newSym4 = "<tr><td> String </td> <td>Cadena</td> <td>"+$$[$0-1]+"</td> <td>"+$$[$0-3]+"</td> <td>"+_$[$0-3].first_line+"</td> <td>"+_$[$0-3].first_column+"</td> </tr>"
                                                tokenArrayD.push(newSym4);
                    							let newSymgd14 = "<tr> <td>FIN_HIJO_P-> L_ID_HIJOS '<''/' tk_id '>'</td> <td>FIN_HIJO_P.val = concat(L_ID_HIJOS.val + '<' + '/' + tk_id.lexVal + '>')</td> </tr>"
                    							gramaticalArrayD.push(newSymgd14);
		  									
break;
case 18:
 this.$ = [$$[$0-1]]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd15 = "<tr> <td>L_HIJOS-> HIJOS L_HIJOS_P</td> <td>L_HIJOS.val = concat(HIJOS.val + L_HIJOS_P.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd15);
											
break;
case 19:
 this.$ = [$$[$0-1]]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd16 = "<tr> <td>L_HIJOS-> HIJOS L_HIJOS_P</td> <td>L_HIJOS.val = concat(HIJOS.val + L_HIJOS_P.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd16);
											
break;
case 20:
 this.$ = []; 
                    							let newSymgd17 = "<tr> <td>L_HIJOS-> epsilon </td> <td>L_HIJOS.val = epsilon</td> </tr>"
                    							gramaticalArrayD.push(newSymgd17);
											
break;
case 21:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd18 = "<tr> <td>L_ID_HIJOS-> tk_id L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat(tk_id.lexVal + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd18);
											
break;
case 22:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd19 = "<tr> <td>L_ID_HIJOS-> res_menor L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat(res_menor.lexVal + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd19);
											
break;
case 23:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd20 = "<tr> <td>L_ID_HIJOS-> res_mayor L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat(res_mayor.lexVal + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd20);
											
break;
case 24:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd21 = "<tr> <td>L_ID_HIJOS-> res_amp L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat(res_amp.lexVal + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd21);
											
break;
case 25:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd22 = "<tr> <td>L_ID_HIJOS-> res_comillaDoble L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat(res_comillaDoble.lexVal + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd22);
											
break;
case 26:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd23 = "<tr> <td>L_ID_HIJOS-> res_comillaSimple L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat(res_comillaSimple.lexVal + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd23);
											
break;
case 27:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd24 = "<tr> <td>L_ID_HIJOS-> '/' L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat('/' + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd24);
											
break;
case 28:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd25 = "<tr> <td>L_ID_HIJOS-> '=' L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat('=' + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd25);
											
break;
case 29:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd26 = "<tr> <td>L_ID_HIJOS-> '?' L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat('?' + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd26);
											
break;
case 30:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd27 = "<tr> <td>L_ID_HIJOS-> '!' L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat('!' + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd27);
											
break;
case 31:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd28 = "<tr> <td>L_ID_HIJOS-> '#' L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat('#' + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd28);
											
break;
case 32:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd29 = "<tr> <td>L_ID_HIJOS-> '$' L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat('$' + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd29);
											
break;
case 33:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd39 = "<tr> <td>L_ID_HIJOS-> '%' L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat('%' + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd39);
											
break;
case 34:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd40 = "<tr> <td>L_ID_HIJOS-> '(' L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat('(' + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd40);
											
break;
case 35:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd30 = "<tr> <td>L_ID_HIJOS-> ')' L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat(')' + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd30);
											
break;
case 36:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd31 = "<tr> <td>L_ID_HIJOS-> '[' L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat('[' + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd31);
											
break;
case 37:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd32 = "<tr> <td>L_ID_HIJOS-> ']' L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat(']' + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd32);
											
break;
case 38:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd33 = "<tr> <td>L_ID_HIJOS-> '@' L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat('@' + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd33);
											
break;
case 39:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd34 = "<tr> <td>L_ID_HIJOS-> '¡' L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat('¡' + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd34);
											
break;
case 40:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd35 = "<tr> <td>L_ID_HIJOS-> '¿' L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat('¿' + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd35);
											
break;
case 41:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd36 = "<tr> <td>L_ID_HIJOS-> tk_numero L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat(tk_numero.val + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd36);
											
break;
case 42:
 this.$ = $$[$0-1]; this.$ = this.$.concat($$[$0]);
                    							let newSymgd37 = "<tr> <td>L_ID_HIJOS-> otro L_ID_HIJOS</td> <td>L_ID_HIJOS.val = concat(otro.lexVal + L_ID_HIJOS.val)</td> </tr>"
                    							gramaticalArrayD.push(newSymgd37);
											
break;
case 43:
 this.$ = []; 
                    							let newSymgd38 = "<tr> <td>L_ID_HIJOS-> epsilon</td> <td>L_ID_HIJOS.val = epsilon</td> </tr>"
                    							gramaticalArrayD.push(newSymgd38);
											
break;
}
},
table: [{3:1,4:2,5:3,6:$V0,7:$V1,15:6},{1:[3]},{1:[2,1]},{4:7,5:3,6:$V0,7:$V1,15:6},{1:[2,3]},{8:[1,8],17:$V2},o($V3,[2,5]),{1:[2,2]},{9:10,10:[2,7],16:[1,11]},o($V4,$V5,{18:12,20:13,17:$V6}),{10:[1,15]},{10:[2,6]},{14:[1,17],19:16,24:[1,18]},o($V4,$V5,{20:13,18:19,17:$V6}),{11:[1,20]},{11:[1,21]},o($V7,[2,8]),{7:$V8,8:$V9,11:$Va,15:25,17:$Vb,23:22,24:$Vc,25:23,26:$Vd,27:24,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{14:[1,49]},o($V4,[2,9]),{12:[1,51],21:50,22:[1,52]},{12:[1,53]},o($V7,[2,14]),{26:[1,54]},{26:[1,55]},{7:$V8,15:57,26:$Vw,28:56},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:58,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:59,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:60,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:61,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:62,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:63,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:64,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:65,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:66,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:67,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:68,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:69,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:70,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:71,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:72,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:73,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:74,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:75,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:76,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:77,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:78,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{8:$V9,11:$Va,17:$Vb,24:$Vc,26:$Vd,27:79,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,37:$Vm,38:$Vn,39:$Vo,40:$Vp,41:$Vq,42:$Vr,43:$Vs,44:$Vt,45:$Vu,46:$Vv},{17:$V2},o($V7,[2,15]),o($Vx,[2,11]),o($Vx,[2,12]),o($Vx,[2,13]),{13:[1,80]},{17:[1,81]},{17:[1,82]},{26:[2,18]},{7:$V8,15:57,26:$Vw,28:83},{26:[2,21]},{26:[2,22]},{26:[2,23]},{26:[2,24]},{26:[2,25]},{26:[2,26]},{26:[2,27]},{26:[2,28]},{26:[2,29]},{26:[2,30]},{26:[2,31]},{26:[2,32]},{26:[2,33]},{26:[2,34]},{26:[2,35]},{26:[2,36]},{26:[2,37]},{26:[2,38]},{26:[2,39]},{26:[2,40]},{26:[2,41]},{26:[2,42]},{11:[1,84]},{14:[1,85]},{14:[1,86]},{26:[2,19]},{12:[1,87]},o($V7,[2,16]),o($V7,[2,17]),{8:[1,88]},{14:[1,89]},{7:$V8,15:90},o($V3,[2,4])],
defaultActions: {2:[2,1],4:[2,3],7:[2,2],11:[2,6],56:[2,18],58:[2,21],59:[2,22],60:[2,23],61:[2,24],62:[2,25],63:[2,26],64:[2,27],65:[2,28],66:[2,29],67:[2,30],68:[2,31],69:[2,32],70:[2,33],71:[2,34],72:[2,35],73:[2,36],74:[2,37],75:[2,38],76:[2,39],77:[2,40],78:[2,41],79:[2,42],83:[2,19]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Objeto} = require("../Expresiones/Objeto");
    const {Atributo} = require("../Expresiones/Atributo");
    const {Encoding} = require("../Expresiones/Encoding");
    let tokenArrayD = new Array();
    module.exports.tokenArrayD = tokenArrayD;

    let gramaticalArrayD = new Array();
    module.exports.gramaticalArrayD = gramaticalArrayD;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*skip*/
break;
case 1://Comentario
break;
case 2:return 16
break;
case 3:return 10
break;
case 4:return 13
break;
case 5:return 29
break;
case 6:return 30
break;
case 7:return 31
break;
case 8:return 32
break;
case 9:return 33
break;
case 10:return 26
break;
case 11:return 7
break;
case 12:return 14
break;
case 13:return 24
break;
case 14:return 11
break;
case 15:return 8
break;
case 16:return '&'
break;
case 17:return 34
break;
case 18:return 35
break;
case 19:return 36
break;
case 20:return 37
break;
case 21:return 38
break;
case 22:return 39
break;
case 23:return 40
break;
case 24:return 41
break;
case 25:return 42
break;
case 26:return 43
break;
case 27:return 44
break;
case 28: return 45; 
break;
case 29: return 17; 
break;
case 30: return 12; 
break;
case 31: return 'CharLiteral'; 
break;
case 32:return 46
break;
case 33: return 6; 
break;
}
},
rules: [/^(?:[ \t\r\n\f])/i,/^(?:<!--.*-->)/i,/^(?:xml\b)/i,/^(?:version\b)/i,/^(?:encoding\b)/i,/^(?:&lt\b)/i,/^(?:&gt\b)/i,/^(?:&amp\b)/i,/^(?:&quot\b)/i,/^(?:&apos\b)/i,/^(?:<\/)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\/)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:&)/i,/^(?:!)/i,/^(?:#)/i,/^(?:\$)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:@)/i,/^(?:¡)/i,/^(?:¿)/i,/^(?:[0-9]+(\.[0-9]+)*)/i,/^(?:[a-zA-Z_]([a-zA-Z0-9_ñÑ])*)/i,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/i,/^(?:('((\\([\'\"\\bfnrtv]))|([^\'\\]))'))/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaD;
exports.Parser = gramaticaD.Parser;
exports.parse = function () { return gramaticaD.parse.apply(gramaticaD, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}