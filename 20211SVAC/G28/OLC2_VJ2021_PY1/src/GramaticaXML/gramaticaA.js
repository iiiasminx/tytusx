/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramaticaA = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[5,7],$V2=[1,9],$V3=[14,20],$V4=[1,15],$V5=[14,17,20],$V6=[1,26],$V7=[1,51],$V8=[1,50],$V9=[1,27],$Va=[1,28],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,34],$Vh=[1,35],$Vi=[1,36],$Vj=[1,37],$Vk=[1,38],$Vl=[1,39],$Vm=[1,40],$Vn=[1,41],$Vo=[1,42],$Vp=[1,43],$Vq=[1,44],$Vr=[1,45],$Vs=[1,46],$Vt=[1,47],$Vu=[1,48],$Vv=[1,49],$Vw=[1,52],$Vx=[7,11,17,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"RAIZ":3,"L_RAIZ":4,"EOF":5,"ENCODING":6,"<":7,"?":8,"XML":9,"tk_version":10,"=":11,"StringLiteral":12,"tk_encoding":13,">":14,"HIJOS":15,"tk_xml":16,"tk_id":17,"ATRIBUTOS":18,"L_HIJOS":19,"/":20,"L_ID_HIJOS":21,"L_ATRIBUTOS":22,"ATRIBUTO":23,"CharLiteral":24,"SUPERPRODUCCION":25,"res_menor":26,"res_mayor":27,"res_amp":28,"res_comillaDoble":29,"res_comillaSimple":30,"&":31,"!":32,"#":33,"$":34,"%":35,"(":36,")":37,"[":38,"]":39,"@":40,"¡":41,"¿":42,"tk_coma":43,"tk_ptcoma":44,"tk_pt":45,"tk_dospts":46,"tk_guionbajo":47,"tk_numero":48,"otro":49,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"<",8:"?",10:"tk_version",11:"=",12:"StringLiteral",13:"tk_encoding",14:">",16:"tk_xml",17:"tk_id",20:"/",24:"CharLiteral",26:"res_menor",27:"res_mayor",28:"res_amp",29:"res_comillaDoble",30:"res_comillaSimple",31:"&",32:"!",33:"#",34:"$",35:"%",36:"(",37:")",38:"[",39:"]",40:"@",41:"¡",42:"¿",43:"tk_coma",44:"tk_ptcoma",45:"tk_pt",46:"tk_dospts",47:"tk_guionbajo",48:"tk_numero",49:"otro"},
productions_: [0,[3,2],[4,2],[4,1],[6,12],[6,1],[9,1],[9,0],[15,9],[15,9],[15,5],[18,1],[18,0],[22,2],[22,1],[23,3],[23,3],[21,2],[21,1],[19,2],[19,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1],[25,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4:
 this.$ = new Encoding("almacenamiento", $$[$0-6], $$[$0-3], _$[$0-11].first_line, _$[$0-11].first_column, $$[$0]); 
                                                                                                        let newSymg1 = "<tr> <td>ENCODING-> '<''?' XML tk_version '=' StringLiteral tk_encoding '=' StringLiteral '?''>' HIJOS</td>   <td>ENCODING = concat('<''?' + XML.val + tk_version + '=' + StringLiteral.lexVal + tk_encoding.lexVal + '=' + StringLiteral.lexVal + '?''>' + HIJOS.val)</td> </tr>"
                                                                                                        gramaticalArray.push(newSymg1);
                                                                                                     
break;
case 5:
 this.$ = new Encoding("almacenamiento", "", "", _$[$0].first_line, _$[$0].first_column, $$[$0]); 
                                                                                                        let newSymg2 = "<tr> <td>ENCODING-> HIJOS.val</td>   <td>ENCODING = HIJOS.val</td> </tr>"
                                                                                                        gramaticalArray.push(newSymg2);
                                                                                                     
break;
case 6:
 this.$ = $$[$0];  
                    let newSymg3 = "<tr> <td>XML-> tk_xml</td> <td>XML.val = tk_xml.lexVal</td> </tr>"
                    gramaticalArray.push(newSymg3);
                
break;
case 7:
 this.$ = []; 
                    let newSymg4 = "<tr> <td>XML-> epsilon</td> <td>XML.val = epsilon</td> </tr>"
                    gramaticalArray.push(newSymg4);
                
break;
case 8:
 this.$ = new Objeto($$[$0-7], '', _$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], $$[$0-4]); 
                                                                        let newSym = "<tr><td>"+$$[$0-7]+"</td> <td>Objeto</td> <td>"+$$[$0-7]+"</td> <td></td> <td>"+_$[$0-8].first_line+"</td> <td>"+_$[$0-8].first_column+"</td> </tr>"
                                                                        tokenArray.push(newSym);
                                                                        let newSymg5 = "<tr> <td>HIJOS->  '<' tk_id ATRIBUTOS '>' L_HIJOS '<''/' tk_id '>'</td> <td>HIJOS.val =  concat('<' + tk_id.lexVal + ATRIBUTOS.val + '>' + L_HIJOS.val + '<''/' + tk_id.lexVal '>')</td> </tr>"
                                                                        gramaticalArray.push(newSymg5);
                                                                    
break;
case 9:
 this.$ = new Objeto($$[$0-7], $$[$0-4], _$[$0-8].first_line, _$[$0-8].first_column, $$[$0-6], []); 
                                                                        let newSym1 = "<tr><td>"+$$[$0-7]+"</td> <td>Objeto</td> <td>"+$$[$0-7]+"</td> <td></td> <td>"+_$[$0-8].first_line+"</td> <td>"+_$[$0-8].first_column+"</td> </tr>"
                                                                        tokenArray.push(newSym1);
                                                                        let newSym7 = "<tr><td> String </td> <td>Cadena</td> <td>"+$$[$0-7]+"</td> <td>"+$$[$0-4]+"</td> <td>"+_$[$0-8].first_line+"</td> <td>"+_$[$0-8].first_column+"</td> </tr>"
                                                                        tokenArray.push(newSym7);
                                                                        let newSymg6 = "<tr> <td>HIJOS->  '<' tk_id ATRIBUTOS '>' L_ID_HIJOS '<''/' tk_id '>' </td> <td>HIJOS.val =  concat('<' + tk_id.lexVal + ATRIBUTOS.val + '>' + L_ID_HIJOS.val + '<''/' + tk_id.lexVal '>')</td> </tr>"
                                                                        gramaticalArray.push(newSymg6);
                                                                    
break;
case 10:
 this.$ = new Objeto($$[$0-3], '', _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-2], []); 
                                                                        let newSym2 = "<tr><td>"+$$[$0-3]+"</td> <td>Objeto</td> <td>"+$$[$0-3]+"</td> <td></td> <td>"+_$[$0-4].first_line+"</td> <td>"+_$[$0-4].first_column+"</td> </tr>"
                                                                        tokenArray.push(newSym2);
                                                                        let newSymg7 = "<tr> <td>HIJOS->  '<' tk_id ATRIBUTOS '/''>'</td> <td>HIJOS.val =  concat('<' + tk_id.lexVal + ATRIBUTOS.val + '/''>') </td> </tr>"
                                                                        gramaticalArray.push(newSymg7);
                                                                    
break;
case 11:
 this.$ = $$[$0]; 
                                        let newSymg8 = "<tr> <td>ATRIBUTO-> L_ATRIBUTOS</td> <td>ATRIBUTO.val = L_ATRIBUTOS.val</td> </tr>"
                                        gramaticalArray.push(newSymg8);
                                    
break;
case 12:
 this.$ = []; 
                                        let newSymg9 = "<tr> <td>ATRIBUTO-> epsilon </td> <td>ATRIBUTO.val = epsilon </td> </tr>"
                                        gramaticalArray.push(newSymg9);
                                    
break;
case 13:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
                                        let newSymg10 = "<tr> <td>L_ATRIBUTOS-> L_ATRIBUTOS ATRIBUTO</td> <td>L_ATRIBUTOS.val = concat(L_ATRIBUTOS1.val + ATRIBUTO.val)</td> </tr>"
                                        gramaticalArray.push(newSymg10);
                                    
break;
case 14:
 this.$ = [$$[$0]]; 
                                        let newSymg11 = "<tr> <td>L_ATRIBUTOS-> ATRIBUTO</td> <td>L_ATRIBUTOS.val = ATRIBUTO.val    </td> </tr>"
                                        gramaticalArray.push(newSymg11);
                                    
break;
case 15:
 this.$ = new Atributo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
                                        let newSym3 = "<tr><td>"+$$[$0-2]+"</td> <td>Atributo</td> <td>"+$$[$0-2]+"</td> <td></td> <td>"+_$[$0-2].first_line+"</td> <td>"+_$[$0-2].first_column+"</td> </tr>"
                                        tokenArray.push(newSym3);
                                        let newSym4 = "<tr><td> String </td> <td>Atributo</td> <td>"+$$[$0-2]+"</td> <td>"+$$[$0]+"</td> <td>"+_$[$0-2].first_line+"</td> <td>"+_$[$0-2].first_column+"</td> </tr>"
                                        tokenArray.push(newSym4);
                                        let newSymg12 = "<tr> <td>ATRIBUTO-> tk_id '=' StringLiteral</td> <td>ATRIBUTO.val = concat(tk_id.lexVal + '=' + StringLiteral.lexVal)</td> </tr>"
                                        gramaticalArray.push(newSymg12);
                                    
break;
case 16:
 this.$ = new Atributo($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
                                        let newSym5 = "<tr><td>"+$$[$0-2]+"</td> <td>Atributo</td> <td>"+$$[$0-2]+"</td> <td></td> <td>"+_$[$0-2].first_line+"</td> <td>"+_$[$0-2].first_column+"</td> </tr>"
                                        tokenArray.push(newSym5);
                                        let newSym6 = "<tr><td> String </td> <td>Atributo</td> <td>"+$$[$0-2]+"</td> <td>"+$$[$0]+"</td> <td>"+_$[$0-2].first_line+"</td> <td>"+_$[$0-2].first_column+"</td> </tr>"
                                        tokenArray.push(newSym6);
                                        let newSymg13 = "<tr> <td>ATRIBUTO-> tk_id '='  CharLiteral</td> <td>ATRIBUTO.val = concat(tk_id.lexVal + '=' + CharLiteral.lexVal) </td> </tr>"
                                        gramaticalArray.push(newSymg13);
                                    
break;
case 17:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
                                                    let newSymg14 = "<tr> <td>L_ID_HIJOS-> L_ID_HIJOS SUPERPRODUCCION </td> <td>L_ID_HIJOS.val = concat(L_ID_HIJOS1.val + SUPERPRODUCCION.val)</td> </tr>"
                                                    gramaticalArray.push(newSymg14);
                                              
break;
case 18:
 this.$ = [$$[$0]];
                                                    let newSymg15 = "<tr> <td>L_ID_HIJOS-> SUPERPRODUCCION </td> <td>L_ID_HIJOS.val = SUPERPRODUCCION.val</td> </tr>"
                                                    gramaticalArray.push(newSymg15);
                                              
break;
case 19:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
                                let newSymg16 = "<tr> <td>L_HIJOS-> L_HIJOS HIJOS</td> <td>L_HIJOS.val = concat(L_HIJOS1.val + HIJOS.val)</td> </tr>"
                                gramaticalArray.push(newSymg16);
                            
break;
case 20:
 this.$ = [$$[$0]]; 
                                let newSymg17 = "<tr> <td>L_HIJOS-> HIJOS</td> <td>L_HIJOS.val = HIJOS.val</td> </tr>"
                                gramaticalArray.push(newSymg17);
                            
break;
case 21:
 this.$ = $$[$0] 
                                                let newSymg18 = "<tr> <td>SUPERPRODUCCION-> res_menor </td> <td>SUPERPRODUCCION.val = res_menor.lexVal</td> </tr>"
                                                gramaticalArray.push(newSymg18);
                                            
break;
case 22:
 this.$ = $$[$0] 
                                                let newSymg19 = "<tr> <td>SUPERPRODUCCION-> res_mayor</td> <td>SUPERPRODUCCION.val = res_mayor.lexVal </td> </tr>"
                                                gramaticalArray.push(newSymg19);
                                            
break;
case 23:
 this.$ = $$[$0] 
                                                let newSymg20 = "<tr> <td>SUPERPRODUCCION-> res_amp </td> <td>SUPERPRODUCCION.val = res_amp.lexVal </td> </tr>"
                                                gramaticalArray.push(newSymg20);
                                            
break;
case 24:
 this.$ = $$[$0] 
                                                let newSymg21 = "<tr> <td>SUPERPRODUCCION-> res_comillaDoble</td> <td>SUPERPRODUCCION.val = res_comillaDoble.lexVal</td> </tr>"
                                                gramaticalArray.push(newSymg21);
                                            
break;
case 25:
 this.$ = $$[$0] 
                                                let newSymg22 = "<tr> <td>SUPERPRODUCCION-> res_comillaSimple</td> <td>SUPERPRODUCCION.val = res_comillaSimple.lexVal</td> </tr>"
                                                gramaticalArray.push(newSymg22);
                                            
break;
case 26:
 this.$ = $$[$0] 
                                                let newSymg23 = "<tr> <td>SUPERPRODUCCION-> '&'</td> <td>SUPERPRODUCCION.val = '&'</td> </tr>"
                                                gramaticalArray.push(newSymg23);
                                            
break;
case 27:
 this.$ = $$[$0] 
                                                let newSymg24 = "<tr> <td>SUPERPRODUCCION-> '!'</td> <td>SUPERPRODUCCION.val = '!'</td> </tr>"
                                                gramaticalArray.push(newSymg24);
                                            
break;
case 28:
 this.$ = $$[$0] 
                                                let newSymg25 = "<tr> <td>SUPERPRODUCCION-> '#'</td> <td>SUPERPRODUCCION.val = '#'</td> </tr>"
                                                gramaticalArray.push(newSymg25);
                                            
break;
case 29:
 this.$ = $$[$0] 
                                                let newSymg26 = "<tr> <td>SUPERPRODUCCION-> '$'</td> <td>SUPERPRODUCCION.val = '$'</td> </tr>"
                                                gramaticalArray.push(newSymg26);
                                            
break;
case 30:
 this.$ = $$[$0] 
                                                let newSymg27 = "<tr> <td>SUPERPRODUCCION-> '%'</td> <td>SUPERPRODUCCION.val = '%'</td> </tr>"
                                                gramaticalArray.push(newSymg27);
                                            
break;
case 31:
 this.$ = $$[$0] 
                                                let newSymg28 = "<tr> <td>SUPERPRODUCCION-> '(' </td> <td>SUPERPRODUCCION.val = '('</td> </tr>"
                                                gramaticalArray.push(newSymg28);
                                            
break;
case 32:
 this.$ = $$[$0] 
                                                let newSymg29 = "<tr> <td>SUPERPRODUCCION-> ')'</td> <td>SUPERPRODUCCION.val = ')'</td> </tr>"
                                                gramaticalArray.push(newSymg29);
                                            
break;
case 33:
 this.$ = $$[$0] 
                                                let newSymg30 = "<tr> <td>SUPERPRODUCCION-> '['</td> <td>SUPERPRODUCCION.val = '['</td> </tr>"
                                                gramaticalArray.push(newSymg30);
                                            
break;
case 34:
 this.$ = $$[$0] 
                                                let newSymg31 = "<tr> <td>SUPERPRODUCCION-> ']'</td> <td>SUPERPRODUCCION.val = ']'</td> </tr>"
                                                gramaticalArray.push(newSymg31);
                                            
break;
case 35:
 this.$ = $$[$0] 
                                                let newSymg32 = "<tr> <td>SUPERPRODUCCION-> '@'</td> <td>SUPERPRODUCCION.val = '@'</td> </tr>"
                                                gramaticalArray.push(newSymg32);
                                            
break;
case 36:
 this.$ = $$[$0] 
                                                let newSymg33 = "<tr> <td>SUPERPRODUCCION-> '¡'</td> <td>SUPERPRODUCCION.val = '¡'</td> </tr>"
                                                gramaticalArray.push(newSymg33);
                                            
break;
case 37:
 this.$ = $$[$0] 
                                                let newSymg34 = "<tr> <td>SUPERPRODUCCION-> '¿'</td> <td>SUPERPRODUCCION.val = '¿'</td> </tr>"
                                                gramaticalArray.push(newSymg34);
                                            
break;
case 38:
 this.$ = $$[$0] 
                                                let newSymg35 = "<tr> <td>SUPERPRODUCCION-> tk_coma </td> <td>SUPERPRODUCCION.val = tk_coma.lexVal</td> </tr>"
                                                gramaticalArray.push(newSymg35);
                                            
break;
case 39:
 this.$ = $$[$0] 
                                                let newSymg36 = "<tr> <td>SUPERPRODUCCION-> tk_ptcoma</td> <td>SUPERPRODUCCION.val = tk_ptcoma.lexVal</td> </tr>"
                                                gramaticalArray.push(newSymg36);
                                            
break;
case 40:
 this.$ = $$[$0] 
                                                let newSymg37 = "<tr> <td>SUPERPRODUCCION-> tk_pt</td> <td>SUPERPRODUCCION.val = tk_pt.lexVal</td> </tr>"
                                                gramaticalArray.push(newSymg37);
                                            
break;
case 41:
 this.$ = $$[$0] 
                                                let newSymg38 = "<tr> <td>SUPERPRODUCCION-> tk_dospts</td> <td>SUPERPRODUCCION.val = tk_dospts.lexVal</td> </tr>"
                                                gramaticalArray.push(newSymg38);
                                            
break;
case 42:
 this.$ = $$[$0] 
                                                let newSymg39 = "<tr> <td>SUPERPRODUCCION-> tk_guionbajo</td> <td>SUPERPRODUCCION.val = tk_guionbajo.lexVal</td> </tr>"
                                                gramaticalArray.push(newSymg39);
                                            
break;
case 43:
 this.$ = $$[$0] 
                                                let newSymg40 = "<tr> <td>SUPERPRODUCCION-> tk_numero</td> <td>SUPERPRODUCCION.val = tk_numero.val </td> </tr>"
                                                gramaticalArray.push(newSymg40);
                                            
break;
case 44:
 this.$ = $$[$0] 
                                                let newSymg41 = "<tr> <td>SUPERPRODUCCION-> tk_id </td> <td>SUPERPRODUCCION.val = tk_id.lexVal</td> </tr>"
                                                gramaticalArray.push(newSymg41);
                                            
break;
case 45:
 this.$ = $$[$0] 
                                                let newSymg42 = "<tr> <td>SUPERPRODUCCION-> '='  </td> <td>SUPERPRODUCCION.val = '='</td> </tr>"
                                                gramaticalArray.push(newSymg42);
                                            
break;
case 46:
 this.$ = $$[$0] 
                                                let newSymg43 = "<tr> <td>SUPERPRODUCCION-> 'otro'</td> <td>SUPERPRODUCCION.val = 'otro.lexVal'</td> </tr>"
                                                gramaticalArray.push(newSymg43);
                                            
break;
}
},
table: [{3:1,4:2,6:3,7:$V0,15:5},{1:[3]},{5:[1,6],6:7,7:$V0,15:5},o($V1,[2,3]),{8:[1,8],17:$V2},o($V1,[2,5]),{1:[2,1]},o($V1,[2,2]),{9:10,10:[2,7],16:[1,11]},o($V3,[2,12],{18:12,22:13,23:14,17:$V4}),{10:[1,16]},{10:[2,6]},{14:[1,17],20:[1,18]},o($V3,[2,11],{23:19,17:$V4}),o($V5,[2,14]),{11:[1,20]},{11:[1,21]},{7:$V6,11:$V7,15:24,17:$V8,19:22,21:23,25:25,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw},{14:[1,53]},o($V5,[2,13]),{12:[1,54],24:[1,55]},{12:[1,56]},{7:[1,57],15:58},{7:[1,59],11:$V7,17:$V8,25:60,26:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt,47:$Vu,48:$Vv,49:$Vw},{7:[2,20]},o($Vx,[2,18]),{17:$V2},o($Vx,[2,21]),o($Vx,[2,22]),o($Vx,[2,23]),o($Vx,[2,24]),o($Vx,[2,25]),o($Vx,[2,26]),o($Vx,[2,27]),o($Vx,[2,28]),o($Vx,[2,29]),o($Vx,[2,30]),o($Vx,[2,31]),o($Vx,[2,32]),o($Vx,[2,33]),o($Vx,[2,34]),o($Vx,[2,35]),o($Vx,[2,36]),o($Vx,[2,37]),o($Vx,[2,38]),o($Vx,[2,39]),o($Vx,[2,40]),o($Vx,[2,41]),o($Vx,[2,42]),o($Vx,[2,43]),o($Vx,[2,44]),o($Vx,[2,45]),o($Vx,[2,46]),o($V1,[2,10]),o($V5,[2,15]),o($V5,[2,16]),{13:[1,61]},{17:$V2,20:[1,62]},{7:[2,19]},{20:[1,63]},o($Vx,[2,17]),{11:[1,64]},{17:[1,65]},{17:[1,66]},{12:[1,67]},{14:[1,68]},{14:[1,69]},{8:[1,70]},o($V1,[2,8]),o($V1,[2,9]),{14:[1,71]},{7:$V6,15:72},o($V1,[2,4])],
defaultActions: {6:[2,1],11:[2,6],24:[2,20],58:[2,19]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Objeto} = require("../Expresiones/Objeto");
    const {Atributo} = require("../Expresiones/Atributo");
    const {Encoding} = require("../Expresiones/Encoding");
    let tokenArray = new Array();
    module.exports.tokenArray = tokenArray;

    let gramaticalArray = new Array();
    module.exports.gramaticalArray = gramaticalArray;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*skip*/
break;
case 1://Comentario
break;
case 2:return 16
break;
case 3:return 10
break;
case 4:return 13
break;
case 5:return 26
break;
case 6:return 27
break;
case 7:return 28
break;
case 8:return 29
break;
case 9:return 30
break;
case 10:return 7
break;
case 11:return 14
break;
case 12:return 20
break;
case 13:return 11
break;
case 14:return 8
break;
case 15:return 31
break;
case 16:return 32
break;
case 17:return 33
break;
case 18:return 34
break;
case 19:return 35
break;
case 20:return 36
break;
case 21:return 37
break;
case 22:return 38
break;
case 23:return 39
break;
case 24:return 40
break;
case 25:return 41
break;
case 26:return 42
break;
case 27:return 43
break;
case 28:return 44
break;
case 29:return 45
break;
case 30:return 46
break;
case 31:return 47
break;
case 32: return 48; 
break;
case 33: return 17; 
break;
case 34: return 12; 
break;
case 35: return 24; 
break;
case 36:return 49
break;
case 37: return 5; 
break;
}
},
rules: [/^(?:[ \t\r\n\f])/i,/^(?:<!--.*-->)/i,/^(?:xml\b)/i,/^(?:version\b)/i,/^(?:encoding\b)/i,/^(?:&lt\b)/i,/^(?:&gt\b)/i,/^(?:&amp\b)/i,/^(?:&quot\b)/i,/^(?:&apos\b)/i,/^(?:<)/i,/^(?:>)/i,/^(?:\/)/i,/^(?:=)/i,/^(?:\?)/i,/^(?:&)/i,/^(?:!)/i,/^(?:#)/i,/^(?:\$)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:@)/i,/^(?:¡)/i,/^(?:¿)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\.)/i,/^(?::)/i,/^(?:_\b)/i,/^(?:[0-9]+(\.[0-9]+)*)/i,/^(?:[a-zA-Z_]([a-zA-Z0-9_ñÑ])*)/i,/^(?:("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*"))/i,/^(?:('((\\([\'\"\\bfnrtv]))|([^\'\\]))'))/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramaticaA;
exports.Parser = gramaticaA.Parser;
exports.parse = function () { return gramaticaA.parse.apply(gramaticaA, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}