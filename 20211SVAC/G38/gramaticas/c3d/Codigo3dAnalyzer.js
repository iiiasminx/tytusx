/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Codigo3dAnalyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,21],$V2=[1,15],$V3=[1,19],$V4=[1,20],$V5=[1,18],$V6=[1,17],$V7=[1,22],$V8=[1,23],$V9=[1,24],$Va=[1,14],$Vb=[2,5,16,25,27,31,33,36,46,47,48,54],$Vc=[1,30],$Vd=[1,28],$Ve=[1,29],$Vf=[25,30,54],$Vg=[1,43],$Vh=[1,42],$Vi=[1,46],$Vj=[1,45],$Vk=[1,47],$Vl=[1,48],$Vm=[1,52],$Vn=[1,53],$Vo=[2,5,16,25,27,31,33,35,36,46,47,48,54,55],$Vp=[32,38,50],$Vq=[30,32],$Vr=[2,73],$Vs=[17,19,30,32,58,59,60,61,62,63,64,65,66],$Vt=[17,19,30,32,53,58,59,60,61,62,63,64,65,66],$Vu=[1,139],$Vv=[1,140],$Vw=[1,141],$Vx=[2,25,27,31,35,36,54,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"SENTENCIAS":4,"EOF":5,"SENTENCIA":6,"ASIGNACION":7,"DECLARACION":8,"IMPRESION":9,"DECLARACION_METODO":10,"DECLARAR_ESQUELETO_METODO":11,"ETIQUETA":12,"SALTO_CONDICIONAL":13,"SALTO_INCONDICIONAL":14,"IMPORT":15,"include":16,"lt":17,"stdio_t":18,"gt":19,"math_t":20,"INSTRUCCIONES":21,"INSTRUCCION":22,"LLAMADA_METODO":23,"RETORNO":24,"identifier":25,"colon":26,"if_t":27,"lparen":28,"EXPRESION_RELACIONAL":29,"rparen":30,"goto":31,"semicolon":32,"void":33,"lllave":34,"rllave":35,"Printf":36,"TIPO_IMPRESION":37,"coma":38,"CAST_VALUE":39,"PRIMITIVA":40,"str":41,"print_char":42,"print_int":43,"print_decimal":44,"TIPO_DATO":45,"int_t":46,"float_t":47,"double_t":48,"LISTA_IDS":49,"equal":50,"EXPRESION":51,"lcorchetes":52,"rcorchetes":53,"temporal":54,"Return_t":55,"EXPRESION_NUMERICA":56,"PRIMITIVA_WITH_MINUS":57,"lte":58,"gte":59,"equal_equal":60,"nequal":61,"plus":62,"minus":63,"times":64,"div":65,"mod":66,"DoubleLiteral":67,"IntegerLiteral":68,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"include",17:"lt",18:"stdio_t",19:"gt",20:"math_t",25:"identifier",26:"colon",27:"if_t",28:"lparen",30:"rparen",31:"goto",32:"semicolon",33:"void",34:"lllave",35:"rllave",36:"Printf",38:"coma",41:"str",42:"print_char",43:"print_int",44:"print_decimal",46:"int_t",47:"float_t",48:"double_t",50:"equal",52:"lcorchetes",53:"rcorchetes",54:"temporal",55:"Return_t",58:"lte",59:"gte",60:"equal_equal",61:"nequal",62:"plus",63:"minus",64:"times",65:"div",66:"mod",67:"DoubleLiteral",68:"IntegerLiteral"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[15,4],[15,4],[21,2],[21,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[12,2],[13,7],[14,3],[10,7],[23,4],[11,5],[9,8],[9,7],[9,5],[37,1],[37,1],[37,1],[39,3],[45,1],[45,1],[45,1],[8,5],[8,3],[8,6],[49,3],[49,3],[49,1],[49,1],[7,4],[7,4],[7,7],[7,8],[24,2],[51,1],[51,1],[51,3],[51,4],[51,5],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[56,3],[56,3],[56,3],[56,3],[56,3],[57,1],[57,2],[40,1],[40,1],[40,1],[40,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new Optimizador($$[$0-1]); return this.$; 
break;
case 2: case 16:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3:
  this.$ = []; this.$.push($$[$0]); 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 35: case 36: case 39: case 40: case 41: case 47: case 48: case 54:
 this.$ = $$[$0]; 
break;
case 13: case 25:

                  ListaErrores.AgregarErrorC3D(new TokenError(TipoError.Sintactico,"No se esperaba: "+yytext,_$[$0].first_line,_$[$0].first_column));
            
break;
case 14: case 15:
 this.$ = new NodoComplemento($$[$0-3]+" "+$$[$0-2]+$$[$0-1]+$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 17:
 this.$ = []; this.$.push($$[$0]); 
break;
case 26:
 this.$ = new EtiquetaC3D($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 27:
 this.$ = new  SaltoCondicionalC3D($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 28:
 this.$ = new  SaltoC3D($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 29:
 this.$ =  new DeclaracionMetodoC3D($$[$0-5], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 30:
 this.$ = new NodoComplemento($$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 31:
 this.$ = new NodoComplemento($$[$0-4]+" "+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 32:
 this.$ = new NodoComplemento($$[$0-7]+$$[$0-6]+$$[$0-5]+$$[$0-4]+"("+$$[$0-3]+")"+$$[$0-2].toString()+$$[$0-1]+$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 33:
 this.$ = new NodoComplemento($$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2].toString()+$$[$0-1]+$$[$0],_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 34:
 this.$ = new NodoComplemento($$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 37:
 this.$=$$[$0]; 
break;
case 38: case 56:
 this.$ = $$[$0-1]; 
break;
case 42:
 this.$ = new NodoComplemento($$[$0-4]+" "+$$[$0-3]+$$[$0-2]+$$[$0-1].toString()+$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 43:
 this.$ = new NodoComplemento($$[$0-2]+" "+$$[$0-1]+$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 44:
 this.$ = new NodoComplemento($$[$0-5]+" "+$$[$0-4]+$$[$0-3]+$$[$0-2].toString()+$$[$0-1]+$$[$0],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 45: case 46:
 this.$ = $$[$0-2] + $$[$0-1] + $$[$0]; 
break;
case 49:
 this.$ = new AsignacionC3D(TipoValor.temporal,$$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 50:
 this.$ = new AsignacionC3D(TipoValor.identifier,$$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 51:
 this.$ = new AsignacionC3D(TipoValor.arreglo,$$[$0-6],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
                this.$.valorAcceso = $$[$0-4];
              
break;
case 52:
 this.$ = new AsignacionC3D(TipoValor.arreglo,$$[$0-7],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column);
                this.$.valorCasteo = $$[$0-5];
                this.$.valorAcceso = $$[$0-4];
              
break;
case 53:
 this.$ = new NodoComplemento($$[$0-1]+$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 55:
  this.$ = $$[$0]; 
break;
case 57:
 this.$ = new Primitiva(TipoValor.arreglo,$$[$0-3]);
            this.$.valorAcceso = $$[$0-1];
          
break;
case 58:
 this.$ = new Primitiva(TipoValor.arreglo,$$[$0-4]);
            this.$.valorCasteo = $$[$0-2];
            this.$.valorAcceso = $$[$0-1];
          
break;
case 59:
 this.$ = new ExpresionRelacional(TipoRelacional.lt,$$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 60:
 this.$ = new ExpresionRelacional(TipoRelacional.lte,$$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 61:
 this.$ = new ExpresionRelacional(TipoRelacional.gt,$$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 62:
 this.$ = new ExpresionRelacional(TipoRelacional.gte,$$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 63:
 this.$ = new ExpresionRelacional(TipoRelacional.equal_equal,$$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 64:
 this.$ = new ExpresionRelacional(TipoRelacional.nequal,$$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 65:
  this.$ = new ExpresionNumerica(TipoNumerico.suma,$$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 66:
  this.$ = new ExpresionNumerica(TipoNumerico.resta,$$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 67:
  this.$ = new ExpresionNumerica(TipoNumerico.multiplicacion,$$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 68:
  this.$ = new ExpresionNumerica(TipoNumerico.division,$$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 69:
  this.$ = new ExpresionNumerica(TipoNumerico.modulo,$$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 70:
 this.$ = $$[$0];  
break;
case 71:
 this.$ = $$[$0]; this.$.negativo = true; 
break;
case 72:
 this.$ = new Primitiva(TipoValor.temporal,$$[$0],_$[$0].first_line,_$[$0].first_column); 
break;
case 73:
 this.$ = new Primitiva(TipoValor.identifier,$$[$0],_$[$0].first_line,_$[$0].first_column); 
break;
case 74:
 this.$ = new Primitiva(TipoValor.double,Number($$[$0]),_$[$0].first_line,_$[$0].first_column); 
break;
case 75:
 this.$ = new Primitiva(TipoValor.integer,Number($$[$0]),_$[$0].first_line,_$[$0].first_column); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,25:$V2,27:$V3,31:$V4,33:$V5,36:$V6,45:16,46:$V7,47:$V8,48:$V9,54:$Va},{1:[3]},{2:$V0,5:[1,25],6:26,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:$V1,25:$V2,27:$V3,31:$V4,33:$V5,36:$V6,45:16,46:$V7,47:$V8,48:$V9,54:$Va},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,13]),{50:[1,27]},{26:$Vc,50:$Vd,52:$Ve},{25:[1,32],49:31,54:[1,33]},{28:[1,34]},{25:[1,35]},{28:[1,36]},{25:[1,37]},{17:[1,38]},o($Vf,[2,39]),o($Vf,[2,40]),o($Vf,[2,41]),{1:[2,1]},o($Vb,[2,2]),{25:$Vg,28:$Vh,40:44,51:39,54:$Vi,56:40,57:41,63:$Vj,67:$Vk,68:$Vl},{25:$Vg,28:$Vh,40:44,51:49,54:$Vi,56:40,57:41,63:$Vj,67:$Vk,68:$Vl},{25:$Vm,28:$Vn,39:51,40:50,54:$Vi,67:$Vk,68:$Vl},o($Vo,[2,26]),{32:[1,55],38:[1,56],50:[1,54]},o($Vp,[2,48],{52:[1,57]}),o($Vp,[2,47]),{37:58,41:[1,59],42:[1,60],43:[1,61],44:[1,62]},{28:[1,63]},{25:$Vm,29:64,40:44,54:$Vi,57:65,63:$Vj,67:$Vk,68:$Vl},{32:[1,66]},{18:[1,67],20:[1,68]},{32:[1,69]},o($Vq,[2,54]),o($Vq,[2,55],{62:[1,70],63:[1,71],64:[1,72],65:[1,73],66:[1,74]}),{25:$Vg,28:$Vh,40:44,51:75,54:$Vi,56:40,57:41,63:$Vj,67:$Vk,68:$Vl},o([30,32,62,63,64,65,66],$Vr,{52:[1,76]}),o($Vs,[2,70]),{25:$Vm,40:77,54:$Vi,67:$Vk,68:$Vl},o($Vt,[2,72]),o($Vt,[2,74]),o($Vt,[2,75]),{32:[1,78]},{53:[1,79]},{25:$Vm,40:80,54:$Vi,67:$Vk,68:$Vl},o($Vt,$Vr),{45:81,46:$V7,47:$V8,48:$V9},{25:$Vg,28:$Vh,40:44,51:82,54:$Vi,56:40,57:41,63:$Vj,67:$Vk,68:$Vl},o($Vb,[2,43]),{25:[1,84],54:[1,83]},{25:$Vm,40:85,54:$Vi,67:$Vk,68:$Vl},{38:[1,86]},{30:[1,87]},{38:[2,35]},{38:[2,36]},{38:[2,37]},{30:[1,88]},{30:[1,89]},{17:[1,90],19:[1,92],58:[1,91],59:[1,93],60:[1,94],61:[1,95]},o($Vo,[2,28]),{19:[1,96]},{19:[1,97]},o($Vo,[2,49]),{25:$Vm,40:44,54:$Vi,57:98,63:$Vj,67:$Vk,68:$Vl},{25:$Vm,40:44,54:$Vi,57:99,63:$Vj,67:$Vk,68:$Vl},{25:$Vm,40:44,54:$Vi,57:100,63:$Vj,67:$Vk,68:$Vl},{25:$Vm,40:44,54:$Vi,57:101,63:$Vj,67:$Vk,68:$Vl},{25:$Vm,40:44,54:$Vi,57:102,63:$Vj,67:$Vk,68:$Vl},{30:[1,103]},{25:$Vm,28:$Vn,39:105,40:104,54:$Vi,67:$Vk,68:$Vl},o($Vs,[2,71]),o($Vo,[2,50]),{50:[1,106]},{53:[1,107]},{30:[1,108]},{32:[1,109]},o($Vp,[2,45]),o($Vp,[2,46]),{53:[1,110]},{25:$Vm,28:$Vn,39:111,40:112,54:$Vi,67:$Vk,68:$Vl},{32:[1,113]},{32:[1,115],34:[1,114]},{31:[1,116]},{25:$Vm,40:44,54:$Vi,57:117,63:$Vj,67:$Vk,68:$Vl},{25:$Vm,40:44,54:$Vi,57:118,63:$Vj,67:$Vk,68:$Vl},{25:$Vm,40:44,54:$Vi,57:119,63:$Vj,67:$Vk,68:$Vl},{25:$Vm,40:44,54:$Vi,57:120,63:$Vj,67:$Vk,68:$Vl},{25:$Vm,40:44,54:$Vi,57:121,63:$Vj,67:$Vk,68:$Vl},{25:$Vm,40:44,54:$Vi,57:122,63:$Vj,67:$Vk,68:$Vl},o($Vb,[2,14]),o($Vb,[2,15]),o($Vq,[2,65]),o($Vq,[2,66]),o($Vq,[2,67]),o($Vq,[2,68]),o($Vq,[2,69]),o($Vq,[2,56]),{53:[1,123]},{25:$Vm,40:124,54:$Vi,67:$Vk,68:$Vl},{25:$Vg,28:$Vh,40:44,51:125,54:$Vi,56:40,57:41,63:$Vj,67:$Vk,68:$Vl},{50:[1,126]},o([25,54,67,68],[2,38]),o($Vb,[2,42]),{32:[1,127]},{25:$Vm,40:128,54:$Vi,67:$Vk,68:$Vl},{30:[1,129]},o($Vo,[2,34]),{2:$Vu,7:132,9:133,12:136,13:137,14:138,21:130,22:131,23:134,24:135,25:$Vv,27:$V3,31:$V4,36:$V6,54:$Va,55:$Vw},o($Vb,[2,31]),{25:[1,142]},{30:[2,59]},{30:[2,60]},{30:[2,61]},{30:[2,62]},{30:[2,63]},{30:[2,64]},o($Vq,[2,57]),{53:[1,143]},{32:[1,144]},{25:$Vg,28:$Vh,40:44,51:145,54:$Vi,56:40,57:41,63:$Vj,67:$Vk,68:$Vl},o($Vb,[2,44]),{30:[1,146]},{32:[1,147]},{2:$Vu,7:132,9:133,12:136,13:137,14:138,22:149,23:134,24:135,25:$Vv,27:$V3,31:$V4,35:[1,148],36:$V6,54:$Va,55:$Vw},o($Vx,[2,17]),o($Vx,[2,18]),o($Vx,[2,19]),o($Vx,[2,20]),o($Vx,[2,21]),o($Vx,[2,22]),o($Vx,[2,23]),o($Vx,[2,24]),o($Vx,[2,25]),{26:$Vc,28:[1,150],50:$Vd,52:$Ve},{32:[1,151]},{32:[1,152]},o($Vq,[2,58]),o($Vo,[2,51]),{32:[1,153]},{32:[1,154]},o($Vo,[2,33]),o($Vb,[2,29]),o($Vx,[2,16]),{30:[1,155]},o($Vx,[2,53]),o($Vo,[2,27]),o($Vo,[2,52]),o($Vo,[2,32]),{32:[1,156]},o($Vx,[2,30])],
defaultActions: {25:[2,1],60:[2,35],61:[2,36],62:[2,37],117:[2,59],118:[2,60],119:[2,61],120:[2,62],121:[2,63],122:[2,64]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:/* skip whitespace */
break;
case 5:return 16
break;
case 6:return 18
break;
case 7:return 20
break;
case 8:return 31;
break;
case 9:return 36;
break;
case 10:return 36;
break;
case 11:return 33;
break;
case 12:return 47;
break;
case 13:return 48;
break;
case 14:return 46;
break;
case 15:return 55;
break;
case 16:return 27;
break;
case 17:return 26;
break;
case 18:return 32;
break;
case 19:return 62;
break;
case 20:return 63;
break;
case 21:return 64;
break;
case 22:return 65;
break;
case 23:return 66;
break;
case 24:return 58;
break;
case 25:return 59;
break;
case 26:return 17;
break;
case 27:return 19;
break;
case 28:return 61;
break;
case 29:return 60;
break;
case 30:return 50;
break;
case 31:return 28;
break;
case 32:return 30;
break;
case 33:return 52;
break;
case 34:return 53;
break;
case 35:return 34;
break;
case 36:return 35;
break;
case 37:return 38;
break;
case 38:return 42;
break;
case 39:return 43;
break;
case 40:return 44;
break;
case 41:return 41
break;
case 42:return 41
break;
case 43:return 41
break;
case 44:return 41
break;
case 45:return 41
break;
case 46:return 67;
break;
case 47:return 68;
break;
case 48:return 54
break;
case 49:return 54
break;
case 50:return 25
break;
case 51:
                                        ListaErrores.AgregarErrorC3D(new TokenError(TipoError.Lexico,"No se reconocio el token "+yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));
                                    
break;
case 52:return 5
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*)/i,/^(?:\*\/)/i,/^(?:.)/i,/^(?:\s+)/i,/^(?:#include\b)/i,/^(?:stdio\.h\b)/i,/^(?:math\.h\b)/i,/^(?:goto\b)/i,/^(?:Printf\b)/i,/^(?:printf\b)/i,/^(?:void\b)/i,/^(?:float\b)/i,/^(?:double\b)/i,/^(?:int\b)/i,/^(?:Return\b)/i,/^(?:if\b)/i,/^(?::)/i,/^(?:;)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:"%c")/i,/^(?:"%d")/i,/^(?:"%f")/i,/^(?:“[^\"\n]*”)/i,/^(?:"[^\"\n]*")/i,/^(?:'[^''\n]*')/i,/^(?:‘[^''\n]*’)/i,/^(?:`[^''\n]*`)/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:T[0-9]+)/i,/^(?:t[0-9]+)/i,/^(?:[a-zA-ZñÑáéíóúÁÉÍÓÚ]([a-zA-Z0-9ñÑáéíóúÁÉÍÓÚ]|_|-)*)/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Codigo3dAnalyzer;
exports.Parser = Codigo3dAnalyzer.Parser;
exports.parse = function () { return Codigo3dAnalyzer.parse.apply(Codigo3dAnalyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}