/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GrammXQuery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,9],$V1=[1,7],$V2=[1,11],$V3=[1,8],$V4=[5,9,38,52],$V5=[1,14],$V6=[5,7,9,38,52],$V7=[1,17],$V8=[5,7,9,31,38,52],$V9=[21,40,42,43],$Va=[40,42,43,57],$Vb=[1,44],$Vc=[1,40],$Vd=[1,37],$Ve=[2,51],$Vf=[1,43],$Vg=[1,54],$Vh=[1,50],$Vi=[1,52],$Vj=[1,47],$Vk=[1,53],$Vl=[1,55],$Vm=[1,45],$Vn=[1,48],$Vo=[1,58],$Vp=[1,74],$Vq=[1,75],$Vr=[1,73],$Vs=[1,72],$Vt=[1,76],$Vu=[1,104],$Vv=[1,103],$Vw=[1,96],$Vx=[1,95],$Vy=[1,85],$Vz=[1,86],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,97],$VJ=[1,98],$VK=[1,99],$VL=[1,100],$VM=[1,101],$VN=[1,102],$VO=[21,40,42,43,57],$VP=[5,7,9,11,12,14,21,31,38,40,42,43,52,55,57,58,59,60,61,67,69,71,74,75,76,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],$VQ=[2,93],$VR=[2,95],$VS=[1,109],$VT=[5,7,9,11,12,14,21,31,38,40,42,43,52,55,57,58,59,60,61,67,71,74,75,76,77,80,81],$VU=[11,12,55,57,75,78,80,81],$VV=[1,130],$VW=[1,128],$VX=[1,129],$VY=[1,131],$VZ=[1,132],$V_=[5,7,9,14,21,31,38,42,43,52,58,59,61,67],$V$=[2,78],$V01=[5,7,9,31,38,52,67],$V11=[1,137],$V21=[9,11,12,48,51,55,57,60,71,74,75,76,77,80,81],$V31=[5,7,9,11,12,14,21,31,38,40,42,43,52,55,57,60,61,67,71,74,75,76,80,81],$V41=[14,69,77,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],$V51=[5,7,9,11,12,14,21,31,38,40,42,43,52,55,57,60,61,67,71,74,75,76,79,80,81],$V61=[5,7,9,21,31,38,40,42,43,52,57],$V71=[14,21],$V81=[11,55,57],$V91=[5,7,9,11,12,14,21,31,38,40,42,43,52,55,57,58,59,60,61,67,71,74,75,76,79,80,81,82,83,86,87,88,89,90,91,93],$Va1=[5,7,9,11,12,14,21,31,38,40,42,43,52,55,57,58,59,60,61,67,71,74,75,76,79,80,81,82,83,84,85,86,87,88,89,90,91,93],$Vb1=[5,7,9,11,12,14,21,31,38,40,42,43,52,55,57,58,59,60,61,67,71,74,75,76,79,80,81,86,87,93],$Vc1=[5,7,9,11,12,14,21,31,38,40,42,43,52,55,57,58,59,60,61,67,71,74,75,76,79,80,81,86,87,88,89,90,91,93],$Vd1=[1,207],$Ve1=[2,27],$Vf1=[1,208],$Vg1=[1,209],$Vh1=[1,210],$Vi1=[1,211],$Vj1=[1,217],$Vk1=[14,21,29],$Vl1=[9,31,38,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"FUNCTION":4,"EOF":5,"METODOS":6,"RDECLARE":7,"RFUNCTION":8,"LOCAL":9,"DOSPUNTOS":10,"IDENTIFICADOR":11,"PARIZQ":12,"PARAMETROS":13,"PARDER":14,"TIPO":15,"BLOQUE":16,"PTCOMA":17,"LLAMADAFUNCION":18,"LET":19,"INSTRUCCION":20,"COMA":21,"DECLARACIONES":22,"VARIABLE":23,"AS":24,"XS":25,"L_PARAMETROSINTERNOS":26,"TIPOPARAMETRO":27,"L_CONSULTAS":28,"LLAVEIZQ":29,"INSTRUCCIONES":30,"LLAVEDER":31,"INT":32,"FLOAT":33,"CHAR":34,"DOUBLE":35,"FORSIMPLE":36,"FORCOMPUESTO":37,"RFOR":38,"CONDICIONCOMPUESTA":39,"RWHERE":40,"CONDICION":41,"RORDERBY":42,"RRETURN":43,"RETORNO":44,"CONDICIONSIMPLE":45,"CONJUNCION":46,"UNION":47,"RIN":48,"L_IN":49,"L_VARIABLES":50,"RAT":51,"RLET":52,"LETDOSPUNTOS":53,"EXPRESION":54,"ENTERO":55,"CONECTOR":56,"DOLAR":57,"AND":58,"OR":59,"PUNTO":60,"RTO":61,"FUNCIONES":62,"IF":63,"ASIGNACION":64,"RIF":65,"RTHEN":66,"RELSE":67,"RDATA":68,"IGUAL":69,"CONSULTA":70,"BARRA":71,"OPCIONESCONSULT":72,"PREDICADO":73,"DOBLEBARRA":74,"ARROBA":75,"DOBLEPUNTO":76,"ASTERISCO":77,"CORIZQ":78,"CORDER":79,"CADENA":80,"RLAST":81,"MAS":82,"MENOS":83,"RDIV":84,"MODULO":85,"IGUALACION":86,"DIFERENCIACION":87,"MENORIGUAL":88,"MAYORIGUAL":89,"MENORQUE":90,"MAYORQUE":91,"REQUALS":92,"RNOTEQUALS":93,"RMENORIGUAL":94,"RMAYORIGUAL":95,"RMENORQUE":96,"RMAYORQUE":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"RDECLARE",8:"RFUNCTION",9:"LOCAL",10:"DOSPUNTOS",11:"IDENTIFICADOR",12:"PARIZQ",14:"PARDER",17:"PTCOMA",21:"COMA",24:"AS",25:"XS",29:"LLAVEIZQ",31:"LLAVEDER",32:"INT",33:"FLOAT",34:"CHAR",35:"DOUBLE",38:"RFOR",40:"RWHERE",42:"RORDERBY",43:"RRETURN",48:"RIN",51:"RAT",52:"RLET",53:"LETDOSPUNTOS",55:"ENTERO",57:"DOLAR",58:"AND",59:"OR",60:"PUNTO",61:"RTO",65:"RIF",66:"RTHEN",67:"RELSE",68:"RDATA",69:"IGUAL",71:"BARRA",74:"DOBLEBARRA",75:"ARROBA",76:"DOBLEPUNTO",77:"ASTERISCO",78:"CORIZQ",79:"CORDER",80:"CADENA",81:"RLAST",82:"MAS",83:"MENOS",84:"RDIV",85:"MODULO",86:"IGUALACION",87:"DIFERENCIACION",88:"MENORIGUAL",89:"MAYORIGUAL",90:"MENORQUE",91:"MAYORQUE",92:"REQUALS",93:"RNOTEQUALS",94:"RMENORIGUAL",95:"RMAYORIGUAL",96:"RMENORQUE",97:"RMAYORQUE"},
productions_: [0,[3,2],[4,2],[4,1],[6,12],[6,11],[6,1],[6,1],[6,1],[6,0],[13,3],[13,1],[22,5],[26,3],[26,1],[27,1],[27,1],[16,3],[16,2],[15,4],[15,4],[15,4],[15,4],[15,1],[15,1],[15,1],[15,1],[15,0],[30,2],[30,1],[20,1],[20,1],[20,1],[20,1],[37,8],[37,6],[37,6],[37,4],[36,8],[36,6],[36,6],[36,4],[39,3],[39,1],[39,0],[45,2],[45,1],[47,3],[47,2],[46,2],[50,3],[50,1],[19,6],[49,1],[49,6],[49,5],[49,1],[49,1],[18,6],[18,5],[23,2],[56,1],[56,1],[56,1],[56,1],[56,1],[44,1],[44,1],[44,1],[44,1],[44,1],[63,8],[63,9],[62,4],[64,3],[64,5],[41,2],[41,3],[41,1],[28,2],[28,1],[70,3],[70,2],[70,2],[70,2],[70,1],[72,1],[72,1],[72,1],[72,1],[72,1],[72,1],[73,3],[54,1],[54,3],[54,1],[54,1],[54,1],[54,2],[54,2],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 28: case 45: case 79:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 11: case 14: case 29: case 46: case 51: case 80:
this.$=[$$[$0]];
break;
case 4:
this.$=new funciones.default($$[$0-6],$$[$0-4],$$[$0-2],$$[$0-1],_$[$0-11].first_line,_$[$0-11].first_column);
break;
case 5:
this.$=new funciones.default($$[$0-5],null,$$[$0-2],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 6: case 7: case 8: case 15: case 16: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 30: case 31: case 32: case 33: case 43: case 53: case 56: case 57: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 78: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 97:
this.$=$$[$0]
break;
case 9:
this.$=""
break;
case 10: case 13: case 50:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 12:
this.$=new declaracion.default($$[$0-4],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 17: case 48: case 92: case 94:
this.$=$$[$0-1]
break;
case 18:
this.$=null
break;
case 34:
this.$=$$[$0-7]+$$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 35: case 36: case 54:
this.$=$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 37: case 73:
this.$=$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 38:
this.$=new theforsimple.default($$[$0-6],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-4],$$[$0-2]);
break;
case 39:
this.$=new theforsimple.default($$[$0-4],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-2],null);
break;
case 40:
this.$=new theforsimple.default($$[$0-4],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column,null,$$[$0-2]);
break;
case 41:
this.$=new theforsimple.default($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column,null,null);
break;
case 42:
this.$=$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 47:
this.$=new condicionsimple.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 49: case 60: case 83: case 84:
this.$=$$[$0-1]+$$[$0]
break;
case 52:
this.$=new thelet.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 55:
this.$=$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 58:
this.$=new llamada.default($$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 59:
this.$=new llamada.default($$[$0-2],null,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 71:
this.$=new theif.default($$[$0-5],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-2],$$[$0])
break;
case 72:
this.$=new theif.default($$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column,$$[$0-3],[])
break;
case 74: case 112:
this.$=new asignacion.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 75:
this.$=new asignacion.default($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 76:
this.$=new condicionsimple.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 77:
this.$=new condicion.default($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 81:
this.$ = new barrasnodo.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column, $$[$0-1]);
break;
case 82:
this.$ = new barrasnodo.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column, null);
break;
case 93:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 95:
this.$ = new identificador.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 96:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 98:
this.$ = new atributosexpresion.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 99:
this.$ = new identificadorpredicado.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 100:
this.$=$$[$0-2]+"()"
break;
case 101:
this.$=new aritmetica.default(aritmetica.Operadores.SUMA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 102:
this.$=new aritmetica.default(aritmetica.Operadores.RESTA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 103:
this.$=new aritmetica.default(aritmetica.Operadores.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 104:
this.$=new aritmetica.default(aritmetica.Operadores.MODULADOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 105: case 113:
this.$=new relacional.default(relacional.Relacionales.IGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 106: case 114:
this.$=new relacional.default(relacional.Relacionales.DIFERENTE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 107: case 115:
this.$=new relacional.default(relacional.Relacionales.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 108: case 116:
this.$=new relacional.default(relacional.Relacionales.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 109: case 117:
this.$=new relacional.default(relacional.Relacionales.MENORQUE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 110: case 118:
this.$=new relacional.default(relacional.Relacionales.MAYORQUE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 111:
this.$=new aritmetica.default(aritmetica.Operadores.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 119:
this.$=new logica.default(logica.Logicas.OR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 120:
this.$=new logica.default(logica.Logicas.AND,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
}
},
table: [o([5,7],$V0,{3:1,4:2,6:3,18:4,19:5,20:6,36:9,37:10,9:$V1,38:$V2,52:$V3}),{1:[3]},{5:[1,12],6:13,7:$V0,9:$V1,18:4,19:5,20:6,36:9,37:10,38:$V2,52:$V3},o($V4,[2,3],{7:$V5}),o($V6,[2,6]),o($V6,[2,7]),o($V6,[2,8]),{10:[1,15]},{23:16,57:$V7},o($V8,[2,30]),o($V8,[2,31]),o($V9,[2,44],{45:18,39:19,47:20,46:21,23:22,50:23,57:$V7}),{1:[2,1]},o($V4,[2,2],{7:$V5}),{8:[1,24]},{11:[1,25]},{53:[1,26]},{11:[1,27]},{23:32,40:[1,28],42:[1,29],43:[1,30],47:31,57:$V7},{21:[1,36],40:[1,33],42:[1,34],43:[1,35]},o($Va,[2,46]),o($V9,[2,43]),{9:$V1,11:$Vb,12:$Vc,18:41,23:46,28:42,48:$Vd,49:38,51:$Ve,54:39,55:$Vf,57:$V7,60:$Vg,70:49,71:$Vh,72:51,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn},{9:$V1,11:$Vb,12:$Vc,18:41,23:46,28:42,48:$Vo,49:56,51:[1,57],54:39,55:$Vf,57:$V7,60:$Vg,70:49,71:$Vh,72:51,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn},{9:[1,59]},{12:[1,60]},{9:$V1,11:$Vb,12:$Vc,18:41,23:46,28:42,48:$Vo,49:61,54:39,55:$Vf,57:$V7,60:$Vg,70:49,71:$Vh,72:51,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn},o([5,7,9,11,12,14,21,24,31,38,40,42,43,48,51,52,53,55,57,58,59,60,61,67,69,71,74,75,76,77,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],[2,60]),{23:63,41:62,57:$V7},{23:63,41:64,57:$V7},{11:$Vp,12:$Vq,23:71,41:66,44:65,54:70,55:$Vf,57:$V7,62:67,63:68,64:69,65:$Vr,68:$Vs,75:$Vt,80:$Vm,81:$Vn},o($Va,[2,45]),{9:$V1,11:$Vb,12:$Vc,18:41,23:46,28:42,48:$Vd,49:38,54:39,55:$Vf,57:$V7,60:$Vg,70:49,71:$Vh,72:51,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn},{23:63,41:77,57:$V7},{23:63,41:78,57:$V7},{11:$Vp,12:$Vq,23:71,41:66,44:79,54:70,55:$Vf,57:$V7,62:67,63:68,64:69,65:$Vr,68:$Vs,75:$Vt,80:$Vm,81:$Vn},{23:81,46:80,50:23,57:$V7},{11:$Vb,12:[1,83],23:46,28:82,54:84,55:$Vf,57:$V7,60:$Vg,70:49,71:$Vh,72:51,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn},o($Va,[2,48]),o([11,12,21,40,42,43,55,57,60,71,74,75,76,80,81],[2,53],{58:$Vu,59:$Vv,69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN}),{11:$Vb,12:$Vq,23:46,54:106,55:[1,105],57:$V7,75:$Vt,80:$Vm,81:$Vn},o($VO,[2,56]),o($V9,[2,57],{23:46,72:51,54:84,70:107,11:$Vb,12:$Vq,55:$Vf,57:$V7,60:$Vg,71:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn}),o($VP,$VQ),o($VP,$VR,{73:108,78:$VS}),o($VP,[2,96]),o($VP,[2,97]),{11:$Vb,12:$Vq,23:46,54:110,55:$Vf,57:$V7,75:$Vt,78:[2,88],80:$Vm,81:$Vn},{12:[1,111]},o($VT,[2,80]),{11:$Vb,12:$Vq,23:46,54:113,55:$Vf,57:$V7,71:[1,112],75:$Vt,78:[2,86],80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:114,55:$Vf,57:$V7,73:115,75:$Vt,78:$VS,80:$Vm,81:$Vn},o($VU,[2,87]),o($VU,[2,89]),o($VU,[2,90]),o($VU,[2,91]),o($V9,[2,49]),{23:116,57:$V7},{12:[1,117]},{10:[1,118]},{11:$Vb,12:$Vq,14:[1,120],23:123,26:119,27:121,28:122,54:84,55:$Vf,57:$V7,60:$Vg,70:49,71:$Vh,72:51,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn},{43:[1,124]},{21:$VV,42:[1,125],43:[1,126],56:127,58:$VW,59:$VX,60:$VY,61:$VZ},o($V_,$V$,{23:46,70:49,72:51,54:84,28:133,11:$Vb,12:$Vq,55:$Vf,57:$V7,60:$Vg,71:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn}),{21:$VV,43:[1,134],56:127,58:$VW,59:$VX,60:$VY,61:$VZ},o($V8,[2,41]),o($V01,[2,66],{56:127,21:$VV,58:$VW,59:$VX,60:$VY,61:$VZ}),o($V01,[2,67]),o($V01,[2,68]),o($V01,[2,69]),o($V01,[2,70],{58:$Vu,59:$Vv,69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN}),o([5,7,9,21,31,38,52,58,59,61,67,69,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],$V$,{23:46,70:49,72:51,54:84,28:133,11:$Vb,12:$Vq,55:$Vf,57:$V7,60:$Vg,71:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn}),{12:[1,135]},{12:[1,136]},o([5,7,9,31,38,52,58,59,67,77,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],$VR,{73:108,69:$V11,78:$VS}),{11:$Vb,12:$Vq,23:46,54:106,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:110,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{21:$VV,42:[1,138],43:[1,139],56:127,58:$VW,59:$VX,60:$VY,61:$VZ},{21:$VV,43:[1,140],56:127,58:$VW,59:$VX,60:$VY,61:$VZ},o($V8,[2,37]),o($V9,[2,42]),o($V21,$Ve),o([40,42,43],[2,47],{23:46,72:51,54:84,70:107,11:$Vb,12:$Vq,55:$Vf,57:$V7,60:$Vg,71:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn}),{11:$Vb,12:$Vq,23:46,54:106,55:[1,141],57:$V7,75:$Vt,80:$Vm,81:$Vn},o($V31,[2,85],{58:$Vu,59:$Vv,69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN}),{11:$Vb,12:$Vq,23:46,54:142,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:143,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:144,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:145,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:146,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:147,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:148,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:149,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:150,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:151,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:152,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:153,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:154,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:155,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:156,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:157,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:158,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:159,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:160,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},{11:$Vb,12:$Vq,23:46,54:161,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},o($V41,$VQ,{56:162,21:$VV,58:$VW,59:$VX,60:$VY,61:$VZ}),{14:[1,163],58:$Vu,59:$Vv,69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN},o($VT,[2,79]),o($VP,[2,99]),{11:$Vb,12:$Vq,23:46,54:164,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},o($V51,[2,98],{58:$Vu,59:$Vv,69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN}),{14:[1,165]},{11:$Vb,12:$Vq,23:46,54:166,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},o($V31,[2,82],{58:$Vu,59:$Vv,69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN}),o($V31,[2,83],{58:$Vu,59:$Vv,69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN}),o($VT,[2,84]),o($V21,[2,50]),{55:[1,167]},{11:[1,168]},{14:[1,169],21:[1,170]},o($V61,[2,59]),o($V71,[2,14]),o($V71,[2,15],{23:46,72:51,54:84,70:107,11:$Vb,12:$Vq,55:$Vf,57:$V7,60:$Vg,71:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn}),o([11,12,14,21,55,57,58,59,60,69,71,74,75,76,77,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97],[2,16]),{11:$Vp,12:$Vq,23:71,41:66,44:171,54:70,55:$Vf,57:$V7,62:67,63:68,64:69,65:$Vr,68:$Vs,75:$Vt,80:$Vm,81:$Vn},{23:63,41:172,57:$V7},{11:$Vp,12:$Vq,23:71,41:66,44:173,54:70,55:$Vf,57:$V7,62:67,63:68,64:69,65:$Vr,68:$Vs,75:$Vt,80:$Vm,81:$Vn},{23:63,41:174,57:$V7},o($V81,[2,61]),o($V81,[2,62]),o($V81,[2,63]),o($V81,[2,64]),o($V81,[2,65]),o($V_,[2,76],{23:46,72:51,54:84,70:107,11:$Vb,12:$Vq,55:$Vf,57:$V7,60:$Vg,71:$Vh,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn}),{11:$Vp,12:$Vq,23:71,41:66,44:175,54:70,55:$Vf,57:$V7,62:67,63:68,64:69,65:$Vr,68:$Vs,75:$Vt,80:$Vm,81:$Vn},{23:63,41:176,57:$V7},{23:63,41:177,57:$V7},{23:178,57:$V7},{23:63,41:179,57:$V7},{11:$Vp,12:$Vq,23:71,41:66,44:180,54:70,55:$Vf,57:$V7,62:67,63:68,64:69,65:$Vr,68:$Vs,75:$Vt,80:$Vm,81:$Vn},{11:$Vp,12:$Vq,23:71,41:66,44:181,54:70,55:$Vf,57:$V7,62:67,63:68,64:69,65:$Vr,68:$Vs,75:$Vt,80:$Vm,81:$Vn},o($V41,$VQ,{56:182,21:$VV,58:$VW,59:$VX,60:$VY,61:$VZ}),o($V91,[2,101],{69:$Vw,77:$Vx,84:$VA,85:$VB,92:$VI,94:$VK,95:$VL,96:$VM,97:$VN}),o($V91,[2,102],{69:$Vw,77:$Vx,84:$VA,85:$VB,92:$VI,94:$VK,95:$VL,96:$VM,97:$VN}),o($Va1,[2,103],{69:$Vw,77:$Vx,92:$VI,94:$VK,95:$VL,96:$VM,97:$VN}),o($Va1,[2,104],{69:$Vw,77:$Vx,92:$VI,94:$VK,95:$VL,96:$VM,97:$VN}),o($Vb1,[2,105],{69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,94:$VK,95:$VL,96:$VM,97:$VN}),o($Vb1,[2,106],{69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,94:$VK,95:$VL,96:$VM,97:$VN}),o($Vc1,[2,107],{69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,92:$VI,94:$VK,95:$VL,96:$VM,97:$VN}),o($Vc1,[2,108],{69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,92:$VI,94:$VK,95:$VL,96:$VM,97:$VN}),o($Vc1,[2,109],{69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,92:$VI,94:$VK,95:$VL,96:$VM,97:$VN}),o($Vc1,[2,110],{69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,92:$VI,94:$VK,95:$VL,96:$VM,97:$VN}),o($V51,[2,111],{58:$Vu,59:$Vv,69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN}),o($V51,[2,112],{58:$Vu,59:$Vv,69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN}),o($V51,[2,113],{58:$Vu,59:$Vv,69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN}),o($Vb1,[2,114],{69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,94:$VK,95:$VL,96:$VM,97:$VN}),o($V51,[2,115],{58:$Vu,59:$Vv,69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN}),o($V51,[2,116],{58:$Vu,59:$Vv,69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN}),o($V51,[2,117],{58:$Vu,59:$Vv,69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN}),o($V51,[2,118],{58:$Vu,59:$Vv,69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN}),o([5,7,9,11,12,14,21,31,38,40,42,43,52,55,57,59,60,61,67,71,74,75,76,79,80,81],[2,119],{58:$Vu,69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN}),o([5,7,9,11,12,14,21,31,38,40,42,43,52,55,57,58,59,60,61,67,71,74,75,76,79,80,81],[2,120],{69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN}),{55:[1,183]},o($VP,[2,94]),{58:$Vu,59:$Vv,69:$Vw,77:$Vx,79:[1,184],82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN},o($VP,[2,100]),o($V31,[2,81],{58:$Vu,59:$Vv,69:$Vw,77:$Vx,82:$Vy,83:$Vz,84:$VA,85:$VB,86:$VC,87:$VD,88:$VE,89:$VF,90:$VG,91:$VH,92:$VI,93:$VJ,94:$VK,95:$VL,96:$VM,97:$VN}),{21:$VV,56:182,58:$VW,59:$VX,60:$VY,61:$VZ},{12:[1,185]},o($V61,[2,58]),{11:$Vb,12:$Vq,23:123,27:186,28:122,54:84,55:$Vf,57:$V7,60:$Vg,70:49,71:$Vh,72:51,74:$Vi,75:$Vj,76:$Vk,77:$Vl,80:$Vm,81:$Vn},o($V8,[2,52]),{21:$VV,43:[1,187],56:127,58:$VW,59:$VX,60:$VY,61:$VZ},o($V8,[2,39]),o([5,7,9,14,31,38,42,43,52,67],[2,77],{56:127,21:$VV,58:$VW,59:$VX,60:$VY,61:$VZ}),o($V8,[2,40]),{14:[1,188],21:$VV,56:127,58:$VW,59:$VX,60:$VY,61:$VZ},{14:[1,189],21:$VV,56:127,58:$VW,59:$VX,60:$VY,61:$VZ},o($V01,[2,74],{56:190,21:$VV,58:$VW,59:$VX,60:$VY,61:$VZ}),{21:$VV,43:[1,191],56:127,58:$VW,59:$VX,60:$VY,61:$VZ},o($V8,[2,35]),o($V8,[2,36]),{55:[1,192]},{14:[1,193]},o($VP,[2,92]),{13:194,14:[1,195],22:196,23:197,57:$V7},o($V71,[2,13]),{11:$Vp,12:$Vq,23:71,41:66,44:198,54:70,55:$Vf,57:$V7,62:67,63:68,64:69,65:$Vr,68:$Vs,75:$Vt,80:$Vm,81:$Vn},o($V01,[2,73]),{66:[1,199]},{11:[1,201],64:200},{11:$Vp,12:$Vq,23:71,41:66,44:202,54:70,55:$Vf,57:$V7,62:67,63:68,64:69,65:$Vr,68:$Vs,75:$Vt,80:$Vm,81:$Vn},{14:[1,203]},o($VO,[2,55]),{14:[1,204],21:[1,205]},{15:206,24:$Vd1,29:$Ve1,32:$Vf1,33:$Vg1,34:$Vh1,35:$Vi1},o($V71,[2,11]),{24:[1,212]},o($V8,[2,38]),{11:$Vp,12:$Vq,23:71,41:66,44:213,54:70,55:$Vf,57:$V7,62:67,63:68,64:69,65:$Vr,68:$Vs,75:$Vt,80:$Vm,81:$Vn},o($V01,[2,75]),{69:$V11},o($V8,[2,34]),o($VO,[2,54]),{15:214,24:$Vd1,29:$Ve1,32:$Vf1,33:$Vg1,34:$Vh1,35:$Vi1},{22:215,23:197,57:$V7},{16:216,29:$Vj1},{25:[1,218]},o($Vk1,[2,23]),o($Vk1,[2,24]),o($Vk1,[2,25]),o($Vk1,[2,26]),{25:[1,219]},{67:[1,220]},{16:221,29:$Vj1},o($V71,[2,10]),{17:[1,222]},{9:$V1,18:227,19:226,20:225,30:223,31:[1,224],36:9,37:10,38:$V2,52:$V3},{10:[1,228]},{10:[1,229]},{11:$Vp,12:[1,231],23:71,41:66,44:230,54:70,55:$Vf,57:$V7,62:67,63:68,64:69,65:$Vr,68:$Vs,75:$Vt,80:$Vm,81:$Vn},{17:[1,232]},o($V6,[2,5]),{9:$V1,18:227,19:226,20:234,31:[1,233],36:9,37:10,38:$V2,52:$V3},{17:[2,18]},o($Vl1,[2,29]),o($Vl1,[2,32]),o($Vl1,[2,33]),{32:[1,235],33:[1,236],34:[1,237],35:[1,238]},o($V71,$Ve1,{15:239,24:$Vd1,32:$Vf1,33:$Vg1,34:$Vh1,35:$Vi1}),o($V01,[2,71]),{11:$Vb,12:$Vq,14:[1,240],23:46,54:106,55:$Vf,57:$V7,75:$Vt,80:$Vm,81:$Vn},o($V6,[2,4]),{17:[2,17]},o($Vl1,[2,28]),o($Vk1,[2,19]),o($Vk1,[2,20]),o($Vk1,[2,21]),o($Vk1,[2,22]),o($V71,[2,12]),o($V01,[2,72])],
defaultActions: {12:[2,1],224:[2,18],233:[2,17]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const theforcompuesto = require('./Instrucciones/ForCompuesto');
    const theforsimple = require('./Instrucciones/ForSimple');
    const atributosexpresion = require("../../XPATH/Analizador/Instrucciones/AtributosExpresion")
    const identificadorpredicado = require("../../XPATH/Analizador/Instrucciones/IdentificadorPredicado")
    const aritmetica= require("./Expresiones/Aritmetica");
    const logica = require ("./Expresiones/Logica");
    const relacional = require("./Expresiones/Relacional");
    const barrasnodo= require("./Instrucciones/BarrasNodo")
    const identificador= require("./Expresiones/Identificador");
    const nativo= require("./Expresiones/Nativo");
    const asignacion= require("./Instrucciones/Asignacion")
    const funciones= require("./Instrucciones/Funciones")
    const declaracion= require("./Instrucciones/Declaracion")
    const llamada= require("./Instrucciones/Llamada")
    const theif = require('./Instrucciones/If')
    const thelet=require('./Instrucciones/Let')
    const Tipo= require("./Simbolos/Tipo");
    const condicionsimple= require("./Instrucciones/CondicionSimple");
    const condicion= require("./Instrucciones/Condicion");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:
break;
case 6:return 24;
break;
case 7:return 25;
break;
case 8:return 38;
break;
case 9:return 52;
break;
case 10:return 40;
break;
case 11:return 42;
break;
case 12:return 43;
break;
case 13:return 48;
break;
case 14:return 'RDOC';
break;
case 15:return 65;
break;
case 16:return 67;
break;
case 17:return 66;
break;
case 18:return 92;
break;
case 19:return 93;
break;
case 20:return 96;
break;
case 21:return 94;
break;
case 22:return 97;
break;
case 23:return 95;
break;
case 24:return 51;
break;
case 25:return 61;
break;
case 26:return 7;
break;
case 27:return 8;
break;
case 28:return 84;
break;
case 29:return 59;
break;
case 30:return 58;
break;
case 31:return 85;
break;
case 32:return 'RNODO';
break;
case 33:return 'RTEXT';
break;
case 34:return 68;
break;
case 35:return 81;
break;
case 36:return 9;
break;
case 37:return 32
break;
case 38:return 35
break;
case 39:return 33 
break;
case 40:return 34
break;
case 41:return 'FUPPER';
break;
case 42:return 'FSUBS';
break;
case 43:return 77;
break;
case 44:return 12;
break;
case 45:return 14;    
break;
case 46:return 76;
break;
case 47:return 60;
break;
case 48:return 74;
break;
case 49:return 71;
break;
case 50:return 78;
break;
case 51:return 79;
break;
case 52:return 57;
break;
case 53:return 89;
break;
case 54:return 'MENORQUECIERRE';
break;
case 55:return 88;
break;
case 56:return 90;
break;
case 57:return 91;
break;
case 58:return 29;
break;
case 59:return 31;
break;
case 60:return 87;
break;
case 61:return 69;
break;
case 62:return 86;
break;
case 63:return 82;
break;
case 64:return 83;
break;
case 65:return 'MULTIPLICACION';
break;
case 66:return 'POTENCIA';
break;
case 67:return 85;
break;
case 68:return 'POTENCIA';
break;
case 69:return 75;
break;
case 70:return 21;
break;
case 71:return 53;
break;
case 72:return 10;
break;
case 73:return 17;
break;
case 74:return 'QUESTION';
break;
case 75: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 80; 
break;
case 76: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 'QUOTE'; 
break;
case 77:return 11;
break;
case 78:return 55;
break;
case 79:return 5
break;
case 80:console.log("Error Lexico");
break;
}
},
rules: [/^(?:[(][:][^:]*[:]+[)])/,/^(?:[ \r\t]+)/,/^(?:\s+)/,/^(?:\n+)/,/^(?:\/\/.*)/,/^(?:[/][][^][]+([^/][^][]+)*[/])/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:in\b)/,/^(?:doc\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:then\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:at\b)/,/^(?:to\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:div\b)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:data\b)/,/^(?:last\b)/,/^(?:local\b)/,/^(?:integer\b)/,/^(?:decimal\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:upper-case\b)/,/^(?:substring\b)/,/^(?:\*)/,/^(?:\()/,/^(?:\))/,/^(?:\.\.)/,/^(?:\.)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:>=)/,/^(?:<\/)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:!=)/,/^(?:=)/,/^(?:==)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\^)/,/^(?:@)/,/^(?:,)/,/^(?::=)/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:([a-zA-Z_À-ÿ\u00F1\u00D1])[a-zA-Z0-9_^ÑñÀ-ÿ\-\.\u00F1\u00D10-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GrammXQuery;
exports.Parser = GrammXQuery.Parser;
exports.parse = function () { return GrammXQuery.parse.apply(GrammXQuery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}