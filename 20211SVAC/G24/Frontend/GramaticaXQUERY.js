/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GramaticaXQUERY = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[5,10,18],$V3=[12,14,15,22],$V4=[1,17],$V5=[12,14,15,36],$V6=[1,30],$V7=[1,32],$V8=[27,28,29],$V9=[1,48],$Va=[1,47],$Vb=[1,49],$Vc=[1,46],$Vd=[1,45],$Ve=[1,50],$Vf=[1,51],$Vg=[30,36,37,39,42,53,57,58,59,60,63],$Vh=[2,31],$Vi=[1,60],$Vj=[1,61],$Vk=[1,64],$Vl=[1,67],$Vm=[5,10,14,15,18,32,49],$Vn=[2,49],$Vo=[1,78],$Vp=[1,72],$Vq=[1,75],$Vr=[1,76],$Vs=[1,77],$Vt=[1,79],$Vu=[5,10,18,49],$Vv=[1,100],$Vw=[1,99],$Vx=[1,86],$Vy=[1,84],$Vz=[1,81],$VA=[1,82],$VB=[1,83],$VC=[1,85],$VD=[1,87],$VE=[1,88],$VF=[1,89],$VG=[1,90],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[1,94],$VL=[1,95],$VM=[1,96],$VN=[1,97],$VO=[1,98],$VP=[2,67],$VQ=[1,103],$VR=[1,105],$VS=[5,10,12,14,15,18,22,30,32,36,37,39,40,41,42,43,49,51,53,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$VT=[2,66],$VU=[1,117],$VV=[1,115],$VW=[1,116],$VX=[1,118],$VY=[1,119],$VZ=[5,10,14,15,18,22,30,32,36,37,39,40,41,42,43,49,53,57,58,59,60,63],$V_=[5,10,12,14,15,18,22,32,43,49],$V$=[2,58],$V01=[1,132],$V11=[30,36,37,39,58,61,63],$V21=[2,64],$V31=[5,10,12,14,15,18,22,30,32,36,37,39,42,43,49,53,57,58,59,62,63],$V41=[30,36,37],$V51=[2,35],$V61=[5,10,12,14,15,18,22,30,32,36,37,39,40,41,42,43,49,53,57,58,59,60,63];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"FORSIMPLE":7,"FORCOMPUESTO":8,"LET":9,"RFOR":10,"CONDICIONCOMPUESTA":11,"RWHERE":12,"CONDICION":13,"RORDERBY":14,"RRETURN":15,"RETORNO":16,"CONDICIONSIMPLE":17,"RLET":18,"VARIABLE":19,"LETDOSPUNTOS":20,"L_IN":21,"COMA":22,"CONJUNCION":23,"UNION":24,"L_VARIABLES":25,"CONSULTASIMPLE":26,"RAT":27,"RIN":28,"PARIZQ":29,"ENTERO":30,"CONECTOR":31,"PARDER":32,"EXPRESION":33,"FOPEN":34,"CONSULTA":35,"DOLAR":36,"IDENTIFICADOR":37,"RDOC":38,"CADENA":39,"AND":40,"OR":41,"PUNTO":42,"RTO":43,"FUNCIONES":44,"IF":45,"ASIGNACION":46,"RIF":47,"RTHEN":48,"RELSE":49,"RDATA":50,"IGUAL":51,"L_CONSULTAS":52,"BARRA":53,"SALIDA":54,"OPCIONESCONSULT":55,"PREDICADO":56,"DOBLEBARRA":57,"ARROBA":58,"DOBLEPUNTO":59,"ASTERISCO":60,"CORIZQ":61,"CORDER":62,"RLAST":63,"MAS":64,"MENOS":65,"RDIV":66,"MODULO":67,"DIFERENCIACION":68,"MENORIGUAL":69,"MAYORIGUAL":70,"MENORQUE":71,"MAYORQUE":72,"IGUALACION":73,"REQUALS":74,"RNOTEQUALS":75,"RMENORIGUAL":76,"RMAYORIGUAL":77,"RMENORQUE":78,"RMAYORQUE":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"RFOR",12:"RWHERE",14:"RORDERBY",15:"RRETURN",18:"RLET",20:"LETDOSPUNTOS",22:"COMA",27:"RAT",28:"RIN",29:"PARIZQ",30:"ENTERO",32:"PARDER",36:"DOLAR",37:"IDENTIFICADOR",38:"RDOC",39:"CADENA",40:"AND",41:"OR",42:"PUNTO",43:"RTO",47:"RIF",48:"RTHEN",49:"RELSE",50:"RDATA",51:"IGUAL",53:"BARRA",57:"DOBLEBARRA",58:"ARROBA",59:"DOBLEPUNTO",60:"ASTERISCO",61:"CORIZQ",62:"CORDER",63:"RLAST",64:"MAS",65:"MENOS",66:"RDIV",67:"MODULO",68:"DIFERENCIACION",69:"MENORIGUAL",70:"MAYORIGUAL",71:"MENORQUE",72:"MAYORQUE",73:"IGUALACION",74:"REQUALS",75:"RNOTEQUALS",76:"RMENORIGUAL",77:"RMAYORIGUAL",78:"RMENORQUE",79:"RMAYORQUE"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[8,8],[8,6],[8,6],[8,4],[7,8],[7,6],[7,6],[7,4],[9,6],[11,3],[11,1],[11,0],[17,2],[17,1],[24,2],[23,2],[25,3],[25,1],[21,6],[21,5],[21,3],[26,3],[19,2],[34,4],[34,0],[31,1],[31,1],[31,1],[31,1],[31,1],[16,1],[16,1],[16,1],[16,1],[16,1],[45,8],[45,9],[44,4],[46,3],[46,5],[13,2],[13,4],[13,1],[52,2],[52,1],[35,4],[35,3],[35,3],[35,3],[35,2],[54,1],[54,0],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[56,3],[33,1],[33,1],[33,1],[33,1],[33,2],[33,2],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3],[33,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: case 30: case 44: case 56: case 65:
this.$=$$[$0-1]
break;
case 2: case 50:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 51:
this.$=[$$[$0]];
break;
case 4: case 5: case 6: case 21: case 28: case 29: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 47: case 49: case 57: case 59: case 60: case 61: case 62: case 63: case 64:
this.$=$$[$0]
break;
case 11:
this.$=new theforsimple.default($$[$0-6],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-4],$$[$0-2]);
break;
case 12:
this.$=new theforsimple.default($$[$0-4],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-2],[]);
break;
case 13:
this.$=new theforsimple.default($$[$0-4],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column,[],$$[$0-2]);
break;
case 14:
this.$=new theforsimple.default($$[$0-2],$$[$01],_$[$0-3].first_line,_$[$0-3].first_column,[],[]);
break;
case 15:
this.$=new thelet.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 19:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 20: case 24:
this.$ = [$$[$0]];
break;
case 23:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 42:
this.$=new theif.default($$[$0-5],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-2],$$[$0])
break;
case 43:
this.$=new theif.default($$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column,$$[$0-3],[])
break;
case 45: case 78:
this.$=new asignacion.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 46:
this.$=new asignacion.default($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 48:
this.$=$$[$0-2]
break;
case 52:
this.$ = new barrasnodo.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column, $$[$0-2]);
break;
case 53:
this.$ = new barrasnodo.default($$[$0-2],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column, null);
break;
case 54: case 55:
this.$=$$[$0-2]+$$[$0-1]
break;
case 66:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 67:
this.$ = new identificador.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 69:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 70:
this.$ = new atributosexpresion.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 71:
this.$ = new identificadorpredicado.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 72:
this.$=$$[$0-2]+"()"
break;
case 73:
this.$=new aritmetica.default(aritmetica.Operadores.SUMA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 74:
this.$=new aritmetica.default(aritmetica.Operadores.RESTA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 75:
this.$=new aritmetica.default(aritmetica.Operadores.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 76:
this.$=new aritmetica.default(aritmetica.Operadores.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 77:
   this.$=new aritmetica.default(aritmetica.Operadores.MODULADOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 79: case 86:
this.$=new relacional.default(relacional.Relacionales.DIFERENTE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 80: case 87:
this.$=new relacional.default(relacional.Relacionales.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 81: case 88:
this.$=new relacional.default(relacional.Relacionales.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 82: case 89:
this.$=new relacional.default(relacional.Relacionales.MENORQUE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 83: case 90:
this.$=new relacional.default(relacional.Relacionales.MAYORQUE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 84: case 85:
this.$=new relacional.default(relacional.Relacionales.IGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 91:
this.$=new logica.default(logica.Logicas.OR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 92:
this.$=new logica.default(logica.Logicas.AND,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,18:$V1},{1:[3]},{5:[1,9],6:10,7:4,8:5,9:6,10:$V0,18:$V1},o($V2,[2,3]),o($V2,[2,4]),o($V2,[2,5]),o($V2,[2,6]),o($V3,[2,18],{17:11,11:12,24:13,23:14,25:15,19:16,36:$V4}),{19:18,36:$V4},{1:[2,1]},o($V2,[2,2]),{12:[1,19],14:[1,20],15:[1,21],19:16,24:22,25:23,36:$V4},{12:[1,24],14:[1,25],15:[1,26],22:[1,27]},o($V5,[2,20]),o($V3,[2,17]),{21:29,26:28,27:$V6,28:[1,31],29:$V7},o($V8,[2,24]),{37:[1,33]},{20:[1,34]},{13:35,19:36,36:$V4},{13:37,19:36,36:$V4},{13:39,16:38,19:44,30:$V9,33:43,36:$V4,37:$Va,39:$Vb,44:40,45:41,46:42,47:$Vc,50:$Vd,58:$Ve,63:$Vf},o($V5,[2,19]),{26:28,27:$V6,28:[1,52]},{13:53,19:36,36:$V4},{13:54,19:36,36:$V4},{13:39,16:55,19:44,30:$V9,33:43,36:$V4,37:$Va,39:$Vb,44:40,45:41,46:42,47:$Vc,50:$Vd,58:$Ve,63:$Vf},{19:16,23:56,25:57,36:$V4},o($V5,[2,21]),o($V3,[2,22]),{19:58,36:$V4},o($Vg,$Vh,{34:59,29:$Vi,38:$Vj}),{19:65,30:[1,62],33:63,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},o([5,10,12,14,15,18,20,22,27,28,29,30,32,36,37,39,40,41,42,43,49,51,53,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],[2,29]),{21:66,28:$Vl,29:$V7},{14:[1,68],15:[1,69]},o($Vm,$Vn,{19:65,52:70,35:71,55:73,33:74,30:$V9,36:$V4,37:$Vk,39:$Vb,42:$Vo,53:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,63:$Vf}),{15:[1,80]},o($V2,[2,14]),o($Vu,[2,37]),o($Vu,[2,38]),o($Vu,[2,39]),o($Vu,[2,40]),o($Vu,[2,41],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o([5,10,18,40,41,49,51,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$Vn,{19:65,52:70,35:71,55:73,33:74,30:$V9,36:$V4,37:$Vk,39:$Vb,42:$Vo,53:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,63:$Vf}),{29:[1,101]},{29:[1,102]},o([5,10,18,40,41,49,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$VP,{56:104,51:$VQ,61:$VR}),o($VS,$VT),o($VS,[2,69]),{19:65,30:$V9,33:106,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{29:[1,107]},o($Vg,$Vh,{34:59,38:$Vj}),{14:[1,108],15:[1,109]},{15:[1,110]},o($V2,[2,10]),o($V3,[2,16]),{21:29,27:$V6,28:$Vl,29:$V7},o($V8,[2,23]),{19:65,30:$V9,33:74,35:111,36:$V4,37:$Vk,39:$Vb,42:$Vo,53:$Vp,55:73,57:$Vq,58:$Vr,59:$Vs,60:$Vt,63:$Vf},{30:[1,112]},{29:[1,113]},o([32,51,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],$VT,{31:114,22:$VU,40:$VV,41:$VW,42:$VX,43:$VY}),{32:[1,120],40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO},o($VS,$VP,{56:104,61:$VR}),o($VS,[2,68]),{15:[1,121]},{29:$Vi},{13:122,19:36,36:$V4},{13:39,16:123,19:44,30:$V9,33:43,36:$V4,37:$Va,39:$Vb,44:40,45:41,46:42,47:$Vc,50:$Vd,58:$Ve,63:$Vf},o($Vm,[2,47],{19:65,55:73,33:74,31:124,35:125,22:$VU,30:$V9,36:$V4,37:$Vk,39:$Vb,40:$VV,41:$VW,42:[1,126],43:$VY,53:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,63:$Vf}),o($VZ,[2,51]),{19:65,30:$V9,33:128,36:$V4,37:$Vk,39:$Vb,53:[1,127],58:$Ve,61:[2,59],63:$Vf},{19:65,30:$V9,33:129,36:$V4,37:$Vk,39:$Vb,56:130,58:$Ve,61:$VR,63:$Vf},o($V_,$V$,{19:65,55:73,33:74,54:131,35:133,30:$V9,36:$V4,37:$Vk,39:$Vb,40:$Vv,41:$Vw,42:$Vo,51:$Vx,53:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$V01,63:$Vf,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V11,[2,60]),{19:65,30:$V9,33:106,36:$V4,37:$Vk,39:$Vb,58:$Ve,61:[2,61],63:$Vf},o($V11,[2,62]),o($V11,[2,63]),o($V11,$V21),{13:39,16:134,19:44,30:$V9,33:43,36:$V4,37:$Va,39:$Vb,44:40,45:41,46:42,47:$Vc,50:$Vd,58:$Ve,63:$Vf},{19:65,30:$V9,33:135,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:136,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:137,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:138,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:139,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:140,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:141,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:142,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:143,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:144,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:145,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:146,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:147,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:148,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:149,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:150,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:151,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:152,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:153,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{19:65,30:$V9,33:154,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},{13:155,19:36,36:$V4},{13:156,19:36,36:$V4},{19:157,36:$V4},o($VS,[2,71]),{19:65,30:$V9,33:158,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},o($V31,[2,70],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),{32:[1,159]},{13:160,19:36,36:$V4},{13:39,16:161,19:44,30:$V9,33:43,36:$V4,37:$Va,39:$Vb,44:40,45:41,46:42,47:$Vc,50:$Vd,58:$Ve,63:$Vf},{13:39,16:162,19:44,30:$V9,33:43,36:$V4,37:$Va,39:$Vb,44:40,45:41,46:42,47:$Vc,50:$Vd,58:$Ve,63:$Vf},o($V5,[2,28]),{22:$VU,31:163,40:$VV,41:$VW,42:$VX,43:$VY},{39:[1,164]},{30:[1,165]},o($V41,[2,32]),o($V41,[2,33]),o($V41,[2,34]),o([30,37],$V51),o($V41,[2,36]),o($V3,[2,27]),{13:39,16:166,19:44,30:$V9,33:43,36:$V4,37:$Va,39:$Vb,44:40,45:41,46:42,47:$Vc,50:$Vd,58:$Ve,63:$Vf},{15:[1,167]},o($V2,[2,12]),{13:168,19:36,36:$V4},o($VZ,[2,50]),o($V11,$V51),{19:65,30:$V9,33:169,36:$V4,37:$Vk,39:$Vb,58:$Ve,63:$Vf},o($V_,$V$,{19:65,55:73,33:74,35:133,54:170,30:$V9,36:$V4,37:$Vk,39:$Vb,40:$Vv,41:$Vw,42:$Vo,51:$Vx,53:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$V01,63:$Vf,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V_,$V$,{19:65,55:73,33:74,35:133,54:171,30:$V9,36:$V4,37:$Vk,39:$Vb,40:$Vv,41:$Vw,42:$Vo,51:$Vx,53:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$V01,63:$Vf,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o([5,10,12,14,15,18,22,32,40,41,43,49],$V$,{19:65,55:73,33:74,35:133,54:172,30:$V9,36:$V4,37:$Vk,39:$Vb,42:$Vo,53:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$Vt,63:$Vf}),o($V61,[2,56]),{19:65,30:$V9,33:138,36:$V4,37:$Vk,39:$Vb,58:$Ve,61:$V21,63:$Vf},o($V61,[2,57]),o($V2,[2,13]),o($V31,[2,73],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,74],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,75],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,76],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,77],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,78],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,79],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,80],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,81],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,82],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,83],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,84],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,85],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,86],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,87],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,88],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,89],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,90],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,91],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V31,[2,92],{40:$Vv,41:$Vw,51:$Vx,60:$Vy,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),{32:[1,173]},{32:[1,174]},o($Vu,[2,45],{31:175,22:$VU,40:$VV,41:$VW,42:$VX,43:$VY}),{40:$Vv,41:$Vw,51:$Vx,60:$Vy,62:[1,176],64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO},o($VS,[2,72]),{15:[1,177]},o($V2,[2,8]),o($V2,[2,9]),{30:[1,178]},{32:[1,179]},{32:[1,180]},o($V2,[2,15]),{13:39,16:181,19:44,30:$V9,33:43,36:$V4,37:$Va,39:$Vb,44:40,45:41,46:42,47:$Vc,50:$Vd,58:$Ve,63:$Vf},o($Vm,[2,48]),o($V_,$V$,{19:65,55:73,33:74,35:133,54:182,30:$V9,36:$V4,37:$Vk,39:$Vb,40:$Vv,41:$Vw,42:$Vo,51:$Vx,53:$Vp,57:$Vq,58:$Vr,59:$Vs,60:$V01,63:$Vf,64:$Vz,65:$VA,66:$VB,67:$VC,68:$VD,69:$VE,70:$VF,71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,79:$VO}),o($V61,[2,53]),o($V61,[2,54]),o($V61,[2,55]),o($Vu,[2,44]),{48:[1,183]},{37:[1,185],46:184},o($VS,[2,65]),{13:39,16:186,19:44,30:$V9,33:43,36:$V4,37:$Va,39:$Vb,44:40,45:41,46:42,47:$Vc,50:$Vd,58:$Ve,63:$Vf},{32:[1,187]},o($Vg,[2,30]),o($V3,[2,26]),o($V2,[2,11]),o($V61,[2,52]),{13:39,16:188,19:44,30:$V9,33:43,36:$V4,37:$Va,39:$Vb,44:40,45:41,46:42,47:$Vc,50:$Vd,58:$Ve,63:$Vf},o($Vu,[2,46]),{51:$VQ},o($V2,[2,7]),o($V3,[2,25]),{49:[1,189]},{13:39,16:190,19:44,29:[1,191],30:$V9,33:43,36:$V4,37:$Va,39:$Vb,44:40,45:41,46:42,47:$Vc,50:$Vd,58:$Ve,63:$Vf},o($Vu,[2,42]),{32:[1,192]},o($Vu,[2,43])],
defaultActions: {9:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const theforcompuesto = require('./Instrucciones/ForCompuesto');
    const theforsimple = require('./Instrucciones/ForSimple');
    const atributosexpresion = require("../../XPATH/Analizador/Instrucciones/AtributosExpresion")
    const identificadorpredicado = require("../../XPATH/Analizador/Instrucciones/IdentificadorPredicado")
    const aritmetica= require("./Expresiones/Aritmetica");
    const logica = require ("./Expresiones/Logica");
    const relacional = require("./Expresiones/Relacional");
    const barrasnodo= require('./Instrucciones/BarrasNodo')
    const identificador= require("./Expresiones/Identificador");
    const nativo= require("./Expresiones/Nativo");
    const asignacion= require("./Instrucciones/Asignacion")
    const theif = require('./Instrucciones/If')
    const thelet=require('./Instrucciones/Let')
    const Tipo= require("./Simbolos/Tipo");



/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:
break;
case 6:return 10;
break;
case 7:return 18;
break;
case 8:return 12;
break;
case 9:return 14;
break;
case 10:return 15;
break;
case 11:return 28;
break;
case 12:return 38;
break;
case 13:return 47;
break;
case 14:return 49;
break;
case 15:return 48;
break;
case 16:return 74;
break;
case 17:return 75;
break;
case 18:return 78;
break;
case 19:return 76;
break;
case 20:return 79;
break;
case 21:return 77;
break;
case 22:return 27;
break;
case 23:return 43;
break;
case 24:return 'RDECLARE';
break;
case 25:return 'RFUNCTION';
break;
case 26:return 66;
break;
case 27:return 41;
break;
case 28:return 40;
break;
case 29:return 67;
break;
case 30:return 'RNODO';
break;
case 31:return 'RTEXT';
break;
case 32:return 50;
break;
case 33:return 63;
break;
case 34:return 'FUPPER';
break;
case 35:return 'FSUBS';
break;
case 36:return 60;
break;
case 37:return 29;
break;
case 38:return 32;    
break;
case 39:return 59;
break;
case 40:return 42;
break;
case 41:return 57;
break;
case 42:return 53;
break;
case 43:return 61;
break;
case 44:return 62;
break;
case 45:return 36;
break;
case 46:return 70;
break;
case 47:return 'MENORQUECIERRE';
break;
case 48:return 69;
break;
case 49:return 71;
break;
case 50:return 72;
break;
case 51:return 'LLAVEIZQ';
break;
case 52:return 'LLAVEDER';
break;
case 53:return 68;
break;
case 54:return 51;
break;
case 55:return 73;
break;
case 56:return 64;
break;
case 57:return 65;
break;
case 58:return 'MULTIPLICACION';
break;
case 59:return 'POTENCIA';
break;
case 60:return 67;
break;
case 61:return 'POTENCIA';
break;
case 62:return 58;
break;
case 63:return 22;
break;
case 64:return 20;
break;
case 65:return 'DOSPUNTOS';
break;
case 66: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 39; 
break;
case 67: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 'QUOTE'; 
break;
case 68:return 37;
break;
case 69:return 30;
break;
case 70:return 5
break;
case 71:console.log("Error Lexico");
break;
}
},
rules: [/^(?:[(][:][^:]*[:]+[)])/,/^(?:[ \r\t]+)/,/^(?:\s+)/,/^(?:\n+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:in\b)/,/^(?:doc\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:then\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:at\b)/,/^(?:to\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:div\b)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:data\b)/,/^(?:last\b)/,/^(?:upper-case\b)/,/^(?:substring\b)/,/^(?:\*)/,/^(?:\()/,/^(?:\))/,/^(?:\.\.)/,/^(?:\.)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:>=)/,/^(?:<\/)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:!=)/,/^(?:=)/,/^(?:==)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\^)/,/^(?:@)/,/^(?:,)/,/^(?::=)/,/^(?::)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:([a-zA-Z_À-ÿ\u00F1\u00D1])[a-zA-Z0-9_^ÑñÀ-ÿ\-\.\u00F1\u00D10-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GramaticaXQUERY;
exports.Parser = GramaticaXQUERY.Parser;
exports.parse = function () { return GramaticaXQUERY.parse.apply(GramaticaXQUERY, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}