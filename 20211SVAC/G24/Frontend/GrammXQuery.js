/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var GrammXQuery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,9],$V1=[1,7],$V2=[1,11],$V3=[1,8],$V4=[5,9,40,54],$V5=[1,14],$V6=[5,7,9,40,54],$V7=[1,17],$V8=[5,7,9,33,40,54],$V9=[21,42,44,45],$Va=[28,42,44,45],$Vb=[2,50],$Vc=[1,37],$Vd=[1,46],$Ve=[1,42],$Vf=[1,41],$Vg=[1,45],$Vh=[1,56],$Vi=[1,52],$Vj=[1,54],$Vk=[1,49],$Vl=[1,55],$Vm=[1,57],$Vn=[1,47],$Vo=[1,50],$Vp=[1,73],$Vq=[1,74],$Vr=[1,72],$Vs=[1,71],$Vt=[1,75],$Vu=[1,103],$Vv=[1,102],$Vw=[1,95],$Vx=[1,94],$Vy=[1,84],$Vz=[1,85],$VA=[1,86],$VB=[1,87],$VC=[1,88],$VD=[1,89],$VE=[1,90],$VF=[1,91],$VG=[1,92],$VH=[1,93],$VI=[1,96],$VJ=[1,97],$VK=[1,98],$VL=[1,99],$VM=[1,100],$VN=[1,101],$VO=[5,7,9,11,12,14,21,28,33,40,42,44,45,54,57,59,60,61,62,68,70,72,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],$VP=[2,92],$VQ=[2,94],$VR=[1,109],$VS=[5,7,9,11,12,14,21,28,33,40,42,44,45,54,57,59,60,61,62,68,72,75,76,77,78,81,82],$VT=[11,12,28,57,76,79,81,82],$VU=[1,126],$VV=[1,124],$VW=[1,125],$VX=[1,127],$VY=[1,128],$VZ=[5,7,9,14,21,33,40,44,45,54,59,60,62,68],$V_=[2,77],$V$=[5,7,9,33,40,54,68],$V01=[1,133],$V11=[9,11,12,28,50,53,57,61,72,75,76,77,78,81,82],$V21=[5,7,9,11,12,14,21,28,33,40,42,44,45,54,57,61,62,68,72,75,76,77,81,82],$V31=[5,7,9,11,12,14,21,28,33,40,42,44,45,54,57,61,62,68,72,75,76,77,80,81,82],$V41=[5,7,9,21,33,40,42,44,45,54],$V51=[11,28,57],$V61=[5,7,9,11,12,14,21,28,33,40,42,44,45,54,57,59,60,61,62,68,72,75,76,77,80,81,82,83,84,87,88,89,90,91,92,94],$V71=[5,7,9,11,12,14,21,28,33,40,42,44,45,54,57,59,60,61,62,68,72,75,76,77,80,81,82,83,84,85,86,87,88,89,90,91,92,94],$V81=[5,7,9,11,12,14,21,28,33,40,42,44,45,54,57,59,60,61,62,68,72,75,76,77,80,81,82,87,88,94],$V91=[5,7,9,11,12,14,21,28,33,40,42,44,45,54,57,59,60,61,62,68,72,75,76,77,80,81,82,87,88,89,90,91,92,94],$Va1=[14,21],$Vb1=[1,206],$Vc1=[2,27],$Vd1=[1,207],$Ve1=[1,208],$Vf1=[1,209],$Vg1=[1,210],$Vh1=[1,216],$Vi1=[26,31],$Vj1=[9,33,40,54];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"FUNCTION":4,"EOF":5,"METODOS":6,"RDECLARE":7,"RFUNCTION":8,"LOCAL":9,"DOSPUNTOS":10,"IDENTIFICADOR":11,"PARIZQ":12,"PARAMETROS":13,"PARDER":14,"TIPO":15,"BLOQUE":16,"PTCOMA":17,"LLAMADAFUNCION":18,"LET":19,"INSTRUCCION":20,"COMA":21,"DECLARACIONES":22,"VARIABLE":23,"AS":24,"XS":25,"QUESTION":26,"L_PARAMETROSINTERNOS":27,"DOLAR":28,"TIPOPARAMETRO":29,"L_CONSULTAS":30,"LLAVEIZQ":31,"INSTRUCCIONES":32,"LLAVEDER":33,"INT":34,"FLOAT":35,"CHAR":36,"DOUBLE":37,"FORSIMPLE":38,"FORCOMPUESTO":39,"RFOR":40,"CONDICIONCOMPUESTA":41,"RWHERE":42,"CONDICION":43,"RORDERBY":44,"RRETURN":45,"RETORNO":46,"CONDICIONSIMPLE":47,"CONJUNCION":48,"UNION":49,"RIN":50,"L_VARIABLES":51,"L_IN":52,"RAT":53,"RLET":54,"LETDOSPUNTOS":55,"EXPRESION":56,"ENTERO":57,"CONECTOR":58,"AND":59,"OR":60,"PUNTO":61,"RTO":62,"FUNCIONES":63,"IF":64,"ASIGNACION":65,"RIF":66,"RTHEN":67,"RELSE":68,"RDATA":69,"IGUAL":70,"CONSULTA":71,"BARRA":72,"OPCIONESCONSULT":73,"PREDICADO":74,"DOBLEBARRA":75,"ARROBA":76,"DOBLEPUNTO":77,"ASTERISCO":78,"CORIZQ":79,"CORDER":80,"CADENA":81,"RLAST":82,"MAS":83,"MENOS":84,"RDIV":85,"MODULO":86,"IGUALACION":87,"DIFERENCIACION":88,"MENORIGUAL":89,"MAYORIGUAL":90,"MENORQUE":91,"MAYORQUE":92,"REQUALS":93,"RNOTEQUALS":94,"RMENORIGUAL":95,"RMAYORIGUAL":96,"RMENORQUE":97,"RMAYORQUE":98,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"RDECLARE",8:"RFUNCTION",9:"LOCAL",10:"DOSPUNTOS",11:"IDENTIFICADOR",12:"PARIZQ",14:"PARDER",17:"PTCOMA",21:"COMA",24:"AS",25:"XS",26:"QUESTION",28:"DOLAR",31:"LLAVEIZQ",33:"LLAVEDER",34:"INT",35:"FLOAT",36:"CHAR",37:"DOUBLE",40:"RFOR",42:"RWHERE",44:"RORDERBY",45:"RRETURN",50:"RIN",53:"RAT",54:"RLET",55:"LETDOSPUNTOS",57:"ENTERO",59:"AND",60:"OR",61:"PUNTO",62:"RTO",66:"RIF",67:"RTHEN",68:"RELSE",69:"RDATA",70:"IGUAL",72:"BARRA",75:"DOBLEBARRA",76:"ARROBA",77:"DOBLEPUNTO",78:"ASTERISCO",79:"CORIZQ",80:"CORDER",81:"CADENA",82:"RLAST",83:"MAS",84:"MENOS",85:"RDIV",86:"MODULO",87:"IGUALACION",88:"DIFERENCIACION",89:"MENORIGUAL",90:"MAYORIGUAL",91:"MENORQUE",92:"MAYORQUE",93:"REQUALS",94:"RNOTEQUALS",95:"RMENORIGUAL",96:"RMAYORIGUAL",97:"RMENORQUE",98:"RMAYORQUE"},
productions_: [0,[3,2],[4,2],[4,1],[6,12],[6,11],[6,1],[6,1],[6,1],[6,0],[13,3],[13,1],[22,6],[27,4],[27,2],[29,1],[29,1],[16,3],[16,2],[15,5],[15,5],[15,5],[15,5],[15,1],[15,1],[15,1],[15,1],[15,0],[32,2],[32,1],[20,1],[20,1],[20,1],[20,1],[39,8],[39,6],[39,6],[39,4],[38,8],[38,6],[38,6],[38,4],[41,3],[41,1],[41,0],[47,2],[47,1],[49,3],[48,2],[51,3],[51,1],[19,6],[52,1],[52,6],[52,5],[52,1],[52,1],[18,6],[18,5],[23,2],[58,1],[58,1],[58,1],[58,1],[58,1],[46,1],[46,1],[46,1],[46,1],[46,1],[64,8],[64,9],[63,4],[65,3],[65,5],[43,2],[43,3],[43,1],[30,2],[30,1],[71,3],[71,2],[71,2],[71,2],[71,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[74,3],[56,1],[56,3],[56,1],[56,1],[56,1],[56,2],[56,2],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 28: case 45: case 78:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 11: case 14: case 29: case 46: case 50: case 79:
this.$=[$$[$0]];
break;
case 4:
this.$=new funciones.default($$[$0-6],$$[$0-4],$$[$0-2],$$[$0-1],_$[$0-11].first_line,_$[$0-11].first_column);
break;
case 5:
this.$=new funciones.default($$[$0-5],null,$$[$0-2],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 6: case 7: case 8: case 15: case 16: case 23: case 24: case 25: case 26: case 30: case 31: case 32: case 33: case 43: case 52: case 55: case 56: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 77: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 96:
this.$=$$[$0]
break;
case 9:
this.$=""
break;
case 10: case 49:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 12:
this.$=new declaracion.default($$[$0-5],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 13:
$$[$0-3].push($$[$0]); this.$=$$[$0-3];
break;
case 17: case 19: case 20: case 21: case 22: case 91: case 93:
this.$=$$[$0-1]
break;
case 18:
this.$=null
break;
case 34:
this.$=$$[$0-7]+$$[$0-6]+$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 35: case 36: case 53:
this.$=$$[$0-5]+$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 37: case 72:
this.$=$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 38:
this.$=new theforsimple.default($$[$0-6],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-4],$$[$0-2]);
break;
case 39:
this.$=new theforsimple.default($$[$0-4],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column,$$[$0-2],null);
break;
case 40:
this.$=new theforsimple.default($$[$0-4],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column,null,$$[$0-2]);
break;
case 41:
this.$=new theforsimple.default($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column,null,null);
break;
case 42:
this.$=$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 47:
this.$=new condicionsimple.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 48: case 59: case 82: case 83:
this.$=$$[$0-1]+$$[$0]
break;
case 51:
this.$=new thelet.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)
break;
case 54:
this.$=$$[$0-4]+$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 57:
this.$=new llamada.default($$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 58:
this.$=new llamada.default($$[$0-2],null,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 70:
this.$=new theif.default($$[$0-5],_$[$0-7].first_line,_$[$0-7].first_column,$$[$0-2],$$[$0])
break;
case 71:
this.$=new theif.default($$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column,$$[$0-3],[])
break;
case 73: case 111:
this.$=new asignacion.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 74:
this.$=new asignacion.default($$[$0-4],$$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 75:
this.$=new condicionsimple.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 76:
this.$=new condicion.default($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 80:
this.$ = new barrasnodo.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column, $$[$0-1]);
break;
case 81:
this.$ = new barrasnodo.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column, null);
break;
case 92:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.ENTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 94:
this.$ = new identificador.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 95:
this.$=new nativo.default(new Tipo.default(Tipo.tipoDato.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 97:
this.$ = new atributosexpresion.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 98:
this.$ = new identificadorpredicado.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 99:
this.$=$$[$0-2]+"()"
break;
case 100:
this.$=new aritmetica.default(aritmetica.Operadores.SUMA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 101:
this.$=new aritmetica.default(aritmetica.Operadores.RESTA,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 102:
this.$=new aritmetica.default(aritmetica.Operadores.DIVISION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 103:
this.$=new aritmetica.default(aritmetica.Operadores.MODULADOR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 104: case 112:
this.$=new relacional.default(relacional.Relacionales.IGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 105: case 113:
this.$=new relacional.default(relacional.Relacionales.DIFERENTE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 106: case 114:
this.$=new relacional.default(relacional.Relacionales.MENORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 107: case 115:
this.$=new relacional.default(relacional.Relacionales.MAYORIGUAL,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 108: case 116:
this.$=new relacional.default(relacional.Relacionales.MENORQUE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 109: case 117:
this.$=new relacional.default(relacional.Relacionales.MAYORQUE,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 110:
this.$=new aritmetica.default(aritmetica.Operadores.MULTIPLICACION,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 118:
this.$=new logica.default(logica.Logicas.OR,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
case 119:
this.$=new logica.default(logica.Logicas.AND,_$[$0-2].first_line,_$[$0-2].first_column,$$[$0-2],$$[$0]);
break;
}
},
table: [o([5,7],$V0,{3:1,4:2,6:3,18:4,19:5,20:6,38:9,39:10,9:$V1,40:$V2,54:$V3}),{1:[3]},{5:[1,12],6:13,7:$V0,9:$V1,18:4,19:5,20:6,38:9,39:10,40:$V2,54:$V3},o($V4,[2,3],{7:$V5}),o($V6,[2,6]),o($V6,[2,7]),o($V6,[2,8]),{10:[1,15]},{23:16,28:$V7},o($V8,[2,30]),o($V8,[2,31]),o($V9,[2,44],{47:18,41:19,49:20,48:21,23:22,51:23,28:$V7}),{1:[2,1]},o($V4,[2,2],{7:$V5}),{8:[1,24]},{11:[1,25]},{55:[1,26]},{11:[1,27]},{23:32,28:$V7,42:[1,28],44:[1,29],45:[1,30],49:31},{21:[1,36],42:[1,33],44:[1,34],45:[1,35]},o($Va,[2,46]),o($V9,[2,43]),o([9,11,12,28,53,57,61,72,75,76,77,78,81,82],$Vb,{50:$Vc}),{9:$V1,11:$Vd,12:$Ve,18:43,23:48,28:$V7,30:44,50:$Vf,52:38,53:[1,39],56:40,57:$Vg,61:$Vh,71:51,72:$Vi,73:53,75:$Vj,76:$Vk,77:$Vl,78:$Vm,81:$Vn,82:$Vo},{9:[1,58]},{12:[1,59]},{9:$V1,11:$Vd,12:$Ve,18:43,23:48,28:$V7,30:44,50:$Vf,52:60,56:40,57:$Vg,61:$Vh,71:51,72:$Vi,73:53,75:$Vj,76:$Vk,77:$Vl,78:$Vm,81:$Vn,82:$Vo},o([5,7,9,11,12,14,21,24,28,33,40,42,44,45,50,53,54,55,57,59,60,61,62,68,70,72,75,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],[2,59]),{23:62,28:$V7,43:61},{23:62,28:$V7,43:63},{11:$Vp,12:$Vq,23:70,28:$V7,43:65,46:64,56:69,57:$Vg,63:66,64:67,65:68,66:$Vr,69:$Vs,76:$Vt,81:$Vn,82:$Vo},o($Va,[2,45]),{50:$Vc},{23:62,28:$V7,43:76},{23:62,28:$V7,43:77},{11:$Vp,12:$Vq,23:70,28:$V7,43:65,46:78,56:69,57:$Vg,63:66,64:67,65:68,66:$Vr,69:$Vs,76:$Vt,81:$Vn,82:$Vo},{23:80,28:$V7,48:79,51:23},{11:$Vd,12:$Vq,23:48,28:$V7,30:81,56:82,57:$Vg,61:$Vh,71:51,72:$Vi,73:53,75:$Vj,76:$Vk,77:$Vl,78:$Vm,81:$Vn,82:$Vo},o($V9,[2,48]),{23:83,28:$V7},o([11,12,21,28,42,44,45,57,61,72,75,76,77,81,82],[2,52],{59:$Vu,60:$Vv,70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN}),{12:[1,104]},{11:$Vd,12:$Vq,23:48,28:$V7,56:106,57:[1,105],76:$Vt,81:$Vn,82:$Vo},o($V9,[2,55]),o($V9,[2,56],{23:48,73:53,56:82,71:107,11:$Vd,12:$Vq,28:$V7,57:$Vg,61:$Vh,72:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,81:$Vn,82:$Vo}),o($VO,$VP),o($VO,$VQ,{74:108,79:$VR}),o($VO,[2,95]),o($VO,[2,96]),{11:$Vd,12:$Vq,23:48,28:$V7,56:110,57:$Vg,76:$Vt,79:[2,87],81:$Vn,82:$Vo},{12:[1,111]},o($VS,[2,79]),{11:$Vd,12:$Vq,23:48,28:$V7,56:113,57:$Vg,72:[1,112],76:$Vt,79:[2,85],81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:114,57:$Vg,74:115,76:$Vt,79:$VR,81:$Vn,82:$Vo},o($VT,[2,86]),o($VT,[2,88]),o($VT,[2,89]),o($VT,[2,90]),{10:[1,116]},{14:[1,118],27:117,28:[1,119]},{45:[1,120]},{21:$VU,44:[1,121],45:[1,122],58:123,59:$VV,60:$VW,61:$VX,62:$VY},o($VZ,$V_,{23:48,71:51,73:53,56:82,30:129,11:$Vd,12:$Vq,28:$V7,57:$Vg,61:$Vh,72:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,81:$Vn,82:$Vo}),{21:$VU,45:[1,130],58:123,59:$VV,60:$VW,61:$VX,62:$VY},o($V8,[2,41]),o($V$,[2,65],{58:123,21:$VU,59:$VV,60:$VW,61:$VX,62:$VY}),o($V$,[2,66]),o($V$,[2,67]),o($V$,[2,68]),o($V$,[2,69],{59:$Vu,60:$Vv,70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN}),o([5,7,9,21,33,40,54,59,60,62,68,70,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],$V_,{23:48,71:51,73:53,56:82,30:129,11:$Vd,12:$Vq,28:$V7,57:$Vg,61:$Vh,72:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,81:$Vn,82:$Vo}),{12:[1,131]},{12:[1,132]},o([5,7,9,33,40,54,59,60,68,78,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],$VQ,{74:108,70:$V01,79:$VR}),{11:$Vd,12:$Vq,23:48,28:$V7,56:106,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:110,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{21:$VU,44:[1,134],45:[1,135],58:123,59:$VV,60:$VW,61:$VX,62:$VY},{21:$VU,45:[1,136],58:123,59:$VV,60:$VW,61:$VX,62:$VY},o($V8,[2,37]),o($V9,[2,42]),o($V11,$Vb),o([42,44,45],[2,47],{23:48,73:53,56:82,71:107,11:$Vd,12:$Vq,28:$V7,57:$Vg,61:$Vh,72:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,81:$Vn,82:$Vo}),o($V21,[2,84],{59:$Vu,60:$Vv,70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN}),o($V11,[2,49]),{11:$Vd,12:$Vq,23:48,28:$V7,56:137,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:138,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:139,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:140,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:141,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:142,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:143,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:144,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:145,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:146,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:147,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:148,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:149,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:150,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:151,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:152,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:153,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:154,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:155,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{11:$Vd,12:$Vq,23:48,28:$V7,56:156,57:$Vg,76:$Vt,81:$Vn,82:$Vo},{57:[1,157]},o([14,70,78,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],$VP,{58:158,21:$VU,59:$VV,60:$VW,61:$VX,62:$VY}),{14:[1,159],59:$Vu,60:$Vv,70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},o($VS,[2,78]),o($VO,[2,98]),{11:$Vd,12:$Vq,23:48,28:$V7,56:160,57:$Vg,76:$Vt,81:$Vn,82:$Vo},o($V31,[2,97],{59:$Vu,60:$Vv,70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN}),{14:[1,161]},{11:$Vd,12:$Vq,23:48,28:$V7,56:162,57:$Vg,76:$Vt,81:$Vn,82:$Vo},o($V21,[2,81],{59:$Vu,60:$Vv,70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN}),o($V21,[2,82],{59:$Vu,60:$Vv,70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN}),o($VS,[2,83]),{11:[1,163]},{14:[1,164],21:[1,165]},o($V41,[2,58]),{11:$Vd,12:$Vq,23:168,28:$V7,29:166,30:167,56:82,57:$Vg,61:$Vh,71:51,72:$Vi,73:53,75:$Vj,76:$Vk,77:$Vl,78:$Vm,81:$Vn,82:$Vo},{11:$Vp,12:$Vq,23:70,28:$V7,43:65,46:169,56:69,57:$Vg,63:66,64:67,65:68,66:$Vr,69:$Vs,76:$Vt,81:$Vn,82:$Vo},{23:62,28:$V7,43:170},{11:$Vp,12:$Vq,23:70,28:$V7,43:65,46:171,56:69,57:$Vg,63:66,64:67,65:68,66:$Vr,69:$Vs,76:$Vt,81:$Vn,82:$Vo},{23:62,28:$V7,43:172},o($V51,[2,60]),o($V51,[2,61]),o($V51,[2,62]),o($V51,[2,63]),o($V51,[2,64]),o($VZ,[2,75],{23:48,73:53,56:82,71:107,11:$Vd,12:$Vq,28:$V7,57:$Vg,61:$Vh,72:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,81:$Vn,82:$Vo}),{11:$Vp,12:$Vq,23:70,28:$V7,43:65,46:173,56:69,57:$Vg,63:66,64:67,65:68,66:$Vr,69:$Vs,76:$Vt,81:$Vn,82:$Vo},{23:62,28:$V7,43:174},{23:62,28:$V7,43:175},{23:176,28:$V7},{23:62,28:$V7,43:177},{11:$Vp,12:$Vq,23:70,28:$V7,43:65,46:178,56:69,57:$Vg,63:66,64:67,65:68,66:$Vr,69:$Vs,76:$Vt,81:$Vn,82:$Vo},{11:$Vp,12:$Vq,23:70,28:$V7,43:65,46:179,56:69,57:$Vg,63:66,64:67,65:68,66:$Vr,69:$Vs,76:$Vt,81:$Vn,82:$Vo},o($V61,[2,100],{70:$Vw,78:$Vx,85:$VA,86:$VB,93:$VI,95:$VK,96:$VL,97:$VM,98:$VN}),o($V61,[2,101],{70:$Vw,78:$Vx,85:$VA,86:$VB,93:$VI,95:$VK,96:$VL,97:$VM,98:$VN}),o($V71,[2,102],{70:$Vw,78:$Vx,93:$VI,95:$VK,96:$VL,97:$VM,98:$VN}),o($V71,[2,103],{70:$Vw,78:$Vx,93:$VI,95:$VK,96:$VL,97:$VM,98:$VN}),o($V81,[2,104],{70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,95:$VK,96:$VL,97:$VM,98:$VN}),o($V81,[2,105],{70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,95:$VK,96:$VL,97:$VM,98:$VN}),o($V91,[2,106],{70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,93:$VI,95:$VK,96:$VL,97:$VM,98:$VN}),o($V91,[2,107],{70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,93:$VI,95:$VK,96:$VL,97:$VM,98:$VN}),o($V91,[2,108],{70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,93:$VI,95:$VK,96:$VL,97:$VM,98:$VN}),o($V91,[2,109],{70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,93:$VI,95:$VK,96:$VL,97:$VM,98:$VN}),o($V31,[2,110],{59:$Vu,60:$Vv,70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN}),o($V31,[2,111],{59:$Vu,60:$Vv,70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN}),o($V31,[2,112],{59:$Vu,60:$Vv,70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN}),o($V81,[2,113],{70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,95:$VK,96:$VL,97:$VM,98:$VN}),o($V31,[2,114],{59:$Vu,60:$Vv,70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN}),o($V31,[2,115],{59:$Vu,60:$Vv,70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN}),o($V31,[2,116],{59:$Vu,60:$Vv,70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN}),o($V31,[2,117],{59:$Vu,60:$Vv,70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN}),o([5,7,9,11,12,14,21,28,33,40,42,44,45,54,57,60,61,62,68,72,75,76,77,80,81,82],[2,118],{59:$Vu,70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN}),o([5,7,9,11,12,14,21,28,33,40,42,44,45,54,57,59,60,61,62,68,72,75,76,77,80,81,82],[2,119],{70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN}),{21:$VU,58:180,59:$VV,60:$VW,61:$VX,62:$VY},{57:[1,181]},o($VO,[2,93]),{59:$Vu,60:$Vv,70:$Vw,78:$Vx,80:[1,182],83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN},o($VO,[2,99]),o($V21,[2,80],{59:$Vu,60:$Vv,70:$Vw,78:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,89:$VE,90:$VF,91:$VG,92:$VH,93:$VI,94:$VJ,95:$VK,96:$VL,97:$VM,98:$VN}),{12:[1,183]},o($V41,[2,57]),{28:[1,184]},o($Va1,[2,14]),o($Va1,[2,15],{23:48,73:53,56:82,71:107,11:$Vd,12:$Vq,28:$V7,57:$Vg,61:$Vh,72:$Vi,75:$Vj,76:$Vk,77:$Vl,78:$Vm,81:$Vn,82:$Vo}),o([11,12,14,21,28,57,59,60,61,70,72,75,76,77,78,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98],[2,16]),o($V8,[2,51]),{21:$VU,45:[1,185],58:123,59:$VV,60:$VW,61:$VX,62:$VY},o($V8,[2,39]),o([5,7,9,14,33,40,44,45,54,68],[2,76],{58:123,21:$VU,59:$VV,60:$VW,61:$VX,62:$VY}),o($V8,[2,40]),{14:[1,186],21:$VU,58:123,59:$VV,60:$VW,61:$VX,62:$VY},{14:[1,187],21:$VU,58:123,59:$VV,60:$VW,61:$VX,62:$VY},o($V$,[2,73],{58:188,21:$VU,59:$VV,60:$VW,61:$VX,62:$VY}),{21:$VU,45:[1,189],58:123,59:$VV,60:$VW,61:$VX,62:$VY},o($V8,[2,35]),o($V8,[2,36]),{57:[1,190]},{14:[1,191]},o($VO,[2,91]),{13:192,14:[1,193],22:194,23:195,28:$V7},{11:$Vd,12:$Vq,23:168,28:$V7,29:196,30:167,56:82,57:$Vg,61:$Vh,71:51,72:$Vi,73:53,75:$Vj,76:$Vk,77:$Vl,78:$Vm,81:$Vn,82:$Vo},{11:$Vp,12:$Vq,23:70,28:$V7,43:65,46:197,56:69,57:$Vg,63:66,64:67,65:68,66:$Vr,69:$Vs,76:$Vt,81:$Vn,82:$Vo},o($V$,[2,72]),{67:[1,198]},{11:[1,200],65:199},{11:$Vp,12:$Vq,23:70,28:$V7,43:65,46:201,56:69,57:$Vg,63:66,64:67,65:68,66:$Vr,69:$Vs,76:$Vt,81:$Vn,82:$Vo},{14:[1,202]},o($V9,[2,54]),{14:[1,203],21:[1,204]},{15:205,24:$Vb1,31:$Vc1,34:$Vd1,35:$Ve1,36:$Vf1,37:$Vg1},o($Va1,[2,11]),{24:[1,211]},o($Va1,[2,13]),o($V8,[2,38]),{11:$Vp,12:$Vq,23:70,28:$V7,43:65,46:212,56:69,57:$Vg,63:66,64:67,65:68,66:$Vr,69:$Vs,76:$Vt,81:$Vn,82:$Vo},o($V$,[2,74]),{70:$V01},o($V8,[2,34]),o($V9,[2,53]),{15:213,24:$Vb1,31:$Vc1,34:$Vd1,35:$Ve1,36:$Vf1,37:$Vg1},{22:214,23:195,28:$V7},{16:215,31:$Vh1},{25:[1,217]},o($Vi1,[2,23]),o($Vi1,[2,24]),o($Vi1,[2,25]),o($Vi1,[2,26]),{25:[1,218]},{68:[1,219]},{16:220,31:$Vh1},o($Va1,[2,10]),{17:[1,221]},{9:$V1,18:226,19:225,20:224,32:222,33:[1,223],38:9,39:10,40:$V2,54:$V3},{10:[1,227]},{10:[1,228]},{11:$Vp,12:[1,230],23:70,28:$V7,43:65,46:229,56:69,57:$Vg,63:66,64:67,65:68,66:$Vr,69:$Vs,76:$Vt,81:$Vn,82:$Vo},{17:[1,231]},o($V6,[2,5]),{9:$V1,18:226,19:225,20:233,33:[1,232],38:9,39:10,40:$V2,54:$V3},{17:[2,18]},o($Vj1,[2,29]),o($Vj1,[2,32]),o($Vj1,[2,33]),{34:[1,234],35:[1,235],36:[1,236],37:[1,237]},{15:238,24:$Vb1,26:$Vc1,34:$Vd1,35:$Ve1,36:$Vf1,37:$Vg1},o($V$,[2,70]),{11:$Vd,12:$Vq,14:[1,239],23:48,28:$V7,56:106,57:$Vg,76:$Vt,81:$Vn,82:$Vo},o($V6,[2,4]),{17:[2,17]},o($Vj1,[2,28]),{26:[1,240]},{26:[1,241]},{26:[1,242]},{26:[1,243]},{26:[1,244]},o($V$,[2,71]),o($Vi1,[2,19]),o($Vi1,[2,20]),o($Vi1,[2,21]),o($Vi1,[2,22]),o($Va1,[2,12])],
defaultActions: {12:[2,1],223:[2,18],232:[2,17]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const theforcompuesto = require('./Instrucciones/ForCompuesto');
    const theforsimple = require('./Instrucciones/ForSimple');
    const atributosexpresion = require("../../XPATH/Analizador/Instrucciones/AtributosExpresion")
    const identificadorpredicado = require("../../XPATH/Analizador/Instrucciones/IdentificadorPredicado")
    const aritmetica= require("./Expresiones/Aritmetica");
    const logica = require ("./Expresiones/Logica");
    const relacional = require("./Expresiones/Relacional");
    const barrasnodo= require("./Instrucciones/BarrasNodo")
    const identificador= require("./Expresiones/Identificador");
    const nativo= require("./Expresiones/Nativo");
    const asignacion= require("./Instrucciones/Asignacion")
    const funciones= require("./Instrucciones/Funciones")
    const declaracion= require("./Instrucciones/Declaracion")
    const llamada= require("./Instrucciones/Llamada")
    const theif = require('./Instrucciones/If')
    const thelet=require('./Instrucciones/Let')
    const Tipo= require("./Simbolos/Tipo");
    const condicionsimple= require("./Instrucciones/CondicionSimple");
    const condicion= require("./Instrucciones/Condicion");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
break;
case 3:
break;
case 4:
break;
case 5:
break;
case 6:return 24;
break;
case 7:return 25;
break;
case 8:return 40;
break;
case 9:return 54;
break;
case 10:return 42;
break;
case 11:return 44;
break;
case 12:return 45;
break;
case 13:return 50;
break;
case 14:return 'RDOC';
break;
case 15:return 66;
break;
case 16:return 68;
break;
case 17:return 67;
break;
case 18:return 93;
break;
case 19:return 94;
break;
case 20:return 97;
break;
case 21:return 95;
break;
case 22:return 98;
break;
case 23:return 96;
break;
case 24:return 53;
break;
case 25:return 62;
break;
case 26:return 7;
break;
case 27:return 8;
break;
case 28:return 85;
break;
case 29:return 60;
break;
case 30:return 59;
break;
case 31:return 86;
break;
case 32:return 'RNODO';
break;
case 33:return 'RTEXT';
break;
case 34:return 69;
break;
case 35:return 82;
break;
case 36:return 9;
break;
case 37:return 34
break;
case 38:return 37
break;
case 39:return 35 
break;
case 40:return 36
break;
case 41:return 'FUPPER';
break;
case 42:return 'FSUBS';
break;
case 43:return 78;
break;
case 44:return 12;
break;
case 45:return 14;    
break;
case 46:return 77;
break;
case 47:return 61;
break;
case 48:return 75;
break;
case 49:return 72;
break;
case 50:return 79;
break;
case 51:return 80;
break;
case 52:return 28;
break;
case 53:return 90;
break;
case 54:return 'MENORQUECIERRE';
break;
case 55:return 89;
break;
case 56:return 91;
break;
case 57:return 92;
break;
case 58:return 31;
break;
case 59:return 33;
break;
case 60:return 88;
break;
case 61:return 70;
break;
case 62:return 87;
break;
case 63:return 83;
break;
case 64:return 84;
break;
case 65:return 'MULTIPLICACION';
break;
case 66:return 'POTENCIA';
break;
case 67:return 86;
break;
case 68:return 'POTENCIA';
break;
case 69:return 76;
break;
case 70:return 21;
break;
case 71:return 55;
break;
case 72:return 10;
break;
case 73:return 17;
break;
case 74:return 26;
break;
case 75: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 81; 
break;
case 76: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 'QUOTE'; 
break;
case 77:return 11;
break;
case 78:return 57;
break;
case 79:return 5
break;
case 80:console.log("Error Lexico");
break;
}
},
rules: [/^(?:[(][:][^:]*[:]+[)])/,/^(?:[ \r\t]+)/,/^(?:\s+)/,/^(?:\n+)/,/^(?:\/\/.*)/,/^(?:[/][][^][]+([^/][^][]+)*[/])/,/^(?:as\b)/,/^(?:xs\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:in\b)/,/^(?:doc\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:then\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:at\b)/,/^(?:to\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:div\b)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:data\b)/,/^(?:last\b)/,/^(?:local\b)/,/^(?:int\b)/,/^(?:decimal\b)/,/^(?:float\b)/,/^(?:char\b)/,/^(?:upper-case\b)/,/^(?:substring\b)/,/^(?:\*)/,/^(?:\()/,/^(?:\))/,/^(?:\.\.)/,/^(?:\.)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:>=)/,/^(?:<\/)/,/^(?:<=)/,/^(?:<)/,/^(?:>)/,/^(?:\{)/,/^(?:\})/,/^(?:!=)/,/^(?:=)/,/^(?:==)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\^)/,/^(?:%)/,/^(?:\^)/,/^(?:@)/,/^(?:,)/,/^(?::=)/,/^(?::)/,/^(?:;)/,/^(?:\?)/,/^(?:"[^\"]*")/,/^(?:'[^\']*')/,/^(?:([a-zA-Z_À-ÿ\u00F1\u00D1])[a-zA-Z0-9_^ÑñÀ-ÿ\-\.\u00F1\u00D10-9_]*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = GrammXQuery;
exports.Parser = GrammXQuery.Parser;
exports.parse = function () { return GrammXQuery.parse.apply(GrammXQuery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}